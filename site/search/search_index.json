{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to EthHub The goal of EthHub is to provide a single source for essential Ethereum information. We attempt to accomplish this goal through three main areas: EthHub Docs Into the Ether Podcast EthHub Weekly Newsletter The Docs section, where you are now, is the core of EthHub. This documentation is open source and hosted on GitHub which means that anyone has the ability to contribute. The goal is to make sure the information is available, clear, concise, and up to date. If you're new to Ethereum, start at this guide . How to make changes to EthHub pages Head on over to the EthHub's Github repo . Create a new Github account or login into your existing account Follow this great guide to learn how to make your first pull request Contribution Guidelines In the interest of keeping the content on EthHub looking uniform, we have set up a template that you can use when adding your own pages to the github repo. You can find the template here . There are also some basic guidelines that need to be followed when contributing to EthHub: All pages should have links to supporting sources/documentation and additional resources No marketing or sponsored posts No promotion of ICOs/token sales No inappropriate content Donations: 0xa19fcdad77c1f0fd184689aca88babcf68010347 DISCLAIMER: EthHub is a completely independent and open-source initiative founded by Ethereum community members. Nothing contained in this Github repository should be considered financial or investment advice - it is for informational purposes only.","title":"Home"},{"location":"#welcome-to-ethhub","text":"The goal of EthHub is to provide a single source for essential Ethereum information. We attempt to accomplish this goal through three main areas: EthHub Docs Into the Ether Podcast EthHub Weekly Newsletter The Docs section, where you are now, is the core of EthHub. This documentation is open source and hosted on GitHub which means that anyone has the ability to contribute. The goal is to make sure the information is available, clear, concise, and up to date. If you're new to Ethereum, start at this guide .","title":"Welcome to EthHub"},{"location":"#how-to-make-changes-to-ethhub-pages","text":"Head on over to the EthHub's Github repo . Create a new Github account or login into your existing account Follow this great guide to learn how to make your first pull request","title":"How to make changes to EthHub pages"},{"location":"#contribution-guidelines","text":"In the interest of keeping the content on EthHub looking uniform, we have set up a template that you can use when adding your own pages to the github repo. You can find the template here . There are also some basic guidelines that need to be followed when contributing to EthHub: All pages should have links to supporting sources/documentation and additional resources No marketing or sponsored posts No promotion of ICOs/token sales No inappropriate content Donations: 0xa19fcdad77c1f0fd184689aca88babcf68010347 DISCLAIMER: EthHub is a completely independent and open-source initiative founded by Ethereum community members. Nothing contained in this Github repository should be considered financial or investment advice - it is for informational purposes only.","title":"Contribution Guidelines"},{"location":"license/","text":"This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License .","title":"License"},{"location":"template/","text":"Please use this template as a guide when creating pages for EthHub. All pages use Markdown (cheat sheet here ) so be sure to use .md as the extension when creating the page file. Click here for an example of what a fully-fledged page looks like. [Template Begin] title: [Page Title] - Ethhub [Leave a blank line] description: [Meta description (155 characters recommended) [Leave a blank line] Page Heading [H1] Summary [H2] A summary of what the page is about. Features [H2] Main features. Sub-feature 1 [H3] Content for sub-feature 1. Sub-feature 2 [H3] Content for sub-feature 2. Resources [H2] Relevant resources like website, github link, blog posts etc go here [Template End]","title":"Template"},{"location":"template/#please-use-this-template-as-a-guide-when-creating-pages-for-ethhub-all-pages-use-markdown-cheat-sheet-here-so-be-sure-to-use-md-as-the-extension-when-creating-the-page-file","text":"","title":"Please use this template as a guide when creating pages for EthHub. All pages use Markdown (cheat sheet here) so be sure to use .md as the extension when creating the page file."},{"location":"template/#click-here-for-an-example-of-what-a-fully-fledged-page-looks-like","text":"","title":"Click here for an example of what a fully-fledged page looks like."},{"location":"template/#template-begin","text":"title: [Page Title] - Ethhub [Leave a blank line] description: [Meta description (155 characters recommended) [Leave a blank line]","title":"[Template Begin]"},{"location":"template/#page-heading-h1","text":"","title":"Page Heading [H1]"},{"location":"template/#summary-h2","text":"A summary of what the page is about.","title":"Summary [H2]"},{"location":"template/#features-h2","text":"Main features.","title":"Features [H2]"},{"location":"template/#sub-feature-1-h3","text":"Content for sub-feature 1.","title":"Sub-feature 1 [H3]"},{"location":"template/#sub-feature-2-h3","text":"Content for sub-feature 2.","title":"Sub-feature 2 [H3]"},{"location":"template/#resources-h2","text":"Relevant resources like website, github link, blog posts etc go here","title":"Resources [H2]"},{"location":"template/#template-end","text":"","title":"[Template End]"},{"location":"built-on-ethereum/built-on-ethereum/","text":"Built on Ethereum There are many different types of applications that can be built on Ethereum. Most applications today fall into the following categories. Decentralized Finance Decentralized finance refers to a number of decentralized protocols building open financial infrastructure. These protocols are valuable because they're creating the necessary plumbing to enable anyone in the world with an internet connection to access self-sovereign, censorship resistant financial services. Oracles Oracles refers to a protocols or services to connect Ethereum to offchain information. They can be utilized for querying information from the internet (e.g. API calls), information about other chains (e.g. BTC transactions), or even as dispute resolution mechanisms concerning non-native assets. Decentralized Exchanges Decentralized Exchanges allow for the trading of crypto assets without the need for a trusted central authority. This cuts down on the risk of exchange hacks and many other risks. There are many types of decentralized exchanges and it's important to understand the differences. Gaming Blockchain games are any games that include blockchain technology in its backend or mechanics in general. Collectibles Crypto collectibles are unique items that adhere to the ERC-721 standard. They can be collected and perhaps used across many different games and applications built on Ethereum. Marketplaces Marketplaces built on Ethereum allow for the trading of ERC-721 tokens such as crypto collectibles. Developer Tools A suite of developer tools allow for better standards and easy implementation of these standards across many different applications. Identity Identity is a very important aspect to the future of Ethereum. The Ethereum network hosts many DApps that are building identity systems. These DApps leverage the secure and decentralized nature of the Ethereum network often in collaboration with decentralized storage protocols such as IPFS or SWARM to enable empower and protect consumers' information. Citizens will be able to confidentionally reveal personal information such as Gov. ID, credit score, medical history, banking information, etc. to others in a way that also allows them to revoke future access to such information. Governance Given the decentralized nature of the protocol, it\u2019s important for some applications to have a way to govern their team, project or app. Infrastructure Building out basic infrastructure needs using Ethereum as a base layer. Token Curated Registries Token Curated Registries are registries of listings generated by token holders. Listings can be anything from names to hashes of full-blown records stored in IPFS. ERC Token Standards ERC Token Standards are technical documents used by smart contract developers at Ethereum. They define a set of rules required to implement tokens for the Ethereum ecosystem.","title":"Built on Ethereum"},{"location":"built-on-ethereum/built-on-ethereum/#built-on-ethereum","text":"There are many different types of applications that can be built on Ethereum. Most applications today fall into the following categories.","title":"Built on Ethereum"},{"location":"built-on-ethereum/built-on-ethereum/#decentralized-finance","text":"Decentralized finance refers to a number of decentralized protocols building open financial infrastructure. These protocols are valuable because they're creating the necessary plumbing to enable anyone in the world with an internet connection to access self-sovereign, censorship resistant financial services.","title":"Decentralized Finance"},{"location":"built-on-ethereum/built-on-ethereum/#oracles","text":"Oracles refers to a protocols or services to connect Ethereum to offchain information. They can be utilized for querying information from the internet (e.g. API calls), information about other chains (e.g. BTC transactions), or even as dispute resolution mechanisms concerning non-native assets.","title":"Oracles"},{"location":"built-on-ethereum/built-on-ethereum/#decentralized-exchanges","text":"Decentralized Exchanges allow for the trading of crypto assets without the need for a trusted central authority. This cuts down on the risk of exchange hacks and many other risks. There are many types of decentralized exchanges and it's important to understand the differences.","title":"Decentralized Exchanges"},{"location":"built-on-ethereum/built-on-ethereum/#gaming","text":"Blockchain games are any games that include blockchain technology in its backend or mechanics in general.","title":"Gaming"},{"location":"built-on-ethereum/built-on-ethereum/#collectibles","text":"Crypto collectibles are unique items that adhere to the ERC-721 standard. They can be collected and perhaps used across many different games and applications built on Ethereum.","title":"Collectibles"},{"location":"built-on-ethereum/built-on-ethereum/#marketplaces","text":"Marketplaces built on Ethereum allow for the trading of ERC-721 tokens such as crypto collectibles.","title":"Marketplaces"},{"location":"built-on-ethereum/built-on-ethereum/#developer-tools","text":"A suite of developer tools allow for better standards and easy implementation of these standards across many different applications.","title":"Developer Tools"},{"location":"built-on-ethereum/built-on-ethereum/#identity","text":"Identity is a very important aspect to the future of Ethereum. The Ethereum network hosts many DApps that are building identity systems. These DApps leverage the secure and decentralized nature of the Ethereum network often in collaboration with decentralized storage protocols such as IPFS or SWARM to enable empower and protect consumers' information. Citizens will be able to confidentionally reveal personal information such as Gov. ID, credit score, medical history, banking information, etc. to others in a way that also allows them to revoke future access to such information.","title":"Identity"},{"location":"built-on-ethereum/built-on-ethereum/#governance","text":"Given the decentralized nature of the protocol, it\u2019s important for some applications to have a way to govern their team, project or app.","title":"Governance"},{"location":"built-on-ethereum/built-on-ethereum/#infrastructure","text":"Building out basic infrastructure needs using Ethereum as a base layer.","title":"Infrastructure"},{"location":"built-on-ethereum/built-on-ethereum/#token-curated-registries","text":"Token Curated Registries are registries of listings generated by token holders. Listings can be anything from names to hashes of full-blown records stored in IPFS.","title":"Token Curated Registries"},{"location":"built-on-ethereum/built-on-ethereum/#erc-token-standards","text":"ERC Token Standards are technical documents used by smart contract developers at Ethereum. They define a set of rules required to implement tokens for the Ethereum ecosystem.","title":"ERC Token Standards"},{"location":"built-on-ethereum/collectibles/cryptopunks/","text":"CryptoPunks CryptoPunks are 10,000 unique collectible characters with proof of ownership stored on the Ethereum blockchain. No two are exactly alike, and each one of them can be officially owned by a single person on the Ethereum blockchain. The CryptoPunks are 24x24 pixel art images, generated algorithmically. Most are punky-looking guys and girls, but there are a few rarer types mixed in: Apes, Zombies and even the odd Alien. Every punk has their own profile page that shows their attributes as well as their ownership/for-sale status. Resources Website","title":"CryptoPunks"},{"location":"built-on-ethereum/collectibles/cryptopunks/#cryptopunks","text":"CryptoPunks are 10,000 unique collectible characters with proof of ownership stored on the Ethereum blockchain. No two are exactly alike, and each one of them can be officially owned by a single person on the Ethereum blockchain. The CryptoPunks are 24x24 pixel art images, generated algorithmically. Most are punky-looking guys and girls, but there are a few rarer types mixed in: Apes, Zombies and even the odd Alien. Every punk has their own profile page that shows their attributes as well as their ownership/for-sale status.","title":"CryptoPunks"},{"location":"built-on-ethereum/collectibles/cryptopunks/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/collectibles/decentraland/","text":"Decentraland Description Decentraland is an open virtual world that players can modify and interact with. Decentraland is a marketplace for buying and selling digital assets representing pieces of land in the virtual world. Initially, the land is distributed via an auction and the winning bidder receives the ownership of a land. They can then trade it on a secondary market. Each land has a 'scene' where an owner can put 3D objects and code their interactions. Therefore, it\u2019s possible to create games and attractions within Decentraland. The world will be accessible via a VR browser on multiple platforms. History Public Launch Decentraland's public launch is expected early Summer 2019. Resources Website","title":"Decentraland"},{"location":"built-on-ethereum/collectibles/decentraland/#decentraland","text":"","title":"Decentraland"},{"location":"built-on-ethereum/collectibles/decentraland/#description","text":"Decentraland is an open virtual world that players can modify and interact with. Decentraland is a marketplace for buying and selling digital assets representing pieces of land in the virtual world. Initially, the land is distributed via an auction and the winning bidder receives the ownership of a land. They can then trade it on a secondary market. Each land has a 'scene' where an owner can put 3D objects and code their interactions. Therefore, it\u2019s possible to create games and attractions within Decentraland. The world will be accessible via a VR browser on multiple platforms.","title":"Description"},{"location":"built-on-ethereum/collectibles/decentraland/#history","text":"","title":"History"},{"location":"built-on-ethereum/collectibles/decentraland/#public-launch","text":"Decentraland's public launch is expected early Summer 2019.","title":"Public Launch"},{"location":"built-on-ethereum/collectibles/decentraland/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/collectibles/nftkred/","text":"NFT.Kred NFT.Kred is a platform for creating custom, actionable Non-Fungible Tokens with social engagement. Tokens created on NFT.Kred can be created using various templates and types that give the NFT different attributes, including redemptions, royalties, magic pairs and more. Tokens on NFT.Kred can be commented and liked, given and traded, or sold via third party marketplaces. NFT.Kred is used by: Brands and communities to create reward and loyalty tokens that are redeemable for offers and discounts Events to create virtual NFT Swag that drives traffic to sponsors' and partners' physical and virtual properties Influencers and individuals to tokenize their digital assets and share them with friends Resources Website","title":"NFT.Kred"},{"location":"built-on-ethereum/collectibles/nftkred/#nftkred","text":"NFT.Kred is a platform for creating custom, actionable Non-Fungible Tokens with social engagement. Tokens created on NFT.Kred can be created using various templates and types that give the NFT different attributes, including redemptions, royalties, magic pairs and more. Tokens on NFT.Kred can be commented and liked, given and traded, or sold via third party marketplaces. NFT.Kred is used by: Brands and communities to create reward and loyalty tokens that are redeemable for offers and discounts Events to create virtual NFT Swag that drives traffic to sponsors' and partners' physical and virtual properties Influencers and individuals to tokenize their digital assets and share them with friends","title":"NFT.Kred"},{"location":"built-on-ethereum/collectibles/nftkred/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/decentralized-exchanges/what-are-decentralized-exchanges/","text":"Decentralized Exchanges Summary Decentralized Exchanges (sometimes referred to as 'non-custodial exchanges') allow for the trading of crypto assets without the need for a trusted central authority. This cuts down on the risk of exchange hacks and many other risks. There are many types of decentralized exchanges and it's important to understand the differences. Different types of DEXs: Auction Based Off-chain order book Peer-to-peer Pool-based Aggregators Resources: List of all DEXs Messari DEX Resources Circle DEX Report","title":"What are Decentralized Exchanges?"},{"location":"built-on-ethereum/decentralized-exchanges/what-are-decentralized-exchanges/#decentralized-exchanges","text":"","title":"Decentralized Exchanges"},{"location":"built-on-ethereum/decentralized-exchanges/what-are-decentralized-exchanges/#summary","text":"Decentralized Exchanges (sometimes referred to as 'non-custodial exchanges') allow for the trading of crypto assets without the need for a trusted central authority. This cuts down on the risk of exchange hacks and many other risks. There are many types of decentralized exchanges and it's important to understand the differences.","title":"Summary"},{"location":"built-on-ethereum/decentralized-exchanges/what-are-decentralized-exchanges/#different-types-of-dexs","text":"Auction Based Off-chain order book Peer-to-peer Pool-based Aggregators","title":"Different types of DEXs:"},{"location":"built-on-ethereum/decentralized-exchanges/what-are-decentralized-exchanges/#resources","text":"List of all DEXs Messari DEX Resources Circle DEX Report","title":"Resources:"},{"location":"built-on-ethereum/decentralized-exchanges/aggregators/totle/","text":"Totle Description Totle is creating an intuitive non-custodial platform for managing digital assets. Totle's interface allows users to view asset performance and allocation as well as trade directly from the platform. A unique characteristic of Totle is the aggregation of decentralized exchange orderbooks, allowing for enhanced decentralized trading liquidity. Important Links Website: https://www.totle.com Medium: https://medium.com/totle Telegram: https://t.me/totleinc Twitter: https://twitter.com/TotleCrypto","title":"Totle"},{"location":"built-on-ethereum/decentralized-exchanges/aggregators/totle/#totle","text":"","title":"Totle"},{"location":"built-on-ethereum/decentralized-exchanges/aggregators/totle/#description","text":"Totle is creating an intuitive non-custodial platform for managing digital assets. Totle's interface allows users to view asset performance and allocation as well as trade directly from the platform. A unique characteristic of Totle is the aggregation of decentralized exchange orderbooks, allowing for enhanced decentralized trading liquidity.","title":"Description"},{"location":"built-on-ethereum/decentralized-exchanges/aggregators/totle/#important-links","text":"Website: https://www.totle.com Medium: https://medium.com/totle Telegram: https://t.me/totleinc Twitter: https://twitter.com/TotleCrypto","title":"Important Links"},{"location":"built-on-ethereum/decentralized-exchanges/auction-based/dutchx/","text":"DutchX Description The DutchX is a decentralized exchange for ERC-20 tokens. DutchX uses the Dutch auction principle which attempts to fix issues faced by other decentralized exchanges such as front running, low liquidity and third party risk. Since 28.June 2019 dxDAO is owner of the DutchX protocol governed be reputation holders. How an auction works Sellers deposit tokens they want to sell to the exchange and pick what token they want in return. Once a $1,000 threshold in deposits for the pair is reached, the auction starts at 2x the previous closing price. The price of the pair starts falling according to a price decreasing function. Bidders can now begin to place their bids and immediately claim tokens bought even if the auction hasn't cleared yet. Once the entire sell side is accounted for, the auction clears and everyone who bid pays that price for the tokens. This means those who bid higher can come back and claim more tokens. Interface examples Sellers: Buyers: Resources Documentation GUI for Sellers GUI for Bidders Introducing the DutchX Main Benefits of DutchX Trading insight dxDAO Stats about reputation distribution","title":"DutchX"},{"location":"built-on-ethereum/decentralized-exchanges/auction-based/dutchx/#dutchx","text":"","title":"DutchX"},{"location":"built-on-ethereum/decentralized-exchanges/auction-based/dutchx/#description","text":"The DutchX is a decentralized exchange for ERC-20 tokens. DutchX uses the Dutch auction principle which attempts to fix issues faced by other decentralized exchanges such as front running, low liquidity and third party risk. Since 28.June 2019 dxDAO is owner of the DutchX protocol governed be reputation holders.","title":"Description"},{"location":"built-on-ethereum/decentralized-exchanges/auction-based/dutchx/#how-an-auction-works","text":"Sellers deposit tokens they want to sell to the exchange and pick what token they want in return. Once a $1,000 threshold in deposits for the pair is reached, the auction starts at 2x the previous closing price. The price of the pair starts falling according to a price decreasing function. Bidders can now begin to place their bids and immediately claim tokens bought even if the auction hasn't cleared yet. Once the entire sell side is accounted for, the auction clears and everyone who bid pays that price for the tokens. This means those who bid higher can come back and claim more tokens.","title":"How an auction works"},{"location":"built-on-ethereum/decentralized-exchanges/auction-based/dutchx/#interface-examples","text":"Sellers: Buyers:","title":"Interface examples"},{"location":"built-on-ethereum/decentralized-exchanges/auction-based/dutchx/#resources","text":"Documentation GUI for Sellers GUI for Bidders Introducing the DutchX Main Benefits of DutchX Trading insight dxDAO Stats about reputation distribution","title":"Resources"},{"location":"built-on-ethereum/decentralized-exchanges/layer-2-based/tex/","text":"TEX Description TEX is a commit-chain based decentralized exchange, built on top of the NOCUST commit-chain by the Liquidity Network team. TEX works so that final trades periodically get broadcasted on-chain in bulks, but transactions have instant finality within the commit-chain. Orders are kept similarly to off-chain order book exchanges, but the order host (the operator) is unable to front-run orders due to the novel concept of 'moonwalk orders'. Moonwalk orders use time-lock puzzles, ZKPs and Merkle tree ranges, which make it impossible for the operator to decrypt the order before it becomes suspicious and the operator\u2019s actions can be challenged. Pros Faster order management than on-chain solutions Faster trade settlement than other solutions Does not require any blockchain transaction fees Orders can\u2019t be front run by the operator like other relayer based models Cons Inherits the potential weaknesses of the underlying layer 2 solution Interface Liquidity Network as exchange protocol TEX is built on Liquidity Network's client library, which is a commit-chain layer 2 scaling solution for Ethereum based on academic research and papers. Similar to 0x, anyone is free to build an exchange on top of Liquidity Network. Resources TEX Website Liquidity Network Liquidity Network Client Library","title":"TEX"},{"location":"built-on-ethereum/decentralized-exchanges/layer-2-based/tex/#tex","text":"","title":"TEX"},{"location":"built-on-ethereum/decentralized-exchanges/layer-2-based/tex/#description","text":"TEX is a commit-chain based decentralized exchange, built on top of the NOCUST commit-chain by the Liquidity Network team. TEX works so that final trades periodically get broadcasted on-chain in bulks, but transactions have instant finality within the commit-chain. Orders are kept similarly to off-chain order book exchanges, but the order host (the operator) is unable to front-run orders due to the novel concept of 'moonwalk orders'. Moonwalk orders use time-lock puzzles, ZKPs and Merkle tree ranges, which make it impossible for the operator to decrypt the order before it becomes suspicious and the operator\u2019s actions can be challenged.","title":"Description"},{"location":"built-on-ethereum/decentralized-exchanges/layer-2-based/tex/#pros","text":"Faster order management than on-chain solutions Faster trade settlement than other solutions Does not require any blockchain transaction fees Orders can\u2019t be front run by the operator like other relayer based models","title":"Pros"},{"location":"built-on-ethereum/decentralized-exchanges/layer-2-based/tex/#cons","text":"Inherits the potential weaknesses of the underlying layer 2 solution","title":"Cons"},{"location":"built-on-ethereum/decentralized-exchanges/layer-2-based/tex/#interface","text":"","title":"Interface"},{"location":"built-on-ethereum/decentralized-exchanges/layer-2-based/tex/#liquidity-network-as-exchange-protocol","text":"TEX is built on Liquidity Network's client library, which is a commit-chain layer 2 scaling solution for Ethereum based on academic research and papers. Similar to 0x, anyone is free to build an exchange on top of Liquidity Network.","title":"Liquidity Network as exchange protocol"},{"location":"built-on-ethereum/decentralized-exchanges/layer-2-based/tex/#resources","text":"TEX Website Liquidity Network Liquidity Network Client Library","title":"Resources"},{"location":"built-on-ethereum/decentralized-exchanges/layer-2-based/what-is-layer-2-based/","text":"Layer 2 Based Layer 2 decentralized exchanges are built on layer 2 scaling methods, bringing much of the benefits regarding saving on on-chain transaction gas fees, settlement speed, and scalability - but also inherit the potential underlying weaknesses. Exchanges TEX Pros Faster order management than on-chain solutions Less fees involved than on-chain solutions Same scalability as centralized exchanges Cons Inherit the potential weaknesses of the underlying layer 2 solutions","title":"What are layer 2 based decentralized exchanges?"},{"location":"built-on-ethereum/decentralized-exchanges/layer-2-based/what-is-layer-2-based/#layer-2-based","text":"Layer 2 decentralized exchanges are built on layer 2 scaling methods, bringing much of the benefits regarding saving on on-chain transaction gas fees, settlement speed, and scalability - but also inherit the potential underlying weaknesses.","title":"Layer 2 Based"},{"location":"built-on-ethereum/decentralized-exchanges/layer-2-based/what-is-layer-2-based/#exchanges","text":"TEX","title":"Exchanges"},{"location":"built-on-ethereum/decentralized-exchanges/layer-2-based/what-is-layer-2-based/#pros","text":"Faster order management than on-chain solutions Less fees involved than on-chain solutions Same scalability as centralized exchanges","title":"Pros"},{"location":"built-on-ethereum/decentralized-exchanges/layer-2-based/what-is-layer-2-based/#cons","text":"Inherit the potential weaknesses of the underlying layer 2 solutions","title":"Cons"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/0x-instant/","text":"0x Instant Summary 0x Instant is a new product from the 0x core team that offers a convenient way for people to get access to a wide variety of tokens and other crypto-assets in just a few taps. Developers can integrate the free, open source library into their applications or websites in order to both offer seamless access to crypto-assets, as well as gain a new source of revenue, with just a few lines of code. Affliate Fees As an end host of 0x Instant, you can charge users a fee on all trades made through Instant with the affiliateFee option. Simply specify an ethereum address and feePercentage (up to 5%), and a percentage of each transaction will be deposited into the specified address (denominated in ETH). Example: 3% of transaction volume (in ETH) will de deposited into 0x50ff5828a216170cf224389f1c5b0301a5d0a230 <head> ... <script src=\"https://instant.0xproject.com/instant.js\"></script> ... </head> zeroExInstant.render( { orderSource: 'https://api.relayer.com/sra/v2/', affiliateInfo: { feeRecipient: '0x50ff5828a216170cf224389f1c5b0301a5d0a230', feePercentage: 0.03, }, }, 'body', ); Important Links Website Getting Started","title":"0x-Instant"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/0x-instant/#0x-instant","text":"","title":"0x Instant"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/0x-instant/#summary","text":"0x Instant is a new product from the 0x core team that offers a convenient way for people to get access to a wide variety of tokens and other crypto-assets in just a few taps. Developers can integrate the free, open source library into their applications or websites in order to both offer seamless access to crypto-assets, as well as gain a new source of revenue, with just a few lines of code.","title":"Summary"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/0x-instant/#affliate-fees","text":"As an end host of 0x Instant, you can charge users a fee on all trades made through Instant with the affiliateFee option. Simply specify an ethereum address and feePercentage (up to 5%), and a percentage of each transaction will be deposited into the specified address (denominated in ETH). Example: 3% of transaction volume (in ETH) will de deposited into 0x50ff5828a216170cf224389f1c5b0301a5d0a230 <head> ... <script src=\"https://instant.0xproject.com/instant.js\"></script> ... </head> zeroExInstant.render( { orderSource: 'https://api.relayer.com/sra/v2/', affiliateInfo: { feeRecipient: '0x50ff5828a216170cf224389f1c5b0301a5d0a230', feePercentage: 0.03, }, }, 'body', );","title":"Affliate Fees"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/0x-instant/#important-links","text":"Website Getting Started","title":"Important Links"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/0x-protocol/","text":"0x Protocol Summary 0x is an open protocol that facilitates peer-to-peer exchange of digital assets on the Ethereum blockchain. 0x is open source, free to use, and provides a drop-in exchange solution for developers to build on top of. Developers use 0x protocol to build decentralized exchanges (DEXs), marketplaces for digital collectibles, and to integrate exchange functionality into wallets. https://blog.0xproject.com/welcome-to-the-0x-community-9d99dfe0a52b 0x protocol overview In 0x Protocol, orders are transported off-chain over any arbitrary medium, massively reducing gas costs and reducing blockchain bloat. Relayers help broadcast orders and collect a fee each time they facilitate a trade. Anyone can build a relayer. The simplest example of a Relayer is a website allowing users to create, discover and fill orders. The Relayer must build out a UI and host a backend database to provide this functionality. List of dApps that will be (or are) using the 0x protocol Aragon Auctus Augur bZx Blocknet ChronoBank Dharma District0x dYdX EasyTrade Gods Unchained Hut34 Project Lendroid Maker MelonPort OpenANX Paradigm Protocol Request Network Set List of relayers that will be (or are) using the 0x protocol Bamboo Relay DDEX ERC dEX Ethfinex Instex LedgerDex MobiDex OpenRelay Ordermatch Paradex Radar Relay Starbit The Ocean Token Jar Tokenlon List of 0x trade explorers 0x Trade Viewer 0x Tracker Resources Website","title":"0x Protocol"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/0x-protocol/#0x-protocol","text":"","title":"0x Protocol"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/0x-protocol/#summary","text":"0x is an open protocol that facilitates peer-to-peer exchange of digital assets on the Ethereum blockchain. 0x is open source, free to use, and provides a drop-in exchange solution for developers to build on top of. Developers use 0x protocol to build decentralized exchanges (DEXs), marketplaces for digital collectibles, and to integrate exchange functionality into wallets. https://blog.0xproject.com/welcome-to-the-0x-community-9d99dfe0a52b","title":"Summary"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/0x-protocol/#0x-protocol-overview","text":"In 0x Protocol, orders are transported off-chain over any arbitrary medium, massively reducing gas costs and reducing blockchain bloat. Relayers help broadcast orders and collect a fee each time they facilitate a trade. Anyone can build a relayer. The simplest example of a Relayer is a website allowing users to create, discover and fill orders. The Relayer must build out a UI and host a backend database to provide this functionality.","title":"0x protocol overview"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/0x-protocol/#list-of-dapps-that-will-be-or-are-using-the-0x-protocol","text":"Aragon Auctus Augur bZx Blocknet ChronoBank Dharma District0x dYdX EasyTrade Gods Unchained Hut34 Project Lendroid Maker MelonPort OpenANX Paradigm Protocol Request Network Set","title":"List of dApps that will be (or are) using the 0x protocol"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/0x-protocol/#list-of-relayers-that-will-be-or-are-using-the-0x-protocol","text":"Bamboo Relay DDEX ERC dEX Ethfinex Instex LedgerDex MobiDex OpenRelay Ordermatch Paradex Radar Relay Starbit The Ocean Token Jar Tokenlon","title":"List of relayers that will be (or are) using the 0x protocol"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/0x-protocol/#list-of-0x-trade-explorers","text":"0x Trade Viewer 0x Tracker","title":"List of 0x trade explorers"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/0x-protocol/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/0x-relayers/","text":"0x Relayers Relayer Link Radar Relay https://app.radarrelay.com Ordermatch https://ordermatch.io StarBitEx https://exchange.star-bit.io DDEX https://ddex.io/trade Paradex https://paradex.io/ ERC dEX https://app.ercdex.com The Ocean https://app.theocean.trade/ Token Jar https://tokenjar.io/ Bamboo Relay https://bamboorelay.com/","title":"0x-Relayers"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/0x-relayers/#0x-relayers","text":"Relayer Link Radar Relay https://app.radarrelay.com Ordermatch https://ordermatch.io StarBitEx https://exchange.star-bit.io DDEX https://ddex.io/trade Paradex https://paradex.io/ ERC dEX https://app.ercdex.com The Ocean https://app.theocean.trade/ Token Jar https://tokenjar.io/ Bamboo Relay https://bamboorelay.com/","title":"0x Relayers"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/etherdelta/","text":"EtherDelta Description EtherDelta is a decentralized exchange. It processes both orders and trade settlements on chain. Interface Resources Website Twitter Github","title":"EtherDelta"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/etherdelta/#etherdelta","text":"","title":"EtherDelta"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/etherdelta/#description","text":"EtherDelta is a decentralized exchange. It processes both orders and trade settlements on chain.","title":"Description"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/etherdelta/#interface","text":"","title":"Interface"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/etherdelta/#resources","text":"Website Twitter Github","title":"Resources"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/hydro/","text":"Hydro Description The DDEX team forked 0x and called their new protocol Hydro. They iterating different parts of the 0x protocol, but the most important seem to be a new matching engine and a new liquidity sharing model. Unlike 0x, there is no requirement that one pay trading fees with an appcoin. Important Links Website Twitter Github","title":"Hydro"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/hydro/#hydro","text":"","title":"Hydro"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/hydro/#description","text":"The DDEX team forked 0x and called their new protocol Hydro. They iterating different parts of the 0x protocol, but the most important seem to be a new matching engine and a new liquidity sharing model. Unlike 0x, there is no requirement that one pay trading fees with an appcoin.","title":"Description"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/hydro/#important-links","text":"Website Twitter Github","title":"Important Links"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/idex/","text":"IDEX Description IDEX is a decentralized exchange. It processes orders in a centralized order book and settles the trades on chain. Interface Important Links Website Twitter Gtihub","title":"IDEX"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/idex/#idex","text":"","title":"IDEX"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/idex/#description","text":"IDEX is a decentralized exchange. It processes orders in a centralized order book and settles the trades on chain.","title":"Description"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/idex/#interface","text":"","title":"Interface"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/idex/#important-links","text":"Website Twitter Gtihub","title":"Important Links"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/loopring/","text":"Loopring Description Loopring is an open protocol for building high-performance, non-custodial orderbook exchanges on Ethereum. Loopring is the first zkRollup DEX protocol with on-chain data availability. Architecture Loopring v3 uses a zkRollup construction to achieve scalable exchanges without sacrificing Ethereum security guarantees. It performs all computations off-chain, batches and proves these updates in a zkSNARK proof, and then submits it to Ethereum to verify. Additionally, Loopring enforces on-chain data availability, meaning in conjunction with the Merkle root, other state transition data is also kept on Ethereum, as opposed to an off-chain consortium. As a result, the only assumption needed in order be certain one can always access their own funds, is that Ethereum will continue to exist. Loopring 3.0 Design Doc While previous versions of Loopring were able to settle 2-3 trades per second on Ethereum, v3 raises throughput to 1,400 tps, with the commensurate reduction in settlement costs, currently well below one US cent per transaction. Components Loopring Protocol is an assembly of Ethereum smart contracts , and zkSNARK circuits . These form the core of the v3 protocol. To run the protocol, a Relayer (or group of relayers) operates the off-chain components, including order hosting & proof generation. Resources Website GitHub Twitter Loopring 3.0 Overview zkSNARK Trusted Setup MPC Security Audit Report","title":"Loopring"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/loopring/#loopring","text":"","title":"Loopring"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/loopring/#description","text":"Loopring is an open protocol for building high-performance, non-custodial orderbook exchanges on Ethereum. Loopring is the first zkRollup DEX protocol with on-chain data availability.","title":"Description"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/loopring/#architecture","text":"Loopring v3 uses a zkRollup construction to achieve scalable exchanges without sacrificing Ethereum security guarantees. It performs all computations off-chain, batches and proves these updates in a zkSNARK proof, and then submits it to Ethereum to verify. Additionally, Loopring enforces on-chain data availability, meaning in conjunction with the Merkle root, other state transition data is also kept on Ethereum, as opposed to an off-chain consortium. As a result, the only assumption needed in order be certain one can always access their own funds, is that Ethereum will continue to exist. Loopring 3.0 Design Doc While previous versions of Loopring were able to settle 2-3 trades per second on Ethereum, v3 raises throughput to 1,400 tps, with the commensurate reduction in settlement costs, currently well below one US cent per transaction.","title":"Architecture"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/loopring/#components","text":"Loopring Protocol is an assembly of Ethereum smart contracts , and zkSNARK circuits . These form the core of the v3 protocol. To run the protocol, a Relayer (or group of relayers) operates the off-chain components, including order hosting & proof generation.","title":"Components"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/loopring/#resources","text":"Website GitHub Twitter Loopring 3.0 Overview zkSNARK Trusted Setup MPC Security Audit Report","title":"Resources"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/what-is-off-chain-orderbook/","text":"Off-chain Order Book For \"Off-Chain Orderbook\" decentralized exchanges, final trades occur on chain but every order is hosted by a third party called a Relayer. This was the style of many early generation decentralized exchanges built on Ethereum. Exchanges 0x Protocol EtherDelta Loopring IDEX Hydro Pros Faster order management than On-Chain solutions Less fees involved than On-Chain solutions Cons No full guarantee that a maker order is still active The relayer could front run an order","title":"What are Off-Chain Orderbook Decentralized Exchanges?"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/what-is-off-chain-orderbook/#off-chain-order-book","text":"For \"Off-Chain Orderbook\" decentralized exchanges, final trades occur on chain but every order is hosted by a third party called a Relayer. This was the style of many early generation decentralized exchanges built on Ethereum.","title":"Off-chain Order Book"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/what-is-off-chain-orderbook/#exchanges","text":"0x Protocol EtherDelta Loopring IDEX Hydro","title":"Exchanges"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/what-is-off-chain-orderbook/#pros","text":"Faster order management than On-Chain solutions Less fees involved than On-Chain solutions","title":"Pros"},{"location":"built-on-ethereum/decentralized-exchanges/off-chain-orderbook/what-is-off-chain-orderbook/#cons","text":"No full guarantee that a maker order is still active The relayer could front run an order","title":"Cons"},{"location":"built-on-ethereum/decentralized-exchanges/peer-to-peer/airswap/","text":"AirSwap Description AirSwap is a decentralized exchange that uses an off chain matching system called the Swap Protocol which allows users to easily swap tokens for other tokens. Pros Convenient swapping of tokens Single, global liquidity pool No fee system, Ethereum gas cost paid by taker AirSwap never holds user funds Swap Protocol provides protection against frontrunning and race conditions Cons No viewable orderbook Taker pays Ethereum gas fees on each trade Time to settle depends on Ethereum network capacity Trade cost paid by taker fluctuates with Ethereum gas price Interface Resources Website Twitter Github Reddit Podcasts Decentralised: https://www.stitcher.com/podcast/nick-hollins/decentralised-podcast/e/56433043 Crypto Street: https://soundcloud.com/crypto-street-podcast/the-crytpo-street-podcast-episode-4-michael-oved/sets Appetite for Disruption: https://player.fm/series/appetite-for-disruption-the-business-and-regulation-of-fintech/what-the-internet-was-for-information-the-blockchain-is-for-transferring-value-michael-oved","title":"Airswap"},{"location":"built-on-ethereum/decentralized-exchanges/peer-to-peer/airswap/#airswap","text":"","title":"AirSwap"},{"location":"built-on-ethereum/decentralized-exchanges/peer-to-peer/airswap/#description","text":"AirSwap is a decentralized exchange that uses an off chain matching system called the Swap Protocol which allows users to easily swap tokens for other tokens.","title":"Description"},{"location":"built-on-ethereum/decentralized-exchanges/peer-to-peer/airswap/#pros","text":"Convenient swapping of tokens Single, global liquidity pool No fee system, Ethereum gas cost paid by taker AirSwap never holds user funds Swap Protocol provides protection against frontrunning and race conditions","title":"Pros"},{"location":"built-on-ethereum/decentralized-exchanges/peer-to-peer/airswap/#cons","text":"No viewable orderbook Taker pays Ethereum gas fees on each trade Time to settle depends on Ethereum network capacity Trade cost paid by taker fluctuates with Ethereum gas price","title":"Cons"},{"location":"built-on-ethereum/decentralized-exchanges/peer-to-peer/airswap/#interface","text":"","title":"Interface"},{"location":"built-on-ethereum/decentralized-exchanges/peer-to-peer/airswap/#resources","text":"Website Twitter Github Reddit","title":"Resources"},{"location":"built-on-ethereum/decentralized-exchanges/peer-to-peer/airswap/#podcasts","text":"Decentralised: https://www.stitcher.com/podcast/nick-hollins/decentralised-podcast/e/56433043 Crypto Street: https://soundcloud.com/crypto-street-podcast/the-crytpo-street-podcast-episode-4-michael-oved/sets Appetite for Disruption: https://player.fm/series/appetite-for-disruption-the-business-and-regulation-of-fintech/what-the-internet-was-for-information-the-blockchain-is-for-transferring-value-michael-oved","title":"Podcasts"},{"location":"built-on-ethereum/decentralized-exchanges/peer-to-peer/ren/","text":"Ren Description The goal of Ren is to provide an ability for traders to execute their orders privately. The protocol defines a way to create a dark pool of orders where they can be matched with each other without revealing any information about them. In Ren, orders are split into fragments, which are then sent to the different nodes in the network. To reveal an order, the user needs to collect a majority of fragments. Honest traders distribute fragments uniformly across the network, so if an attacker wants to collect a majority of fragments, they will need to control the majority of nodes. Nodes are controlled by dark pool operators. They stake tokens to be eligible to receive order fragments, and the stake is proportional to the number of fragments they are able to receive. Operators match orders in collaboration with each other in a trustless way. Important links Website: https://renproject.io/ RenEx: https://ren.exchange","title":"Ren"},{"location":"built-on-ethereum/decentralized-exchanges/peer-to-peer/ren/#ren","text":"","title":"Ren"},{"location":"built-on-ethereum/decentralized-exchanges/peer-to-peer/ren/#description","text":"The goal of Ren is to provide an ability for traders to execute their orders privately. The protocol defines a way to create a dark pool of orders where they can be matched with each other without revealing any information about them. In Ren, orders are split into fragments, which are then sent to the different nodes in the network. To reveal an order, the user needs to collect a majority of fragments. Honest traders distribute fragments uniformly across the network, so if an attacker wants to collect a majority of fragments, they will need to control the majority of nodes. Nodes are controlled by dark pool operators. They stake tokens to be eligible to receive order fragments, and the stake is proportional to the number of fragments they are able to receive. Operators match orders in collaboration with each other in a trustless way.","title":"Description"},{"location":"built-on-ethereum/decentralized-exchanges/peer-to-peer/ren/#important-links","text":"Website: https://renproject.io/ RenEx: https://ren.exchange","title":"Important links"},{"location":"built-on-ethereum/decentralized-exchanges/peer-to-peer/what-is-peer-to-peer/","text":"Peer to Peer For \"Peer-to-Peer\" decentralized exchanges, users are matched with one another off-chain for instant token swaps. Swaps are settled on-chain. Exchanges AirSwap Ren Pros Convenient swapping of tokens Cons No order system","title":"What are Peer to Peer Decentralized Exchanges?"},{"location":"built-on-ethereum/decentralized-exchanges/peer-to-peer/what-is-peer-to-peer/#peer-to-peer","text":"For \"Peer-to-Peer\" decentralized exchanges, users are matched with one another off-chain for instant token swaps. Swaps are settled on-chain.","title":"Peer to Peer"},{"location":"built-on-ethereum/decentralized-exchanges/peer-to-peer/what-is-peer-to-peer/#exchanges","text":"AirSwap Ren","title":"Exchanges"},{"location":"built-on-ethereum/decentralized-exchanges/peer-to-peer/what-is-peer-to-peer/#pros","text":"Convenient swapping of tokens","title":"Pros"},{"location":"built-on-ethereum/decentralized-exchanges/peer-to-peer/what-is-peer-to-peer/#cons","text":"No order system","title":"Cons"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/bancor/","text":"Bancor Description Bancor is a protocol for the algorithmic market making exchange with on-chain liquidity. For each token, there is a dedicated smart contract. In the simplest form, Bancor enables ether to token exchanges. However, token-to-token transfers are also possible. Bancor Network Token (BNT) used to facilitate trades between different tokens by being an intermediate token. Liquidity for the tokens is stored in smart contracts. At any time, providers can supply and draw tokens to the liquidity pool. Exchange price is defined by the corresponding supply of the ether stored in reserves: the price goes up when more people want to buy the token with ether and down when people want to sell it. As market making is algorithmic and price discovery is automatic, there is always enough liquidity for trades, as long as price slippage is not a concern. Resources DeFi Pulse Website","title":"Bancor"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/bancor/#bancor","text":"","title":"Bancor"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/bancor/#description","text":"Bancor is a protocol for the algorithmic market making exchange with on-chain liquidity. For each token, there is a dedicated smart contract. In the simplest form, Bancor enables ether to token exchanges. However, token-to-token transfers are also possible. Bancor Network Token (BNT) used to facilitate trades between different tokens by being an intermediate token. Liquidity for the tokens is stored in smart contracts. At any time, providers can supply and draw tokens to the liquidity pool. Exchange price is defined by the corresponding supply of the ether stored in reserves: the price goes up when more people want to buy the token with ether and down when people want to sell it. As market making is algorithmic and price discovery is automatic, there is always enough liquidity for trades, as long as price slippage is not a concern.","title":"Description"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/bancor/#resources","text":"DeFi Pulse Website","title":"Resources"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/kyber/","text":"KyberSwap Description KyberSwap is decentralized exchange that uses an on-chain matching system to instantly convert tokens into other tokens. Kyber Network KyberSwap is built on the Kyber Network. Kyber Network builds a liquidity pool of tokens to facilitate token swaps. Different parties, including Kyber itself, maintain their own pools called reserves. Each reserve is a smart contract that is controlled by reserve admin who deployed it. Reserves vary in supported tokens, liquidity and conversion prices. When a user wants to exchange one token for another, Kyber scans all reserves to pick the cheapest one. Interface Resources DeFi Pulse Website Twitter Github Kyber Tracker","title":"Kyber"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/kyber/#kyberswap","text":"","title":"KyberSwap"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/kyber/#description","text":"KyberSwap is decentralized exchange that uses an on-chain matching system to instantly convert tokens into other tokens.","title":"Description"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/kyber/#kyber-network","text":"KyberSwap is built on the Kyber Network. Kyber Network builds a liquidity pool of tokens to facilitate token swaps. Different parties, including Kyber itself, maintain their own pools called reserves. Each reserve is a smart contract that is controlled by reserve admin who deployed it. Reserves vary in supported tokens, liquidity and conversion prices. When a user wants to exchange one token for another, Kyber scans all reserves to pick the cheapest one.","title":"Kyber Network"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/kyber/#interface","text":"","title":"Interface"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/kyber/#resources","text":"DeFi Pulse Website Twitter Github Kyber Tracker","title":"Resources"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/uniswap/","text":"Uniswap Description Uniswap is a decentralized token exchange protocol that utilizes a \"constant product market maker\" model. This model allows defining the asset price based on the available staked liquidity of traded assets. There is no token to facilitate the exchange as ether is used as an intermediary of each trade. In Uniswap, each token has its own smart contract and liquidity pool. If there\u2019s no smart contract for a given token, anyone can create one using the 'factory' contract. Only one contract can be deployed for each token address. The price of tokens is based on the amount of liquidity in the contract. That is, if someone is buying a token with ETH, the supply of that token in the pool will decrease while the supply of ether will increase, so the price of the token will increase. If someone is selling token with ETH, the price of the token will decrease. In other words, token price reflects the supply and demand of that token. In case a token price significantly shifts from its market price, arbitrage opportunities are created, and the price will eventually be corrected. Anyone can send their tokens and ether to the liquidity pool. There is a small fee (0.3%) for each trade which is given to liquidity providers to incentivize pooled liquidity. Resources DeFi Pulse Website Exchange Uniswap Analytics Liquidity Chart Uniswap\u200a\u2014\u200aA Unique Exchange (blog post) Uniswap: How to add Liquidity to a pool","title":"Uniswap"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/uniswap/#uniswap","text":"","title":"Uniswap"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/uniswap/#description","text":"Uniswap is a decentralized token exchange protocol that utilizes a \"constant product market maker\" model. This model allows defining the asset price based on the available staked liquidity of traded assets. There is no token to facilitate the exchange as ether is used as an intermediary of each trade. In Uniswap, each token has its own smart contract and liquidity pool. If there\u2019s no smart contract for a given token, anyone can create one using the 'factory' contract. Only one contract can be deployed for each token address. The price of tokens is based on the amount of liquidity in the contract. That is, if someone is buying a token with ETH, the supply of that token in the pool will decrease while the supply of ether will increase, so the price of the token will increase. If someone is selling token with ETH, the price of the token will decrease. In other words, token price reflects the supply and demand of that token. In case a token price significantly shifts from its market price, arbitrage opportunities are created, and the price will eventually be corrected. Anyone can send their tokens and ether to the liquidity pool. There is a small fee (0.3%) for each trade which is given to liquidity providers to incentivize pooled liquidity.","title":"Description"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/uniswap/#resources","text":"DeFi Pulse Website Exchange Uniswap Analytics Liquidity Chart Uniswap\u200a\u2014\u200aA Unique Exchange (blog post) Uniswap: How to add Liquidity to a pool","title":"Resources"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/what-is-pool-based/","text":"Pool Based For \"Pool-based\" decentralized exchanges, users are getting liquidity from a single pool. Price discovery is done on-chain by interacting with the protocol's smart contract. Exchanges KyberSwap Bancor Uniswap Pros Convenient and fast swap of tokens Cons No order system","title":"What are Pool Based Decentralized Exchanges?"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/what-is-pool-based/#pool-based","text":"For \"Pool-based\" decentralized exchanges, users are getting liquidity from a single pool. Price discovery is done on-chain by interacting with the protocol's smart contract.","title":"Pool Based"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/what-is-pool-based/#exchanges","text":"KyberSwap Bancor Uniswap","title":"Exchanges"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/what-is-pool-based/#pros","text":"Convenient and fast swap of tokens","title":"Pros"},{"location":"built-on-ethereum/decentralized-exchanges/pool-based/what-is-pool-based/#cons","text":"No order system","title":"Cons"},{"location":"built-on-ethereum/developer-tools/biconomy/","text":"Biconomy Description Biconomy is a relayer infrastructure network and transaction platform enabling you to build applications easily and reduce the friction between your applications built on the blockchain and your end-users. Main products & Documentation: Mexa-SDK Dashboard Documentation Product-Demo Features Easily enable meta-transactions in your dapp without any changes. Compatible with native meta transaction standard. Scalable relayer infrastructure. Manage Dapps contracts via dashboard. Resources Website Twitter GitHub Medium Meta Transactions standard bounty finalist","title":"Biconomy"},{"location":"built-on-ethereum/developer-tools/biconomy/#biconomy","text":"","title":"Biconomy"},{"location":"built-on-ethereum/developer-tools/biconomy/#description","text":"Biconomy is a relayer infrastructure network and transaction platform enabling you to build applications easily and reduce the friction between your applications built on the blockchain and your end-users.","title":"Description"},{"location":"built-on-ethereum/developer-tools/biconomy/#main-products-documentation","text":"Mexa-SDK Dashboard Documentation Product-Demo","title":"Main products &amp; Documentation:"},{"location":"built-on-ethereum/developer-tools/biconomy/#features","text":"Easily enable meta-transactions in your dapp without any changes. Compatible with native meta transaction standard. Scalable relayer infrastructure. Manage Dapps contracts via dashboard.","title":"Features"},{"location":"built-on-ethereum/developer-tools/biconomy/#resources","text":"Website Twitter GitHub Medium Meta Transactions standard bounty finalist","title":"Resources"},{"location":"built-on-ethereum/developer-tools/blocknative/","text":"Blocknative Description Help your Dapp users get onboard and easily transact. Blocknative builds tools to improve blockchain UX. Our first product, Blocknative Assist is an embeddable widget that improves Dapp transaction usability. It programmatically identifies and outlines clear actions for end-users to follow when interacting with MetaMask to overcome \u2014 and even prevent \u2014 common pitfalls and obstacles. Integrating Assist.js with your Dapp is a straightforward process \u2013 and well documented! Once integrated, Assist will immediately and measurably improve the usability of your Dapp. Blocknative Assist is broken out into four primary capabilities, which can be mixed, matched, or totally isolated \u2013 so you and your team are always in control. Resources Website Twitter GitHub Blog","title":"Blocknative"},{"location":"built-on-ethereum/developer-tools/blocknative/#blocknative","text":"","title":"Blocknative"},{"location":"built-on-ethereum/developer-tools/blocknative/#description","text":"Help your Dapp users get onboard and easily transact. Blocknative builds tools to improve blockchain UX. Our first product, Blocknative Assist is an embeddable widget that improves Dapp transaction usability. It programmatically identifies and outlines clear actions for end-users to follow when interacting with MetaMask to overcome \u2014 and even prevent \u2014 common pitfalls and obstacles. Integrating Assist.js with your Dapp is a straightforward process \u2013 and well documented! Once integrated, Assist will immediately and measurably improve the usability of your Dapp. Blocknative Assist is broken out into four primary capabilities, which can be mixed, matched, or totally isolated \u2013 so you and your team are always in control.","title":"Description"},{"location":"built-on-ethereum/developer-tools/blocknative/#resources","text":"Website Twitter GitHub Blog","title":"Resources"},{"location":"built-on-ethereum/developer-tools/ethernal/","text":"Ethernal About Ethernal is a block explorer for private EVM-based chains. You can connect it to local and remote chains. It allows you to browse blocks & transactions, decode function calls and events, interact with smart contracts through an automatically generated UI, and read contract variables. Resources: Website Documentation Twitter Github Discord","title":"Ethernal - Ethhub"},{"location":"built-on-ethereum/developer-tools/ethernal/#ethernal","text":"","title":"Ethernal"},{"location":"built-on-ethereum/developer-tools/ethernal/#about","text":"Ethernal is a block explorer for private EVM-based chains. You can connect it to local and remote chains. It allows you to browse blocks & transactions, decode function calls and events, interact with smart contracts through an automatically generated UI, and read contract variables.","title":"About"},{"location":"built-on-ethereum/developer-tools/ethernal/#resources","text":"Website Documentation Twitter Github Discord","title":"Resources:"},{"location":"built-on-ethereum/developer-tools/gitcoin/","text":"Gitcoin Description Gitcoin's mission is to Grow Open Source Software. Their core products are Main products: Bounties Tips CodeFund Secondary products: Gitcoin Gas Station Easy ENS subdomains Pros Easy to recruit software engineers 10k developers will see your bountied work Fast: Median issue on the platform will be turned around in 7 days. Cons You must have Ether/gas to use the platform You must know how to scope software develoment bounties Resources Website Twitter GitHub Reddit Podcasts FLOSS Weekly Changelog SE Daily","title":"Gitcoin"},{"location":"built-on-ethereum/developer-tools/gitcoin/#gitcoin","text":"","title":"Gitcoin"},{"location":"built-on-ethereum/developer-tools/gitcoin/#description","text":"Gitcoin's mission is to Grow Open Source Software. Their core products are","title":"Description"},{"location":"built-on-ethereum/developer-tools/gitcoin/#main-products","text":"Bounties Tips CodeFund","title":"Main products:"},{"location":"built-on-ethereum/developer-tools/gitcoin/#secondary-products","text":"Gitcoin Gas Station Easy ENS subdomains","title":"Secondary products:"},{"location":"built-on-ethereum/developer-tools/gitcoin/#pros","text":"Easy to recruit software engineers 10k developers will see your bountied work Fast: Median issue on the platform will be turned around in 7 days.","title":"Pros"},{"location":"built-on-ethereum/developer-tools/gitcoin/#cons","text":"You must have Ether/gas to use the platform You must know how to scope software develoment bounties","title":"Cons"},{"location":"built-on-ethereum/developer-tools/gitcoin/#resources","text":"Website Twitter GitHub Reddit","title":"Resources"},{"location":"built-on-ethereum/developer-tools/gitcoin/#podcasts","text":"FLOSS Weekly Changelog SE Daily","title":"Podcasts"},{"location":"built-on-ethereum/developer-tools/kauri/","text":"Kauri Description Kauri is a decentralized knowledge base, blogging platform and is building infrastructure for gathering technical information about Ethereum. The aim of the project is to create a network of writers, editors, and curators that collectively contribute to the growing set of articles and tutorials. Thanks to Ethereum and IPFS, authors have full ownership of their work. Kauri is starting as a place for the technical documentation for various blockchain protocols and applications, as well as building for Ethereum in general. The team wants to acquire developers of these projects as moderators and active content creators. Resources Website","title":"Kauri"},{"location":"built-on-ethereum/developer-tools/kauri/#kauri","text":"","title":"Kauri"},{"location":"built-on-ethereum/developer-tools/kauri/#description","text":"Kauri is a decentralized knowledge base, blogging platform and is building infrastructure for gathering technical information about Ethereum. The aim of the project is to create a network of writers, editors, and curators that collectively contribute to the growing set of articles and tutorials. Thanks to Ethereum and IPFS, authors have full ownership of their work. Kauri is starting as a place for the technical documentation for various blockchain protocols and applications, as well as building for Ethereum in general. The team wants to acquire developers of these projects as moderators and active content creators.","title":"Description"},{"location":"built-on-ethereum/developer-tools/kauri/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/developer-tools/mintable/","text":"Mintable About Mintable is a free service that lets you manage all of your ERC-721s in one UI via Metamask. You can also Mint new smart contracts that are deployed to the main Ethereum network within seconds. This lets you create any type of ERC-721 you want and have real digital ownership of that item. Future updates Ledger Integration Resources App Help","title":"Mintable"},{"location":"built-on-ethereum/developer-tools/mintable/#mintable","text":"","title":"Mintable"},{"location":"built-on-ethereum/developer-tools/mintable/#about","text":"Mintable is a free service that lets you manage all of your ERC-721s in one UI via Metamask. You can also Mint new smart contracts that are deployed to the main Ethereum network within seconds. This lets you create any type of ERC-721 you want and have real digital ownership of that item.","title":"About"},{"location":"built-on-ethereum/developer-tools/mintable/#future-updates","text":"Ledger Integration","title":"Future updates"},{"location":"built-on-ethereum/developer-tools/mintable/#resources","text":"App Help","title":"Resources"},{"location":"built-on-ethereum/developer-tools/oneclickdapp/","text":"OneClickdApp About OneClickDapp instantly builds you a dApp with a simple URL to bookmark or share with a friend. Anyone with the dApp URL can interact with your shiny new smart contract, and access all functions at the correct address/network. Don't write a single line of front-end code. Forget about verifying your contract on Etherscan or MEW. Resources Website You Wrote a Smart Contract - Now What? (blog post)","title":"One Click dApp"},{"location":"built-on-ethereum/developer-tools/oneclickdapp/#oneclickdapp","text":"","title":"OneClickdApp"},{"location":"built-on-ethereum/developer-tools/oneclickdapp/#about","text":"OneClickDapp instantly builds you a dApp with a simple URL to bookmark or share with a friend. Anyone with the dApp URL can interact with your shiny new smart contract, and access all functions at the correct address/network. Don't write a single line of front-end code. Forget about verifying your contract on Etherscan or MEW.","title":"About"},{"location":"built-on-ethereum/developer-tools/oneclickdapp/#resources","text":"Website You Wrote a Smart Contract - Now What? (blog post)","title":"Resources"},{"location":"built-on-ethereum/developer-tools/solui/","text":"solUI About solUI - \"solly\" - lets you quickly generate a Dapp for your smart contracts and deploy it to IPFS with a shareable URL anyone can use. No frontend coding required - just write a JSON specification and check it into version control alongside your contracts. This way your Dapp is never out-of-sync with your contract code. Resources Website Presentation slides","title":"solUI - Ethhub"},{"location":"built-on-ethereum/developer-tools/solui/#solui","text":"","title":"solUI"},{"location":"built-on-ethereum/developer-tools/solui/#about","text":"solUI - \"solly\" - lets you quickly generate a Dapp for your smart contracts and deploy it to IPFS with a shareable URL anyone can use. No frontend coding required - just write a JSON specification and check it into version control alongside your contracts. This way your Dapp is never out-of-sync with your contract code.","title":"About"},{"location":"built-on-ethereum/developer-tools/solui/#resources","text":"Website Presentation slides","title":"Resources"},{"location":"built-on-ethereum/developer-tools/walletconnect/","text":"WalletConnect WalletConnect is an open protocol to communicate securely between Wallets and Dapps (Web3 Apps). The protocol establishes a remote connection between two apps and/or devices using a Bridge server to relay payloads. These payloads are symmetrically encrypted through a shared key between the two peers. The connection is initiated by one peer displaying a QR Code or deep link with a standard WalletConnect URI and is established when the counter-party approves this connection request. It also includes an optional Push server to allow Native applications to notify the user of incoming payloads for establishes connections. Resources Website Twitter GitHub Reddit","title":"Wallet Connect"},{"location":"built-on-ethereum/developer-tools/walletconnect/#walletconnect","text":"WalletConnect is an open protocol to communicate securely between Wallets and Dapps (Web3 Apps). The protocol establishes a remote connection between two apps and/or devices using a Bridge server to relay payloads. These payloads are symmetrically encrypted through a shared key between the two peers. The connection is initiated by one peer displaying a QR Code or deep link with a standard WalletConnect URI and is established when the counter-party approves this connection request. It also includes an optional Push server to allow Native applications to notify the user of incoming payloads for establishes connections.","title":"WalletConnect"},{"location":"built-on-ethereum/developer-tools/walletconnect/#resources","text":"Website Twitter GitHub Reddit","title":"Resources"},{"location":"built-on-ethereum/enterprise/axa/","text":"AXA Do note that as per the AXA website , the fizzy service is no longer in operation! Summary AXA, the insurance giant and the world\u2019s second biggest financial company launched an insurance product that utilizes smart contracts on ethereum's public blockchain called fizzy . When you buy flight delay insurance on the fizzy platform, purchase is recorded on ethereum blockchain, making the insurance contract equally tamperproof. This smart contract is connected to global air traffic databases, so as soon as a delay of more than two hours is observed, compensation is triggered automatically. In this way, AXA has delegated the compensation decision to an independent network. Resources https://fizzy.axa/en-gb/ https://www.axa.com/en/newsroom/news/axa-goes-blockchain-with-fizzy","title":"AXA"},{"location":"built-on-ethereum/enterprise/axa/#axa","text":"","title":"AXA"},{"location":"built-on-ethereum/enterprise/axa/#do-note-that-as-per-the-axa-website-the-fizzy-service-is-no-longer-in-operation","text":"","title":"Do note that as per the AXA website, the fizzy service is no longer in operation!"},{"location":"built-on-ethereum/enterprise/axa/#summary","text":"AXA, the insurance giant and the world\u2019s second biggest financial company launched an insurance product that utilizes smart contracts on ethereum's public blockchain called fizzy . When you buy flight delay insurance on the fizzy platform, purchase is recorded on ethereum blockchain, making the insurance contract equally tamperproof. This smart contract is connected to global air traffic databases, so as soon as a delay of more than two hours is observed, compensation is triggered automatically. In this way, AXA has delegated the compensation decision to an independent network.","title":"Summary"},{"location":"built-on-ethereum/enterprise/axa/#resources","text":"https://fizzy.axa/en-gb/ https://www.axa.com/en/newsroom/news/axa-goes-blockchain-with-fizzy","title":"Resources"},{"location":"built-on-ethereum/enterprise/axoni/","text":"Axoni Summary Axoni announced AxLang , a new programming language that supports functional programming and enables formal verification of smart contracts for Ethereum-compatible networks. Solidity has some limitations such as inability to use techniques like formal verification to prove the correctness of smart contract code prior to deploying the contracts on the live network. AxLang goal is to maximize security while enabling broad adoption as much as possible. It is designed to support both public Ethereum as well as private Ethereum projects. Resources https://medium.com/axoni/axlang-formally-verifiable-smart-contracts-for-the-ethereum-ecosystem-6201203be4e8 https://axoni.com/axlang/","title":"Axoni"},{"location":"built-on-ethereum/enterprise/axoni/#axoni","text":"","title":"Axoni"},{"location":"built-on-ethereum/enterprise/axoni/#summary","text":"Axoni announced AxLang , a new programming language that supports functional programming and enables formal verification of smart contracts for Ethereum-compatible networks. Solidity has some limitations such as inability to use techniques like formal verification to prove the correctness of smart contract code prior to deploying the contracts on the live network. AxLang goal is to maximize security while enabling broad adoption as much as possible. It is designed to support both public Ethereum as well as private Ethereum projects.","title":"Summary"},{"location":"built-on-ethereum/enterprise/axoni/#resources","text":"https://medium.com/axoni/axlang-formally-verifiable-smart-contracts-for-the-ethereum-ecosystem-6201203be4e8 https://axoni.com/axlang/","title":"Resources"},{"location":"built-on-ethereum/enterprise/chainstack/","text":"Chainstack Description Chainstack is a managed blockchain services provider that makes it simple to launch and scale decentralized networks and applications\u2014complete with an intuitive user interface, seamless orchestration, and predictable pricing. Chainstack offers enterprise-grade tools and services that empower developers, solution providers, and consortia to safely experiment and run in production. By building on Chainstack, you reduce the time, cost, and risk involved with leveraging decentralized technologies. With a secure API, membership management, and flexible deployment options, you can immediately accelerate and future-proof your development of transformative solutions. Important links Website: https://chainstack.com/ Documentation: https://docs.chainstack.com/","title":"Chainstack"},{"location":"built-on-ethereum/enterprise/chainstack/#chainstack","text":"","title":"Chainstack"},{"location":"built-on-ethereum/enterprise/chainstack/#description","text":"Chainstack is a managed blockchain services provider that makes it simple to launch and scale decentralized networks and applications\u2014complete with an intuitive user interface, seamless orchestration, and predictable pricing. Chainstack offers enterprise-grade tools and services that empower developers, solution providers, and consortia to safely experiment and run in production. By building on Chainstack, you reduce the time, cost, and risk involved with leveraging decentralized technologies. With a secure API, membership management, and flexible deployment options, you can immediately accelerate and future-proof your development of transformative solutions.","title":"Description"},{"location":"built-on-ethereum/enterprise/chainstack/#important-links","text":"Website: https://chainstack.com/ Documentation: https://docs.chainstack.com/","title":"Important links"},{"location":"built-on-ethereum/enterprise/cloudflare/","text":"Cloudflare Summary Cloudflare recently announced the Ethereum Gateway - where you can interact with the public Ethereum network without installing any additional software on your computer. This is another tool in Cloudflare\u2019s Distributed Web Gateway tool set. Currently, Cloudflare lets you host content on the InterPlanetary File System (IPFS) and access it through your own custom domain. Similarly, the new Ethereum Gateway allows access to the public Ethereum network, which you can provision through your custom hostname. This setup makes it possible to add interactive elements to sites powered by Ethereum smart contracts, a decentralized computing platform. And, in conjunction with the IPFS gateway, this allows hosting websites and resources in a decentralized manner, and has the extra bonus of the added speed, security, and reliability provided by the Cloudflare edge network. You can access our Ethereum gateway directly at https://www.cloudflare.com/distributed-web-gateway/ . Resources https://blog.cloudflare.com/cloudflare-ethereum-gateway/","title":"Cloudflare"},{"location":"built-on-ethereum/enterprise/cloudflare/#cloudflare","text":"","title":"Cloudflare"},{"location":"built-on-ethereum/enterprise/cloudflare/#summary","text":"Cloudflare recently announced the Ethereum Gateway - where you can interact with the public Ethereum network without installing any additional software on your computer. This is another tool in Cloudflare\u2019s Distributed Web Gateway tool set. Currently, Cloudflare lets you host content on the InterPlanetary File System (IPFS) and access it through your own custom domain. Similarly, the new Ethereum Gateway allows access to the public Ethereum network, which you can provision through your custom hostname. This setup makes it possible to add interactive elements to sites powered by Ethereum smart contracts, a decentralized computing platform. And, in conjunction with the IPFS gateway, this allows hosting websites and resources in a decentralized manner, and has the extra bonus of the added speed, security, and reliability provided by the Cloudflare edge network. You can access our Ethereum gateway directly at https://www.cloudflare.com/distributed-web-gateway/ .","title":"Summary"},{"location":"built-on-ethereum/enterprise/cloudflare/#resources","text":"https://blog.cloudflare.com/cloudflare-ethereum-gateway/","title":"Resources"},{"location":"built-on-ethereum/enterprise/deloitte/","text":"Deloitte Summary Deloitte has a dedicated team (EMEA blockchain lab) exploring blockchain capabilities. Recently it partenered with Institute of Banking (IoB), Bank of Ireland, AIB and Ulster Bank to develop an Ethereum-based tool which facilitate wide range of staff-related data management processes. It is currently in beta test mode and a full rollout can be expected by summer 2020. The new platform is a first in the European financial services industry and will support the verification, tracking, direct access to, and management of, regulatory and other professional designations, education qualifications and lifelong learning credentials. Resources https://cointelegraph.com/news/deloitte-completes-joint-pilot-digitizing-supply-chain-management-on-multiple-dlts https://www2.deloitte.com/ca/en/pages/technology/solutions/deloitte-digital-blockchain.html","title":"Deloitte"},{"location":"built-on-ethereum/enterprise/deloitte/#deloitte","text":"","title":"Deloitte"},{"location":"built-on-ethereum/enterprise/deloitte/#summary","text":"Deloitte has a dedicated team (EMEA blockchain lab) exploring blockchain capabilities. Recently it partenered with Institute of Banking (IoB), Bank of Ireland, AIB and Ulster Bank to develop an Ethereum-based tool which facilitate wide range of staff-related data management processes. It is currently in beta test mode and a full rollout can be expected by summer 2020. The new platform is a first in the European financial services industry and will support the verification, tracking, direct access to, and management of, regulatory and other professional designations, education qualifications and lifelong learning credentials.","title":"Summary"},{"location":"built-on-ethereum/enterprise/deloitte/#resources","text":"https://cointelegraph.com/news/deloitte-completes-joint-pilot-digitizing-supply-chain-management-on-multiple-dlts https://www2.deloitte.com/ca/en/pages/technology/solutions/deloitte-digital-blockchain.html","title":"Resources"},{"location":"built-on-ethereum/enterprise/dtcc/","text":"Depository Trust & Clearing Corporation (DTCC) Summary DTCC records for most of the world\u2019s securities, representing some $48 trillion in assets\u2014from stocks and bonds to mutual funds and derivatives. In a few months DTCC will begin the largest live implementation of blockchain. Records for about 50,000 accounts in DTCC\u2019s Trade Information Warehouse, where information on $10 trillion worth of credit derivatives is stored, will move to a customised digital ledger called AxCore . AxCore protocol is originally derived from the public ethereum blockchain, and the DTCC\u2019s system uses the same Solidity smart contract language that powers its applications. However, AxCore has been modified to include a modular consensus mechanism that lets it tailor services to the specific needs of the DTCC, as well as submit real-time reports to both regulators and other counterparties. And, unlike ethereum, the DTCC implementation of AxCore does not include a token \u2013 though both Axoni and Palatnick (DTCC\u2019s chief technology architect) confirmed the system is still powered by a form of \"gas,\" implying a parallel to the way transaction fees are paid on the ethereum blockchain. Resources http://www.forbesindia.com/article/cross-border/blockchain-goes-to-work/53903/1 https://www.coindesk.com/dtcc-milestone-11-trillion-derivatives-gets-closer-blockchain http://www.dtcc.com/blockchain","title":"DTCC"},{"location":"built-on-ethereum/enterprise/dtcc/#depository-trust-clearing-corporation-dtcc","text":"","title":"Depository Trust &amp; Clearing Corporation (DTCC)"},{"location":"built-on-ethereum/enterprise/dtcc/#summary","text":"DTCC records for most of the world\u2019s securities, representing some $48 trillion in assets\u2014from stocks and bonds to mutual funds and derivatives. In a few months DTCC will begin the largest live implementation of blockchain. Records for about 50,000 accounts in DTCC\u2019s Trade Information Warehouse, where information on $10 trillion worth of credit derivatives is stored, will move to a customised digital ledger called AxCore . AxCore protocol is originally derived from the public ethereum blockchain, and the DTCC\u2019s system uses the same Solidity smart contract language that powers its applications. However, AxCore has been modified to include a modular consensus mechanism that lets it tailor services to the specific needs of the DTCC, as well as submit real-time reports to both regulators and other counterparties. And, unlike ethereum, the DTCC implementation of AxCore does not include a token \u2013 though both Axoni and Palatnick (DTCC\u2019s chief technology architect) confirmed the system is still powered by a form of \"gas,\" implying a parallel to the way transaction fees are paid on the ethereum blockchain.","title":"Summary"},{"location":"built-on-ethereum/enterprise/dtcc/#resources","text":"http://www.forbesindia.com/article/cross-border/blockchain-goes-to-work/53903/1 https://www.coindesk.com/dtcc-milestone-11-trillion-derivatives-gets-closer-blockchain http://www.dtcc.com/blockchain","title":"Resources"},{"location":"built-on-ethereum/enterprise/eea/","text":"Enterprise Ethereum Alliance (EEA) Summary The EEA is a member-led industry organization whose objective is to drive the use of Ethereum blockchain technology as an open-standard to empower ALL enterprises. Our members are thought leaders from around the globe with a shared vision to create enterprise-ready solutions. The EEA\u2019s mission is to: Deliver an open, standards-based architecture and specification to accelerate the adoption of Enterprise Ethereum. Create world-class Enterprise Ethereum Client Specifications and testing and certification programs that ensure interoperability, multiple vendors of choice, and lower costs for its members. Resources Website","title":"Enterprise Ethereum Alliance"},{"location":"built-on-ethereum/enterprise/eea/#enterprise-ethereum-alliance-eea","text":"","title":"Enterprise Ethereum Alliance (EEA)"},{"location":"built-on-ethereum/enterprise/eea/#summary","text":"The EEA is a member-led industry organization whose objective is to drive the use of Ethereum blockchain technology as an open-standard to empower ALL enterprises. Our members are thought leaders from around the globe with a shared vision to create enterprise-ready solutions. The EEA\u2019s mission is to: Deliver an open, standards-based architecture and specification to accelerate the adoption of Enterprise Ethereum. Create world-class Enterprise Ethereum Client Specifications and testing and certification programs that ensure interoperability, multiple vendors of choice, and lower costs for its members.","title":"Summary"},{"location":"built-on-ethereum/enterprise/eea/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/enterprise/enterprise/","text":"Enterprise What Ethereum offers to Enterprises Ethereum offers tools which empower developers to build collaboratively and confidently. These tools enables businesses to create, test, and deploy enterprise-grade blockchain solutions in a matter of minutes. Some of them are: Blockchain for business platforms: Kaleido , Quorum , Besu Infrastructure and Ethereum API access: Alchemy , Infura , Chainstack Wallet and identity platforms: Fortmatic , MetaMask , uPort Developer tools, frameworks and testnets: Truffle , Rinkeby Training resources: ConsenSys Academy For management and ongoing maintenance of Enterprise Ethereum solutions: Established support providers such as ConsenSys Solutions and top-tier IT consulting firms exist in every market across the globe. Ethereum's architectural specifications effectively satisfy enterprise-grade requirements for privacy, security, performance, scalability, and interoperability. Read more here . List of Known Enterprises Using and Working with Ethereum AXA Axoni BlockApps Clearmatics Cloudflare Deloitte DTCC Enterprise Ethereum Alliance Ernst and Young (EY) Fnality International Foxconn Google Hyperledger JP Morgan Kaleido MetLife Microsoft PegaSys Unicef Enterprise Projects Resources Ethereum.org Enterprise Resources","title":"Ethereum Enterprise"},{"location":"built-on-ethereum/enterprise/enterprise/#enterprise","text":"","title":"Enterprise"},{"location":"built-on-ethereum/enterprise/enterprise/#what-ethereum-offers-to-enterprises","text":"Ethereum offers tools which empower developers to build collaboratively and confidently. These tools enables businesses to create, test, and deploy enterprise-grade blockchain solutions in a matter of minutes. Some of them are: Blockchain for business platforms: Kaleido , Quorum , Besu Infrastructure and Ethereum API access: Alchemy , Infura , Chainstack Wallet and identity platforms: Fortmatic , MetaMask , uPort Developer tools, frameworks and testnets: Truffle , Rinkeby Training resources: ConsenSys Academy For management and ongoing maintenance of Enterprise Ethereum solutions: Established support providers such as ConsenSys Solutions and top-tier IT consulting firms exist in every market across the globe. Ethereum's architectural specifications effectively satisfy enterprise-grade requirements for privacy, security, performance, scalability, and interoperability. Read more here .","title":"What Ethereum offers to Enterprises"},{"location":"built-on-ethereum/enterprise/enterprise/#list-of-known-enterprises-using-and-working-with-ethereum","text":"AXA Axoni BlockApps Clearmatics Cloudflare Deloitte DTCC Enterprise Ethereum Alliance Ernst and Young (EY) Fnality International Foxconn Google Hyperledger JP Morgan Kaleido MetLife Microsoft PegaSys Unicef Enterprise Projects","title":"List of Known Enterprises Using and Working with Ethereum"},{"location":"built-on-ethereum/enterprise/enterprise/#resources","text":"Ethereum.org Enterprise Resources","title":"Resources"},{"location":"built-on-ethereum/enterprise/ey/","text":"Ernst and Young (EY) Summary EY is a professional services firm that offers audit, accounting, legal, and business advisory services around the world. EY has a global blockchain organization (EY Blockchain) that has made a number of investments in blockchain technology. The vision of EY blockchain is that this technology will bring the kind of digital integration and speed of operations to networks of companies and business ecosytsems that enterprise resource planning software did within the single enteprise. The firm offers two main service platforms to it's clients: EY OpsChain is a middleware tool that is designed to connect enterprises to public and private blockchains for the purpose of enabling business transactions such as product traceability, tokenization, sale and transfer of assets, enterprise procurement contracting, and other enterprise processes. EY Blockchain Analyzer is a SaaS analytics platform to help enterprise users and financial statement auditors understand the flow of business transactions on both public and private blockchains. EY Blockchain Analyzer is used by EY audit teams in the preparation of financial statement audits and can also be used by individual clients for transaction analysis, tax liability calculation, blockchain analytics, and security testing. While EY Blockchain Analyzer supports multiple blockchain platforms, EY has chosen to focus its product and system development activities on the Ethereum ecosystem with a particular focus on enabling secure transactions on the public Ethereum mainnet. EY is rolling out free software designed to help corporate clients use the Ethereum blockchain. This software, named Nightfall has been made available in the public domain. The protocol is created for such use cases as supply chains, food tracing, transactions between branches of a company and public finance. It takes advantage of Zero Knowledge Proofs to allow private transactions on a shared ledger. Resources https://blockchain.ey.com https://github.com/EYBlockchain/nightfall","title":"Ernst and Young (EY)"},{"location":"built-on-ethereum/enterprise/ey/#ernst-and-young-ey","text":"","title":"Ernst and Young (EY)"},{"location":"built-on-ethereum/enterprise/ey/#summary","text":"EY is a professional services firm that offers audit, accounting, legal, and business advisory services around the world. EY has a global blockchain organization (EY Blockchain) that has made a number of investments in blockchain technology. The vision of EY blockchain is that this technology will bring the kind of digital integration and speed of operations to networks of companies and business ecosytsems that enterprise resource planning software did within the single enteprise. The firm offers two main service platforms to it's clients: EY OpsChain is a middleware tool that is designed to connect enterprises to public and private blockchains for the purpose of enabling business transactions such as product traceability, tokenization, sale and transfer of assets, enterprise procurement contracting, and other enterprise processes. EY Blockchain Analyzer is a SaaS analytics platform to help enterprise users and financial statement auditors understand the flow of business transactions on both public and private blockchains. EY Blockchain Analyzer is used by EY audit teams in the preparation of financial statement audits and can also be used by individual clients for transaction analysis, tax liability calculation, blockchain analytics, and security testing. While EY Blockchain Analyzer supports multiple blockchain platforms, EY has chosen to focus its product and system development activities on the Ethereum ecosystem with a particular focus on enabling secure transactions on the public Ethereum mainnet. EY is rolling out free software designed to help corporate clients use the Ethereum blockchain. This software, named Nightfall has been made available in the public domain. The protocol is created for such use cases as supply chains, food tracing, transactions between branches of a company and public finance. It takes advantage of Zero Knowledge Proofs to allow private transactions on a shared ledger.","title":"Summary"},{"location":"built-on-ethereum/enterprise/ey/#resources","text":"https://blockchain.ey.com https://github.com/EYBlockchain/nightfall","title":"Resources"},{"location":"built-on-ethereum/enterprise/fnality/","text":"Fnality Summary Fnality (Formerly known as Utility Settlement Coin (USC)), the newly rechristened U.K.-based project is developing blockchain versions of five major fiat currencies: the U.S. dollar, the Canadian dollar, the British pound, the Japanese yen and the euro. It has $63.2 million in fresh funding from 14 banks. Fnality's tech partner, Clearmatics, is building these systems on a private version of ethereum called Autonity . Fnality's complex roadmap will see things begin to come to fruition in 2020. Aside from UBS and Barclays, its shareholders include Banco Santander, BNY Mellon, CIBC, Commerzbank, Credit Suisse, ING, KBC Group, Lloyds Banking Group, MUFG Bank, Nasdaq, Sumitomo Mitsui Banking Corporation, and State Street. Resources https://www.coindesk.com/fnality-utility-settlement-coin-central-bank-token-blockchain https://www.clearmatics.com/about/","title":"Fnality International"},{"location":"built-on-ethereum/enterprise/fnality/#fnality","text":"","title":"Fnality"},{"location":"built-on-ethereum/enterprise/fnality/#summary","text":"Fnality (Formerly known as Utility Settlement Coin (USC)), the newly rechristened U.K.-based project is developing blockchain versions of five major fiat currencies: the U.S. dollar, the Canadian dollar, the British pound, the Japanese yen and the euro. It has $63.2 million in fresh funding from 14 banks. Fnality's tech partner, Clearmatics, is building these systems on a private version of ethereum called Autonity . Fnality's complex roadmap will see things begin to come to fruition in 2020. Aside from UBS and Barclays, its shareholders include Banco Santander, BNY Mellon, CIBC, Commerzbank, Credit Suisse, ING, KBC Group, Lloyds Banking Group, MUFG Bank, Nasdaq, Sumitomo Mitsui Banking Corporation, and State Street.","title":"Summary"},{"location":"built-on-ethereum/enterprise/fnality/#resources","text":"https://www.coindesk.com/fnality-utility-settlement-coin-central-bank-token-blockchain https://www.clearmatics.com/about/","title":"Resources"},{"location":"built-on-ethereum/enterprise/foxconn/","text":"Foxconn Summary Foxconn \u2013 best known for manufacturing Apple\u2019s iPhone launched a Shanghai startup called Chained Finance with a Chinese peer-to-peer lender. Chained will soon connect Foxconn and its many small suppliers (and their suppliers' suppliers) on an Ethereum-based blockchain that will use its own token and smart contracts to make payments and provide financing in near real time, eliminating a daisy chain of paperwork. Resources https://www.coindesk.com/foxconn-wants-take-global-supply-chain-blockchain http://www.forbesindia.com/article/cross-border/blockchain-goes-to-work/53903/1","title":"Foxconn"},{"location":"built-on-ethereum/enterprise/foxconn/#foxconn","text":"","title":"Foxconn"},{"location":"built-on-ethereum/enterprise/foxconn/#summary","text":"Foxconn \u2013 best known for manufacturing Apple\u2019s iPhone launched a Shanghai startup called Chained Finance with a Chinese peer-to-peer lender. Chained will soon connect Foxconn and its many small suppliers (and their suppliers' suppliers) on an Ethereum-based blockchain that will use its own token and smart contracts to make payments and provide financing in near real time, eliminating a daisy chain of paperwork.","title":"Summary"},{"location":"built-on-ethereum/enterprise/foxconn/#resources","text":"https://www.coindesk.com/foxconn-wants-take-global-supply-chain-blockchain http://www.forbesindia.com/article/cross-border/blockchain-goes-to-work/53903/1","title":"Resources"},{"location":"built-on-ethereum/enterprise/google/","text":"Google Summary Google announced a parternship with Chainlink to build hybrid blockchain/cloud applications utilizing the Ethereum blockchain. The blog posted by Google describes that the team is working on applications of making internet-hosted data available inside an immutable public blockchain: placing BigQuery data on-chain using a Chainlink oracle smart contract. BigQuery allows large swathes of data from multiple blockchains to be correlated and analyzed. The datasets have been used to develop processes such as profit sharing, characterizing network participants, and detecting software vulnerabilities and malware. Chainlink will act as the \"middleware\" between smart contracts and Google's real-world data, and provide a secure on and off ramp for the outside information they need. At a high level, Ethereum Dapps request data from Chainlink, which in turn retrieves data from a web service built with Google App Engine and BigQuery. Chainlink partenering with Google opens up the gate for innumerable applications. Resources https://cloud.google.com/blog/products/data-analytics/building-hybrid-blockchain-cloud-applications-with-ethereum-and-google-cloud https://cloud.google.com/blog/products/data-analytics/ethereum-bigquery-public-dataset-smart-contract-analytics","title":"Google"},{"location":"built-on-ethereum/enterprise/google/#google","text":"","title":"Google"},{"location":"built-on-ethereum/enterprise/google/#summary","text":"Google announced a parternship with Chainlink to build hybrid blockchain/cloud applications utilizing the Ethereum blockchain. The blog posted by Google describes that the team is working on applications of making internet-hosted data available inside an immutable public blockchain: placing BigQuery data on-chain using a Chainlink oracle smart contract. BigQuery allows large swathes of data from multiple blockchains to be correlated and analyzed. The datasets have been used to develop processes such as profit sharing, characterizing network participants, and detecting software vulnerabilities and malware. Chainlink will act as the \"middleware\" between smart contracts and Google's real-world data, and provide a secure on and off ramp for the outside information they need. At a high level, Ethereum Dapps request data from Chainlink, which in turn retrieves data from a web service built with Google App Engine and BigQuery. Chainlink partenering with Google opens up the gate for innumerable applications.","title":"Summary"},{"location":"built-on-ethereum/enterprise/google/#resources","text":"https://cloud.google.com/blog/products/data-analytics/building-hybrid-blockchain-cloud-applications-with-ethereum-and-google-cloud https://cloud.google.com/blog/products/data-analytics/ethereum-bigquery-public-dataset-smart-contract-analytics","title":"Resources"},{"location":"built-on-ethereum/enterprise/hyperledger/","text":"Hyperledger Summary Hyperledger is an umbrella organization \u2013 cast in the image of the Linux Foundation \u2013 for open source blockchain development, comprising a number of protocols designed specifically for enterprises. Hyperledger has many projects backed by big organizations such as 'Fabric' backed by IBM and 'Sawtooth' backed by Intel Corporation . Both Intel and IBM worked on these projects first and then presented them to Hyperledger for acceptance into the Incubator. That resulted into these projects growing at a tremendous rate and now are among the top frameworks for enterprise blockchain networks. Fabric supports EVM based smart contracts, it also has a web3 provider which can be used to develop dApps using web3.js. Sawtooth also supports Ethereum through Seth , Sawtooth's Ethereum-compatible Transaction Processor. It implements a Ethereum Virtual Machine (EVM) so Seth can run Ethereum Dapps written in Solidity. Resources https://www.hyperledger.org/blog/2018/10/26/hyperledger-fabric-now-supports-ethereum https://www.hyperledger.org/blog/2017/08/22/hello-world-meet-seth-sawtooth-ethereum https://sawtooth.hyperledger.org/docs/seth/releases/latest/introduction.html https://hyperledger-fabric.readthedocs.io/en/release-1.4/","title":"Hyperledger"},{"location":"built-on-ethereum/enterprise/hyperledger/#hyperledger","text":"","title":"Hyperledger"},{"location":"built-on-ethereum/enterprise/hyperledger/#summary","text":"Hyperledger is an umbrella organization \u2013 cast in the image of the Linux Foundation \u2013 for open source blockchain development, comprising a number of protocols designed specifically for enterprises. Hyperledger has many projects backed by big organizations such as 'Fabric' backed by IBM and 'Sawtooth' backed by Intel Corporation . Both Intel and IBM worked on these projects first and then presented them to Hyperledger for acceptance into the Incubator. That resulted into these projects growing at a tremendous rate and now are among the top frameworks for enterprise blockchain networks. Fabric supports EVM based smart contracts, it also has a web3 provider which can be used to develop dApps using web3.js. Sawtooth also supports Ethereum through Seth , Sawtooth's Ethereum-compatible Transaction Processor. It implements a Ethereum Virtual Machine (EVM) so Seth can run Ethereum Dapps written in Solidity.","title":"Summary"},{"location":"built-on-ethereum/enterprise/hyperledger/#resources","text":"https://www.hyperledger.org/blog/2018/10/26/hyperledger-fabric-now-supports-ethereum https://www.hyperledger.org/blog/2017/08/22/hello-world-meet-seth-sawtooth-ethereum https://sawtooth.hyperledger.org/docs/seth/releases/latest/introduction.html https://hyperledger-fabric.readthedocs.io/en/release-1.4/","title":"Resources"},{"location":"built-on-ethereum/enterprise/jpm/","text":"JPM Summary JPM is working on blockchain solutions for business. It launched Quorum , an open source blockchain platform that combines the innovation of the public Ethereum community with enhancements to support enterprise needs. Quorum help alleviate major banking issues such as settlement times, risk exposure, and system breakdowns. Since it is a permissioned network, no need for POW/POS and instead it has it's own alternative consensus mechanisms which in turn gives higher perfomance due to faster blocktimes, transaction finality, and on-demand block creation. JPM is also working on their own coin ( JPM Coin ), built on quorum that enables the instantaneous transfer of payments between institutional accounts. Besides quorum, JPM has developed a privacy feature for ethereum-based blockchains, obscuring not only how much money is being sent but who is sending it. It is an extension to the Zether protocol which not only conceals the account balances and the transfer amounts but the sender may also hide herself and the transactions recipients in a larger group of parties. Resources https://www.goquorum.com/ https://github.com/jpmorganchase/quorum https://github.com/jpmorganchase/anonymous-zether","title":"JP Morgan"},{"location":"built-on-ethereum/enterprise/jpm/#jpm","text":"","title":"JPM"},{"location":"built-on-ethereum/enterprise/jpm/#summary","text":"JPM is working on blockchain solutions for business. It launched Quorum , an open source blockchain platform that combines the innovation of the public Ethereum community with enhancements to support enterprise needs. Quorum help alleviate major banking issues such as settlement times, risk exposure, and system breakdowns. Since it is a permissioned network, no need for POW/POS and instead it has it's own alternative consensus mechanisms which in turn gives higher perfomance due to faster blocktimes, transaction finality, and on-demand block creation. JPM is also working on their own coin ( JPM Coin ), built on quorum that enables the instantaneous transfer of payments between institutional accounts. Besides quorum, JPM has developed a privacy feature for ethereum-based blockchains, obscuring not only how much money is being sent but who is sending it. It is an extension to the Zether protocol which not only conceals the account balances and the transfer amounts but the sender may also hide herself and the transactions recipients in a larger group of parties.","title":"Summary"},{"location":"built-on-ethereum/enterprise/jpm/#resources","text":"https://www.goquorum.com/ https://github.com/jpmorganchase/quorum https://github.com/jpmorganchase/anonymous-zether","title":"Resources"},{"location":"built-on-ethereum/enterprise/kaleido/","text":"Kaleido Summary The Kaleido Blockchain Business Cloud is the full-stack platform for building and running cross-cloud, hybrid enterprise ecosystems. It brings the dramatic simplicity of SaaS combined with the performance, security, global reach and cloud scale in an enterprise platform that goes way beyond today\u2019s quick start scripts and templates and other Blockchain-as-a-Service offerings. Kaleido has deep partnerships with industry leaders like ConsenSys, Microsoft Azure, Amazon Web Services and more to bring you enterprise blockchain\u2019s easy button for your modern business network. Kaleido provides services such as: * B2B : App2App Messaging * Blockchain First : Token Explorer , Token Swap , On-Chain Registry , EthFirewall * Middleware : Event Streams , REST API Gateway Resources https://kaleido.io/ https://marketplace.kaleido.io/","title":"Kaleido"},{"location":"built-on-ethereum/enterprise/kaleido/#kaleido","text":"","title":"Kaleido"},{"location":"built-on-ethereum/enterprise/kaleido/#summary","text":"The Kaleido Blockchain Business Cloud is the full-stack platform for building and running cross-cloud, hybrid enterprise ecosystems. It brings the dramatic simplicity of SaaS combined with the performance, security, global reach and cloud scale in an enterprise platform that goes way beyond today\u2019s quick start scripts and templates and other Blockchain-as-a-Service offerings. Kaleido has deep partnerships with industry leaders like ConsenSys, Microsoft Azure, Amazon Web Services and more to bring you enterprise blockchain\u2019s easy button for your modern business network. Kaleido provides services such as: * B2B : App2App Messaging * Blockchain First : Token Explorer , Token Swap , On-Chain Registry , EthFirewall * Middleware : Event Streams , REST API Gateway","title":"Summary"},{"location":"built-on-ethereum/enterprise/kaleido/#resources","text":"https://kaleido.io/ https://marketplace.kaleido.io/","title":"Resources"},{"location":"built-on-ethereum/enterprise/metlife/","text":"MetLife Summary MetLife is utilizing the live public Ethereum blockchain to add transparency and efficiency to the life insurance claims process. MetLife's Singapore-based incubator LumenLab is collaborating with Singapore Press Holdings (SPH) and NTUC Income (Income) on a platform of smart contracts known as Lifechain to help loved ones quickly determine if the deceased was protected with a policy and automatically file a claim. This move by metlife can destroy the life insurance industry worth $ 2.7trillion. If a family choose to participate, Lifechain will encrypt the deceased's National Registration Identity Card (NRIC) number (which is included in the Death Certificate) using a hashing algorithm and place it onto the blockchain. This will trigger a search on NTUC\u2019s end for a matching life insurance policy. If a match is found, \"SPH will inform family members within one working day, while 'Lifechain' will send an automatic notification to Income via email to initiate the claims process.\" This is not MetLife's first experimentation with blockchain. In fact, the core smart contract platform that constitutes Lifechain is very closely related to what was built for the company\u2019s first successful pilot, a mobile app called Vitana , that utilized Ethereum to pay out claims to expectant mothers who contracted gestational diabetes. Resources http://www.vitana.sg/ https://www.forbes.com/sites/stevenehrlich/2019/06/19/metlife-plans-to-disrupt-2-7-trillion-life-insurance-industry-using-ethereum-blockchain/#205ac2fb2770","title":"MetLife"},{"location":"built-on-ethereum/enterprise/metlife/#metlife","text":"","title":"MetLife"},{"location":"built-on-ethereum/enterprise/metlife/#summary","text":"MetLife is utilizing the live public Ethereum blockchain to add transparency and efficiency to the life insurance claims process. MetLife's Singapore-based incubator LumenLab is collaborating with Singapore Press Holdings (SPH) and NTUC Income (Income) on a platform of smart contracts known as Lifechain to help loved ones quickly determine if the deceased was protected with a policy and automatically file a claim. This move by metlife can destroy the life insurance industry worth $ 2.7trillion. If a family choose to participate, Lifechain will encrypt the deceased's National Registration Identity Card (NRIC) number (which is included in the Death Certificate) using a hashing algorithm and place it onto the blockchain. This will trigger a search on NTUC\u2019s end for a matching life insurance policy. If a match is found, \"SPH will inform family members within one working day, while 'Lifechain' will send an automatic notification to Income via email to initiate the claims process.\" This is not MetLife's first experimentation with blockchain. In fact, the core smart contract platform that constitutes Lifechain is very closely related to what was built for the company\u2019s first successful pilot, a mobile app called Vitana , that utilized Ethereum to pay out claims to expectant mothers who contracted gestational diabetes.","title":"Summary"},{"location":"built-on-ethereum/enterprise/metlife/#resources","text":"http://www.vitana.sg/ https://www.forbes.com/sites/stevenehrlich/2019/06/19/metlife-plans-to-disrupt-2-7-trillion-life-insurance-industry-using-ethereum-blockchain/#205ac2fb2770","title":"Resources"},{"location":"built-on-ethereum/enterprise/microsoft/","text":"Microsoft Summary Microsoft along with Enterprise Ethereum Allaince (EEA) launched a token-building-kit to help businesses design and create the right sort of crypto tokens for their particular needs. According to microsoft, \"a business person can create a token visually using a design tool that does not involve writing any code whatsoever, and allows them to then say to developers, 'I want one of these.'\" Recently they also released a suite of tools allowing clients to build ethereum-based apps on its cloud computing platform Azure. The new Azure Blockchain Development Kit for Ethereum will help developers create and deploy ethereum-based apps on Azure Blockchain Service or the ethereum blockchain. It was released as an extension of it's very powerful Visual Studio Code. Microsoft is also working with starbucks to harness this Azure Blockchain Service in tracking coffee shipments from across the world, bringing \"digital, real-time traceability\" to its supply chains. Resources https://docs.microsoft.com/en-us/azure/blockchain/workbench/ https://news.microsoft.com/transform/starbucks-turns-to-technology-to-brew-up-a-more-personal-connection-with-its-customers/","title":"Microsoft"},{"location":"built-on-ethereum/enterprise/microsoft/#microsoft","text":"","title":"Microsoft"},{"location":"built-on-ethereum/enterprise/microsoft/#summary","text":"Microsoft along with Enterprise Ethereum Allaince (EEA) launched a token-building-kit to help businesses design and create the right sort of crypto tokens for their particular needs. According to microsoft, \"a business person can create a token visually using a design tool that does not involve writing any code whatsoever, and allows them to then say to developers, 'I want one of these.'\" Recently they also released a suite of tools allowing clients to build ethereum-based apps on its cloud computing platform Azure. The new Azure Blockchain Development Kit for Ethereum will help developers create and deploy ethereum-based apps on Azure Blockchain Service or the ethereum blockchain. It was released as an extension of it's very powerful Visual Studio Code. Microsoft is also working with starbucks to harness this Azure Blockchain Service in tracking coffee shipments from across the world, bringing \"digital, real-time traceability\" to its supply chains.","title":"Summary"},{"location":"built-on-ethereum/enterprise/microsoft/#resources","text":"https://docs.microsoft.com/en-us/azure/blockchain/workbench/ https://news.microsoft.com/transform/starbucks-turns-to-technology-to-brew-up-a-more-personal-connection-with-its-customers/","title":"Resources"},{"location":"built-on-ethereum/enterprise/pegasys/","text":"PegaSys Summary PegaSys (Protocol Engineering Groups and Systems) is a 50-person team dedicated to enterprise grade blockchain at ConsenSys. It is building Ethereum tech for the public-chain community and leading enterprises focused on privacy, permissioning, scalability, and other features to make Ethereum production-ready. Pegasys develop open-source software, and are researching next-generation solutions like sidechains and sharding. Some of the great solutions developed by pegasys are: * Pantheon : An Apache 2.0 licensed Ethereum client written in Java. Pantheon is public chain compatible, with a more modular architecture and roadmap to add privacy, permissioning, and new consensus algorithms. * Hobbits (In progress) : Hobbits is a lightweight wire protocol for ETH 2.0 network testing purposes. Resources https://pegasys.tech/ https://pegasys.tech/solutions/ https://github.com/deltap2p/hobbits","title":"PegaSys"},{"location":"built-on-ethereum/enterprise/pegasys/#pegasys","text":"","title":"PegaSys"},{"location":"built-on-ethereum/enterprise/pegasys/#summary","text":"PegaSys (Protocol Engineering Groups and Systems) is a 50-person team dedicated to enterprise grade blockchain at ConsenSys. It is building Ethereum tech for the public-chain community and leading enterprises focused on privacy, permissioning, scalability, and other features to make Ethereum production-ready. Pegasys develop open-source software, and are researching next-generation solutions like sidechains and sharding. Some of the great solutions developed by pegasys are: * Pantheon : An Apache 2.0 licensed Ethereum client written in Java. Pantheon is public chain compatible, with a more modular architecture and roadmap to add privacy, permissioning, and new consensus algorithms. * Hobbits (In progress) : Hobbits is a lightweight wire protocol for ETH 2.0 network testing purposes.","title":"Summary"},{"location":"built-on-ethereum/enterprise/pegasys/#resources","text":"https://pegasys.tech/ https://pegasys.tech/solutions/ https://github.com/deltap2p/hobbits","title":"Resources"},{"location":"built-on-ethereum/enterprise/projects/","text":"Enterprise Ethereum Projects Project i2i: Blockchain Payments in the Philippines** Problem Statement The Philippines is a rapidly emerging economy with a population of over 100 million. However, two-thirds of the population remains unbanked. 70 million Filipinos have severely limited access to both the domestic and global financial ecosystems. This poses a significant problem when up to 10% of the Philippines' GDP is made up of international remittances sent from overseas workers to family members across the country. Solution UnionBank of the Philippines, one of the largest banking institutions in the country, sought to tackle this challenge by partnering with ConsenSys Solutions, Kaleido, Amazon AWS, ConsenSys Diligence, Microsoft Azure, and seven rural Philippine banks to create an inter-rural bank payment platform using Enterprise Ethereum. Project i2i implemented Enterprise Ethereum to create a decentralized, cost-efficient, real-time inter-rural bank payment platform that operates autonomously outside of existing payment infrastructures and intermediaries such as the Philippines' PhilPass and SWIFT. The Project i2i platform works to connect rural banks as well as national commercial banks to the central bank, helping remote banks integrate with the domestic financial system while also improving banking access for local citizens. The commercial launch of the i2i platform is scheduled for 2019, in partnership with 130 rural banks. Project i2i has received clearance and support from the central bank of the Philippines to operate as the country's first Ethereum-based payment network for domestic funds transfers. UnionBank and ConsenSys Solutions are now working toward expanding the platform to include international funds transfer. Case study can be downloaded from here Project Khokha: Blockchain for Central Banking in South Africa Problem Statement Central banks need an innovative way to increase the resiliency of interbank payment systems while maintaining or reducing the overall cost of those systems. SARB created a simulation to assess if the performance, scale, and confidentiality of payments were possible utilizing blockchain technology. Solution In consortium with seven commercial banks, SARB partnered with ConsenSys Solutions and Adhara, to build a proof-of-concept grounded in real-world performance, confidentiality requirements, and diverse bank hardware on the blockchain\u2014without a single point of failure. By harnessing a permissioned blockchain network, the Istanbul Byzantine Fault Tolerance consensus mechanism, Pedersen commitments, and range proofs, Project Khoka was able to replicate interbank clearing and settlements in less than two hours. The project achieved the transaction performance target at 70,000 transactions in less than two hours, privacy while meeting required transaction volumes. Project Khokha was recognized by the Central Bank Publication as the \"Best Distributed Ledger Initiative\" of 2018. Case study can be downloaded from here Project Ubin: Blockchain for Banking in Singapore Problem Statement Singaporean financial institutions are recognized for their efficiency. Their public policy is exported as a blueprint for other central systems around the world. Recently, the Monetary Authority of Singapore (MAS) began exploring the potentials of distributed ledger technology in regards to finance and banking applications. Solution MAS launched a three-phase exercise in partnership with a consortium of international banks, distributed ledger technologies, and blockchain providers. Phase 1 consisted of a research and feasibility study around the potential applications of blockchain technology. The study explored: Benefits and pitfalls of tokenizing central bank currency Optimizing payment settlements between participating local banks Steps to enable cross-border transactions Effective methods of digitizing payments Phase 2 focused on how to use blockchain platforms and tokenization in the daily settlement and clearing process to enable RTGS. During this phase, MAS partnered with ConsenSys Solutions and JP Morgan's Quorum enterprise blockchain platform. Together, they successfully demonstrated how a tokenized Singaporean dollar could function as a means of daily inter-bank settlement. Phase 3 explored the potentials of a tokenized national currency and realizing cross-border payments through blockchain technology. Project Ubin's results prove that inter-bank transactions, cross-border remittances, and tokenized securities can be settled with distributed ledger technology with full settlement finality and transaction privacy. Case study can be downloaded from here","title":"Enterprise Projects"},{"location":"built-on-ethereum/enterprise/projects/#enterprise-ethereum-projects","text":"","title":"Enterprise Ethereum Projects"},{"location":"built-on-ethereum/enterprise/projects/#project-i2i-blockchain-payments-in-the-philippines","text":"Problem Statement The Philippines is a rapidly emerging economy with a population of over 100 million. However, two-thirds of the population remains unbanked. 70 million Filipinos have severely limited access to both the domestic and global financial ecosystems. This poses a significant problem when up to 10% of the Philippines' GDP is made up of international remittances sent from overseas workers to family members across the country. Solution UnionBank of the Philippines, one of the largest banking institutions in the country, sought to tackle this challenge by partnering with ConsenSys Solutions, Kaleido, Amazon AWS, ConsenSys Diligence, Microsoft Azure, and seven rural Philippine banks to create an inter-rural bank payment platform using Enterprise Ethereum. Project i2i implemented Enterprise Ethereum to create a decentralized, cost-efficient, real-time inter-rural bank payment platform that operates autonomously outside of existing payment infrastructures and intermediaries such as the Philippines' PhilPass and SWIFT. The Project i2i platform works to connect rural banks as well as national commercial banks to the central bank, helping remote banks integrate with the domestic financial system while also improving banking access for local citizens. The commercial launch of the i2i platform is scheduled for 2019, in partnership with 130 rural banks. Project i2i has received clearance and support from the central bank of the Philippines to operate as the country's first Ethereum-based payment network for domestic funds transfers. UnionBank and ConsenSys Solutions are now working toward expanding the platform to include international funds transfer. Case study can be downloaded from here","title":"Project i2i: Blockchain Payments in the Philippines**"},{"location":"built-on-ethereum/enterprise/projects/#project-khokha-blockchain-for-central-banking-in-south-africa","text":"Problem Statement Central banks need an innovative way to increase the resiliency of interbank payment systems while maintaining or reducing the overall cost of those systems. SARB created a simulation to assess if the performance, scale, and confidentiality of payments were possible utilizing blockchain technology. Solution In consortium with seven commercial banks, SARB partnered with ConsenSys Solutions and Adhara, to build a proof-of-concept grounded in real-world performance, confidentiality requirements, and diverse bank hardware on the blockchain\u2014without a single point of failure. By harnessing a permissioned blockchain network, the Istanbul Byzantine Fault Tolerance consensus mechanism, Pedersen commitments, and range proofs, Project Khoka was able to replicate interbank clearing and settlements in less than two hours. The project achieved the transaction performance target at 70,000 transactions in less than two hours, privacy while meeting required transaction volumes. Project Khokha was recognized by the Central Bank Publication as the \"Best Distributed Ledger Initiative\" of 2018. Case study can be downloaded from here","title":"Project Khokha: Blockchain for Central Banking in South Africa"},{"location":"built-on-ethereum/enterprise/projects/#project-ubin-blockchain-for-banking-in-singapore","text":"Problem Statement Singaporean financial institutions are recognized for their efficiency. Their public policy is exported as a blueprint for other central systems around the world. Recently, the Monetary Authority of Singapore (MAS) began exploring the potentials of distributed ledger technology in regards to finance and banking applications. Solution MAS launched a three-phase exercise in partnership with a consortium of international banks, distributed ledger technologies, and blockchain providers. Phase 1 consisted of a research and feasibility study around the potential applications of blockchain technology. The study explored: Benefits and pitfalls of tokenizing central bank currency Optimizing payment settlements between participating local banks Steps to enable cross-border transactions Effective methods of digitizing payments Phase 2 focused on how to use blockchain platforms and tokenization in the daily settlement and clearing process to enable RTGS. During this phase, MAS partnered with ConsenSys Solutions and JP Morgan's Quorum enterprise blockchain platform. Together, they successfully demonstrated how a tokenized Singaporean dollar could function as a means of daily inter-bank settlement. Phase 3 explored the potentials of a tokenized national currency and realizing cross-border payments through blockchain technology. Project Ubin's results prove that inter-bank transactions, cross-border remittances, and tokenized securities can be settled with distributed ledger technology with full settlement finality and transaction privacy. Case study can be downloaded from here","title":"Project Ubin: Blockchain for Banking in Singapore"},{"location":"built-on-ethereum/enterprise/unicef/","text":"Unicef Summary UNICEF Innovation Ventures team explores blockchain technologies, with the potential to impact children. The team sees the Ethereum blockchain as having benefits in 3 main ways: 1) new ways of donating money 2) creating better transparency in internal processes, and 3) leveraging tokenisation to reduce friction in transactions, as well as create new opportunities. To understand the technical, social, ethical, and legal challenges of utilizing blockchain technologies in our complex and interconnected world \u2014 the team is exploring this space with open eyes on practical experimentations of cryptocurrencies, smart contracts, digital scarcity, digital collectibles and various types of tokens. Resources https://www.unicef.org/innovation/blockchain","title":"Unicef"},{"location":"built-on-ethereum/enterprise/unicef/#unicef","text":"","title":"Unicef"},{"location":"built-on-ethereum/enterprise/unicef/#summary","text":"UNICEF Innovation Ventures team explores blockchain technologies, with the potential to impact children. The team sees the Ethereum blockchain as having benefits in 3 main ways: 1) new ways of donating money 2) creating better transparency in internal processes, and 3) leveraging tokenisation to reduce friction in transactions, as well as create new opportunities. To understand the technical, social, ethical, and legal challenges of utilizing blockchain technologies in our complex and interconnected world \u2014 the team is exploring this space with open eyes on practical experimentations of cryptocurrencies, smart contracts, digital scarcity, digital collectibles and various types of tokens.","title":"Summary"},{"location":"built-on-ethereum/enterprise/unicef/#resources","text":"https://www.unicef.org/innovation/blockchain","title":"Resources"},{"location":"built-on-ethereum/erc-token-standards/erc1155/","text":"ERC1155 Summary A standard interface for contracts that manage multiple token types. A single deployed contract may include any combination of fungible tokens, non-fungible tokens, or other configurations (for example, semi-fungible tokens). Motivation Tokens standards like ERC-20 and ERC-721 require a separate contract to be deployed for each fungible or NFT token/collection. This places a lot of redundant bytecode on the Ethereum blockchain and limits certain functionality by the nature of separating each token contract into its own permissioned address. With the rise of crypto games and platforms like Enjin Coin, game developers may be creating thousands of tokens, and a new type of token standard is needed to support this. New functionality is possible with this design, such as transferring multiple token types at once, saving on transaction costs. Trading (escrow / atomic swaps) of multiple tokens can be built on top of this standard and it removes the need to \"approve\" individual token contracts separately. It is also easy to describe and mix multiple fungible or non-fungible tokens in a single contract. Batch Transfers The safeBatchTransferFrom function allows for batch transfers of multiple token ids and values. Gas savings improves with the number of token types in the batch transfer, compared to single transfers with multiple transactions. Approval Single-token based approval of specific token values has been dropped in favor of the function setApprovalForAll which allows an operator to manage one's entire set of tokens on behalf of the approver. To scope an approval to a specific set or quantity of tokens, we recommend deploying a contract that contains the desired rules, and directing end-users to approve this contract to manage their set of tokens. Resources Github ERC-1155: The Crypto Item Standard (blog post)","title":"ERC1155"},{"location":"built-on-ethereum/erc-token-standards/erc1155/#erc1155","text":"","title":"ERC1155"},{"location":"built-on-ethereum/erc-token-standards/erc1155/#summary","text":"A standard interface for contracts that manage multiple token types. A single deployed contract may include any combination of fungible tokens, non-fungible tokens, or other configurations (for example, semi-fungible tokens).","title":"Summary"},{"location":"built-on-ethereum/erc-token-standards/erc1155/#motivation","text":"Tokens standards like ERC-20 and ERC-721 require a separate contract to be deployed for each fungible or NFT token/collection. This places a lot of redundant bytecode on the Ethereum blockchain and limits certain functionality by the nature of separating each token contract into its own permissioned address. With the rise of crypto games and platforms like Enjin Coin, game developers may be creating thousands of tokens, and a new type of token standard is needed to support this. New functionality is possible with this design, such as transferring multiple token types at once, saving on transaction costs. Trading (escrow / atomic swaps) of multiple tokens can be built on top of this standard and it removes the need to \"approve\" individual token contracts separately. It is also easy to describe and mix multiple fungible or non-fungible tokens in a single contract.","title":"Motivation"},{"location":"built-on-ethereum/erc-token-standards/erc1155/#batch-transfers","text":"The safeBatchTransferFrom function allows for batch transfers of multiple token ids and values. Gas savings improves with the number of token types in the batch transfer, compared to single transfers with multiple transactions.","title":"Batch Transfers"},{"location":"built-on-ethereum/erc-token-standards/erc1155/#approval","text":"Single-token based approval of specific token values has been dropped in favor of the function setApprovalForAll which allows an operator to manage one's entire set of tokens on behalf of the approver. To scope an approval to a specific set or quantity of tokens, we recommend deploying a contract that contains the desired rules, and directing end-users to approve this contract to manage their set of tokens.","title":"Approval"},{"location":"built-on-ethereum/erc-token-standards/erc1155/#resources","text":"Github ERC-1155: The Crypto Item Standard (blog post)","title":"Resources"},{"location":"built-on-ethereum/erc-token-standards/erc20/","text":"ERC20 Summary ERC20 allows the implementation of a standard API to ensure the interoperability between tokens. It offers basic functionalities to transfer tokens, obtain account balances, get the total supply of tokens, and allow token approvals. To define an ERC20 token you need: The address of the contract The number of tokens available However, there are other optional values for additional information such as: Name, for example \u201cAugur Token\u201d Symbol, such as \u201cREP\u201d Decimals, or how much you can divide the token. You can chose from 0 to 18 decimal values ERC20 defines two types of events, Transfer() , triggered when tokens are transferred and Approve() , used for every successful call of the approve() method. This token may also include functions such as allowance() , approve() , and transferFrom() to offer advanced functionalities and authorize some other Ethereum address to utilise your tokens on your behalf. This other Ethereum address could be a smart contract designed to handle tokens or just another account. Resources Github Wiki","title":"ERC20"},{"location":"built-on-ethereum/erc-token-standards/erc20/#erc20","text":"","title":"ERC20"},{"location":"built-on-ethereum/erc-token-standards/erc20/#summary","text":"ERC20 allows the implementation of a standard API to ensure the interoperability between tokens. It offers basic functionalities to transfer tokens, obtain account balances, get the total supply of tokens, and allow token approvals. To define an ERC20 token you need: The address of the contract The number of tokens available However, there are other optional values for additional information such as: Name, for example \u201cAugur Token\u201d Symbol, such as \u201cREP\u201d Decimals, or how much you can divide the token. You can chose from 0 to 18 decimal values ERC20 defines two types of events, Transfer() , triggered when tokens are transferred and Approve() , used for every successful call of the approve() method. This token may also include functions such as allowance() , approve() , and transferFrom() to offer advanced functionalities and authorize some other Ethereum address to utilise your tokens on your behalf. This other Ethereum address could be a smart contract designed to handle tokens or just another account.","title":"Summary"},{"location":"built-on-ethereum/erc-token-standards/erc20/#resources","text":"Github Wiki","title":"Resources"},{"location":"built-on-ethereum/erc-token-standards/erc621/","text":"ERC621 Summary ERC621 is an extension to the ERC20 standard. It adds two functions to increase and decrease the total amount of tokens in circulation. In short, it proposes that totalSupply can be changed. ERC20 only allows a single token emission event defined by the contract owner during creation. With ERC621 a new totalSupply can be defined through the functions increaseSupply and decreaseSupply . It is recommended that these functions are only accessed by the contract owners or trusted users. To enhance ERC621's functionality and security, and to avoid potential errors, additional functions for overflow checks, contract property modifications and restricted privileges, should be implemented. Resources: Github","title":"ERC621"},{"location":"built-on-ethereum/erc-token-standards/erc621/#erc621","text":"","title":"ERC621"},{"location":"built-on-ethereum/erc-token-standards/erc621/#summary","text":"ERC621 is an extension to the ERC20 standard. It adds two functions to increase and decrease the total amount of tokens in circulation. In short, it proposes that totalSupply can be changed. ERC20 only allows a single token emission event defined by the contract owner during creation. With ERC621 a new totalSupply can be defined through the functions increaseSupply and decreaseSupply . It is recommended that these functions are only accessed by the contract owners or trusted users. To enhance ERC621's functionality and security, and to avoid potential errors, additional functions for overflow checks, contract property modifications and restricted privileges, should be implemented.","title":"Summary"},{"location":"built-on-ethereum/erc-token-standards/erc621/#resources","text":"Github","title":"Resources:"},{"location":"built-on-ethereum/erc-token-standards/erc721/","text":"ERC721 Summary ERC-721 is a free, open standard that describes how to build non-fungible or unique tokens on the Ethereum blockchain. While most tokens are fungible (every token is the same as every other token), ERC-721 tokens are all unique. Each NFT is identified through an uint256 ID. They may be transferred through two different funcions: A safe transfer function safeTransferFrom() which verifies that the msg.sender ,i.e. the user that triggered the function, is the owner of the token or an authorized user allowed to transfer the token. A non-secure trasfer transferFrom() , where there is no preliminary authorization verification. The token developer is responsible for implementing a piece of code in this function that verifies that the responsible for calling the function is authorized to do so. In this function, the user calling it must also verify that the receiver is entitle for receiving the token. If these verifications are not performed, the tokens could be lost forever. ERC721 tokens must implement the proposed ERC165 interface. This standard allows the detection of the interfaces implemented by a contract. This is really useful, as it allows to detect the interface that a token implements and, consequently, adapt the method/code to interact with it. What does \u201cfungible\u201d mean?! If an item is fungible, then it can be substituted or exchanged for any similar item. Fiat currencies, like the US dollar, contain fungible units. One dollar bill can be exchanged for any other dollar bill. Cryptocurrency tokens like Bitcoin, Ethereum, and MANA are all fungible because one token can be exchanged for any other token. The only thing that changes is a record on the blockchain registering the transaction. It must follow that two non-fungible tokens are not interchangeable. So what is it about non-fungible tokens (NFTs) that gives them this quality? The answer lies in the data or information stored within NFTs. We can compare two real-world examples of fungible and non-fungible items that most people should be familiar with: dollars and movie tickets. Dollars These are obviously fungible, if I have a dollar and you have a dollar, we can trade the two and neither of us will be any richer or poorer than we were before. Movie tickets NFTs are the digital manifestation of items like movie tickets, in that they can contain information in addition to just the owner, lending them all sorts of uses and unforeseen value. Put simply: you could have a movie ticket for Star Wars whereas I could have a movie ticket for Avengers. These tickets are not equal in properties or value which makes them non-fungible. ERC721 ERC721 was written to standardize non-fungible tokens. By standardizing NFTs, the developer community ushered in a new ecosystem of digital content, games, and applications that use NFTs. Thanks to ERC721, we have things like Decentraland, CryptoBeasties, Etheremon, and CryptoKitties. Resources Website Github","title":"ERC721"},{"location":"built-on-ethereum/erc-token-standards/erc721/#erc721","text":"","title":"ERC721"},{"location":"built-on-ethereum/erc-token-standards/erc721/#summary","text":"ERC-721 is a free, open standard that describes how to build non-fungible or unique tokens on the Ethereum blockchain. While most tokens are fungible (every token is the same as every other token), ERC-721 tokens are all unique. Each NFT is identified through an uint256 ID. They may be transferred through two different funcions: A safe transfer function safeTransferFrom() which verifies that the msg.sender ,i.e. the user that triggered the function, is the owner of the token or an authorized user allowed to transfer the token. A non-secure trasfer transferFrom() , where there is no preliminary authorization verification. The token developer is responsible for implementing a piece of code in this function that verifies that the responsible for calling the function is authorized to do so. In this function, the user calling it must also verify that the receiver is entitle for receiving the token. If these verifications are not performed, the tokens could be lost forever. ERC721 tokens must implement the proposed ERC165 interface. This standard allows the detection of the interfaces implemented by a contract. This is really useful, as it allows to detect the interface that a token implements and, consequently, adapt the method/code to interact with it.","title":"Summary"},{"location":"built-on-ethereum/erc-token-standards/erc721/#what-does-fungible-mean","text":"If an item is fungible, then it can be substituted or exchanged for any similar item. Fiat currencies, like the US dollar, contain fungible units. One dollar bill can be exchanged for any other dollar bill. Cryptocurrency tokens like Bitcoin, Ethereum, and MANA are all fungible because one token can be exchanged for any other token. The only thing that changes is a record on the blockchain registering the transaction. It must follow that two non-fungible tokens are not interchangeable. So what is it about non-fungible tokens (NFTs) that gives them this quality? The answer lies in the data or information stored within NFTs. We can compare two real-world examples of fungible and non-fungible items that most people should be familiar with: dollars and movie tickets.","title":"What does \u201cfungible\u201d mean?!"},{"location":"built-on-ethereum/erc-token-standards/erc721/#dollars","text":"These are obviously fungible, if I have a dollar and you have a dollar, we can trade the two and neither of us will be any richer or poorer than we were before.","title":"Dollars"},{"location":"built-on-ethereum/erc-token-standards/erc721/#movie-tickets","text":"NFTs are the digital manifestation of items like movie tickets, in that they can contain information in addition to just the owner, lending them all sorts of uses and unforeseen value. Put simply: you could have a movie ticket for Star Wars whereas I could have a movie ticket for Avengers. These tickets are not equal in properties or value which makes them non-fungible.","title":"Movie tickets"},{"location":"built-on-ethereum/erc-token-standards/erc721/#erc721_1","text":"ERC721 was written to standardize non-fungible tokens. By standardizing NFTs, the developer community ushered in a new ecosystem of digital content, games, and applications that use NFTs. Thanks to ERC721, we have things like Decentraland, CryptoBeasties, Etheremon, and CryptoKitties.","title":"ERC721"},{"location":"built-on-ethereum/erc-token-standards/erc721/#resources","text":"Website Github","title":"Resources"},{"location":"built-on-ethereum/erc-token-standards/erc721x/","text":"ERC721x Summary ERC721x is an extension of ERC721 that adds support for multi-fungible tokens and batch transfers, while being fully backward-compatible. ERC721x is heavily inspired by the ERC1178 token standard. Resources Website","title":"ERC721x"},{"location":"built-on-ethereum/erc-token-standards/erc721x/#erc721x","text":"","title":"ERC721x"},{"location":"built-on-ethereum/erc-token-standards/erc721x/#summary","text":"ERC721x is an extension of ERC721 that adds support for multi-fungible tokens and batch transfers, while being fully backward-compatible. ERC721x is heavily inspired by the ERC1178 token standard.","title":"Summary"},{"location":"built-on-ethereum/erc-token-standards/erc721x/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/erc-token-standards/erc777/","text":"ERC777 Summary ERC777 defines all the functions required to send tokens on behalf of another address, contract or regular account. For this purpose, it uses the ERC1820 standard. The use of ERC1820 enables the registration of metadata in smart contracts in order to allow backwards compatibility with previous versions of token implementations. ERC777 includes functions for authorization, revocation, transfer and checks. Resources Specification","title":"ERC777"},{"location":"built-on-ethereum/erc-token-standards/erc777/#erc777","text":"","title":"ERC777"},{"location":"built-on-ethereum/erc-token-standards/erc777/#summary","text":"ERC777 defines all the functions required to send tokens on behalf of another address, contract or regular account. For this purpose, it uses the ERC1820 standard. The use of ERC1820 enables the registration of metadata in smart contracts in order to allow backwards compatibility with previous versions of token implementations. ERC777 includes functions for authorization, revocation, transfer and checks.","title":"Summary"},{"location":"built-on-ethereum/erc-token-standards/erc777/#resources","text":"Specification","title":"Resources"},{"location":"built-on-ethereum/erc-token-standards/erc884/","text":"ERC884 Summary The Delaware State Legislature recently passed Delaware State Senate, 149th General Assembly, Senate Bill \u211669: An act to Amend Title 8 of the Delaware Code Relating to the General Corporation Law , henceforth referred to as \u2018The Act\u2019. As a result, Delaware General Corporation Law now explicitly allows for the use of blockchains to maintain corporate share registries. ERC-884 allows for the creation of tradable ERC-20 tokens where each token represents a numberless (or vanilla) share issued by a Delaware corporation. ERC-884 is designed to represent equity issued by any Delaware corporation, whether private or public. By deploying an ERC-884 token, a firm may be able to raise funds, either via initial public offering (IPO), or by private equity sale, in a manner conforming to Delaware Corporations Law, but bypassing the need for a custom share registry, or the involvement of a traditional stock exchange or transfer agent. Core Principles ERC-884 tokens enable conformance with the following principles, over and above the base ERC-20 standard: Token owners must have their identity verified. Rather than leaving it to a separate crowdsale contract to enforce owner whitelisting, ERC-884 requires that all token owners are whitelisted. The whitelist can be referenced by accompanying crowdsale contracts, to enforce eligibility, but the whitelist remains an integral part of the token contract itself. The token contract must provide the following three functions of a Corporations Stock Ledger (Ref: Section 224 of The Act): It must enable the corporation to prepare the list of shareholders specified in Sections 219 and 220 of The Act. It must record the information specified in Sections 156, 159, 217(a) and 218 of The Act. It must record transfers of shares as governed by Article 8 of Subtitle I of Title 6. Resources: Github","title":"ERC884"},{"location":"built-on-ethereum/erc-token-standards/erc884/#erc884","text":"","title":"ERC884"},{"location":"built-on-ethereum/erc-token-standards/erc884/#summary","text":"The Delaware State Legislature recently passed Delaware State Senate, 149th General Assembly, Senate Bill \u211669: An act to Amend Title 8 of the Delaware Code Relating to the General Corporation Law , henceforth referred to as \u2018The Act\u2019. As a result, Delaware General Corporation Law now explicitly allows for the use of blockchains to maintain corporate share registries. ERC-884 allows for the creation of tradable ERC-20 tokens where each token represents a numberless (or vanilla) share issued by a Delaware corporation. ERC-884 is designed to represent equity issued by any Delaware corporation, whether private or public. By deploying an ERC-884 token, a firm may be able to raise funds, either via initial public offering (IPO), or by private equity sale, in a manner conforming to Delaware Corporations Law, but bypassing the need for a custom share registry, or the involvement of a traditional stock exchange or transfer agent.","title":"Summary"},{"location":"built-on-ethereum/erc-token-standards/erc884/#core-principles","text":"ERC-884 tokens enable conformance with the following principles, over and above the base ERC-20 standard: Token owners must have their identity verified. Rather than leaving it to a separate crowdsale contract to enforce owner whitelisting, ERC-884 requires that all token owners are whitelisted. The whitelist can be referenced by accompanying crowdsale contracts, to enforce eligibility, but the whitelist remains an integral part of the token contract itself. The token contract must provide the following three functions of a Corporations Stock Ledger (Ref: Section 224 of The Act): It must enable the corporation to prepare the list of shareholders specified in Sections 219 and 220 of The Act. It must record the information specified in Sections 156, 159, 217(a) and 218 of The Act. It must record transfers of shares as governed by Article 8 of Subtitle I of Title 6.","title":"Core Principles"},{"location":"built-on-ethereum/erc-token-standards/erc884/#resources","text":"Github","title":"Resources:"},{"location":"built-on-ethereum/erc-token-standards/erc918/","text":"ERC918 Summary EIP-918 is an Ethereum Improvement Proposal for standardizing mineable token distribution using Proof of Work. The primary driver behind the standard is to address the very broken ICO model that currently plagues the Ethereum network. Token distribution via the ICO model and it\u2019s derivatives has always been susceptible to illicit behavior by bad actors. New token projects are centralized by nature because a single entity must handle and control all of the initial coins and all of the the raised ICO money. By distributing tokens via an alternative \u2018Initial Mining Offering\u2019 (or IMO), the ownership of the token contract no longer belongs with the deployer at all and the deployer is \u2018just another user.\u2019 As a result, investor risk exposure utilizing a mined token distribution model is significantly diminished. This standard is intended to be standalone, allowing maximum interoperability with ERC20, ERC721, and future token standards. Resources Github","title":"ERC918"},{"location":"built-on-ethereum/erc-token-standards/erc918/#erc918","text":"","title":"ERC918"},{"location":"built-on-ethereum/erc-token-standards/erc918/#summary","text":"EIP-918 is an Ethereum Improvement Proposal for standardizing mineable token distribution using Proof of Work. The primary driver behind the standard is to address the very broken ICO model that currently plagues the Ethereum network. Token distribution via the ICO model and it\u2019s derivatives has always been susceptible to illicit behavior by bad actors. New token projects are centralized by nature because a single entity must handle and control all of the initial coins and all of the the raised ICO money. By distributing tokens via an alternative \u2018Initial Mining Offering\u2019 (or IMO), the ownership of the token contract no longer belongs with the deployer at all and the deployer is \u2018just another user.\u2019 As a result, investor risk exposure utilizing a mined token distribution model is significantly diminished. This standard is intended to be standalone, allowing maximum interoperability with ERC20, ERC721, and future token standards.","title":"Summary"},{"location":"built-on-ethereum/erc-token-standards/erc918/#resources","text":"Github","title":"Resources"},{"location":"built-on-ethereum/erc-token-standards/what-are-erc-tokens/","text":"ERC Token Standards ERCs (Ethereum Request for Comments) are technical documents used by smart contract developers at Ethereum. They define a set of rules required to implement tokens for the Ethereum ecosystem. These documents are usually created by developers, and they include information about protocol specifications and contract descriptions. Before becoming an standard, an ERC must be revised, commented and accepted by the community through an EIP (Ethereum Improvement Proposal). Resources Website","title":"What are ERC Tokens?"},{"location":"built-on-ethereum/erc-token-standards/what-are-erc-tokens/#erc-token-standards","text":"ERCs (Ethereum Request for Comments) are technical documents used by smart contract developers at Ethereum. They define a set of rules required to implement tokens for the Ethereum ecosystem. These documents are usually created by developers, and they include information about protocol specifications and contract descriptions. Before becoming an standard, an ERC must be revised, commented and accepted by the community through an EIP (Ethereum Improvement Proposal).","title":"ERC Token Standards"},{"location":"built-on-ethereum/erc-token-standards/what-are-erc-tokens/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/games/axie-infinity/","text":"Axie Infinity Summary Axie Infinity is a fantasy creature game with training, battling, and breeding that launched in October 2018. Axie pets have unique attributes and moves they can use in battle. The six classes of Axies each have advantages with different skills in battle. Each class is stronger compared to two other classes. Battles Battles take place in teams of 3 and can be placed strategically on the 3x3 battlefield. It's advantageous for users to also prioritize moves for battle as they will be run sequentially in battles right now. Moves repeat from the top. Lunacia The world of Lunacia is where Axies live and the land is owned, operated, and controlled by the community. It is up to the community to defend Lunacia from the Chimera monsters in one-on-one and group battles. History Decentraland crossover Like some of the other collectibles Axies are available in Picture Frames inside Decentraland , which is expecting an imminent public launch. LOOM partnership Coming this fall, Axie Infinity will release live battles which includes selecting each sequential move during battle. These battles will take place on LOOM's PlasmaChain mainnet and assets can be minted to Ethereum mainnet. Software Development Kit The team announced an SDK will be available (sometime next year) for third-party developers to build on top of the Lunacia land and expand the game play. Resources Website Blog - Medium Marketplace Sales Stats Everything we know about breeding (blog post) Traits Index Axie Wiki Stats","title":"Axie Infinity"},{"location":"built-on-ethereum/games/axie-infinity/#axie-infinity","text":"","title":"Axie Infinity"},{"location":"built-on-ethereum/games/axie-infinity/#summary","text":"Axie Infinity is a fantasy creature game with training, battling, and breeding that launched in October 2018. Axie pets have unique attributes and moves they can use in battle. The six classes of Axies each have advantages with different skills in battle. Each class is stronger compared to two other classes.","title":"Summary"},{"location":"built-on-ethereum/games/axie-infinity/#battles","text":"Battles take place in teams of 3 and can be placed strategically on the 3x3 battlefield. It's advantageous for users to also prioritize moves for battle as they will be run sequentially in battles right now. Moves repeat from the top.","title":"Battles"},{"location":"built-on-ethereum/games/axie-infinity/#lunacia","text":"The world of Lunacia is where Axies live and the land is owned, operated, and controlled by the community. It is up to the community to defend Lunacia from the Chimera monsters in one-on-one and group battles.","title":"Lunacia"},{"location":"built-on-ethereum/games/axie-infinity/#history","text":"","title":"History"},{"location":"built-on-ethereum/games/axie-infinity/#decentraland-crossover","text":"Like some of the other collectibles Axies are available in Picture Frames inside Decentraland , which is expecting an imminent public launch.","title":"Decentraland crossover"},{"location":"built-on-ethereum/games/axie-infinity/#loom-partnership","text":"Coming this fall, Axie Infinity will release live battles which includes selecting each sequential move during battle. These battles will take place on LOOM's PlasmaChain mainnet and assets can be minted to Ethereum mainnet.","title":"LOOM partnership"},{"location":"built-on-ethereum/games/axie-infinity/#software-development-kit","text":"The team announced an SDK will be available (sometime next year) for third-party developers to build on top of the Lunacia land and expand the game play.","title":"Software Development Kit"},{"location":"built-on-ethereum/games/axie-infinity/#resources","text":"Website Blog - Medium Marketplace Sales Stats Everything we know about breeding (blog post) Traits Index Axie Wiki Stats","title":"Resources"},{"location":"built-on-ethereum/games/caesars-triumph/","text":"Caesar's Triumph previously CryptoRome Summary Caesar's Triumph is a map conquest game where players look to collect as many points from Land battles as possible to become Caesar or a Senator for the day. Each player receives a designation of troops from Caesar and their land can produce additional units. Battles Each of the 8 regions' battles takes place in rotation every 3 hours throughout the day. Battles are three hours in duration and are tallied at the conclusion of the battle period. The winning player will have the most troops on the land at the end of the battle. An attacking army can reduce the defending's troop count with War Horses while the defending army can build walls and recruit Centurions. History CryptoRome CryptoRome was the original version that launched in June of 2018 with the Battle for Sicily and other mini-games. Resources Website Player's Guide","title":"Caesar`s Triumph"},{"location":"built-on-ethereum/games/caesars-triumph/#caesars-triumph","text":"previously CryptoRome","title":"Caesar's Triumph"},{"location":"built-on-ethereum/games/caesars-triumph/#summary","text":"Caesar's Triumph is a map conquest game where players look to collect as many points from Land battles as possible to become Caesar or a Senator for the day. Each player receives a designation of troops from Caesar and their land can produce additional units.","title":"Summary"},{"location":"built-on-ethereum/games/caesars-triumph/#battles","text":"Each of the 8 regions' battles takes place in rotation every 3 hours throughout the day. Battles are three hours in duration and are tallied at the conclusion of the battle period. The winning player will have the most troops on the land at the end of the battle. An attacking army can reduce the defending's troop count with War Horses while the defending army can build walls and recruit Centurions.","title":"Battles"},{"location":"built-on-ethereum/games/caesars-triumph/#history","text":"","title":"History"},{"location":"built-on-ethereum/games/caesars-triumph/#cryptorome","text":"CryptoRome was the original version that launched in June of 2018 with the Battle for Sicily and other mini-games.","title":"CryptoRome"},{"location":"built-on-ethereum/games/caesars-triumph/#resources","text":"Website Player's Guide","title":"Resources"},{"location":"built-on-ethereum/games/chainmonsters/","text":"Chainmonsters Summary Chainmonsters is an monster training and battling MMORPG. The story mode takes trainers through a monster-filled world to discover shiny monsters, battle other trainers and take on gym leaders. Tournaments The community came together for the first tournament took place in May 2019 with official tournaments expected in live gameplay after the beta period concludes. Dungeon Adventure The Dungeon Adventure sends trainers into the Dungon to battle up to 100 challenging monsters as they make their way to the bottom of the dugeon where the biggest rewards await. Dungeon Adventure costs 1 Raid Pass which can be gathered in a daily reward. History Public Beta Currently Chainmonsters is in public beta and can be downloaded through the official discord channels. Resources Website Blog - Medium","title":"Chainmonsters"},{"location":"built-on-ethereum/games/chainmonsters/#chainmonsters","text":"","title":"Chainmonsters"},{"location":"built-on-ethereum/games/chainmonsters/#summary","text":"Chainmonsters is an monster training and battling MMORPG. The story mode takes trainers through a monster-filled world to discover shiny monsters, battle other trainers and take on gym leaders.","title":"Summary"},{"location":"built-on-ethereum/games/chainmonsters/#tournaments","text":"The community came together for the first tournament took place in May 2019 with official tournaments expected in live gameplay after the beta period concludes.","title":"Tournaments"},{"location":"built-on-ethereum/games/chainmonsters/#dungeon-adventure","text":"The Dungeon Adventure sends trainers into the Dungon to battle up to 100 challenging monsters as they make their way to the bottom of the dugeon where the biggest rewards await. Dungeon Adventure costs 1 Raid Pass which can be gathered in a daily reward.","title":"Dungeon Adventure"},{"location":"built-on-ethereum/games/chainmonsters/#history","text":"","title":"History"},{"location":"built-on-ethereum/games/chainmonsters/#public-beta","text":"Currently Chainmonsters is in public beta and can be downloaded through the official discord channels.","title":"Public Beta"},{"location":"built-on-ethereum/games/chainmonsters/#resources","text":"Website Blog - Medium","title":"Resources"},{"location":"built-on-ethereum/games/chibi-fighters/","text":"Chibi Fighters Summary Chibi Fighters is a fantasy role-playing game launched in May of 2018 where players can send their Chibis on adventures and into battles with other Chibis. Two Chibis can be fused together to create a new Chibi. Game Modes Battles are currently being revamped to be live action strategy battles. The offline battle mode is available in the meantime. Chibis can be sent into the wild on adventures to discover loot in Adventure Mode. In Hunt mode, Chibis battle against foes that increase in level until the Chibi loses all its hit points. Slasher mode consists of a horde of Chibis to battle that each drop some loot. There are also a couple mini-games to collect coins, Zeppelin and Coin Tapping, that will be phased out soon in favor of new mini-games. History Decentraland crossover Chibi Fighters are accessible in Picture Frames as part of the Decentraland Scene builder. They are ready to go with Decentraland's expected launch during the Summer 2019. Resources Website Chibhi Wiki Chibhi Codex Whitepaper","title":"Chibi Fighters"},{"location":"built-on-ethereum/games/chibi-fighters/#chibi-fighters","text":"","title":"Chibi Fighters"},{"location":"built-on-ethereum/games/chibi-fighters/#summary","text":"Chibi Fighters is a fantasy role-playing game launched in May of 2018 where players can send their Chibis on adventures and into battles with other Chibis. Two Chibis can be fused together to create a new Chibi.","title":"Summary"},{"location":"built-on-ethereum/games/chibi-fighters/#game-modes","text":"Battles are currently being revamped to be live action strategy battles. The offline battle mode is available in the meantime. Chibis can be sent into the wild on adventures to discover loot in Adventure Mode. In Hunt mode, Chibis battle against foes that increase in level until the Chibi loses all its hit points. Slasher mode consists of a horde of Chibis to battle that each drop some loot. There are also a couple mini-games to collect coins, Zeppelin and Coin Tapping, that will be phased out soon in favor of new mini-games.","title":"Game Modes"},{"location":"built-on-ethereum/games/chibi-fighters/#history","text":"","title":"History"},{"location":"built-on-ethereum/games/chibi-fighters/#decentraland-crossover","text":"Chibi Fighters are accessible in Picture Frames as part of the Decentraland Scene builder. They are ready to go with Decentraland's expected launch during the Summer 2019.","title":"Decentraland crossover"},{"location":"built-on-ethereum/games/chibi-fighters/#resources","text":"Website Chibhi Wiki Chibhi Codex Whitepaper","title":"Resources"},{"location":"built-on-ethereum/games/crypto-space-commander/","text":"Crypto Space Commander Summary Crypto Space Commander is an open-universe game where players can navigate ships to mine, battle, and craft items. History Public Beta The beta is currently accessible through links in the CSC discord channel. Currently mining and exploration modes are available in the beta version. Star Trek crossover On June 4th, 2019, The Crypto Space Commander team announced a partnership with CBS Television to bring Star Trek collectibles to the CSC universe. The U.S.S. Enterprise and other ships will be released during a limited-time event. Resources Website Community Wiki Star List and Ship Launcher","title":"Crypto Space Commander"},{"location":"built-on-ethereum/games/crypto-space-commander/#crypto-space-commander","text":"","title":"Crypto Space Commander"},{"location":"built-on-ethereum/games/crypto-space-commander/#summary","text":"Crypto Space Commander is an open-universe game where players can navigate ships to mine, battle, and craft items.","title":"Summary"},{"location":"built-on-ethereum/games/crypto-space-commander/#history","text":"","title":"History"},{"location":"built-on-ethereum/games/crypto-space-commander/#public-beta","text":"The beta is currently accessible through links in the CSC discord channel. Currently mining and exploration modes are available in the beta version.","title":"Public Beta"},{"location":"built-on-ethereum/games/crypto-space-commander/#star-trek-crossover","text":"On June 4th, 2019, The Crypto Space Commander team announced a partnership with CBS Television to bring Star Trek collectibles to the CSC universe. The U.S.S. Enterprise and other ships will be released during a limited-time event.","title":"Star Trek crossover"},{"location":"built-on-ethereum/games/crypto-space-commander/#resources","text":"Website Community Wiki Star List and Ship Launcher","title":"Resources"},{"location":"built-on-ethereum/games/cryptokitties/","text":"CryptoKitties Summary CryptoKitties is a game built on Ethereum that allows users to collect and breed cryptographically unique creatures called CryptoKitties. Each kitty exists on the Ethereum blockchain as an ERC721 non-fungible token. Each ERC721 kitty has a unique ID, genes that defines its appearance and rarity, a generation that affects the kitty's rarity, and a cooldown that determines how long the cat must wait before it can breed again. For a small fee, players can breed two kitties together to create a new ERC721 kitty. The new kitten's traits are randomly determined through the combination of the traits of its parents and an on-chain random number oracle, although its generation will always be greater than that of its parents. Generation The game began with the creation of 50,000 Generation 0 kitties. The smart contract does not allow any more Generation 0 kitties to be created beyond 50,000. Whenever two kitties breed, the generation of their offspring is equal to the highest generation of either parent plus one. For example, if two Generation 0 kitties breed, they create a Generation 1 kitty. If a Generation 0 and a Generation 8 kitty breed, they create a Generation 9 kitty. This mechanic of increasing a kitty's generation with each breed preserves the rarity of lower gneeration Cryptokitties, preventing users from flooding the marketplace and destroying the value of all kitties. Genes Each kitty has 48 genes, spanning twelve different gene categories. Within each category, each kitty has a dominant gene, a hidden-1 gene, a hidden-2 gene, and a hidden-3 gene. The dominant genes are the genes that determine a kitty's appearance. When breeding two kitty's together, the offspring is likely to get the dominant gene of either parent for each category, but has a small chance of getting one of the parent's hidden-1 genes, an even smaller chance of getting one of the parent's hidden-2 genes, and a very small chance of getting one of the parent's hidden-3 genes. When two parent's have genes that match up in a certain way, then there is a small chance of that gene \"mewtating\" into a higher-tier gene that neither parent had originally had. The community has created calculators for determining the probabilities of the genes of a given offspring, such as KittyCalc , and the community has created trait charts that demonstrate the mewtation process, which can be found at KittyHelper and at KittyFyi . For a more detailed explanation, see the section labeled Genes under the CryptoKitties Guide below. Cooldown Each cat has a cooldown that determines how long a user must wait before they can breed the cat again. A kitty's initial cooldown is determined by its generation. The higher the generation, the worse the cooldown the kitty is born with. Cooldowns range from 1 minute to 1 week. Each time that a kitty breeds, its cooldown increases, to a maximum of one week. The kitty's offspring will not be born until the cooldown has completed. History Gods Unchained crossover On January 10th, 2019, a partnership between CryptoKitties and the trading card game Gods Unchained was announced . The partnership was significant because it featured extensibility for the first time between two blockchain games. Extensibility is the ability to use an NFT from one game in another game. Between Jan. 10th to Jan. 28th, 2019, Cryptokitties users were able to convert any Cryptokitty into a Gods Unchained statue for a small fee. The Cryptokitty statue is purely used for aesthetic purposes in the Gods Unchained game, allowing a Gods Unchained user to decorate their board while playing a match but having no in-game effect on the game's mechanics. However, each statue's appearance differed depending on the on-chain genes that the Cryptokitty had, meaning that certain kitty's with rarer genes could create rarer statues. This demonstrates how one blockchain game can make use of the information contained within the ERC-721 tokens of another blockchain game, opening up an entire universe of possibilities for interoperability and cross-game collaboration. Noteably, the statue-creation process did not destroy the Cryptokitty that was used, meaning that a user could take a single NFT token and use its unique information in a variety of different games and different contexts, while still retaining its value in the original blockchain game. The event also provided the ability for Crypokitty's users to create, buy, or win Gods Unchained-themed Cryptokitties, including creating one of 3,992 TallyThePurrocious fancy cats, buying one of 380 Aeoncat special edition cats, or winning the one and only Hyppurrion exclusive cat. Details can be found on the Cryptokitties Gods Unchained page . Decentraland crossover CryptoKitties are accessible in Picture Frames as part of the Decentraland Scene builder. The partnership was announced in December of 2017 and are ready to go with Decentraland's expected launch during the Summer 2019. Resources Website Twitter CryptoKitties Guide Cryptokitties API KittyHelper Kitty.fyi KittyCalc KittyBounties Heaven.Cat CryptoKitties Analytics LocalKitty CryptoKitties Russian Guide KittyRace","title":"CryptoKitties"},{"location":"built-on-ethereum/games/cryptokitties/#cryptokitties","text":"","title":"CryptoKitties"},{"location":"built-on-ethereum/games/cryptokitties/#summary","text":"CryptoKitties is a game built on Ethereum that allows users to collect and breed cryptographically unique creatures called CryptoKitties. Each kitty exists on the Ethereum blockchain as an ERC721 non-fungible token. Each ERC721 kitty has a unique ID, genes that defines its appearance and rarity, a generation that affects the kitty's rarity, and a cooldown that determines how long the cat must wait before it can breed again. For a small fee, players can breed two kitties together to create a new ERC721 kitty. The new kitten's traits are randomly determined through the combination of the traits of its parents and an on-chain random number oracle, although its generation will always be greater than that of its parents.","title":"Summary"},{"location":"built-on-ethereum/games/cryptokitties/#generation","text":"The game began with the creation of 50,000 Generation 0 kitties. The smart contract does not allow any more Generation 0 kitties to be created beyond 50,000. Whenever two kitties breed, the generation of their offspring is equal to the highest generation of either parent plus one. For example, if two Generation 0 kitties breed, they create a Generation 1 kitty. If a Generation 0 and a Generation 8 kitty breed, they create a Generation 9 kitty. This mechanic of increasing a kitty's generation with each breed preserves the rarity of lower gneeration Cryptokitties, preventing users from flooding the marketplace and destroying the value of all kitties.","title":"Generation"},{"location":"built-on-ethereum/games/cryptokitties/#genes","text":"Each kitty has 48 genes, spanning twelve different gene categories. Within each category, each kitty has a dominant gene, a hidden-1 gene, a hidden-2 gene, and a hidden-3 gene. The dominant genes are the genes that determine a kitty's appearance. When breeding two kitty's together, the offspring is likely to get the dominant gene of either parent for each category, but has a small chance of getting one of the parent's hidden-1 genes, an even smaller chance of getting one of the parent's hidden-2 genes, and a very small chance of getting one of the parent's hidden-3 genes. When two parent's have genes that match up in a certain way, then there is a small chance of that gene \"mewtating\" into a higher-tier gene that neither parent had originally had. The community has created calculators for determining the probabilities of the genes of a given offspring, such as KittyCalc , and the community has created trait charts that demonstrate the mewtation process, which can be found at KittyHelper and at KittyFyi . For a more detailed explanation, see the section labeled Genes under the CryptoKitties Guide below.","title":"Genes"},{"location":"built-on-ethereum/games/cryptokitties/#cooldown","text":"Each cat has a cooldown that determines how long a user must wait before they can breed the cat again. A kitty's initial cooldown is determined by its generation. The higher the generation, the worse the cooldown the kitty is born with. Cooldowns range from 1 minute to 1 week. Each time that a kitty breeds, its cooldown increases, to a maximum of one week. The kitty's offspring will not be born until the cooldown has completed.","title":"Cooldown"},{"location":"built-on-ethereum/games/cryptokitties/#history","text":"","title":"History"},{"location":"built-on-ethereum/games/cryptokitties/#gods-unchained-crossover","text":"On January 10th, 2019, a partnership between CryptoKitties and the trading card game Gods Unchained was announced . The partnership was significant because it featured extensibility for the first time between two blockchain games. Extensibility is the ability to use an NFT from one game in another game. Between Jan. 10th to Jan. 28th, 2019, Cryptokitties users were able to convert any Cryptokitty into a Gods Unchained statue for a small fee. The Cryptokitty statue is purely used for aesthetic purposes in the Gods Unchained game, allowing a Gods Unchained user to decorate their board while playing a match but having no in-game effect on the game's mechanics. However, each statue's appearance differed depending on the on-chain genes that the Cryptokitty had, meaning that certain kitty's with rarer genes could create rarer statues. This demonstrates how one blockchain game can make use of the information contained within the ERC-721 tokens of another blockchain game, opening up an entire universe of possibilities for interoperability and cross-game collaboration. Noteably, the statue-creation process did not destroy the Cryptokitty that was used, meaning that a user could take a single NFT token and use its unique information in a variety of different games and different contexts, while still retaining its value in the original blockchain game. The event also provided the ability for Crypokitty's users to create, buy, or win Gods Unchained-themed Cryptokitties, including creating one of 3,992 TallyThePurrocious fancy cats, buying one of 380 Aeoncat special edition cats, or winning the one and only Hyppurrion exclusive cat. Details can be found on the Cryptokitties Gods Unchained page .","title":"Gods Unchained crossover"},{"location":"built-on-ethereum/games/cryptokitties/#decentraland-crossover","text":"CryptoKitties are accessible in Picture Frames as part of the Decentraland Scene builder. The partnership was announced in December of 2017 and are ready to go with Decentraland's expected launch during the Summer 2019.","title":"Decentraland crossover"},{"location":"built-on-ethereum/games/cryptokitties/#resources","text":"Website Twitter CryptoKitties Guide Cryptokitties API KittyHelper Kitty.fyi KittyCalc KittyBounties Heaven.Cat CryptoKitties Analytics LocalKitty CryptoKitties Russian Guide KittyRace","title":"Resources"},{"location":"built-on-ethereum/games/etherbots/","text":"Etherbots Summary Etherbots is a robot battling game with rock-paper-scissors style battles that launched in March 2018. An Etherbot can be assembled from 4 parts, one body, melee, defense, and turrett. Battles are one-on-one asynchronous on-chain events. History Etherbots 2 While Gods Unchained is the main focus in the short term, an edition of Etherbots 2 is expected after a successful launch of GU. Gods Unchained crossover Gods Unchained is a trading card game also created by the Immutable team. The team showed another innovation on the blockchain by bringing the game assets from Etherbots into Gods Unchained to be limited edition cards for those players. Resources Website Etherbots Sales User & Parts Leaderboard (Google Docs) Immutable Website","title":"Etherbots"},{"location":"built-on-ethereum/games/etherbots/#etherbots","text":"","title":"Etherbots"},{"location":"built-on-ethereum/games/etherbots/#summary","text":"Etherbots is a robot battling game with rock-paper-scissors style battles that launched in March 2018. An Etherbot can be assembled from 4 parts, one body, melee, defense, and turrett. Battles are one-on-one asynchronous on-chain events.","title":"Summary"},{"location":"built-on-ethereum/games/etherbots/#history","text":"","title":"History"},{"location":"built-on-ethereum/games/etherbots/#etherbots-2","text":"While Gods Unchained is the main focus in the short term, an edition of Etherbots 2 is expected after a successful launch of GU.","title":"Etherbots 2"},{"location":"built-on-ethereum/games/etherbots/#gods-unchained-crossover","text":"Gods Unchained is a trading card game also created by the Immutable team. The team showed another innovation on the blockchain by bringing the game assets from Etherbots into Gods Unchained to be limited edition cards for those players.","title":"Gods Unchained crossover"},{"location":"built-on-ethereum/games/etherbots/#resources","text":"Website Etherbots Sales User & Parts Leaderboard (Google Docs) Immutable Website","title":"Resources"},{"location":"built-on-ethereum/games/etheremon/","text":"Etheremon Summary Etheremon is a role-playing game with training, battling, and transforming monsters. There are over 160 species in existence and the three starter monsters are free to \"catch\" in the official store. With the 17 different types of mosters each type is advantageous over exactly one other type. Ancestors, Transforming, and Eggs Ancestors are the related family required to transform any monsters. This includes up to three additional monsters that you'll need to catch and hang on to to trigger the transforming proress. Having ancestors present in the battle party increases the descendant's attack stats in battle. Monsters can have up to 3 forms and require a level minimum and ancestors present to transform. Some monsters can lay an egg create another monster, generally at a mid-30s level. Also some monsters lose the ability to lay an egg after transforming. Adventure Sites Part of the Etheremon adventure play is sending your monsters to Adventure Sites. These adventures cost a small entry fee, but a monster can find battle shards, level stones or even other monsters. The fee from the adventure cost is split among the 10 site owners. Currently the cost is 0.1 Ether or 15 EMONT. Battle Modes There are 2 types of battling: Ranked and Practice. Ranked mode battles include 3 one-on-one battles of attacking mosters, best 2 out of 3 wins. The 3 attacking monsters can be supported by 3 defending monsters. The supporting lineup is crucial to build strong teams. With wins trainers can increase their rank, while loses will decrease their rank. There are ranking competitions now and then where highest rank wins. Tournaments Tournaments consist of one-on-one battles against a pool of players where losing exits the competition for that tournament. There is a small entry fee and a prize pool for the top 4 contestants each tournament. World Mode World Mode is an imersive playing experience on desktop and mobile, currently in beta. It will likely relieve the previous adventure mode associated with adventures since adventures are included in world mode. History Kyber Network crossover In September 2018, Kyber Network partnered with Etheremon to increase access to liquidity and allow players to pay for adventure fees in any ERC-20 currency supported by Kyber. Etheremon also added Kybera for a limited release, which cannot lay eggs and has one transformation. Decentraland crossover Etheremon are accessible in Picture Frames as part of the Decentraland Scene builder. The partnership was announced in February of 2018 and are ready to go with Decentraland's expected launch in Summer 2019. Resources Website Blog Wiki","title":"Etheremon"},{"location":"built-on-ethereum/games/etheremon/#etheremon","text":"","title":"Etheremon"},{"location":"built-on-ethereum/games/etheremon/#summary","text":"Etheremon is a role-playing game with training, battling, and transforming monsters. There are over 160 species in existence and the three starter monsters are free to \"catch\" in the official store. With the 17 different types of mosters each type is advantageous over exactly one other type.","title":"Summary"},{"location":"built-on-ethereum/games/etheremon/#ancestors-transforming-and-eggs","text":"Ancestors are the related family required to transform any monsters. This includes up to three additional monsters that you'll need to catch and hang on to to trigger the transforming proress. Having ancestors present in the battle party increases the descendant's attack stats in battle. Monsters can have up to 3 forms and require a level minimum and ancestors present to transform. Some monsters can lay an egg create another monster, generally at a mid-30s level. Also some monsters lose the ability to lay an egg after transforming.","title":"Ancestors, Transforming, and Eggs"},{"location":"built-on-ethereum/games/etheremon/#adventure-sites","text":"Part of the Etheremon adventure play is sending your monsters to Adventure Sites. These adventures cost a small entry fee, but a monster can find battle shards, level stones or even other monsters. The fee from the adventure cost is split among the 10 site owners. Currently the cost is 0.1 Ether or 15 EMONT.","title":"Adventure Sites"},{"location":"built-on-ethereum/games/etheremon/#battle-modes","text":"There are 2 types of battling: Ranked and Practice. Ranked mode battles include 3 one-on-one battles of attacking mosters, best 2 out of 3 wins. The 3 attacking monsters can be supported by 3 defending monsters. The supporting lineup is crucial to build strong teams. With wins trainers can increase their rank, while loses will decrease their rank. There are ranking competitions now and then where highest rank wins.","title":"Battle Modes"},{"location":"built-on-ethereum/games/etheremon/#tournaments","text":"Tournaments consist of one-on-one battles against a pool of players where losing exits the competition for that tournament. There is a small entry fee and a prize pool for the top 4 contestants each tournament.","title":"Tournaments"},{"location":"built-on-ethereum/games/etheremon/#world-mode","text":"World Mode is an imersive playing experience on desktop and mobile, currently in beta. It will likely relieve the previous adventure mode associated with adventures since adventures are included in world mode.","title":"World Mode"},{"location":"built-on-ethereum/games/etheremon/#history","text":"","title":"History"},{"location":"built-on-ethereum/games/etheremon/#kyber-network-crossover","text":"In September 2018, Kyber Network partnered with Etheremon to increase access to liquidity and allow players to pay for adventure fees in any ERC-20 currency supported by Kyber. Etheremon also added Kybera for a limited release, which cannot lay eggs and has one transformation.","title":"Kyber Network crossover"},{"location":"built-on-ethereum/games/etheremon/#decentraland-crossover","text":"Etheremon are accessible in Picture Frames as part of the Decentraland Scene builder. The partnership was announced in February of 2018 and are ready to go with Decentraland's expected launch in Summer 2019.","title":"Decentraland crossover"},{"location":"built-on-ethereum/games/etheremon/#resources","text":"Website Blog Wiki","title":"Resources"},{"location":"built-on-ethereum/games/etheroll/","text":"Etheroll Summary Etheroll is an Ethereum smart contract for placing bets on our provably-fair dice game using Ether with no deposits or sign-ups. Each dice roll is provably random and cryptographically secure thanks to the nature of the Ethereum blockchain. History Etheroll's inital crowdsale was refunded after The DAO was hacked in June 2016. The sale raised 2,326 ETH in the five days it ran before the team decided it was best to trigger the refund. The team reached this decision in an effort to ensure the integity of their smart contracts. The crowdsale would continue as planned in March 2017. Important Links Website Refund press release","title":"Etheroll"},{"location":"built-on-ethereum/games/etheroll/#etheroll","text":"","title":"Etheroll"},{"location":"built-on-ethereum/games/etheroll/#summary","text":"Etheroll is an Ethereum smart contract for placing bets on our provably-fair dice game using Ether with no deposits or sign-ups. Each dice roll is provably random and cryptographically secure thanks to the nature of the Ethereum blockchain.","title":"Summary"},{"location":"built-on-ethereum/games/etheroll/#history","text":"Etheroll's inital crowdsale was refunded after The DAO was hacked in June 2016. The sale raised 2,326 ETH in the five days it ran before the team decided it was best to trigger the refund. The team reached this decision in an effort to ensure the integity of their smart contracts. The crowdsale would continue as planned in March 2017.","title":"History"},{"location":"built-on-ethereum/games/etheroll/#important-links","text":"Website Refund press release","title":"Important Links"},{"location":"built-on-ethereum/games/example-page/","text":"Hello my name is Kevin And I'm testing our mkdocs deploy","title":"Example page"},{"location":"built-on-ethereum/games/example-page/#hello-my-name-is-kevin","text":"And I'm testing our mkdocs deploy","title":"Hello my name is Kevin"},{"location":"built-on-ethereum/games/gods-unchained/","text":"Gods Unchained Summary Gods Unchained (GU) is a free-to-play digital trading card game built on Ethereum and created by the company Immutable. The game is free to download and you're immediately able to play with several pre-built decks. The more you play, the more cards you earn. Gods Unchained has many different sets of cards. Core: these are the cards you earn when you play through the game. Genesis: this was the first set of cards that were sold before the game launched. Genesis cards are no longer in production and Immutable have vowed never to make any more and never to change their abilities going into the future. If you want one for your deck there are several online marketplaces where you can purchase cards from other players. Season 1: these cards have yet to be released but are known and several beta testers have gotten the opportunity to try them out. Paid cards are verifiably scarce and have their stats and ownership history recorded on the Ethereum blockchain. Gods Unchained also features other collectibles that grant special cosmetic benefits and can be displayed in matches against other players. All Gods Unchained gameplay occurs off-chain and incurs no transaction fees. Activating and Trading Cards Play-to-Earn A big ethos supported by the game developers and the players is the idea that playing the game should earn you a sellable asset \u2013 allowing you to play and make money. This ethos can be seen in developers\u2019 thoughts around making genesis cards scarce and their novel attempts at limiting supply of the Core cards. While it remains to be seen whether or not an active \u201cprofessional\u201d scene will be possible, the developers have put a lot of time and thought in attempting to bring it to life. Marketplaces Since cards are actual tokens on the Ethereum blockchain, they can be traded in any format a token can be traded. Though, there are 3 active specialized marketplaces. The largest and most liquid is https://tokentrove.com/ . This is third-party owned and does some aggregating from other sources. While the prices are generally a bit worse, it is by far the most convenient place to trade. Lastly, a lot of bundles are sold directly on the OpenSea marketplace. FLUX - Activating cards on the blockchain Recently, Immutable has introduced the FLUX system. This is a system (all in-game) for turning an in-game asset into an actual token on Ethereum as not all in-game assets are automatically tokens. This is to prevent bots from earning a ridiculous number of tokens and ruining the market for everyone. FLUX is earned through normal play and the in-game 'forge' is used to send your tokens to your Ethereum-based wallet Game Mechanics Gods Unchained builds on the classic gameplay mechanics made famous by Magic the Gathering and Hearthstone. New to Gods Unchained is an innovate new mana system that forces players to begin engaging on turn 1. The game also supports a massive variety of possible matches by giving each player the choice of up to four special god powers at the start of each match. Since the game has six gods to play with and each god can use one of four powers . Additionally, Immutable has long been making additional warriors for each God. These warriors will be playable as well adding 5 additional personas to play each with their own powers. A recently added feature called Sanctum adds a new distinct element to the game which allows players to pull in a card not previously included in their deck directly into play. This is one of the most recent endeavors to increase the complexity and possible add a little more originality Comparison to MTG Overall, the game runs close enough to MTG. There are 2 big differences: 1 - Mana is standardized and increasing each turn. So you don\u2019t have to think about contrasting a deck with mana. This prevents frustration often felt in MTG with either mana flooding or getting mana screwed. But it also removes a large element of complexity associated with deck generation and means that large casting creatures/spells are relatively easy to play 2 - Players can only make plays (decisions) during their own turn. So, things alternate more cleanly. There are mostly the same types of decks to be created (aggro/control/combo). And while the game is still increasing in complexity, overall, it includes the same types of strategic fun. History Open Beta Gods Unchained is currently in open beta. Downloading the Apollo client and creating an account will get new players signed up and new beta players are being added daily. Etherbots crossover Etherbots , by the same studio Immutable, was originally launched in March 2018 and included battling completely on-chain. To promote interoperability Etherbots holders were rewarded with exclusive Gods Unchained cards for their early contributions. Etherbots 2 is expected after Gods Unchained is fully launched. CryptoKitties crossover On January 10th, 2019, a partnership between Gods Unchained and the kitty-breeding collectible game CryptoKitties was announced . Between Jan. 10th to Jan. 21st, 2019, CryptoKitty owners were able to forge statues in Gods Unchained, including a special Talisman based on a new fancy cat called Tally the Furrocious. 380 Special-Edition Gods Unchained Aeoncat Kitties were made available for purchase. Each Aeoncat granted its owner a chance to win the exclusive Hypurrion kitty, modelled after GU's Hyperion. Resources Website Twitter Discord Comprehensive Guide godsunchained.info - Game stats/Collection Browser gu.cards - Card Catalogue/Deck Building/Automated Pack Opening gudecks.com - Card Catalogue/Deck Building/Collectibles & Tournament Pass Marketplace Immutable Website","title":"Gods Unchained"},{"location":"built-on-ethereum/games/gods-unchained/#gods-unchained","text":"","title":"Gods Unchained"},{"location":"built-on-ethereum/games/gods-unchained/#summary","text":"Gods Unchained (GU) is a free-to-play digital trading card game built on Ethereum and created by the company Immutable. The game is free to download and you're immediately able to play with several pre-built decks. The more you play, the more cards you earn.","title":"Summary"},{"location":"built-on-ethereum/games/gods-unchained/#gods-unchained-has-many-different-sets-of-cards","text":"Core: these are the cards you earn when you play through the game. Genesis: this was the first set of cards that were sold before the game launched. Genesis cards are no longer in production and Immutable have vowed never to make any more and never to change their abilities going into the future. If you want one for your deck there are several online marketplaces where you can purchase cards from other players. Season 1: these cards have yet to be released but are known and several beta testers have gotten the opportunity to try them out. Paid cards are verifiably scarce and have their stats and ownership history recorded on the Ethereum blockchain. Gods Unchained also features other collectibles that grant special cosmetic benefits and can be displayed in matches against other players. All Gods Unchained gameplay occurs off-chain and incurs no transaction fees.","title":"Gods Unchained has many different sets of cards."},{"location":"built-on-ethereum/games/gods-unchained/#activating-and-trading-cards","text":"","title":"Activating and Trading Cards"},{"location":"built-on-ethereum/games/gods-unchained/#play-to-earn","text":"A big ethos supported by the game developers and the players is the idea that playing the game should earn you a sellable asset \u2013 allowing you to play and make money. This ethos can be seen in developers\u2019 thoughts around making genesis cards scarce and their novel attempts at limiting supply of the Core cards. While it remains to be seen whether or not an active \u201cprofessional\u201d scene will be possible, the developers have put a lot of time and thought in attempting to bring it to life.","title":"Play-to-Earn"},{"location":"built-on-ethereum/games/gods-unchained/#marketplaces","text":"Since cards are actual tokens on the Ethereum blockchain, they can be traded in any format a token can be traded. Though, there are 3 active specialized marketplaces. The largest and most liquid is https://tokentrove.com/ . This is third-party owned and does some aggregating from other sources. While the prices are generally a bit worse, it is by far the most convenient place to trade. Lastly, a lot of bundles are sold directly on the OpenSea marketplace.","title":"Marketplaces"},{"location":"built-on-ethereum/games/gods-unchained/#flux-activating-cards-on-the-blockchain","text":"Recently, Immutable has introduced the FLUX system. This is a system (all in-game) for turning an in-game asset into an actual token on Ethereum as not all in-game assets are automatically tokens. This is to prevent bots from earning a ridiculous number of tokens and ruining the market for everyone. FLUX is earned through normal play and the in-game 'forge' is used to send your tokens to your Ethereum-based wallet","title":"FLUX - Activating cards on the blockchain"},{"location":"built-on-ethereum/games/gods-unchained/#game-mechanics","text":"Gods Unchained builds on the classic gameplay mechanics made famous by Magic the Gathering and Hearthstone. New to Gods Unchained is an innovate new mana system that forces players to begin engaging on turn 1. The game also supports a massive variety of possible matches by giving each player the choice of up to four special god powers at the start of each match. Since the game has six gods to play with and each god can use one of four powers . Additionally, Immutable has long been making additional warriors for each God. These warriors will be playable as well adding 5 additional personas to play each with their own powers. A recently added feature called Sanctum adds a new distinct element to the game which allows players to pull in a card not previously included in their deck directly into play. This is one of the most recent endeavors to increase the complexity and possible add a little more originality","title":"Game Mechanics"},{"location":"built-on-ethereum/games/gods-unchained/#comparison-to-mtg","text":"Overall, the game runs close enough to MTG. There are 2 big differences: 1 - Mana is standardized and increasing each turn. So you don\u2019t have to think about contrasting a deck with mana. This prevents frustration often felt in MTG with either mana flooding or getting mana screwed. But it also removes a large element of complexity associated with deck generation and means that large casting creatures/spells are relatively easy to play 2 - Players can only make plays (decisions) during their own turn. So, things alternate more cleanly. There are mostly the same types of decks to be created (aggro/control/combo). And while the game is still increasing in complexity, overall, it includes the same types of strategic fun.","title":"Comparison to MTG"},{"location":"built-on-ethereum/games/gods-unchained/#history","text":"","title":"History"},{"location":"built-on-ethereum/games/gods-unchained/#open-beta","text":"Gods Unchained is currently in open beta. Downloading the Apollo client and creating an account will get new players signed up and new beta players are being added daily.","title":"Open Beta"},{"location":"built-on-ethereum/games/gods-unchained/#etherbots-crossover","text":"Etherbots , by the same studio Immutable, was originally launched in March 2018 and included battling completely on-chain. To promote interoperability Etherbots holders were rewarded with exclusive Gods Unchained cards for their early contributions. Etherbots 2 is expected after Gods Unchained is fully launched.","title":"Etherbots crossover"},{"location":"built-on-ethereum/games/gods-unchained/#cryptokitties-crossover","text":"On January 10th, 2019, a partnership between Gods Unchained and the kitty-breeding collectible game CryptoKitties was announced . Between Jan. 10th to Jan. 21st, 2019, CryptoKitty owners were able to forge statues in Gods Unchained, including a special Talisman based on a new fancy cat called Tally the Furrocious. 380 Special-Edition Gods Unchained Aeoncat Kitties were made available for purchase. Each Aeoncat granted its owner a chance to win the exclusive Hypurrion kitty, modelled after GU's Hyperion.","title":"CryptoKitties crossover"},{"location":"built-on-ethereum/games/gods-unchained/#resources","text":"Website Twitter Discord Comprehensive Guide godsunchained.info - Game stats/Collection Browser gu.cards - Card Catalogue/Deck Building/Automated Pack Opening gudecks.com - Card Catalogue/Deck Building/Collectibles & Tournament Pass Marketplace Immutable Website","title":"Resources"},{"location":"built-on-ethereum/games/mlb-champions/","text":"MLB Champions Summary MLB Champions is a blockchain-based baseball game that anyone can play using their very own crypto figures. This game takes MLB Fantasy to a whole new level. Every game of MLB Champions is tied to a live MLB game in real time. Your figures will earn stats based on how well they perform in each MLB game. The better your teams and players perform in a live MLB game, the more your figures will improve. MLB Champions is officially licensed with the MLB Players Association. Gameplay Users can assemble a team of 22 players for a complete game card and earn Caps based on players in-game statistics and special game events tied to each player. The 22 player count consists of 9 players on the field, 7 relief pitchers, and 6 bench players. There are a couple of in-game currencies for acquiring new players, Caps and Diamonds. Caps are earned and Diamonds are purchaseable. As live gameplay commences the system will automatically compensate for active players on the bench or any shuffling taking place on the field. Only one of each player can be active at any time, but several of the same player could be on the bench for inheritance points. The 5 game events for each card can be selected from any player's event and then the game events are tied to the player that might be most likely to complete that event. For team-based Game Events, the player selected only needs to complete a mimimum unit of the event to sucessfully complete the event. Seasons Each year begins with a draft of players for the coming season. When a season ends, no more players for that season can be minted. If a player retires or moves teams, the figures that have been minted during the season will be all that remain. These players are then available only on the marketplace and cannot be used as a part of the game card for the new team. Resources: Website 2019 Game Play Blog Post Inheritance Blog Post CryptoSlam","title":"MLB Champions"},{"location":"built-on-ethereum/games/mlb-champions/#mlb-champions","text":"","title":"MLB Champions"},{"location":"built-on-ethereum/games/mlb-champions/#summary","text":"MLB Champions is a blockchain-based baseball game that anyone can play using their very own crypto figures. This game takes MLB Fantasy to a whole new level. Every game of MLB Champions is tied to a live MLB game in real time. Your figures will earn stats based on how well they perform in each MLB game. The better your teams and players perform in a live MLB game, the more your figures will improve. MLB Champions is officially licensed with the MLB Players Association.","title":"Summary"},{"location":"built-on-ethereum/games/mlb-champions/#gameplay","text":"Users can assemble a team of 22 players for a complete game card and earn Caps based on players in-game statistics and special game events tied to each player. The 22 player count consists of 9 players on the field, 7 relief pitchers, and 6 bench players. There are a couple of in-game currencies for acquiring new players, Caps and Diamonds. Caps are earned and Diamonds are purchaseable. As live gameplay commences the system will automatically compensate for active players on the bench or any shuffling taking place on the field. Only one of each player can be active at any time, but several of the same player could be on the bench for inheritance points. The 5 game events for each card can be selected from any player's event and then the game events are tied to the player that might be most likely to complete that event. For team-based Game Events, the player selected only needs to complete a mimimum unit of the event to sucessfully complete the event.","title":"Gameplay"},{"location":"built-on-ethereum/games/mlb-champions/#seasons","text":"Each year begins with a draft of players for the coming season. When a season ends, no more players for that season can be minted. If a player retires or moves teams, the figures that have been minted during the season will be all that remain. These players are then available only on the marketplace and cannot be used as a part of the game card for the new team.","title":"Seasons"},{"location":"built-on-ethereum/games/mlb-champions/#resources","text":"Website 2019 Game Play Blog Post Inheritance Blog Post CryptoSlam","title":"Resources:"},{"location":"built-on-ethereum/games/mycryptoheroes/","text":"My Crypto Heroes Summary My Crypto Heroes is a turn-based role-playing game featuring historic heroes and battles. Players can collect new heroes and items through the in-game currency, GUM. Battles Battles are one-on-one with live turn-based moves and 3 heroes represoenting each team. Each hero has one move that can be used in battle. Quests Teams can accept quests to Normal nodes or Clan nodes which are being defended by teams of heroes. Land Clans are formed in the community to run and protect nodes of land. History Official Duel Cup The Quad Dragon Cup is coming to My Crypto Heroes in June 2019. The Red and Blue Dragon are reserved for MCH Prime members while the Baby Dragon and Dragon Egg are available for all players. Rewards are distributed to the top 15 - 40 players by rank an the end of the cup. It will consume stamina to enter the duel depending on the cup and the player's ranking. Decentraland crossover My Crypto Heroes are accessible in Picture Frames as part of the Decentraland Scene builder. They are ready to go with Decentraland's expected launch during the Summer 2019. Resources Website Blog - Medium Heroes Dictionary Beginner's guide Studio","title":"My Crypto Heroes"},{"location":"built-on-ethereum/games/mycryptoheroes/#my-crypto-heroes","text":"","title":"My Crypto Heroes"},{"location":"built-on-ethereum/games/mycryptoheroes/#summary","text":"My Crypto Heroes is a turn-based role-playing game featuring historic heroes and battles. Players can collect new heroes and items through the in-game currency, GUM.","title":"Summary"},{"location":"built-on-ethereum/games/mycryptoheroes/#battles","text":"Battles are one-on-one with live turn-based moves and 3 heroes represoenting each team. Each hero has one move that can be used in battle.","title":"Battles"},{"location":"built-on-ethereum/games/mycryptoheroes/#quests","text":"Teams can accept quests to Normal nodes or Clan nodes which are being defended by teams of heroes. Land Clans are formed in the community to run and protect nodes of land.","title":"Quests"},{"location":"built-on-ethereum/games/mycryptoheroes/#history","text":"","title":"History"},{"location":"built-on-ethereum/games/mycryptoheroes/#official-duel-cup","text":"The Quad Dragon Cup is coming to My Crypto Heroes in June 2019. The Red and Blue Dragon are reserved for MCH Prime members while the Baby Dragon and Dragon Egg are available for all players. Rewards are distributed to the top 15 - 40 players by rank an the end of the cup. It will consume stamina to enter the duel depending on the cup and the player's ranking.","title":"Official Duel Cup"},{"location":"built-on-ethereum/games/mycryptoheroes/#decentraland-crossover","text":"My Crypto Heroes are accessible in Picture Frames as part of the Decentraland Scene builder. They are ready to go with Decentraland's expected launch during the Summer 2019.","title":"Decentraland crossover"},{"location":"built-on-ethereum/games/mycryptoheroes/#resources","text":"Website Blog - Medium Heroes Dictionary Beginner's guide Studio","title":"Resources"},{"location":"built-on-ethereum/games/mythereum/","text":"Mythereum Summary Mythereum is a unique fantasy trading card game. Battles and initial card creation take place on a native sidechain and cards can be moved to the mainnet Ethereum chain with a minting transaction. Players can retrieve free Survival cards to begin playing. Battles Battles are one-on-one with decks of at least 7 and a starting hand of 5 cards. To start each user chooses a Leader. This is the first card laid and said to be in the \"first position\". All of the remaining cards in the players hand are support cards. Card Breakdown The Swords and Shield icons on the top of the cards show the cards attack and defense stats respectively. The three stones at the center bottom represent the Magick necessary to activate the Leader's Ability, the stones correspond with the current Magick values above the card. The swords and shields icons below the picture shows the attack and defense gains when the card's ability is active. Tournaments Tournaments can be created by host players. If there is an entry fee, that is collected by the host. When there is a prize pool it must be staked by the host. At the end of the tournament the winners can claim the staked prizes. History CryptoKitties crossover The Mythicats collaboration between Mythereum and CryptoKitties began in December 2018. Kitties can be forged into cards and used in Mythicats-specific tournaments, on Katurdays. Resources Website Battle Tutorial","title":"Mythereum"},{"location":"built-on-ethereum/games/mythereum/#mythereum","text":"","title":"Mythereum"},{"location":"built-on-ethereum/games/mythereum/#summary","text":"Mythereum is a unique fantasy trading card game. Battles and initial card creation take place on a native sidechain and cards can be moved to the mainnet Ethereum chain with a minting transaction. Players can retrieve free Survival cards to begin playing.","title":"Summary"},{"location":"built-on-ethereum/games/mythereum/#battles","text":"Battles are one-on-one with decks of at least 7 and a starting hand of 5 cards. To start each user chooses a Leader. This is the first card laid and said to be in the \"first position\". All of the remaining cards in the players hand are support cards.","title":"Battles"},{"location":"built-on-ethereum/games/mythereum/#card-breakdown","text":"The Swords and Shield icons on the top of the cards show the cards attack and defense stats respectively. The three stones at the center bottom represent the Magick necessary to activate the Leader's Ability, the stones correspond with the current Magick values above the card. The swords and shields icons below the picture shows the attack and defense gains when the card's ability is active.","title":"Card Breakdown"},{"location":"built-on-ethereum/games/mythereum/#tournaments","text":"Tournaments can be created by host players. If there is an entry fee, that is collected by the host. When there is a prize pool it must be staked by the host. At the end of the tournament the winners can claim the staked prizes.","title":"Tournaments"},{"location":"built-on-ethereum/games/mythereum/#history","text":"","title":"History"},{"location":"built-on-ethereum/games/mythereum/#cryptokitties-crossover","text":"The Mythicats collaboration between Mythereum and CryptoKitties began in December 2018. Kitties can be forged into cards and used in Mythicats-specific tournaments, on Katurdays.","title":"CryptoKitties crossover"},{"location":"built-on-ethereum/games/mythereum/#resources","text":"Website Battle Tutorial","title":"Resources"},{"location":"built-on-ethereum/games/relentless/","text":"Relentless previously Zombie Battleground Summary Relentless, formerly known as Zombie Battleground, is a Magic: The Gathering-style collectible card game that stores all of your game assets and data on its own dedicated Plasma DAppChain. Since the cards are stored on the Blockchain as non-fungible (ERC721) tokens, not only can a player prove that they own their cards \u2014 they can even sell or trade them with anyone for actual money. History Backer Alpha Relentless is currently in Alpha version available for backers on Android, iOS, Mac and Windows. The earliest Alpha build was released in August 2018. Kickstarter On June 14, 2018, the Zombie Battleground kickstarter was launched with an initial goal of $250,000 USD. It raised an amazing $165k in the first day, reached the full goal in 20 days, and ended up raising over $320,000 USD. Binance promotion Loom has partnered with the Binance exchange to accept BNB for new packs and created a collectors-edition of the cards for BNB users. Additionally, there is an exclusive \"Funds are SAFU\" card available. Tron promotion Loom partnered with the Tron users to accept TRX for new packs and created a collectors-edition of the cards for Tron users. Additionally, there is an exclusive \"Justin Sun\" card available. Resources: Website Introducing Zombie Battleground\u200a\u2014\u200aA Collectible Card Game that Runs on the Blockchain (blog post) Kickstarter - Zombie Battleground","title":"Relentless"},{"location":"built-on-ethereum/games/relentless/#relentless","text":"previously Zombie Battleground","title":"Relentless"},{"location":"built-on-ethereum/games/relentless/#summary","text":"Relentless, formerly known as Zombie Battleground, is a Magic: The Gathering-style collectible card game that stores all of your game assets and data on its own dedicated Plasma DAppChain. Since the cards are stored on the Blockchain as non-fungible (ERC721) tokens, not only can a player prove that they own their cards \u2014 they can even sell or trade them with anyone for actual money.","title":"Summary"},{"location":"built-on-ethereum/games/relentless/#history","text":"","title":"History"},{"location":"built-on-ethereum/games/relentless/#backer-alpha","text":"Relentless is currently in Alpha version available for backers on Android, iOS, Mac and Windows. The earliest Alpha build was released in August 2018.","title":"Backer Alpha"},{"location":"built-on-ethereum/games/relentless/#kickstarter","text":"On June 14, 2018, the Zombie Battleground kickstarter was launched with an initial goal of $250,000 USD. It raised an amazing $165k in the first day, reached the full goal in 20 days, and ended up raising over $320,000 USD.","title":"Kickstarter"},{"location":"built-on-ethereum/games/relentless/#binance-promotion","text":"Loom has partnered with the Binance exchange to accept BNB for new packs and created a collectors-edition of the cards for BNB users. Additionally, there is an exclusive \"Funds are SAFU\" card available.","title":"Binance promotion"},{"location":"built-on-ethereum/games/relentless/#tron-promotion","text":"Loom partnered with the Tron users to accept TRX for new packs and created a collectors-edition of the cards for Tron users. Additionally, there is an exclusive \"Justin Sun\" card available.","title":"Tron promotion"},{"location":"built-on-ethereum/games/relentless/#resources","text":"Website Introducing Zombie Battleground\u200a\u2014\u200aA Collectible Card Game that Runs on the Blockchain (blog post) Kickstarter - Zombie Battleground","title":"Resources:"},{"location":"built-on-ethereum/games/test2/","text":"kjfkzjbfaf","title":"Test2"},{"location":"built-on-ethereum/games/test2/#kjfkzjbfaf","text":"","title":"kjfkzjbfaf"},{"location":"built-on-ethereum/games/test3/","text":"[Template Begin] title: [Page Title] - EthHub [Leave a blank line] description: [Meta description (155 characters recommended) [Leave a blank line] Hello Summary [H2] A summary of what the page is about. Features [H2] Main features. Sub-feature 1 [H3] Content for sub-feature 1. Sub-feature 2 [H3] Content for sub-feature 2. Resources [H2] Relevant resources like website, github link, blog posts etc go here [Template End]","title":"[Template Begin]"},{"location":"built-on-ethereum/games/test3/#template-begin","text":"title: [Page Title] - EthHub [Leave a blank line] description: [Meta description (155 characters recommended) [Leave a blank line]","title":"[Template Begin]"},{"location":"built-on-ethereum/games/test3/#hello","text":"","title":"Hello"},{"location":"built-on-ethereum/games/test3/#summary-h2","text":"A summary of what the page is about.","title":"Summary [H2]"},{"location":"built-on-ethereum/games/test3/#features-h2","text":"Main features.","title":"Features [H2]"},{"location":"built-on-ethereum/games/test3/#sub-feature-1-h3","text":"Content for sub-feature 1.","title":"Sub-feature 1 [H3]"},{"location":"built-on-ethereum/games/test3/#sub-feature-2-h3","text":"Content for sub-feature 2.","title":"Sub-feature 2 [H3]"},{"location":"built-on-ethereum/games/test3/#resources-h2","text":"Relevant resources like website, github link, blog posts etc go here","title":"Resources [H2]"},{"location":"built-on-ethereum/games/test3/#template-end","text":"","title":"[Template End]"},{"location":"built-on-ethereum/games/what-is-blockchain-gaming/","text":"Games What is blockchain-based gaming? Blockchain games are any games that include blockchain technology in its backend or mechanics in general. The most often use for blockchain tech in games so far has been to store your items on the blockchain, tying them to your (Ethereum) wallet and making them permanently your own. In contrast to this, in \u201cclassic\u201d games, any items that you supposedly own in-game are in fact stored on the game publisher\u2019s servers, as is your whole account. There are many ways for you to lose possession of your assets in this case - server malfunction (failure or attack), stopped game development, banned account, etc. The first generation of blockchain games was solely based on this principle and they were focused on collecting unique assets and trading them, for fun, profit, or both. CryptoKitties was the game that started this trend and they\u2019re still quite popular. Nowadays, we see games where blockchain technology is used to store assets and confirm and store player\u2019s progress, but with an additional, more complex gameplay built around that. Resources Games Will Be the Catalyst for Blockchain Mass Adoption (blog post) Blockchain Gaming: Separating Signal from the Noise (blog post)","title":"What is Blockchain Gaming?"},{"location":"built-on-ethereum/games/what-is-blockchain-gaming/#games","text":"","title":"Games"},{"location":"built-on-ethereum/games/what-is-blockchain-gaming/#what-is-blockchain-based-gaming","text":"Blockchain games are any games that include blockchain technology in its backend or mechanics in general. The most often use for blockchain tech in games so far has been to store your items on the blockchain, tying them to your (Ethereum) wallet and making them permanently your own. In contrast to this, in \u201cclassic\u201d games, any items that you supposedly own in-game are in fact stored on the game publisher\u2019s servers, as is your whole account. There are many ways for you to lose possession of your assets in this case - server malfunction (failure or attack), stopped game development, banned account, etc. The first generation of blockchain games was solely based on this principle and they were focused on collecting unique assets and trading them, for fun, profit, or both. CryptoKitties was the game that started this trend and they\u2019re still quite popular. Nowadays, we see games where blockchain technology is used to store assets and confirm and store player\u2019s progress, but with an additional, more complex gameplay built around that.","title":"What is blockchain-based gaming?"},{"location":"built-on-ethereum/games/what-is-blockchain-gaming/#resources","text":"Games Will Be the Catalyst for Blockchain Mass Adoption (blog post) Blockchain Gaming: Separating Signal from the Noise (blog post)","title":"Resources"},{"location":"built-on-ethereum/games/world-war-goo/","text":"World War Goo Summary World War Goo, an ancestor of the original EtherGoo, is a fantasy idle game where players earn resources, cultivate land and battle armies. Players can band together in clans and receive shared rewards, upgrades and potential loot. As players develop their land, kitty scientists can research new technologies allowing for more advanced features to be built on the land producing higher amounts of Goo. History EtherGoo EtherGoo was a fairly early entrant into the blockcahin gaming space in March of 2018 and featured some complex operations built into its idle gameplay. Resources Website Bitcoin Talk thread","title":"World War Goo"},{"location":"built-on-ethereum/games/world-war-goo/#world-war-goo","text":"","title":"World War Goo"},{"location":"built-on-ethereum/games/world-war-goo/#summary","text":"World War Goo, an ancestor of the original EtherGoo, is a fantasy idle game where players earn resources, cultivate land and battle armies. Players can band together in clans and receive shared rewards, upgrades and potential loot. As players develop their land, kitty scientists can research new technologies allowing for more advanced features to be built on the land producing higher amounts of Goo.","title":"Summary"},{"location":"built-on-ethereum/games/world-war-goo/#history","text":"","title":"History"},{"location":"built-on-ethereum/games/world-war-goo/#ethergoo","text":"EtherGoo was a fairly early entrant into the blockcahin gaming space in March of 2018 and featured some complex operations built into its idle gameplay.","title":"EtherGoo"},{"location":"built-on-ethereum/games/world-war-goo/#resources","text":"Website Bitcoin Talk thread","title":"Resources"},{"location":"built-on-ethereum/governance/aragon/","text":"Aragon Create and manage DAOs. What is Aragon? Aragon is a project that aims to disintermediate the creation and maintenance of organizational structures by using blockchain technology. The project aims to empower people across the world to easily and securely manage their organizations. Aragon provides the tools for anyone to become an entrepreneur and run their own organization, to take control of their own lives. By making it possible for everyone in the world to organize, Aragon enables a borderless, permissionless and more efficient creation of value. Aragon organizations are powered by Ethereum, a global blockchain for running unstoppable applications. In Ethereum, code and applications always run without any possibility of downtime or censorship. The Aragon Network will be the first community governed decentralized organization whose goal is to act as a digital jurisdiction, an online decentralized court system that isn\u2019t bound by traditional artificial barriers such as national jurisdictions or the borders of a single country. The Aragon Network Token, ANT, puts the power into the hands of the people participating in the operation of the Network. Every single aspect of the Network will be governed by those willing to make an effort for a better future. How it works Aragon is most powerful and modular way to build and run DAOs. Use aragonOS, AragonJS and AragonUI. Used by District0x Request Network Spice VC Swarm Fund Auctus Democracy Earth Shasta Althea Resources Website Github App","title":"Aragon"},{"location":"built-on-ethereum/governance/aragon/#aragon","text":"Create and manage DAOs.","title":"Aragon"},{"location":"built-on-ethereum/governance/aragon/#what-is-aragon","text":"Aragon is a project that aims to disintermediate the creation and maintenance of organizational structures by using blockchain technology. The project aims to empower people across the world to easily and securely manage their organizations. Aragon provides the tools for anyone to become an entrepreneur and run their own organization, to take control of their own lives. By making it possible for everyone in the world to organize, Aragon enables a borderless, permissionless and more efficient creation of value. Aragon organizations are powered by Ethereum, a global blockchain for running unstoppable applications. In Ethereum, code and applications always run without any possibility of downtime or censorship. The Aragon Network will be the first community governed decentralized organization whose goal is to act as a digital jurisdiction, an online decentralized court system that isn\u2019t bound by traditional artificial barriers such as national jurisdictions or the borders of a single country. The Aragon Network Token, ANT, puts the power into the hands of the people participating in the operation of the Network. Every single aspect of the Network will be governed by those willing to make an effort for a better future.","title":"What is Aragon?"},{"location":"built-on-ethereum/governance/aragon/#how-it-works","text":"Aragon is most powerful and modular way to build and run DAOs. Use aragonOS, AragonJS and AragonUI.","title":"How it works"},{"location":"built-on-ethereum/governance/aragon/#used-by","text":"District0x Request Network Spice VC Swarm Fund Auctus Democracy Earth Shasta Althea","title":"Used by"},{"location":"built-on-ethereum/governance/aragon/#resources","text":"Website Github App","title":"Resources"},{"location":"built-on-ethereum/governance/colony/","text":"Colony What is Colony? Colony is infrastructure for the future of work: self-organizing companies that run via software, not paperwork. It could be a community project, a company, or a non-profit \u2014 your imagination is the only limit. How does it work? Every colony has its own token. You earn tokens by doing work. The more tokens you hold, the more of the colony you own. Tokens let you stake your ownership on your good judgement when proposing tasks, or claiming someone should be paid. Resources Website Github","title":"Colony"},{"location":"built-on-ethereum/governance/colony/#colony","text":"","title":"Colony"},{"location":"built-on-ethereum/governance/colony/#what-is-colony","text":"Colony is infrastructure for the future of work: self-organizing companies that run via software, not paperwork. It could be a community project, a company, or a non-profit \u2014 your imagination is the only limit.","title":"What is Colony?"},{"location":"built-on-ethereum/governance/colony/#how-does-it-work","text":"Every colony has its own token. You earn tokens by doing work. The more tokens you hold, the more of the colony you own. Tokens let you stake your ownership on your good judgement when proposing tasks, or claiming someone should be paid.","title":"How does it work?"},{"location":"built-on-ethereum/governance/colony/#resources","text":"Website Github","title":"Resources"},{"location":"built-on-ethereum/governance/democracy-earth/","text":"Democracy Earth A borderless peer to peer democracy. For everyone, anywhere. Summary Democracy Earth is building a sovereign, open source and decentralized democratic governance protocol for any kind of organization. Resources Website Github App","title":"Democracy Earth"},{"location":"built-on-ethereum/governance/democracy-earth/#democracy-earth","text":"A borderless peer to peer democracy. For everyone, anywhere.","title":"Democracy Earth"},{"location":"built-on-ethereum/governance/democracy-earth/#summary","text":"Democracy Earth is building a sovereign, open source and decentralized democratic governance protocol for any kind of organization.","title":"Summary"},{"location":"built-on-ethereum/governance/democracy-earth/#resources","text":"Website Github App","title":"Resources"},{"location":"built-on-ethereum/governance/govblocks/","text":"GovBlocks What is GovBlocks? GovBlocks is an open, permissionless decision protocol that empowers dApps to define and operate any governance model at scale. How does it work? GovBlocks make use of smart contracts to deploy modular governance for your DAO, enterprise, communities or any off-chain business. Configure stakeholders, workflows, voting layers, rewards, quorum levels - virtually all components of your governance model to suit the evolving needs. All the web browser. Resources Website Github App","title":"Govblocks"},{"location":"built-on-ethereum/governance/govblocks/#govblocks","text":"","title":"GovBlocks"},{"location":"built-on-ethereum/governance/govblocks/#what-is-govblocks","text":"GovBlocks is an open, permissionless decision protocol that empowers dApps to define and operate any governance model at scale.","title":"What is GovBlocks?"},{"location":"built-on-ethereum/governance/govblocks/#how-does-it-work","text":"GovBlocks make use of smart contracts to deploy modular governance for your DAO, enterprise, communities or any off-chain business. Configure stakeholders, workflows, voting layers, rewards, quorum levels - virtually all components of your governance model to suit the evolving needs. All the web browser.","title":"How does it work?"},{"location":"built-on-ethereum/governance/govblocks/#resources","text":"Website Github App","title":"Resources"},{"location":"built-on-ethereum/identity/ERC-EIP/","text":"ERC-EIP There are a number of identity related Ethereum standards under development, in addition to ERC725 and 735 , : ERC: Lightweight Identity #1056 \u2014This ERC describes a standard for creating and updating identities with a limited use of blockchain resources. An identity can have an unlimited number of delegates and attributes associated with it. Identity creation is as simple as creating a regular key pair ethereum account, which means that it's fee (no gas costs) and all ethereum accounts are valid identities. Furthermore this ERC is fully DID compliant. ERC1056 \u2764 ERC780\u200a\u2014\u200aan open identity and claims protocol for Ethereum EIP-780 Ethereum Claims Registry EIP712 - This is a standard for hashing and signing of typed structured data ERC-1484 Digital Identity Aggregator \u2014A protocol for aggregating digital identity information that's broadly interoperable with existing, proposed, and hypothetical future digital identity standards. EIP-1078 - This presents a method to replace the usual signup/login design pattern with a minimal ethereum native scheme, that doesn\u2019t require passwords, backing up private keys nor typing seed phrases. ERC-1077 and ERC-1078: The magic of executable signed messages","title":"Identity Standards"},{"location":"built-on-ethereum/identity/ERC-EIP/#erc-eip","text":"There are a number of identity related Ethereum standards under development, in addition to ERC725 and 735 , : ERC: Lightweight Identity #1056 \u2014This ERC describes a standard for creating and updating identities with a limited use of blockchain resources. An identity can have an unlimited number of delegates and attributes associated with it. Identity creation is as simple as creating a regular key pair ethereum account, which means that it's fee (no gas costs) and all ethereum accounts are valid identities. Furthermore this ERC is fully DID compliant. ERC1056 \u2764 ERC780\u200a\u2014\u200aan open identity and claims protocol for Ethereum EIP-780 Ethereum Claims Registry EIP712 - This is a standard for hashing and signing of typed structured data ERC-1484 Digital Identity Aggregator \u2014A protocol for aggregating digital identity information that's broadly interoperable with existing, proposed, and hypothetical future digital identity standards. EIP-1078 - This presents a method to replace the usual signup/login design pattern with a minimal ethereum native scheme, that doesn\u2019t require passwords, backing up private keys nor typing seed phrases. ERC-1077 and ERC-1078: The magic of executable signed messages","title":"ERC-EIP"},{"location":"built-on-ethereum/identity/ERC725/","text":"ERC-725 - Ethereum Identity Standard What is ERC 725? ERC 725 is a proposed standard for blockchain-based identity authored by Fabian Vogelsteller, creator of ERC 20 and Web3.js. ERC 725 describes proxy smart contracts that can be controlled by multiple keys and other smart contracts. ERC 735 is an associated standard to add and remove claims to an ERC 725 identity smart contract. These identity smart contracts can describe humans, groups, objects, and machines. ERC 725 lives on the Ethereum blockchain. Why ERC 725? ERC 725 allows for self-sovereign identity. Users should be able to own and manage their identity instead of ceding ownership of identity to centralized organizations. We have seen the negative effects of having centralized identity with damaging leaks and unfair selling of user data and identity. An open, portable standard for identities will enable decentralized reputation, governance, and more. Users will be able to take their identity across different Dapps and platforms that support this standard. Resources Website Github ERC725 ERC735","title":"ERC725"},{"location":"built-on-ethereum/identity/ERC725/#erc-725-ethereum-identity-standard","text":"","title":"ERC-725 - Ethereum Identity Standard"},{"location":"built-on-ethereum/identity/ERC725/#what-is-erc-725","text":"ERC 725 is a proposed standard for blockchain-based identity authored by Fabian Vogelsteller, creator of ERC 20 and Web3.js. ERC 725 describes proxy smart contracts that can be controlled by multiple keys and other smart contracts. ERC 735 is an associated standard to add and remove claims to an ERC 725 identity smart contract. These identity smart contracts can describe humans, groups, objects, and machines. ERC 725 lives on the Ethereum blockchain.","title":"What is ERC 725?"},{"location":"built-on-ethereum/identity/ERC725/#why-erc-725","text":"ERC 725 allows for self-sovereign identity. Users should be able to own and manage their identity instead of ceding ownership of identity to centralized organizations. We have seen the negative effects of having centralized identity with damaging leaks and unfair selling of user data and identity. An open, portable standard for identities will enable decentralized reputation, governance, and more. Users will be able to take their identity across different Dapps and platforms that support this standard.","title":"Why ERC 725?"},{"location":"built-on-ethereum/identity/ERC725/#resources","text":"Website Github ERC725 ERC735","title":"Resources"},{"location":"built-on-ethereum/identity/bloom/","text":"Bloom Summary Bloom is a set of products designed to facilitate lending and borrowing on a global scale. Credit products are unavailable for many people, and those who have access to it have their credit data siloed, which makes it less useful. The idea behind Bloom is to make credit data global and interoperable, and loans \u2014 available to everyone. Not only users can share their reputation across countries and banks, but they can also share their creditworthiness with peers. The protocol consists of three components: ID, IQ, and Score. BloomID is an identity attestation protocol. BloomIQ is a registry of given loans. BloomScore is a credit scoring system. Resources Website","title":"Bloom"},{"location":"built-on-ethereum/identity/bloom/#bloom","text":"","title":"Bloom"},{"location":"built-on-ethereum/identity/bloom/#summary","text":"Bloom is a set of products designed to facilitate lending and borrowing on a global scale. Credit products are unavailable for many people, and those who have access to it have their credit data siloed, which makes it less useful. The idea behind Bloom is to make credit data global and interoperable, and loans \u2014 available to everyone. Not only users can share their reputation across countries and banks, but they can also share their creditworthiness with peers. The protocol consists of three components: ID, IQ, and Score. BloomID is an identity attestation protocol. BloomIQ is a registry of given loans. BloomScore is a credit scoring system.","title":"Summary"},{"location":"built-on-ethereum/identity/bloom/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/identity/civic/","text":"Civic Civic allows people to control the use of their identity information. Civic uses blockchain identity verification technology to secure and protect personal information transfer. Products Secure Identity Platform Civic\u2019s Secure Identity Platform (SIP) uses a verified identity for multi-factor authentication on web and mobile apps without the need for usernames or passwords. Civic Reusable KYC Add blockchain-enabled KYC to businesses and services that require user identification. Decentralized, reusable KYC improves security, on-boarding and every day use. Resources Website","title":"Civic"},{"location":"built-on-ethereum/identity/civic/#civic","text":"Civic allows people to control the use of their identity information. Civic uses blockchain identity verification technology to secure and protect personal information transfer.","title":"Civic"},{"location":"built-on-ethereum/identity/civic/#products","text":"","title":"Products"},{"location":"built-on-ethereum/identity/civic/#secure-identity-platform","text":"Civic\u2019s Secure Identity Platform (SIP) uses a verified identity for multi-factor authentication on web and mobile apps without the need for usernames or passwords.","title":"Secure Identity Platform"},{"location":"built-on-ethereum/identity/civic/#civic-reusable-kyc","text":"Add blockchain-enabled KYC to businesses and services that require user identification. Decentralized, reusable KYC improves security, on-boarding and every day use.","title":"Civic Reusable KYC"},{"location":"built-on-ethereum/identity/civic/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/identity/identity-on-ethereum/","text":"Identity Summary The Ethereum network hosts many DApps that are building identity systems. These DApps leverage the secure and decentralized nature of the Ethereum network often in collaboration with decentralized storage protocols such as IPFS or SWARM to enable empower and protect consumers' information. Citizens will be able to confidentionally reveal personal information such as Gov. ID, credit score, medical history, banking information, etc. to others in a way that also allows them to revoke future access to such information. Potential use by Governments Similar to uPort's identity trials in Zug, Switzerland. We may see a day where soverign countries rely on the Ethereum mainnet to support their own private or public digital identification protocols. Resources The Impact of Digital Identity","title":"Identity on Ethereum"},{"location":"built-on-ethereum/identity/identity-on-ethereum/#identity","text":"","title":"Identity"},{"location":"built-on-ethereum/identity/identity-on-ethereum/#summary","text":"The Ethereum network hosts many DApps that are building identity systems. These DApps leverage the secure and decentralized nature of the Ethereum network often in collaboration with decentralized storage protocols such as IPFS or SWARM to enable empower and protect consumers' information. Citizens will be able to confidentionally reveal personal information such as Gov. ID, credit score, medical history, banking information, etc. to others in a way that also allows them to revoke future access to such information.","title":"Summary"},{"location":"built-on-ethereum/identity/identity-on-ethereum/#potential-use-by-governments","text":"Similar to uPort's identity trials in Zug, Switzerland. We may see a day where soverign countries rely on the Ethereum mainnet to support their own private or public digital identification protocols.","title":"Potential use by Governments"},{"location":"built-on-ethereum/identity/identity-on-ethereum/#resources","text":"The Impact of Digital Identity","title":"Resources"},{"location":"built-on-ethereum/identity/jolocom/","text":"Jolocom Summary The Jolocom identity solution aims to be a universal, lightweight, open source protocol for decentralized digital identity and access right management. The protocol is built on to leading open source standards standards and relies on distributed / decentralized systems such as Ethereum and IPFS for identity registration and resolution. Resources Website Github Docs","title":"Jolocom"},{"location":"built-on-ethereum/identity/jolocom/#jolocom","text":"","title":"Jolocom"},{"location":"built-on-ethereum/identity/jolocom/#summary","text":"The Jolocom identity solution aims to be a universal, lightweight, open source protocol for decentralized digital identity and access right management. The protocol is built on to leading open source standards standards and relies on distributed / decentralized systems such as Ethereum and IPFS for identity registration and resolution.","title":"Summary"},{"location":"built-on-ethereum/identity/jolocom/#resources","text":"Website Github Docs","title":"Resources"},{"location":"built-on-ethereum/identity/selfkey/","text":"Selfkey Summary SelfKey is a blockchain based self-sovereign identity system that allows individuals and companies to truly own, control and manage their digital identity, securely manage their cryptocurrency portfolio and instantly onboard onto financial, immigration and cryptocurrency services. Resources Website","title":"Selfkey"},{"location":"built-on-ethereum/identity/selfkey/#selfkey","text":"","title":"Selfkey"},{"location":"built-on-ethereum/identity/selfkey/#summary","text":"SelfKey is a blockchain based self-sovereign identity system that allows individuals and companies to truly own, control and manage their digital identity, securely manage their cryptocurrency portfolio and instantly onboard onto financial, immigration and cryptocurrency services.","title":"Summary"},{"location":"built-on-ethereum/identity/selfkey/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/identity/uport/","text":"uPort Open Identity System for the Decentralized Web uPort returns ownership of identity to the individual. uPort's open identity system allows users to register their own identity on Ethereum, send and request credentials, sign transactions, and securely manage keys & data. Protocols uPort consists of identity and messaging protocols that together form an interoperable identity layer for the decentralized web. Credentials uPort is building a shared identity web of trust. Your app can request access to the set of credentials a user has collected from the network. Users can always choose what to share. Products & Tools uPort is modular open-source components, developer tools, and mobile clients help you connect with your users. uPort help make it simple to build on Ethereum. Resources Website Github","title":"uPort"},{"location":"built-on-ethereum/identity/uport/#uport","text":"","title":"uPort"},{"location":"built-on-ethereum/identity/uport/#open-identity-system-for-the-decentralized-web","text":"uPort returns ownership of identity to the individual. uPort's open identity system allows users to register their own identity on Ethereum, send and request credentials, sign transactions, and securely manage keys & data.","title":"Open Identity System for the Decentralized Web"},{"location":"built-on-ethereum/identity/uport/#protocols","text":"uPort consists of identity and messaging protocols that together form an interoperable identity layer for the decentralized web.","title":"Protocols"},{"location":"built-on-ethereum/identity/uport/#credentials","text":"uPort is building a shared identity web of trust. Your app can request access to the set of credentials a user has collected from the network. Users can always choose what to share.","title":"Credentials"},{"location":"built-on-ethereum/identity/uport/#products-tools","text":"uPort is modular open-source components, developer tools, and mobile clients help you connect with your users. uPort help make it simple to build on Ethereum.","title":"Products &amp; Tools"},{"location":"built-on-ethereum/identity/uport/#resources","text":"Website Github","title":"Resources"},{"location":"built-on-ethereum/infrastructure/0xcert/","text":"0xcert Description 0xcert is a protocol for attesting and validating issuers of non-fungible tokens. There are many different protocols, applications, and companies trying to bring real-world assets and certifications to the blockchain. Yet, there is no clear consensus on how to validate the legitimacy of the minted tokens. For example, there\u2019s no way to ensure that the issuer has a right to mint identity tokens on Ethereum. As public blockchains are permissionless, anyone can create such tokens, yet only tokens created by a legit identity provider will be valuable. 0xcert creates a standard for certified non-fungible tokens, Xcerts. Developers can interact with this standard via an SDK and high-level APIs. Additionally, 0xcert is going to create a decentralized registry of authentic issuers. Important links Website: https://0xcert.org Github: https://github.com/0xcert Whitepaper: https://0xcert.org/whitepaper.pdf","title":"0xcert"},{"location":"built-on-ethereum/infrastructure/0xcert/#0xcert","text":"","title":"0xcert"},{"location":"built-on-ethereum/infrastructure/0xcert/#description","text":"0xcert is a protocol for attesting and validating issuers of non-fungible tokens. There are many different protocols, applications, and companies trying to bring real-world assets and certifications to the blockchain. Yet, there is no clear consensus on how to validate the legitimacy of the minted tokens. For example, there\u2019s no way to ensure that the issuer has a right to mint identity tokens on Ethereum. As public blockchains are permissionless, anyone can create such tokens, yet only tokens created by a legit identity provider will be valuable. 0xcert creates a standard for certified non-fungible tokens, Xcerts. Developers can interact with this standard via an SDK and high-level APIs. Additionally, 0xcert is going to create a decentralized registry of authentic issuers.","title":"Description"},{"location":"built-on-ethereum/infrastructure/0xcert/#important-links","text":"Website: https://0xcert.org Github: https://github.com/0xcert Whitepaper: https://0xcert.org/whitepaper.pdf","title":"Important links"},{"location":"built-on-ethereum/infrastructure/aztec-protocol/","text":"Aztec Protocol The AZTEC protocol is a second-layer solutions that uses zero-knowledge proofs and confidential transactions to enable confidential transactions for any generic digital asset on Ethereum, including existing assets. The AZTEC protocol supports a stealth address protocol that can be used to obfuscate the link between a note 'owner' and any on-chain identity. The first contract built for the Aztec Protocol is for MakerDao's DAI token. Important Links Website: https://www.aztecprotocol.com Github: https://github.com/AztecProtocol Whitepaper: https://github.com/AztecProtocol/AZTEC/blob/master/AZTEC.pdf Aztec DAI contract: https://etherscan.io/address/0x6c8b12c650594a9fdb0b1f52084bbd0d9010aa09","title":"Aztec Protocol"},{"location":"built-on-ethereum/infrastructure/aztec-protocol/#aztec-protocol","text":"The AZTEC protocol is a second-layer solutions that uses zero-knowledge proofs and confidential transactions to enable confidential transactions for any generic digital asset on Ethereum, including existing assets. The AZTEC protocol supports a stealth address protocol that can be used to obfuscate the link between a note 'owner' and any on-chain identity. The first contract built for the Aztec Protocol is for MakerDao's DAI token.","title":"Aztec Protocol"},{"location":"built-on-ethereum/infrastructure/aztec-protocol/#important-links","text":"Website: https://www.aztecprotocol.com Github: https://github.com/AztecProtocol Whitepaper: https://github.com/AztecProtocol/AZTEC/blob/master/AZTEC.pdf Aztec DAI contract: https://etherscan.io/address/0x6c8b12c650594a9fdb0b1f52084bbd0d9010aa09","title":"Important Links"},{"location":"built-on-ethereum/infrastructure/bountiesnetwork/","text":"Bounties Network Description Bounties Network is a general-purpose bounty protocol. Bounty creators can incentivize work by offering ether or tokens in exchange for getting a task completed. The funds are locked into escrow and released to the worker on successful submission. Other projects can use the protocol to build marketplaces for specific kind of tasks. For example, Gitcoin uses Bounties Network to incentivize open source contributions. Important links Website: https://bounties.network Github: https://github.com/Bounties-Network","title":"Bounties Network"},{"location":"built-on-ethereum/infrastructure/bountiesnetwork/#bounties-network","text":"","title":"Bounties Network"},{"location":"built-on-ethereum/infrastructure/bountiesnetwork/#description","text":"Bounties Network is a general-purpose bounty protocol. Bounty creators can incentivize work by offering ether or tokens in exchange for getting a task completed. The funds are locked into escrow and released to the worker on successful submission. Other projects can use the protocol to build marketplaces for specific kind of tasks. For example, Gitcoin uses Bounties Network to incentivize open source contributions.","title":"Description"},{"location":"built-on-ethereum/infrastructure/bountiesnetwork/#important-links","text":"Website: https://bounties.network Github: https://github.com/Bounties-Network","title":"Important links"},{"location":"built-on-ethereum/infrastructure/chainstack/","text":"Chainstack Description Chainstack is a managed blockchain services provider that makes it simple to launch and scale decentralized networks and applications\u2014complete with an intuitive user interface, seamless orchestration, and predictable pricing. Chainstack offers free shared Ethereum nodes. Important links Website: https://chainstack.com/ Documentation: https://docs.chainstack.com/","title":"Chainstack"},{"location":"built-on-ethereum/infrastructure/chainstack/#chainstack","text":"","title":"Chainstack"},{"location":"built-on-ethereum/infrastructure/chainstack/#description","text":"Chainstack is a managed blockchain services provider that makes it simple to launch and scale decentralized networks and applications\u2014complete with an intuitive user interface, seamless orchestration, and predictable pricing. Chainstack offers free shared Ethereum nodes.","title":"Description"},{"location":"built-on-ethereum/infrastructure/chainstack/#important-links","text":"Website: https://chainstack.com/ Documentation: https://docs.chainstack.com/","title":"Important links"},{"location":"built-on-ethereum/infrastructure/dfuse/","text":"dfuse Description dfuse, the blockchain API company, helps developers build performant applications by organizing the world's decentralized data. dfuse is a platform to empower dapp developers with capabilities to build modern blockchain applications with fast, fluid interfaces that deliver exceptional user experiences. Powered by a low-latency architecture, its robust APIs make it possible to stream real-time state updates, conduct lightning-fast searches and provide transaction guarantees all for the first time, using simple API calls. There are 4 main pillars that dfuse has brought to the ecosystem: * dfuse Search \u2013 Easily search a constantly expanding set of decentralized databases, with lightning fast speeds (the whole chain in under a second). It is consensus and reorgs-aware, offers ultra granular search terms, provides real-time queries as well as full history. * dfuse State DB \u2013 Block-by-block snapshot of all tables and state, forever. Provides consistent snapshots of large yet fast changing tables (even with millions of rows). * dfuse Lifecycle \u2013 Understand the progress of a transaction as it moves through its many lifecycle stages. Provides new UX opportunities, and stronger guarantees for applications to take action. * dfuse On Demand Networks \u2013 Access custom networks spun up for your use for either stealth development, short-lived testing, or full production grade permissioned/public blockchain networks. Resources Website Twitter GitHub Blog Documentation Telegram","title":"dfuse"},{"location":"built-on-ethereum/infrastructure/dfuse/#dfuse","text":"","title":"dfuse"},{"location":"built-on-ethereum/infrastructure/dfuse/#description","text":"dfuse, the blockchain API company, helps developers build performant applications by organizing the world's decentralized data. dfuse is a platform to empower dapp developers with capabilities to build modern blockchain applications with fast, fluid interfaces that deliver exceptional user experiences. Powered by a low-latency architecture, its robust APIs make it possible to stream real-time state updates, conduct lightning-fast searches and provide transaction guarantees all for the first time, using simple API calls. There are 4 main pillars that dfuse has brought to the ecosystem: * dfuse Search \u2013 Easily search a constantly expanding set of decentralized databases, with lightning fast speeds (the whole chain in under a second). It is consensus and reorgs-aware, offers ultra granular search terms, provides real-time queries as well as full history. * dfuse State DB \u2013 Block-by-block snapshot of all tables and state, forever. Provides consistent snapshots of large yet fast changing tables (even with millions of rows). * dfuse Lifecycle \u2013 Understand the progress of a transaction as it moves through its many lifecycle stages. Provides new UX opportunities, and stronger guarantees for applications to take action. * dfuse On Demand Networks \u2013 Access custom networks spun up for your use for either stealth development, short-lived testing, or full production grade permissioned/public blockchain networks.","title":"Description"},{"location":"built-on-ethereum/infrastructure/dfuse/#resources","text":"Website Twitter GitHub Blog Documentation Telegram","title":"Resources"},{"location":"built-on-ethereum/infrastructure/ethereum-alarm-clock/","text":"Ethereum Alarm Clock Description Ethereum Alarm Clock (EAC) is a protocol for scheduled Ethereum transactions. The protocol defines financial incentives for miners to include a transaction at a specified time. A user that wants to create a transaction which needs to be executed in the future can use EAC. To do so, he needs to specify a receiver (whether it\u2019s an account or contract) as well as call data. He also needs to specify at which time the transaction should be executed by defining the start time and window size. Finally, a user needs to specify how big a miner reward will be. The execution of the transaction is not guaranteed due to possible network congestion, but setting a higher gas price and longer time window increases the chances of successful execution. All EAC transactions are processed by TimeNode miners. These miners set up clients to track the transactions and execute them in a specified time. By doing so, they are eligible to claim a reward set up by the sender. Important links Website: https://www.ethereum-alarm-clock.com Github: https://github.com/ethereum-alarm-clock ChronoLogic: https://chronologic.network","title":"Ethereum Alarm Clock"},{"location":"built-on-ethereum/infrastructure/ethereum-alarm-clock/#ethereum-alarm-clock","text":"","title":"Ethereum Alarm Clock"},{"location":"built-on-ethereum/infrastructure/ethereum-alarm-clock/#description","text":"Ethereum Alarm Clock (EAC) is a protocol for scheduled Ethereum transactions. The protocol defines financial incentives for miners to include a transaction at a specified time. A user that wants to create a transaction which needs to be executed in the future can use EAC. To do so, he needs to specify a receiver (whether it\u2019s an account or contract) as well as call data. He also needs to specify at which time the transaction should be executed by defining the start time and window size. Finally, a user needs to specify how big a miner reward will be. The execution of the transaction is not guaranteed due to possible network congestion, but setting a higher gas price and longer time window increases the chances of successful execution. All EAC transactions are processed by TimeNode miners. These miners set up clients to track the transactions and execute them in a specified time. By doing so, they are eligible to claim a reward set up by the sender.","title":"Description"},{"location":"built-on-ethereum/infrastructure/ethereum-alarm-clock/#important-links","text":"Website: https://www.ethereum-alarm-clock.com Github: https://github.com/ethereum-alarm-clock ChronoLogic: https://chronologic.network","title":"Important links"},{"location":"built-on-ethereum/infrastructure/ethereum-name-service/","text":"Ethereum Name Service (ENS) Description Ethereum Name Service (ENS) is a decentralized domain name provider. It allows anyone to buy and manage .eth domains without relying on a centralized domain registrar. The owner of a domain can map it to any string value. One example is creating a human-readable name for his Ethereum wallet by resolving a personal domain to it. The owner can also create and manage subdomains. Each domain has an owner, resolver, and time-to-live record and is stored in the ENS registry. Resolvers are smart contracts that can provide any information about given domain. Owner of the domain can choose a resolver and transfer the ownership of the domain as well as its subdomains. History Launch The ENS launched on May 4th, 2017 with a temporary registrar contract featuring a Vickrey auction design for registering domains. Vickrey Auction Process Explained First, someone looking to register an ENS domain was required to make a minimum bid of at least 0.01 ETH which opened an auction for the desired name. This started a 3-day timer for other people to place bids on the name. During this period, the details of bids were obscured: nobody could tell how much you bid, or even what name you were bidding on. After the three day auction finished, a two day \u201creveal\u201d period would begin. During this period, everyone who made a bid must have revealed the details of their bid\u200a\u2014\u200aif they didn\u2019t, they lost their entire bid. If your bid was not the highest, you were refunded your bid, minus a 0.5% fee which was burned. At the end of the two day reveal period, the winner was the person who revealed the highest bid, but they only had to pay the amount of the second-highest bidder. This amount was locked up in the contract as a deposit until the permanent registrar came. The winner was required to send a \u201cfinalise\u201d transaction to receive a refund of any extra funds, and to be assigned control of the name in ENS. Upgrade to Permenant Registrar At 00:00 UTC May 4th, 2019, the ENS was upgraded to a permanent registrar contract which did away with the Vickrey auction system in lieu of instant registration for ENS domains seven characters or longer. The new registrar requires domain holders to pay $5/year paid in Ether to main. Domains registered before this update are required to migrate to the new registrar but are not required to pay this yearly fee until after May 4, 2020. Registering an ENS domain Registering a domain on the ENS will cost you $5/year paid in Ether. See here for a step-by-step guide to registering an ENS domain. Registering ENS domain names shorter than 7 characters With the May 4th, 2019 update to the permenant registrar, ENS intends to start opening up registrations of names shorter than 7 characters. This will start with a preregistration process, during which owners of existing DNS domains can claim the corresponding ENS name for their project. After that, an auction process will start in which anyone can bid on the newly available names, and then finally open the rest up for instant registration. See here for more information. ENS-supported Software Mobile Wallets Alphawallet Argent Cipher Imtoken Leth Pandax Status Desktop Wallets Metamask MyCrypto MyEtherWallet Opera Apps Aragon Bitfinex Enjinx Etherscan Portal Swarm Totem Universallogin Important links Website: https://ens.domains Github: https://github.com/ensdomains ENS Registrar: https://manager.ens.domains","title":"Ethereum Name Service"},{"location":"built-on-ethereum/infrastructure/ethereum-name-service/#ethereum-name-service-ens","text":"","title":"Ethereum Name Service (ENS)"},{"location":"built-on-ethereum/infrastructure/ethereum-name-service/#description","text":"Ethereum Name Service (ENS) is a decentralized domain name provider. It allows anyone to buy and manage .eth domains without relying on a centralized domain registrar. The owner of a domain can map it to any string value. One example is creating a human-readable name for his Ethereum wallet by resolving a personal domain to it. The owner can also create and manage subdomains. Each domain has an owner, resolver, and time-to-live record and is stored in the ENS registry. Resolvers are smart contracts that can provide any information about given domain. Owner of the domain can choose a resolver and transfer the ownership of the domain as well as its subdomains.","title":"Description"},{"location":"built-on-ethereum/infrastructure/ethereum-name-service/#history","text":"","title":"History"},{"location":"built-on-ethereum/infrastructure/ethereum-name-service/#launch","text":"The ENS launched on May 4th, 2017 with a temporary registrar contract featuring a Vickrey auction design for registering domains.","title":"Launch"},{"location":"built-on-ethereum/infrastructure/ethereum-name-service/#vickrey-auction-process-explained","text":"First, someone looking to register an ENS domain was required to make a minimum bid of at least 0.01 ETH which opened an auction for the desired name. This started a 3-day timer for other people to place bids on the name. During this period, the details of bids were obscured: nobody could tell how much you bid, or even what name you were bidding on. After the three day auction finished, a two day \u201creveal\u201d period would begin. During this period, everyone who made a bid must have revealed the details of their bid\u200a\u2014\u200aif they didn\u2019t, they lost their entire bid. If your bid was not the highest, you were refunded your bid, minus a 0.5% fee which was burned. At the end of the two day reveal period, the winner was the person who revealed the highest bid, but they only had to pay the amount of the second-highest bidder. This amount was locked up in the contract as a deposit until the permanent registrar came. The winner was required to send a \u201cfinalise\u201d transaction to receive a refund of any extra funds, and to be assigned control of the name in ENS.","title":"Vickrey Auction Process Explained"},{"location":"built-on-ethereum/infrastructure/ethereum-name-service/#upgrade-to-permenant-registrar","text":"At 00:00 UTC May 4th, 2019, the ENS was upgraded to a permanent registrar contract which did away with the Vickrey auction system in lieu of instant registration for ENS domains seven characters or longer. The new registrar requires domain holders to pay $5/year paid in Ether to main. Domains registered before this update are required to migrate to the new registrar but are not required to pay this yearly fee until after May 4, 2020.","title":"Upgrade to Permenant Registrar"},{"location":"built-on-ethereum/infrastructure/ethereum-name-service/#registering-an-ens-domain","text":"Registering a domain on the ENS will cost you $5/year paid in Ether. See here for a step-by-step guide to registering an ENS domain.","title":"Registering an ENS domain"},{"location":"built-on-ethereum/infrastructure/ethereum-name-service/#registering-ens-domain-names-shorter-than-7-characters","text":"With the May 4th, 2019 update to the permenant registrar, ENS intends to start opening up registrations of names shorter than 7 characters. This will start with a preregistration process, during which owners of existing DNS domains can claim the corresponding ENS name for their project. After that, an auction process will start in which anyone can bid on the newly available names, and then finally open the rest up for instant registration. See here for more information.","title":"Registering ENS domain names shorter than 7 characters"},{"location":"built-on-ethereum/infrastructure/ethereum-name-service/#ens-supported-software","text":"","title":"ENS-supported Software"},{"location":"built-on-ethereum/infrastructure/ethereum-name-service/#mobile-wallets","text":"Alphawallet Argent Cipher Imtoken Leth Pandax Status","title":"Mobile Wallets"},{"location":"built-on-ethereum/infrastructure/ethereum-name-service/#desktop-wallets","text":"Metamask MyCrypto MyEtherWallet Opera","title":"Desktop Wallets"},{"location":"built-on-ethereum/infrastructure/ethereum-name-service/#apps","text":"Aragon Bitfinex Enjinx Etherscan Portal Swarm Totem Universallogin","title":"Apps"},{"location":"built-on-ethereum/infrastructure/ethereum-name-service/#important-links","text":"Website: https://ens.domains Github: https://github.com/ensdomains ENS Registrar: https://manager.ens.domains","title":"Important links"},{"location":"built-on-ethereum/infrastructure/ethlance/","text":"Ethlance Description Ethlance is a freelance platform. The listings include required skills, pricing, and the description of what needs to be done. Payments are made in ether. Ethlance doesn\u2019t hold any funds, as all payments are peer to peer and feeless. All listings are stored on Ethereum and IPFS, thus anyone can access them. Ethlance also supports job sponsorships. If the creator opted into sponsorship during listing creation, anyone will be able to chip in to pay for it. Collected funds will be used to pay the freelancer who will complete the task and unused funds are returned to contributors. Therefore, it\u2019s possible to crowdfund \u201cpublic good\u201d tasks. Important links Website: https://ethlance.com Github: https://github.com/district0x/ethlance","title":"Ethlance"},{"location":"built-on-ethereum/infrastructure/ethlance/#ethlance","text":"","title":"Ethlance"},{"location":"built-on-ethereum/infrastructure/ethlance/#description","text":"Ethlance is a freelance platform. The listings include required skills, pricing, and the description of what needs to be done. Payments are made in ether. Ethlance doesn\u2019t hold any funds, as all payments are peer to peer and feeless. All listings are stored on Ethereum and IPFS, thus anyone can access them. Ethlance also supports job sponsorships. If the creator opted into sponsorship during listing creation, anyone will be able to chip in to pay for it. Collected funds will be used to pay the freelancer who will complete the task and unused funds are returned to contributors. Therefore, it\u2019s possible to crowdfund \u201cpublic good\u201d tasks.","title":"Description"},{"location":"built-on-ethereum/infrastructure/ethlance/#important-links","text":"Website: https://ethlance.com Github: https://github.com/district0x/ethlance","title":"Important links"},{"location":"built-on-ethereum/infrastructure/ethpm/","text":"ethPM Summary Package management is a staple in any programming discipline. The ethPM specification allows developers to package up and distribute their smart contracts in a machine-readable format that is easily consumable by any tooling that supports the spec. Quick and secure transportation of smart contracts between tooling allows developers to easily build off the existing standards and distribute their own contracts for others to build from. An ethPM package represents the idea of a smart contract; from a single smart contract file, to a deployed contract instance, to a complex system of smart contracts, and everything in between. At its core, an ethPM package is a JSON object containing the ABI, source code, bytecode, deployment data and any other information that combines together to compose the smart contract idea. The ethPM specification defines a schema to store all of this data in a structured JSON format, enabling quick and efficient transportation of smart contract ideas between tools and frameworks which support the specification. ethPM has similar goals to most package managers found in any given programming language. Easily import and build upon core ideas written by others. Distribute the ideas that you've written and/or deployed, making them easily consumable for tooling and the community at large. Resources ethPM specification ethPM documentation ethPM explorer ethPM gitter ethPM website","title":"ethPM"},{"location":"built-on-ethereum/infrastructure/ethpm/#ethpm","text":"","title":"ethPM"},{"location":"built-on-ethereum/infrastructure/ethpm/#summary","text":"Package management is a staple in any programming discipline. The ethPM specification allows developers to package up and distribute their smart contracts in a machine-readable format that is easily consumable by any tooling that supports the spec. Quick and secure transportation of smart contracts between tooling allows developers to easily build off the existing standards and distribute their own contracts for others to build from. An ethPM package represents the idea of a smart contract; from a single smart contract file, to a deployed contract instance, to a complex system of smart contracts, and everything in between. At its core, an ethPM package is a JSON object containing the ABI, source code, bytecode, deployment data and any other information that combines together to compose the smart contract idea. The ethPM specification defines a schema to store all of this data in a structured JSON format, enabling quick and efficient transportation of smart contract ideas between tools and frameworks which support the specification. ethPM has similar goals to most package managers found in any given programming language. Easily import and build upon core ideas written by others. Distribute the ideas that you've written and/or deployed, making them easily consumable for tooling and the community at large.","title":"Summary"},{"location":"built-on-ethereum/infrastructure/ethpm/#resources","text":"ethPM specification ethPM documentation ethPM explorer ethPM gitter ethPM website","title":"Resources"},{"location":"built-on-ethereum/infrastructure/foam-protocol/","text":"FOAM Protocol Summary FOAM is an open protocol for decentralized, geospatial data markets. The protocol is designed to empower users to build a consensus-driven map of the world that can be trusted for every application. As technology evolves and changes, maps need to change too. FOAM secures physical space on the blockchain, harnessing the power of Ethereum with a cryptographic software utility token used to provide computational work and verification to the network. The component elements of the FOAM protocol are designed to provide spatial protocols, standards and applications that bring geospatial data to blockchains and empower a consensus-driven map of the world. Token mechanisms and cryptoeconomics underpin the elements of FOAM and empower the distributed users to coordinate and interact in a decentralized and permissionless fashion. Resources Website: https://www.foam.space Github: https://github.com/f-o-a-m/ Whitepaper: https://www.foam.space/publicAssets/FOAM_Whitepaper.pdf","title":"FOAM Protocol"},{"location":"built-on-ethereum/infrastructure/foam-protocol/#foam-protocol","text":"","title":"FOAM Protocol"},{"location":"built-on-ethereum/infrastructure/foam-protocol/#summary","text":"FOAM is an open protocol for decentralized, geospatial data markets. The protocol is designed to empower users to build a consensus-driven map of the world that can be trusted for every application. As technology evolves and changes, maps need to change too. FOAM secures physical space on the blockchain, harnessing the power of Ethereum with a cryptographic software utility token used to provide computational work and verification to the network. The component elements of the FOAM protocol are designed to provide spatial protocols, standards and applications that bring geospatial data to blockchains and empower a consensus-driven map of the world. Token mechanisms and cryptoeconomics underpin the elements of FOAM and empower the distributed users to coordinate and interact in a decentralized and permissionless fashion.","title":"Summary"},{"location":"built-on-ethereum/infrastructure/foam-protocol/#resources","text":"Website: https://www.foam.space Github: https://github.com/f-o-a-m/ Whitepaper: https://www.foam.space/publicAssets/FOAM_Whitepaper.pdf","title":"Resources"},{"location":"built-on-ethereum/infrastructure/golem/","text":"Golem Description Golem is a decentralized computing marketplace. There are three groups of users in Golem: providers, requestors, and developers. Providers offer hardware, requestors rent the hardware and developers create applications on top of the platform. All three groups of users are free to set any price which forms a free market for hardware renting and cloud computing. Anyone can publish his application on the Golem platform. While all applications run on the virtual machines and can\u2019t access the host machine, it is possible to write malicious code which will use various hacks and vulnerabilities to get access to the host machine. It can lead to serious problems for hardware providers. Golem plans to mitigate that risk by maintaining an Application Registry. The Application Registry is a user-curated list of secure and malicious software. Developers submit their apps to the registry and then curators evaluate the security of applications by adding new apps to either the whitelist or blacklist. Providers, in turn, can choose which curators they trust by picking from the lists. They can also manage their own whitelists and blacklists. The hardware of the providers will be used only to run the whitelisted software or everything except blacklisted apps, depending on their preferences. To ease user onboarding, Golem will create a default whitelist of trusted apps which providers can use as a starting point. Important links Website: https://golem.network Github: https://github.com/golemfactory Whitepaper: https://golem.network/crowdfunding/Golemwhitepaper.pdf","title":"Golem"},{"location":"built-on-ethereum/infrastructure/golem/#golem","text":"","title":"Golem"},{"location":"built-on-ethereum/infrastructure/golem/#description","text":"Golem is a decentralized computing marketplace. There are three groups of users in Golem: providers, requestors, and developers. Providers offer hardware, requestors rent the hardware and developers create applications on top of the platform. All three groups of users are free to set any price which forms a free market for hardware renting and cloud computing. Anyone can publish his application on the Golem platform. While all applications run on the virtual machines and can\u2019t access the host machine, it is possible to write malicious code which will use various hacks and vulnerabilities to get access to the host machine. It can lead to serious problems for hardware providers. Golem plans to mitigate that risk by maintaining an Application Registry. The Application Registry is a user-curated list of secure and malicious software. Developers submit their apps to the registry and then curators evaluate the security of applications by adding new apps to either the whitelist or blacklist. Providers, in turn, can choose which curators they trust by picking from the lists. They can also manage their own whitelists and blacklists. The hardware of the providers will be used only to run the whitelisted software or everything except blacklisted apps, depending on their preferences. To ease user onboarding, Golem will create a default whitelist of trusted apps which providers can use as a starting point.","title":"Description"},{"location":"built-on-ethereum/infrastructure/golem/#important-links","text":"Website: https://golem.network Github: https://github.com/golemfactory Whitepaper: https://golem.network/crowdfunding/Golemwhitepaper.pdf","title":"Important links"},{"location":"built-on-ethereum/infrastructure/poa-network/","text":"POA Network About Governance At its core, on-chain governance is a group of individuals coming together to make decisions on the blockchain. POA Network remains transparent by using US public notaries, known as validators, to govern the network. xDai xDai Chain is an Ethereum-based blockchain that uses USD-stable XDAI (a representation of DAI token) as the native coin of the network. xDai Chain is a fast and cost-efficient blockchain solution that leverages the Proof-of-Authority consensus model. xDai Burner Wallet Developer Austin Griffith built an easy burner wallet that uses POA's xDai chain for those quick everyday payments like pizza or beer. The burner wallet is automatically generated upon visiting https://xdai.io and your private key is stored in a cookie so it will be there when you come back. However, you should sweep any value you hold to a cold wallet regularly and burn your ephemeral private key. A burner wallet is analogous to cash; you won't carry too much because it can be lost but it's astonishingly easy to exchange. Here is a video explaining the app: https://youtu.be/KkOyrEvYqO8 Important Links Website: https://poa.network/ Twitter: https://twitter.com/poanetwork Medium: https://medium.com/poa-network Forum: https://forum.poa.network/ Reddit: https://reddit.com/r/poa Github: https://github.com/poanetwork/ Governance: https://poa.network/governance Validators: https://validators.poa.network/ xDai Chain: https://www.xdaichain.com/ Burner Wallet github: https://github.com/austintgriffith/burner-wallet/ Burner Wallet app: https://xdai.io/ Token Bridge github: https://github.com/poanetwork/token-bridge","title":"POA Network"},{"location":"built-on-ethereum/infrastructure/poa-network/#poa-network","text":"","title":"POA Network"},{"location":"built-on-ethereum/infrastructure/poa-network/#about","text":"","title":"About"},{"location":"built-on-ethereum/infrastructure/poa-network/#governance","text":"At its core, on-chain governance is a group of individuals coming together to make decisions on the blockchain. POA Network remains transparent by using US public notaries, known as validators, to govern the network.","title":"Governance"},{"location":"built-on-ethereum/infrastructure/poa-network/#xdai","text":"xDai Chain is an Ethereum-based blockchain that uses USD-stable XDAI (a representation of DAI token) as the native coin of the network. xDai Chain is a fast and cost-efficient blockchain solution that leverages the Proof-of-Authority consensus model.","title":"xDai"},{"location":"built-on-ethereum/infrastructure/poa-network/#xdai-burner-wallet","text":"Developer Austin Griffith built an easy burner wallet that uses POA's xDai chain for those quick everyday payments like pizza or beer. The burner wallet is automatically generated upon visiting https://xdai.io and your private key is stored in a cookie so it will be there when you come back. However, you should sweep any value you hold to a cold wallet regularly and burn your ephemeral private key. A burner wallet is analogous to cash; you won't carry too much because it can be lost but it's astonishingly easy to exchange. Here is a video explaining the app: https://youtu.be/KkOyrEvYqO8","title":"xDai Burner Wallet"},{"location":"built-on-ethereum/infrastructure/poa-network/#important-links","text":"Website: https://poa.network/ Twitter: https://twitter.com/poanetwork Medium: https://medium.com/poa-network Forum: https://forum.poa.network/ Reddit: https://reddit.com/r/poa Github: https://github.com/poanetwork/ Governance: https://poa.network/governance Validators: https://validators.poa.network/ xDai Chain: https://www.xdaichain.com/ Burner Wallet github: https://github.com/austintgriffith/burner-wallet/ Burner Wallet app: https://xdai.io/ Token Bridge github: https://github.com/poanetwork/token-bridge","title":"Important Links"},{"location":"built-on-ethereum/infrastructure/quiknode/","text":"Its mission is to help blockchain ecosystems by providing accessible Web3 infrastructure. QuikNode Description QuikNode is the fastest and easiest way to run an Ethereum node. Its mission is to help blockchain ecosystems scale by providing accessible Web3 infrastructure. Main products: QuikNode QuikNode API Secondary products: QWallet Search Pros Easy to spin up a dedicated Ethereum node Free API tier for ETH MainNet on registration Popular clients supported: Geth and Parity Support for MainNet, Rinkeby, Ropsten, Kovan chains Available Parity Archive node with full Trace data Both HTTPs and WSS (WebSockets) are supported 8 regions to choose from for best network performance Boost layer available to accelerate API calls by up to 300% Simple UI to manage node, view metrics, logs, and make changes All RPC methods (except wallet), including txpool/queue, subscriptions, are supported Fast: Full node is ready in minutes (vs. days/weeks) No throttling or preset limitataions on dedicated nodes Cons Costs money to use it (ETH is accepted) Free tier is limited to 2 req/sec and 500 req/day FAQ When should I use QuikNode? How can I use QuikNode? Where can I find a demo of QuikNode in action? What is QuikNode API? Resources Website Blog Twitter Medium Reddit Newsletter","title":"QuikNode"},{"location":"built-on-ethereum/infrastructure/quiknode/#quiknode","text":"","title":"QuikNode"},{"location":"built-on-ethereum/infrastructure/quiknode/#description","text":"QuikNode is the fastest and easiest way to run an Ethereum node. Its mission is to help blockchain ecosystems scale by providing accessible Web3 infrastructure.","title":"Description"},{"location":"built-on-ethereum/infrastructure/quiknode/#main-products","text":"QuikNode QuikNode API","title":"Main products:"},{"location":"built-on-ethereum/infrastructure/quiknode/#secondary-products","text":"QWallet Search","title":"Secondary products:"},{"location":"built-on-ethereum/infrastructure/quiknode/#pros","text":"Easy to spin up a dedicated Ethereum node Free API tier for ETH MainNet on registration Popular clients supported: Geth and Parity Support for MainNet, Rinkeby, Ropsten, Kovan chains Available Parity Archive node with full Trace data Both HTTPs and WSS (WebSockets) are supported 8 regions to choose from for best network performance Boost layer available to accelerate API calls by up to 300% Simple UI to manage node, view metrics, logs, and make changes All RPC methods (except wallet), including txpool/queue, subscriptions, are supported Fast: Full node is ready in minutes (vs. days/weeks) No throttling or preset limitataions on dedicated nodes","title":"Pros"},{"location":"built-on-ethereum/infrastructure/quiknode/#cons","text":"Costs money to use it (ETH is accepted) Free tier is limited to 2 req/sec and 500 req/day","title":"Cons"},{"location":"built-on-ethereum/infrastructure/quiknode/#faq","text":"When should I use QuikNode? How can I use QuikNode? Where can I find a demo of QuikNode in action? What is QuikNode API?","title":"FAQ"},{"location":"built-on-ethereum/infrastructure/quiknode/#resources","text":"Website Blog Twitter Medium Reddit Newsletter","title":"Resources"},{"location":"built-on-ethereum/infrastructure/streamr/","text":"Streamr Streamr is creating an open source platform for the free and fair exchange of the world\u2019s realtime data. What is the Streamr Network? The Streamr Network is a scalable realtime messaging system, which enables applications and devices such as IoT sensors, connected cars, and basically all \u201csmart\u201d gadgets to make available the data they are producing, as well as listen to incoming data from other applications and devices. The Network employs the publish/subscribe pattern. Messages produced to a stream (sometimes called a topic) get delivered to all subscribers listening on that stream in realtime. It\u2019s a bit like an instant messenger for machines, which \u2014 in IM lingo \u2014 supports \u201cgroup chats\u201d (many-to-many), \u201cchannels\u201d (one-to-many), as well as \u201cprivate\u201d (one-to-one) messaging patterns. Such a publish/subscribe network has the following properties for application developers: Data producers simply \u201cfire and forget\u201d. No need to set up APIs, data silos, or open ports that could compromise security. Just send new data points to the Network and you\u2019re done. This makes integration very easy. Data consumers simply listen. They don\u2019t need to know where the data sources are, which IP address to reach them on, or how to interface with them. They don\u2019t need to open server ports either. They just connect to the network, subscribe to what they need, and react to incoming messages. Resources: Website: https://www.streamr.com Github: https://github.com/streamr-dev Whitepaper: https://s3.amazonaws.com/streamr-public/streamr-whitepaper-2017-07-25-v1_0-facelift.pdf What is Streamr?: https://medium.com/streamrblog/building-the-missing-protocol-of-todays-internet-stack-a-decentralized-pub-sub-network-for-ad1f5972f3ca","title":"Streamr"},{"location":"built-on-ethereum/infrastructure/streamr/#streamr","text":"Streamr is creating an open source platform for the free and fair exchange of the world\u2019s realtime data.","title":"Streamr"},{"location":"built-on-ethereum/infrastructure/streamr/#what-is-the-streamr-network","text":"The Streamr Network is a scalable realtime messaging system, which enables applications and devices such as IoT sensors, connected cars, and basically all \u201csmart\u201d gadgets to make available the data they are producing, as well as listen to incoming data from other applications and devices. The Network employs the publish/subscribe pattern. Messages produced to a stream (sometimes called a topic) get delivered to all subscribers listening on that stream in realtime. It\u2019s a bit like an instant messenger for machines, which \u2014 in IM lingo \u2014 supports \u201cgroup chats\u201d (many-to-many), \u201cchannels\u201d (one-to-many), as well as \u201cprivate\u201d (one-to-one) messaging patterns. Such a publish/subscribe network has the following properties for application developers: Data producers simply \u201cfire and forget\u201d. No need to set up APIs, data silos, or open ports that could compromise security. Just send new data points to the Network and you\u2019re done. This makes integration very easy. Data consumers simply listen. They don\u2019t need to know where the data sources are, which IP address to reach them on, or how to interface with them. They don\u2019t need to open server ports either. They just connect to the network, subscribe to what they need, and react to incoming messages.","title":"What is the Streamr Network?"},{"location":"built-on-ethereum/infrastructure/streamr/#resources","text":"Website: https://www.streamr.com Github: https://github.com/streamr-dev Whitepaper: https://s3.amazonaws.com/streamr-public/streamr-whitepaper-2017-07-25-v1_0-facelift.pdf What is Streamr?: https://medium.com/streamrblog/building-the-missing-protocol-of-todays-internet-stack-a-decentralized-pub-sub-network-for-ad1f5972f3ca","title":"Resources:"},{"location":"built-on-ethereum/marketplaces/district0x/","text":"district0x Summary The district0x network is a collective of decentralized marketplaces and communities known as \u2018Districts\u2019. Districts exist on top of a modular framework of Ethereum smart contracts and frontend libraries referred to as d0xINFRA. d0xINFRA d0xINFRA is a standard open source framework comprised of Ethereum smart contracts and front-end libraries. With the development of Name Bazaar and Meme Factory, the district0x team is building the initial iteration of d0xINFRA, which will allow other development teams to launch their very own district. d0xINFRA utilizes the 0x Protocol which allows districts to tap into its liquidity pool. Districts Districts are the decentralized community marketplaces that utilize the d0xINFRA framework. They are managed by a governance layer provided by the Aragon network, operating through Ethereum smart contracts and our standardized front-end libraries (d0xINFRA). district0x Network Token (DNT) The district0x Network Token is an Ethereum-based token built using the ERC20 standard. This token was created to facilitate participation and coordination in the development of the district0x Network, and eventually the handoff of network governance to the community. Prominent Districts Ethlance Name Bazaar Dencentraland Spankchain's Red Light District Meme Factory Resources Website Github","title":"District0x"},{"location":"built-on-ethereum/marketplaces/district0x/#district0x","text":"","title":"district0x"},{"location":"built-on-ethereum/marketplaces/district0x/#summary","text":"The district0x network is a collective of decentralized marketplaces and communities known as \u2018Districts\u2019. Districts exist on top of a modular framework of Ethereum smart contracts and frontend libraries referred to as d0xINFRA.","title":"Summary"},{"location":"built-on-ethereum/marketplaces/district0x/#d0xinfra","text":"d0xINFRA is a standard open source framework comprised of Ethereum smart contracts and front-end libraries. With the development of Name Bazaar and Meme Factory, the district0x team is building the initial iteration of d0xINFRA, which will allow other development teams to launch their very own district. d0xINFRA utilizes the 0x Protocol which allows districts to tap into its liquidity pool.","title":"d0xINFRA"},{"location":"built-on-ethereum/marketplaces/district0x/#districts","text":"Districts are the decentralized community marketplaces that utilize the d0xINFRA framework. They are managed by a governance layer provided by the Aragon network, operating through Ethereum smart contracts and our standardized front-end libraries (d0xINFRA).","title":"Districts"},{"location":"built-on-ethereum/marketplaces/district0x/#district0x-network-token-dnt","text":"The district0x Network Token is an Ethereum-based token built using the ERC20 standard. This token was created to facilitate participation and coordination in the development of the district0x Network, and eventually the handoff of network governance to the community.","title":"district0x Network Token (DNT)"},{"location":"built-on-ethereum/marketplaces/district0x/#prominent-districts","text":"Ethlance Name Bazaar Dencentraland Spankchain's Red Light District Meme Factory","title":"Prominent Districts"},{"location":"built-on-ethereum/marketplaces/district0x/#resources","text":"Website Github","title":"Resources"},{"location":"built-on-ethereum/marketplaces/opensea/","text":"OpenSea Summary OpenSea is the first decentralized, peer-to-peer marketplace for blockchain-based assets, which include crypto collectibles, gaming items, and other assets backed by a blockchain. The OpenSea team has backgrounds from Stanford, Palantir, and Google, and is funded by YCombinator, Founders Fund, Coinbase Ventures, 1Confirmation, and Blockchain Capital. OpenSea is currently the largest general marketplace for user-owned digital items, with the broadest set of categories (90 and growing), the most items (over 1 million), and the best prices for new categories of items. Since they launched their beta back in December, the site has had over 18,000 ETH pass through their market. Developer partnerships OpenSea partners with developers to power their marketplace directly on OpenSea's infrastructure. This allows developers to focus on the core functionality of their dapp, while benefiting from peer-to-peer trades on the marketplace as they receive a secondary sale fee any time one of their items is sold on OpenSea. OpenSea is currently the primary marketplace for Cheeze Wizards (a new game from Dapper Labs), MyCryptoHeroes (a Japanese RPG), the officially licensed Formula 1 racing game from Animoca Brands, and many others. Architecture OpenSea is powered by the Wyvern Protocol, a set of robust Ethereum smart contracts specifically designed for buying and selling unique digital assets. Resources Website Developer Docs Twitter Instagram Discord Reddit Medium","title":"Opensea"},{"location":"built-on-ethereum/marketplaces/opensea/#opensea","text":"","title":"OpenSea"},{"location":"built-on-ethereum/marketplaces/opensea/#summary","text":"OpenSea is the first decentralized, peer-to-peer marketplace for blockchain-based assets, which include crypto collectibles, gaming items, and other assets backed by a blockchain. The OpenSea team has backgrounds from Stanford, Palantir, and Google, and is funded by YCombinator, Founders Fund, Coinbase Ventures, 1Confirmation, and Blockchain Capital. OpenSea is currently the largest general marketplace for user-owned digital items, with the broadest set of categories (90 and growing), the most items (over 1 million), and the best prices for new categories of items. Since they launched their beta back in December, the site has had over 18,000 ETH pass through their market.","title":"Summary"},{"location":"built-on-ethereum/marketplaces/opensea/#developer-partnerships","text":"OpenSea partners with developers to power their marketplace directly on OpenSea's infrastructure. This allows developers to focus on the core functionality of their dapp, while benefiting from peer-to-peer trades on the marketplace as they receive a secondary sale fee any time one of their items is sold on OpenSea. OpenSea is currently the primary marketplace for Cheeze Wizards (a new game from Dapper Labs), MyCryptoHeroes (a Japanese RPG), the officially licensed Formula 1 racing game from Animoca Brands, and many others.","title":"Developer partnerships"},{"location":"built-on-ethereum/marketplaces/opensea/#architecture","text":"OpenSea is powered by the Wyvern Protocol, a set of robust Ethereum smart contracts specifically designed for buying and selling unique digital assets.","title":"Architecture"},{"location":"built-on-ethereum/marketplaces/opensea/#resources","text":"Website Developer Docs Twitter Instagram Discord Reddit Medium","title":"Resources"},{"location":"built-on-ethereum/marketplaces/origin-protocol/","text":"Origin Protocol Summary Origin Protocol provides infrastructure for a general-purpose marketplace. Users can create offers and put them onto the Ethereum blockchain. Listings data is stored on IPFS, while the metadata is stored on Ethereum. Origin Protocol doesn\u2019t impose any listing fees, essentially making it a totally free marketplace. Listing data is available for anyone to access and interact with. Therefore, it is an open protocol that anyone can build on. For example, one can create a specialized marketplace by pulling listings related to a specific topic. Resources Website","title":"Origin Protocol"},{"location":"built-on-ethereum/marketplaces/origin-protocol/#origin-protocol","text":"","title":"Origin Protocol"},{"location":"built-on-ethereum/marketplaces/origin-protocol/#summary","text":"Origin Protocol provides infrastructure for a general-purpose marketplace. Users can create offers and put them onto the Ethereum blockchain. Listings data is stored on IPFS, while the metadata is stored on Ethereum. Origin Protocol doesn\u2019t impose any listing fees, essentially making it a totally free marketplace. Listing data is available for anyone to access and interact with. Therefore, it is an open protocol that anyone can build on. For example, one can create a specialized marketplace by pulling listings related to a specific topic.","title":"Summary"},{"location":"built-on-ethereum/marketplaces/origin-protocol/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/marketplaces/rarebits/","text":"RareBits Summary RareBits is a marketplace dedicated to the buying and selling of crypto assets. Crypto assets are non-fungible tokens that are provably scarce and unique. We believe that this new asset class will pave the way for a new era of digital ownership. Resources Website Twitter","title":"Rarebits"},{"location":"built-on-ethereum/marketplaces/rarebits/#rarebits","text":"","title":"RareBits"},{"location":"built-on-ethereum/marketplaces/rarebits/#summary","text":"RareBits is a marketplace dedicated to the buying and selling of crypto assets. Crypto assets are non-fungible tokens that are provably scarce and unique. We believe that this new asset class will pave the way for a new era of digital ownership.","title":"Summary"},{"location":"built-on-ethereum/marketplaces/rarebits/#resources","text":"Website Twitter","title":"Resources"},{"location":"built-on-ethereum/open-finance/what-is-open-finance/","text":"Decentralized Finance Summary Decentralized Finance (a.k.a. \"DeFi\" or \"Open Finance\") refers to a number of decentralized protocols building open financial infrastructure. These protocols are valuable because they're creating the necessary plumbing to enable anyone in the world with an internet connection to access self-sovereign, censorship resistant financial services. In the existing system, all financial services are controlled by a central party. Whether it's basic money transfers, asset purchases, or lending, you must go through an intermediary who charges rent for mediating financial transactions. Ethereum-based financial services, on the other hand, connect individuals peer-to-peer and allow them to access basic financing more easily and affordably. How is all this possible? A big reason the financial services industry is as bloated as it is today is because financial transactions in the digital realm are not secure. We have no method of trusting our online counterparties so we pay fees to financial institutions who enforce that trust. Ethereum leverages the same principles that create 'digital trust' within Bitcoin, and applies to them to smart contracts, self-executing pieces of code that execute business logic after some predefined conditions are met. Smart contracts look a lot like financial contracts in that they escrow funds and transfer them around in response to certain events. This system is superior because the encoded business logic can't be manipulated by a central party once its deployed to the Ethereum mainnet. Blockchain based financial services are superior to their centralized counterparts across the following primary features: Permissionless : An internet connection is all you need to access these services Censorship Resistance : No central party is able to reverse the order of transactions and turn off the service Trustless : Users don't have to trust a central party to ensure that transactions are valid Transparent : Public blockchains like Ethereum are completely transparent and auditable Programmable : Developers can create and intertwine financial services at a very low cost Efficiency : Open financial services are powered by code, not humans, and as such entail much lower middleman costs, if at all Decentralized Finance is generally broken up into the following categories: Asset Exchange Credit Scoring Insurance Indexing/Baskets Lending Derivatives Stablecoins Smart Securities Prediction Markets Open Source Banking Applications Resources Decentralized Finance dApps on Ethereum","title":"What is Decentralized Finance (DeFi)?"},{"location":"built-on-ethereum/open-finance/what-is-open-finance/#decentralized-finance","text":"","title":"Decentralized Finance"},{"location":"built-on-ethereum/open-finance/what-is-open-finance/#summary","text":"Decentralized Finance (a.k.a. \"DeFi\" or \"Open Finance\") refers to a number of decentralized protocols building open financial infrastructure. These protocols are valuable because they're creating the necessary plumbing to enable anyone in the world with an internet connection to access self-sovereign, censorship resistant financial services. In the existing system, all financial services are controlled by a central party. Whether it's basic money transfers, asset purchases, or lending, you must go through an intermediary who charges rent for mediating financial transactions. Ethereum-based financial services, on the other hand, connect individuals peer-to-peer and allow them to access basic financing more easily and affordably.","title":"Summary"},{"location":"built-on-ethereum/open-finance/what-is-open-finance/#how-is-all-this-possible","text":"A big reason the financial services industry is as bloated as it is today is because financial transactions in the digital realm are not secure. We have no method of trusting our online counterparties so we pay fees to financial institutions who enforce that trust. Ethereum leverages the same principles that create 'digital trust' within Bitcoin, and applies to them to smart contracts, self-executing pieces of code that execute business logic after some predefined conditions are met. Smart contracts look a lot like financial contracts in that they escrow funds and transfer them around in response to certain events. This system is superior because the encoded business logic can't be manipulated by a central party once its deployed to the Ethereum mainnet.","title":"How is all this possible?"},{"location":"built-on-ethereum/open-finance/what-is-open-finance/#blockchain-based-financial-services-are-superior-to-their-centralized-counterparts-across-the-following-primary-features","text":"Permissionless : An internet connection is all you need to access these services Censorship Resistance : No central party is able to reverse the order of transactions and turn off the service Trustless : Users don't have to trust a central party to ensure that transactions are valid Transparent : Public blockchains like Ethereum are completely transparent and auditable Programmable : Developers can create and intertwine financial services at a very low cost Efficiency : Open financial services are powered by code, not humans, and as such entail much lower middleman costs, if at all","title":"Blockchain based financial services are superior to their centralized counterparts across the following primary features:"},{"location":"built-on-ethereum/open-finance/what-is-open-finance/#decentralized-finance-is-generally-broken-up-into-the-following-categories","text":"Asset Exchange Credit Scoring Insurance Indexing/Baskets Lending Derivatives Stablecoins Smart Securities Prediction Markets Open Source Banking Applications","title":"Decentralized Finance is generally broken up into the following categories:"},{"location":"built-on-ethereum/open-finance/what-is-open-finance/#resources","text":"Decentralized Finance dApps on Ethereum","title":"Resources"},{"location":"built-on-ethereum/open-finance/defi-dashboards/zapper/","text":"What is Zapper? Zapper = DeFiSnap + DeFiZap coming together to form the ultimate hub for managing your DeFi assets & liabilities. Our Mission Increase the GDP of DeFi by abstracting the complexities of accessing unique opportunities faced by retail investors, fund managers and builders around the world. Features Enter wallet address & get an instant snapshot of all your DeFi holdings. Integration with over 20 DeFi protocols. Ability to combine different DeFi building blocks to create your own instruments, strategies or even entirely new use-cases. Supported wallets - Metamask, Ledger, Trezor, WalletConnect, Fortmatic, Torus, Opera, Authereum. How does it work? Invest . Browse unique opportunities available across the always expanding list of available DeFi platforms. Monitor . Get a snapshot of all your DeFi assets & liabilities. Manage . Easily re-balance between DeFi platforms or create your own opportunities. Resources Zapper.fi Twitter Discord","title":"Zapper"},{"location":"built-on-ethereum/open-finance/defi-dashboards/zapper/#what-is-zapper","text":"","title":"What is Zapper?"},{"location":"built-on-ethereum/open-finance/defi-dashboards/zapper/#zapper-defisnap-defizapcoming-together-to-form-the-ultimate-hub-for-managing-your-defi-assets-liabilities","text":"","title":"Zapper = DeFiSnap+ DeFiZapcoming together to form the ultimate hub for managing your DeFi assets &amp; liabilities."},{"location":"built-on-ethereum/open-finance/defi-dashboards/zapper/#our-mission","text":"","title":"Our Mission"},{"location":"built-on-ethereum/open-finance/defi-dashboards/zapper/#increase-the-gdp-of-defi-by-abstracting-the-complexities-of-accessing-unique-opportunities-faced-by-retail-investors-fund-managers-and-builders-around-the-world","text":"","title":"Increase the GDP of DeFi by abstracting the complexities of accessing unique opportunities faced by retail investors, fund managers and builders around the world."},{"location":"built-on-ethereum/open-finance/defi-dashboards/zapper/#features","text":"Enter wallet address & get an instant snapshot of all your DeFi holdings. Integration with over 20 DeFi protocols. Ability to combine different DeFi building blocks to create your own instruments, strategies or even entirely new use-cases. Supported wallets - Metamask, Ledger, Trezor, WalletConnect, Fortmatic, Torus, Opera, Authereum.","title":"Features"},{"location":"built-on-ethereum/open-finance/defi-dashboards/zapper/#how-does-it-work","text":"Invest . Browse unique opportunities available across the always expanding list of available DeFi platforms. Monitor . Get a snapshot of all your DeFi assets & liabilities. Manage . Easily re-balance between DeFi platforms or create your own opportunities.","title":"How does it work?"},{"location":"built-on-ethereum/open-finance/defi-dashboards/zapper/#resources","text":"Zapper.fi Twitter Discord","title":"Resources"},{"location":"built-on-ethereum/open-finance/defi-dashboards/zerion/","text":"Zerion Summary Zerion is building a trustless bank for Decentralized Finance (DeFi) on top of MakerDAO , Uniswap , Compound , Dharma , Set , DyDx and others. Zerion aims at transforming the decentralized finance experience to drive the next wave of adoption of blockchain-based finance. You can think of it as Chase for the decentralized economy. Instead of relying on a third party to manage their assets (such as through traditional banking and existing FinTech), Zerion users keep full control over their assets and execute common banking services with minimal fees. Features Historical on-chain portfolio of Ethereum and ERC-20 tokens. Native wallet integrations - Metamask, WalletConnect Works in most DApp Browsers - Coinbase Wallet, Trust Wallet, imToken, Tokenary Trading of ERC-20 tokens MakerDAO (coming soon) Resources Website Beta Twitter","title":"Zerion"},{"location":"built-on-ethereum/open-finance/defi-dashboards/zerion/#zerion","text":"","title":"Zerion"},{"location":"built-on-ethereum/open-finance/defi-dashboards/zerion/#summary","text":"Zerion is building a trustless bank for Decentralized Finance (DeFi) on top of MakerDAO , Uniswap , Compound , Dharma , Set , DyDx and others. Zerion aims at transforming the decentralized finance experience to drive the next wave of adoption of blockchain-based finance. You can think of it as Chase for the decentralized economy. Instead of relying on a third party to manage their assets (such as through traditional banking and existing FinTech), Zerion users keep full control over their assets and execute common banking services with minimal fees.","title":"Summary"},{"location":"built-on-ethereum/open-finance/defi-dashboards/zerion/#features","text":"Historical on-chain portfolio of Ethereum and ERC-20 tokens. Native wallet integrations - Metamask, WalletConnect Works in most DApp Browsers - Coinbase Wallet, Trust Wallet, imToken, Tokenary Trading of ERC-20 tokens MakerDAO (coming soon)","title":"Features"},{"location":"built-on-ethereum/open-finance/defi-dashboards/zerion/#resources","text":"Website Beta Twitter","title":"Resources"},{"location":"built-on-ethereum/open-finance/insurance/etherisc/","text":"Etherisc Summary Etherisc is a protocol to collectively build insurance products. Common infrastructure, product templates and insurance license-as-a-service make a platform that allows anyone to create their own insurance products. DIP Token DIP Tokens act as the native internal currency that is inseparable from the protocol and network of its users. DIP tokens are needed to earn transaction fees (% of insurance premiums or fixed cost), incentivize and reward platform users to bring risk to the network, build and maintain risk transfer products. The total supply of Etherisc Tokens is 1 Billion. DIP tokens give users access to the Decentralized Insurance Platform. By staking DIP token, participants provide collateral (bond) to guarantee future performance, availability, and service levels. Staking also signals quality and reputation. As a result, participants can earn money monetizing their skills, software (for example risk models or UI/UX), risk capital, insurance licenses, claim processing, or regulatory compliance/reporting services. Existing projects Flight Delay Insurance: https://fdd.etherisc.com/ is in production on Ethereum\u2014fully licensed, sold worldwide for ETH, USD, EUR. A developer earns 5% of revenue (set by the developer) and 100% of underwriting profit. HurricaneGuard.io: https://hurricaneguard.io/ is deployed on the Ethereum testnet. Resources Website","title":"Etherisc"},{"location":"built-on-ethereum/open-finance/insurance/etherisc/#etherisc","text":"","title":"Etherisc"},{"location":"built-on-ethereum/open-finance/insurance/etherisc/#summary","text":"Etherisc is a protocol to collectively build insurance products. Common infrastructure, product templates and insurance license-as-a-service make a platform that allows anyone to create their own insurance products.","title":"Summary"},{"location":"built-on-ethereum/open-finance/insurance/etherisc/#dip-token","text":"DIP Tokens act as the native internal currency that is inseparable from the protocol and network of its users. DIP tokens are needed to earn transaction fees (% of insurance premiums or fixed cost), incentivize and reward platform users to bring risk to the network, build and maintain risk transfer products. The total supply of Etherisc Tokens is 1 Billion. DIP tokens give users access to the Decentralized Insurance Platform. By staking DIP token, participants provide collateral (bond) to guarantee future performance, availability, and service levels. Staking also signals quality and reputation. As a result, participants can earn money monetizing their skills, software (for example risk models or UI/UX), risk capital, insurance licenses, claim processing, or regulatory compliance/reporting services.","title":"DIP Token"},{"location":"built-on-ethereum/open-finance/insurance/etherisc/#existing-projects","text":"Flight Delay Insurance: https://fdd.etherisc.com/ is in production on Ethereum\u2014fully licensed, sold worldwide for ETH, USD, EUR. A developer earns 5% of revenue (set by the developer) and 100% of underwriting profit. HurricaneGuard.io: https://hurricaneguard.io/ is deployed on the Ethereum testnet.","title":"Existing projects"},{"location":"built-on-ethereum/open-finance/insurance/etherisc/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/open-finance/insurance/nexus-mutual/","text":"Nexus Mutual Summary Nexus Mutual is a digital cooperative built on Ethereum, allowing users to cover themselves against hacks and bugs in smart contracts. The purpose is to bring back the original community model from which insurance originated in a way where trust and capital provision is scalable. Features Bonding Curve - Nexus Mutual uses a formula-based price for its token model depending directly on the financial position of the mutual. Pricing & Risk Assessment - Cover prices are based on the characteristics of the smart contracts and how much value is staked against them. Capital - Nexus Mutual calculates its capital requirement using a framework derived from Solvency II . Claims Assessment - Claims are deemed valid via member voting. Governance - A membership organisation governed by token voting and an Advisory board. Legally wrapped in a UK discretionary mutual. Resources Website Github Whitepaper Docs Chat","title":"Nexus Mutual"},{"location":"built-on-ethereum/open-finance/insurance/nexus-mutual/#nexus-mutual","text":"","title":"Nexus Mutual"},{"location":"built-on-ethereum/open-finance/insurance/nexus-mutual/#summary","text":"Nexus Mutual is a digital cooperative built on Ethereum, allowing users to cover themselves against hacks and bugs in smart contracts. The purpose is to bring back the original community model from which insurance originated in a way where trust and capital provision is scalable.","title":"Summary"},{"location":"built-on-ethereum/open-finance/insurance/nexus-mutual/#features","text":"Bonding Curve - Nexus Mutual uses a formula-based price for its token model depending directly on the financial position of the mutual. Pricing & Risk Assessment - Cover prices are based on the characteristics of the smart contracts and how much value is staked against them. Capital - Nexus Mutual calculates its capital requirement using a framework derived from Solvency II . Claims Assessment - Claims are deemed valid via member voting. Governance - A membership organisation governed by token voting and an Advisory board. Legally wrapped in a UK discretionary mutual.","title":"Features"},{"location":"built-on-ethereum/open-finance/insurance/nexus-mutual/#resources","text":"Website Github Whitepaper Docs Chat","title":"Resources"},{"location":"built-on-ethereum/open-finance/investing/bskt/","text":"Bskt Summary Bskt allows creating portfolios of tokens. To create a Bskt portfolio, one needs to deploy a smart contract providing underlying token addresses, their weights, and the base unit of the portfolio. Once the contract is deployed, anyone can interact with it by minting new portfolio tokens in exchange for the underlying assets. These assets can then be redeemed by the owner of portfolio tokens. Portfolio tokens are ERC20 tokens that can be traded and put into another portfolio. In case some of the underlying tokens become untransferable (e.g. the transfer function was paused by the token smart contract owner), users can skip that token during redemption. Alternatively, a portfolio owner can extract this token from the portfolio, creating a new one without accessing the user funds. The owner of a Bskt portfolio can also pause creation of the new portfolio tokens in case they want to deprecate the portfolio. An owner can\u2019t pause redemption of the underlying assets. Resources Website","title":"Bskt"},{"location":"built-on-ethereum/open-finance/investing/bskt/#bskt","text":"","title":"Bskt"},{"location":"built-on-ethereum/open-finance/investing/bskt/#summary","text":"Bskt allows creating portfolios of tokens. To create a Bskt portfolio, one needs to deploy a smart contract providing underlying token addresses, their weights, and the base unit of the portfolio. Once the contract is deployed, anyone can interact with it by minting new portfolio tokens in exchange for the underlying assets. These assets can then be redeemed by the owner of portfolio tokens. Portfolio tokens are ERC20 tokens that can be traded and put into another portfolio. In case some of the underlying tokens become untransferable (e.g. the transfer function was paused by the token smart contract owner), users can skip that token during redemption. Alternatively, a portfolio owner can extract this token from the portfolio, creating a new one without accessing the user funds. The owner of a Bskt portfolio can also pause creation of the new portfolio tokens in case they want to deprecate the portfolio. An owner can\u2019t pause redemption of the underlying assets.","title":"Summary"},{"location":"built-on-ethereum/open-finance/investing/bskt/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/open-finance/investing/digix/","text":"Digix Summary Digix provides a use case for the tokenisation and documentation of physical assets through its Proof of Provenance (PoP) protocol. The PoA protocol utilises Ethereum and the InterPlanetary Files System (IPFS) to track an asset through its chain of custody. This allows for the open and public verification of an asset\u2019s existence without a centralised database. Digix also offers an API allowing other applications to be built on top of our asset tokenisation service. The platform initially allows buying and selling of tokens tied to physical gold (DGX) as well as a documentation trail for minting, transfering, destroying, and auditing of DGX. The price of one DGX is equal to the price of one gram of gold. Digix Global is a private company behind the creation of the Proof of Provenance protocol and Digix smart contracts deployed on Ethereum. In early 2016, they held one of the first Ethereum based ICOs (Initial Coin Offerings) in history in order to create the Digix DAO. The Digix DAO token (DGD) is given to buyers in the ICO based on how much they contributed. Buyers of a high enough amount of DGD were able to also purchase Digix Badge tokens (DGB) under the understanding that badge holders would be able to submit proposals to the DAO once it was live. As of Fall 2018, Digix converted approximately $20 Million USD worth of ETH from the 2016 crowdsale in order to ensure creation of the DAO and governance contracts and sustainable opperation of Digix Global for a number of years. Resources Website","title":"Digix"},{"location":"built-on-ethereum/open-finance/investing/digix/#digix","text":"","title":"Digix"},{"location":"built-on-ethereum/open-finance/investing/digix/#summary","text":"Digix provides a use case for the tokenisation and documentation of physical assets through its Proof of Provenance (PoP) protocol. The PoA protocol utilises Ethereum and the InterPlanetary Files System (IPFS) to track an asset through its chain of custody. This allows for the open and public verification of an asset\u2019s existence without a centralised database. Digix also offers an API allowing other applications to be built on top of our asset tokenisation service. The platform initially allows buying and selling of tokens tied to physical gold (DGX) as well as a documentation trail for minting, transfering, destroying, and auditing of DGX. The price of one DGX is equal to the price of one gram of gold. Digix Global is a private company behind the creation of the Proof of Provenance protocol and Digix smart contracts deployed on Ethereum. In early 2016, they held one of the first Ethereum based ICOs (Initial Coin Offerings) in history in order to create the Digix DAO. The Digix DAO token (DGD) is given to buyers in the ICO based on how much they contributed. Buyers of a high enough amount of DGD were able to also purchase Digix Badge tokens (DGB) under the understanding that badge holders would be able to submit proposals to the DAO once it was live. As of Fall 2018, Digix converted approximately $20 Million USD worth of ETH from the 2016 crowdsale in order to ensure creation of the DAO and governance contracts and sustainable opperation of Digix Global for a number of years.","title":"Summary"},{"location":"built-on-ethereum/open-finance/investing/digix/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/open-finance/investing/set-protocol/","text":"Set Protocol Summary Set Protocol allows grouping multiple tokens into one asset. Each set is a deployed smart contract with each set being fully-collateralized. Anyone can deposit a token to the set contract and withdraw them back, which makes the sets permissionless. Sets comply with the ERC20 standard, so they can be transferred and traded on exchanges. This also means that sets can be grouped into other sets. To reduce friction, users can acquire multi-token sets with a single token (for example, with WETH or DAI). To do that, they will need to make or take an issue order. This order is transported off-chain via issuance relayers for anyone to fill them. Liquidity for the underlying tokens is taken from decentralized exchanges. Users can opt to a rebalancing set. In a rebalancing set, weights of each token can be realigned to maintain desired properties in a changing market. For example, a rebalancing set can represent equal shares of the top 10 Ethereum tokens. Then, if one of the tokens appreciates in value, the set manager will sell some of it and will buy other tokens in equal amounts to maintain value distribution. Resources Website","title":"Set Protocol"},{"location":"built-on-ethereum/open-finance/investing/set-protocol/#set-protocol","text":"","title":"Set Protocol"},{"location":"built-on-ethereum/open-finance/investing/set-protocol/#summary","text":"Set Protocol allows grouping multiple tokens into one asset. Each set is a deployed smart contract with each set being fully-collateralized. Anyone can deposit a token to the set contract and withdraw them back, which makes the sets permissionless. Sets comply with the ERC20 standard, so they can be transferred and traded on exchanges. This also means that sets can be grouped into other sets. To reduce friction, users can acquire multi-token sets with a single token (for example, with WETH or DAI). To do that, they will need to make or take an issue order. This order is transported off-chain via issuance relayers for anyone to fill them. Liquidity for the underlying tokens is taken from decentralized exchanges. Users can opt to a rebalancing set. In a rebalancing set, weights of each token can be realigned to maintain desired properties in a changing market. For example, a rebalancing set can represent equal shares of the top 10 Ethereum tokens. Then, if one of the tokens appreciates in value, the set manager will sell some of it and will buy other tokens in equal amounts to maintain value distribution.","title":"Summary"},{"location":"built-on-ethereum/open-finance/investing/set-protocol/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/open-finance/investing/wbtc/","text":"Wrapped Bitcoin (WBTC) What is Wrapped Bitcoin (WBTC)? WBTC brings greater liquidity to the Ethereum ecosystem including decentralized exchanges (DEXs) and financial applications. Today, the majority of trading volume takes place on centralized exchanges with Bitcoin. WBTC changes that, bringing Bitcoin\u2019s liquidity to DEXs and making it possible to use Bitcoin for token trades. WBTC standardizes Bitcoin to the ERC20 format, creating smart contracts for Bitcoin. This makes it easier to write smart contracts that integrate Bitcoin transfers. Maintaining various nodes and managing transaction types in order to support multiple currencies can be onerous. Now exchanges, wallets, and payment apps only need to handle an Ethereum node. WBTC DAO The addition and removal of merchants and custodians will be an open process controlled by a multi-signature contract. Keys to the multi-sig contract will be held by institutions as part of the WBTC DAO. Merchants Merchants perform key roles for the WBTC community and are sources of token distribution. They interact with custodians in order to mint and burn WBTC and provide KYC/AML for users. Custodians The custodian provides reliable, institutional-grade security for your WBTC. All WBTC issued will be fully backed and verified through on-chain proof of reserves. How it works Receiving To receive WBTC, a user requests tokens from a merchant. The merchant then performs the required KYC / AML procedures and verifies the user\u2019s identity. Once this is completed, the user and merchant execute their swap, with Bitcoin from the user transferring to the merchant, and WBTC from the merchant transferring to the user. Minting Minting refers to the process of creating new wrapped tokens. Minting in the wrapped framework is initiated by a merchant and performed by a custodian. Burning Burning is the action of redeeming Bitcoin for WBTC tokens, and only merchant addresses can do this. The amount to be \u2018burnt\u2019 is deducted from the merchant\u2019s WBTC balance (on chain) and the supply of WBTC is then reduced. Partners Resources DeFi Pulse WBTC Contract Website WBTC Dashboard","title":"WBTC"},{"location":"built-on-ethereum/open-finance/investing/wbtc/#wrapped-bitcoin-wbtc","text":"","title":"Wrapped Bitcoin (WBTC)"},{"location":"built-on-ethereum/open-finance/investing/wbtc/#what-is-wrapped-bitcoin-wbtc","text":"WBTC brings greater liquidity to the Ethereum ecosystem including decentralized exchanges (DEXs) and financial applications. Today, the majority of trading volume takes place on centralized exchanges with Bitcoin. WBTC changes that, bringing Bitcoin\u2019s liquidity to DEXs and making it possible to use Bitcoin for token trades. WBTC standardizes Bitcoin to the ERC20 format, creating smart contracts for Bitcoin. This makes it easier to write smart contracts that integrate Bitcoin transfers. Maintaining various nodes and managing transaction types in order to support multiple currencies can be onerous. Now exchanges, wallets, and payment apps only need to handle an Ethereum node.","title":"What is Wrapped Bitcoin (WBTC)?"},{"location":"built-on-ethereum/open-finance/investing/wbtc/#wbtc-dao","text":"The addition and removal of merchants and custodians will be an open process controlled by a multi-signature contract. Keys to the multi-sig contract will be held by institutions as part of the WBTC DAO.","title":"WBTC DAO"},{"location":"built-on-ethereum/open-finance/investing/wbtc/#merchants","text":"Merchants perform key roles for the WBTC community and are sources of token distribution. They interact with custodians in order to mint and burn WBTC and provide KYC/AML for users.","title":"Merchants"},{"location":"built-on-ethereum/open-finance/investing/wbtc/#custodians","text":"The custodian provides reliable, institutional-grade security for your WBTC. All WBTC issued will be fully backed and verified through on-chain proof of reserves.","title":"Custodians"},{"location":"built-on-ethereum/open-finance/investing/wbtc/#how-it-works","text":"","title":"How it works"},{"location":"built-on-ethereum/open-finance/investing/wbtc/#receiving","text":"To receive WBTC, a user requests tokens from a merchant. The merchant then performs the required KYC / AML procedures and verifies the user\u2019s identity. Once this is completed, the user and merchant execute their swap, with Bitcoin from the user transferring to the merchant, and WBTC from the merchant transferring to the user.","title":"Receiving"},{"location":"built-on-ethereum/open-finance/investing/wbtc/#minting","text":"Minting refers to the process of creating new wrapped tokens. Minting in the wrapped framework is initiated by a merchant and performed by a custodian.","title":"Minting"},{"location":"built-on-ethereum/open-finance/investing/wbtc/#burning","text":"Burning is the action of redeeming Bitcoin for WBTC tokens, and only merchant addresses can do this. The amount to be \u2018burnt\u2019 is deducted from the merchant\u2019s WBTC balance (on chain) and the supply of WBTC is then reduced.","title":"Burning"},{"location":"built-on-ethereum/open-finance/investing/wbtc/#partners","text":"","title":"Partners"},{"location":"built-on-ethereum/open-finance/investing/wbtc/#resources","text":"DeFi Pulse WBTC Contract Website WBTC Dashboard","title":"Resources"},{"location":"built-on-ethereum/open-finance/lending/bzx/","text":"bZx Summary bZx defines a protocol for decentralized margin trading. It employs a hybrid order model, where third-party relayers each maintain their own order book while orders are settled on-chain. To provide fair pricing of assets, bZx uses oracle providers to send price data to the network. Providers set a fee for their services and users select oracles of their choice when they make orders. bZx plans to introduce an 'Oracle Registry', which will aggregate oracles selected via a decentralized governance process. Products built on bZx protocol Fulcrum - margin trading platform Torque - crypto borrowing platform Resources Website Protocol documentation DeFi Pulse Twitter Telegram Discord","title":"bzx"},{"location":"built-on-ethereum/open-finance/lending/bzx/#bzx","text":"","title":"bZx"},{"location":"built-on-ethereum/open-finance/lending/bzx/#summary","text":"bZx defines a protocol for decentralized margin trading. It employs a hybrid order model, where third-party relayers each maintain their own order book while orders are settled on-chain. To provide fair pricing of assets, bZx uses oracle providers to send price data to the network. Providers set a fee for their services and users select oracles of their choice when they make orders. bZx plans to introduce an 'Oracle Registry', which will aggregate oracles selected via a decentralized governance process.","title":"Summary"},{"location":"built-on-ethereum/open-finance/lending/bzx/#products-built-on-bzx-protocol","text":"Fulcrum - margin trading platform Torque - crypto borrowing platform","title":"Products built on bZx protocol"},{"location":"built-on-ethereum/open-finance/lending/bzx/#resources","text":"Website Protocol documentation DeFi Pulse Twitter Telegram Discord","title":"Resources"},{"location":"built-on-ethereum/open-finance/lending/compound/","text":"Compound Summary Compound gives you the ability to borrow and lend tokens. In Compound, users contribute to a shared pool of tokens, from which lenders can receive a debt. Lenders can repay the debt at any time, as long as they maintain enough collateral. In case their debt becomes under collateralized, users of the protocol can default the lender\u2019s debt by selling his assets in an auction. Interest rates An interest rate of each lending and borrowing is defined by the size of the liquidity pool. There are different rates for borrowing and supplying tokens. These rates fluctuate based on the ratio of borrowed tokens to supplied tokens. Available tokens BAT DAI Augur WETH 0x USD Coin History Seed funding On May. 16, 2018 , Compound announced that it had raised $8.2 million in seed funding. The financing was led by Bain Capital Ventures, Andreessen Horowitz and Polychain Capital, with participation from Transmedia Capital, Compound Ventures, Abstract Ventures, Danhua Capital and Coinbase. Resources DeFi Pulse Website Curious Giraffe Analytics","title":"Compound"},{"location":"built-on-ethereum/open-finance/lending/compound/#compound","text":"","title":"Compound"},{"location":"built-on-ethereum/open-finance/lending/compound/#summary","text":"Compound gives you the ability to borrow and lend tokens. In Compound, users contribute to a shared pool of tokens, from which lenders can receive a debt. Lenders can repay the debt at any time, as long as they maintain enough collateral. In case their debt becomes under collateralized, users of the protocol can default the lender\u2019s debt by selling his assets in an auction.","title":"Summary"},{"location":"built-on-ethereum/open-finance/lending/compound/#interest-rates","text":"An interest rate of each lending and borrowing is defined by the size of the liquidity pool. There are different rates for borrowing and supplying tokens. These rates fluctuate based on the ratio of borrowed tokens to supplied tokens.","title":"Interest rates"},{"location":"built-on-ethereum/open-finance/lending/compound/#available-tokens","text":"BAT DAI Augur WETH 0x USD Coin","title":"Available tokens"},{"location":"built-on-ethereum/open-finance/lending/compound/#history","text":"","title":"History"},{"location":"built-on-ethereum/open-finance/lending/compound/#seed-funding","text":"On May. 16, 2018 , Compound announced that it had raised $8.2 million in seed funding. The financing was led by Bain Capital Ventures, Andreessen Horowitz and Polychain Capital, with participation from Transmedia Capital, Compound Ventures, Abstract Ventures, Danhua Capital and Coinbase.","title":"Seed funding"},{"location":"built-on-ethereum/open-finance/lending/compound/#resources","text":"DeFi Pulse Website Curious Giraffe Analytics","title":"Resources"},{"location":"built-on-ethereum/open-finance/lending/dharma/","text":"Dharma Summary Dharma is a protocol for issuing debt. The goal of this protocol is to create a pool of debtors and creditors. Similar to 0x, Dharma utilizes the concept of relayers and the goal of relayers is to provide the interface to submit and gather orders. These orders are stored off-chain and only settled orders go to the blockchain. It\u2019s up to relayers to decide which orders they accept. It is possible to take a loan without using cryptocurrency as collateral, or without collateral at all, as debtors can request a debt from one of the underwriters. An underwriter is an entity who evaluates debtor\u2019s credibility and manages the debt parameters. Once the debtor and underwriter settle, the latter must submit the signed offer to one of the Dharma relayers. Creditors can then evaluate the offer\u2019s terms and underwriter\u2019s reputation to decide whether to trust it. From 29 August Dharma is the easiesy way, which use Compound, to save money from anywhere in the world. Resources DeFi Pulse Website Loan Explorer","title":"Dharma"},{"location":"built-on-ethereum/open-finance/lending/dharma/#dharma","text":"","title":"Dharma"},{"location":"built-on-ethereum/open-finance/lending/dharma/#summary","text":"Dharma is a protocol for issuing debt. The goal of this protocol is to create a pool of debtors and creditors. Similar to 0x, Dharma utilizes the concept of relayers and the goal of relayers is to provide the interface to submit and gather orders. These orders are stored off-chain and only settled orders go to the blockchain. It\u2019s up to relayers to decide which orders they accept. It is possible to take a loan without using cryptocurrency as collateral, or without collateral at all, as debtors can request a debt from one of the underwriters. An underwriter is an entity who evaluates debtor\u2019s credibility and manages the debt parameters. Once the debtor and underwriter settle, the latter must submit the signed offer to one of the Dharma relayers. Creditors can then evaluate the offer\u2019s terms and underwriter\u2019s reputation to decide whether to trust it. From 29 August Dharma is the easiesy way, which use Compound, to save money from anywhere in the world.","title":"Summary"},{"location":"built-on-ethereum/open-finance/lending/dharma/#resources","text":"DeFi Pulse Website Loan Explorer","title":"Resources"},{"location":"built-on-ethereum/open-finance/lending/dydx/","text":"dYdX Summary dYdX provides a way to trade derivatives on Ethereum. Users of the protocol can trade with margin, which allows them to short any ERC20 token or buy any token with leverage. Opening a position requires taking a debt. Therefore, a margin trader will need to find a creditor who will lend them the required tokens. Users negotiate via relayers or in private, then settle on-chain once they agree on terms. dYdX also plans to support options trading. Options give a right to its owner to buy or sell an asset in the future at the specified price. It can be used as a speculation or a hedge. Resources DeFi Pulse Website Scout Dashboard dYdX Positions","title":"dydx"},{"location":"built-on-ethereum/open-finance/lending/dydx/#dydx","text":"","title":"dYdX"},{"location":"built-on-ethereum/open-finance/lending/dydx/#summary","text":"dYdX provides a way to trade derivatives on Ethereum. Users of the protocol can trade with margin, which allows them to short any ERC20 token or buy any token with leverage. Opening a position requires taking a debt. Therefore, a margin trader will need to find a creditor who will lend them the required tokens. Users negotiate via relayers or in private, then settle on-chain once they agree on terms. dYdX also plans to support options trading. Options give a right to its owner to buy or sell an asset in the future at the specified price. It can be used as a speculation or a hedge.","title":"Summary"},{"location":"built-on-ethereum/open-finance/lending/dydx/#resources","text":"DeFi Pulse Website Scout Dashboard dYdX Positions","title":"Resources"},{"location":"built-on-ethereum/open-finance/lending/fulcrum/","text":"Fulcrum Summary Fulcrum is the most simple and powerful way to lend and margin trade. It is the first and only completely trustless platform for margin; it does not use centralized price feeds or centrally administered margin calls. It is permissionless and rent free; there are no fees and no accounts. Fulcrum is built on the bZx base protocol and extends the protocol by allowing both loans and margin positions to be tokenized. The bZx base protocol was successfully audited by ZK Labs . Collateral Types DAI, ETH, WBTC, LINK, ZRX, REP and KNC tokens could be used as collateral. Resources Website DeFi Pulse Introducing Fulcrum: Tokenized Margin Made Dead Simple Twitter Telegram Discord","title":"Fulcrum"},{"location":"built-on-ethereum/open-finance/lending/fulcrum/#fulcrum","text":"","title":"Fulcrum"},{"location":"built-on-ethereum/open-finance/lending/fulcrum/#summary","text":"Fulcrum is the most simple and powerful way to lend and margin trade. It is the first and only completely trustless platform for margin; it does not use centralized price feeds or centrally administered margin calls. It is permissionless and rent free; there are no fees and no accounts. Fulcrum is built on the bZx base protocol and extends the protocol by allowing both loans and margin positions to be tokenized. The bZx base protocol was successfully audited by ZK Labs .","title":"Summary"},{"location":"built-on-ethereum/open-finance/lending/fulcrum/#collateral-types","text":"DAI, ETH, WBTC, LINK, ZRX, REP and KNC tokens could be used as collateral.","title":"Collateral Types"},{"location":"built-on-ethereum/open-finance/lending/fulcrum/#resources","text":"Website DeFi Pulse Introducing Fulcrum: Tokenized Margin Made Dead Simple Twitter Telegram Discord","title":"Resources"},{"location":"built-on-ethereum/open-finance/lending/maker/","text":"MakerDAO Summary MakerDAO is a decentralized credit platform on Ethereum that supports Dai, a stablecoin whose value is pegged to USD. Anyone can use Maker to open a Collateralized Debt Position (CDP), lock ETH as collateral, and generate Dai as debt against that collateral. Dai debt incurs a stability fee (i.e., continuously accruing interest), which is paid (in MKR) upon repayment of borrowed Dai. That MKR is burned, along with the repaid Dai. Users can borrow Dai up to 66% of their collateral\u2019s value (150% collateralization ratio). CDPs that fall below that rate are subject to a 13% penalty and liquidation (by anyone) to bring the CDP out of default. Liquidated collateral is sold on an open market at a 3% discount. The MKR Token Holders of Maker\u2019s other token (MKR) govern the system by voting on, e.g., risk parameters such as the stability fee level. MKR holders also act as the last line of defense in case of a black swan event. If systemwide collateral value falls too low too fast, MKR is minted and sold on the open market to raise more collateral, diluting MKR holders. Collateral Types As of June 2019, only ETH can be used as collateral. A planned upgrade to Multi-Collateral Dai should add support for other assets. MKR holders will decide which new assets to support and the risk parameters for each. Resources DeFi Pulse Website Official CDP Portal Introduction to Burner Wallet Subreddit Twitter Maker Chat Watch maker burn","title":"Maker"},{"location":"built-on-ethereum/open-finance/lending/maker/#makerdao","text":"","title":"MakerDAO"},{"location":"built-on-ethereum/open-finance/lending/maker/#summary","text":"MakerDAO is a decentralized credit platform on Ethereum that supports Dai, a stablecoin whose value is pegged to USD. Anyone can use Maker to open a Collateralized Debt Position (CDP), lock ETH as collateral, and generate Dai as debt against that collateral. Dai debt incurs a stability fee (i.e., continuously accruing interest), which is paid (in MKR) upon repayment of borrowed Dai. That MKR is burned, along with the repaid Dai. Users can borrow Dai up to 66% of their collateral\u2019s value (150% collateralization ratio). CDPs that fall below that rate are subject to a 13% penalty and liquidation (by anyone) to bring the CDP out of default. Liquidated collateral is sold on an open market at a 3% discount.","title":"Summary"},{"location":"built-on-ethereum/open-finance/lending/maker/#the-mkr-token","text":"Holders of Maker\u2019s other token (MKR) govern the system by voting on, e.g., risk parameters such as the stability fee level. MKR holders also act as the last line of defense in case of a black swan event. If systemwide collateral value falls too low too fast, MKR is minted and sold on the open market to raise more collateral, diluting MKR holders.","title":"The MKR Token"},{"location":"built-on-ethereum/open-finance/lending/maker/#collateral-types","text":"As of June 2019, only ETH can be used as collateral. A planned upgrade to Multi-Collateral Dai should add support for other assets. MKR holders will decide which new assets to support and the risk parameters for each.","title":"Collateral Types"},{"location":"built-on-ethereum/open-finance/lending/maker/#resources","text":"DeFi Pulse Website Official CDP Portal Introduction to Burner Wallet Subreddit Twitter Maker Chat Watch maker burn","title":"Resources"},{"location":"built-on-ethereum/open-finance/lending/torque/","text":"Torque Summary Torque, the first borrowing platform with indefinite-term loans and fixed interest rates. Torque is uniquely both an App and a dApp. Torque works with any web3 wallet like Metamask, Dapper, Nifty, & co., but it also works with every other type of wallet. This is enabled by Torque\u2019s first-of-its-kind ENS loan system which allows users to borrow assets by simply sending collateral to a human-readable ENS domain from any wallet. Best of all, it does this without requiring any accounts or charging any fees. The bZx base protocol was successfully audited by ZK Labs . Collateral Types DAI, ETH, WBTC, LINK, ZRX, REP and KNC tokens could be used as collateral. Resources Website DeFi Pulse Introducing Torque: Borrowing Made Simple Twitter Telegram Discord","title":"Torque"},{"location":"built-on-ethereum/open-finance/lending/torque/#torque","text":"","title":"Torque"},{"location":"built-on-ethereum/open-finance/lending/torque/#summary","text":"Torque, the first borrowing platform with indefinite-term loans and fixed interest rates. Torque is uniquely both an App and a dApp. Torque works with any web3 wallet like Metamask, Dapper, Nifty, & co., but it also works with every other type of wallet. This is enabled by Torque\u2019s first-of-its-kind ENS loan system which allows users to borrow assets by simply sending collateral to a human-readable ENS domain from any wallet. Best of all, it does this without requiring any accounts or charging any fees. The bZx base protocol was successfully audited by ZK Labs .","title":"Summary"},{"location":"built-on-ethereum/open-finance/lending/torque/#collateral-types","text":"DAI, ETH, WBTC, LINK, ZRX, REP and KNC tokens could be used as collateral.","title":"Collateral Types"},{"location":"built-on-ethereum/open-finance/lending/torque/#resources","text":"Website DeFi Pulse Introducing Torque: Borrowing Made Simple Twitter Telegram Discord","title":"Resources"},{"location":"built-on-ethereum/open-finance/payments/burner-wallet/","text":"Burner Wallet (xDai) Summary Founded by Austin Griffith , The Burner Wallet is a wallet that allows users to interact with the xDai sidechain from POA . xDai is the USD-stable coin that is a representation of Dai but lives on the xDai Chain, instead of Ethereum mainnet. You can use the TokenBridge to convert Dai from Ethereum Mainnet to xDai on xDai Chain or do this inside the Burner Wallet itself. Please note that the Burner Wallet is new and the site is constantly being improved. How to use the Burner Wallet First, it\u2019s suggested at the moment to use the Burner Wallet without MetaMask. While it\u2019s possible to use MetaMask, it is not necessary and adds some overhead. Suggested use right now would be in a mobile browser or in a private browser tab (to avoid MetaMask). Wallet Generation Upon visiting https://xdai.io a wallet is automatically generated and your private key is stored in a cookie in your browser. There are multiple ways to backup and restore your Burner Wallet in the Advanced section. Private Key: Show private key and save it somewhere. This can be inserted into the Private Key box in the future and upon hitting create, the wallet will be restored. Seed Phrase: Create any string of words or phrase that you want and hit create. This will create a wallet tied to that phrase and you can reenter it and pull it up at any point. WARNING: Doing this the first time will create a NEW wallet. Getting xDai As previously mentioned, xDai is a representation of Dai running on a POA sidechain. This means that you must lock up Dai on the Ethereum mainnet to be minted xDai tokens. The Burner Wallet makes this easy through the Exchange section of the page. You can start with just ETH or Dai. If you start with ETH you must go ETH > Dai > xDai using this page. Once complete, you have xDai in your wallet. Exiting xDai Leaving the xDai chain is just as easy as getting on but in reverse. Simply go to the Exchange page and convert from xDai to Dai and then onto ETH if you want. Sending and Receiving xDai Sending and Receiving xDai is extremely easy. Simply get the address of whoever you want to send to or scan a QR code which is generated inside the wallet. Users can also request funds via the Request option which generates a link for others to drop in their browser. Resources DeFi Pulse Website Github Introduction to Burner Wallet Burner Wallet Video xDai Chain Explained xDai Burner Wallet Guide","title":"Burner Wallet"},{"location":"built-on-ethereum/open-finance/payments/burner-wallet/#burner-wallet-xdai","text":"","title":"Burner Wallet (xDai)"},{"location":"built-on-ethereum/open-finance/payments/burner-wallet/#summary","text":"Founded by Austin Griffith , The Burner Wallet is a wallet that allows users to interact with the xDai sidechain from POA . xDai is the USD-stable coin that is a representation of Dai but lives on the xDai Chain, instead of Ethereum mainnet. You can use the TokenBridge to convert Dai from Ethereum Mainnet to xDai on xDai Chain or do this inside the Burner Wallet itself. Please note that the Burner Wallet is new and the site is constantly being improved.","title":"Summary"},{"location":"built-on-ethereum/open-finance/payments/burner-wallet/#how-to-use-the-burner-wallet","text":"First, it\u2019s suggested at the moment to use the Burner Wallet without MetaMask. While it\u2019s possible to use MetaMask, it is not necessary and adds some overhead. Suggested use right now would be in a mobile browser or in a private browser tab (to avoid MetaMask).","title":"How to use the Burner Wallet"},{"location":"built-on-ethereum/open-finance/payments/burner-wallet/#wallet-generation","text":"Upon visiting https://xdai.io a wallet is automatically generated and your private key is stored in a cookie in your browser. There are multiple ways to backup and restore your Burner Wallet in the Advanced section. Private Key: Show private key and save it somewhere. This can be inserted into the Private Key box in the future and upon hitting create, the wallet will be restored. Seed Phrase: Create any string of words or phrase that you want and hit create. This will create a wallet tied to that phrase and you can reenter it and pull it up at any point. WARNING: Doing this the first time will create a NEW wallet.","title":"Wallet Generation"},{"location":"built-on-ethereum/open-finance/payments/burner-wallet/#getting-xdai","text":"As previously mentioned, xDai is a representation of Dai running on a POA sidechain. This means that you must lock up Dai on the Ethereum mainnet to be minted xDai tokens. The Burner Wallet makes this easy through the Exchange section of the page. You can start with just ETH or Dai. If you start with ETH you must go ETH > Dai > xDai using this page. Once complete, you have xDai in your wallet.","title":"Getting xDai"},{"location":"built-on-ethereum/open-finance/payments/burner-wallet/#exiting-xdai","text":"Leaving the xDai chain is just as easy as getting on but in reverse. Simply go to the Exchange page and convert from xDai to Dai and then onto ETH if you want.","title":"Exiting xDai"},{"location":"built-on-ethereum/open-finance/payments/burner-wallet/#sending-and-receiving-xdai","text":"Sending and Receiving xDai is extremely easy. Simply get the address of whoever you want to send to or scan a QR code which is generated inside the wallet. Users can also request funds via the Request option which generates a link for others to drop in their browser.","title":"Sending and Receiving xDai"},{"location":"built-on-ethereum/open-finance/payments/burner-wallet/#resources","text":"DeFi Pulse Website Github Introduction to Burner Wallet Burner Wallet Video xDai Chain Explained xDai Burner Wallet Guide","title":"Resources"},{"location":"built-on-ethereum/open-finance/payments/daicard/","text":"The Dai Card Summary Dai Card is a Dai payment channel solution created by Connext . The Dai Card uses payment channel hubs - a L2 solution built on top of Ethereum - to allow for instant and micro-fee transactions for users and developers. How to Use the Dai Card Getting Funds There are multiple ways to get funds onto your Dai Card. The first is to directly send funds (i.e. \"deposit\") to the Dai Card's address. You can deposit either ETH or Dai. If you deposit ETH, it will be instantly and automatically swapped into Dai at the current Eth-Dai price. Note: the beta version of the Dai Card imposes a $30 limit and will refund any deposits above this amount. You can also request funds from someone else who is already using a Dai Card. This can be done by clicking the request button and entering in how much you\u2019d like to request. A link will be generated and can be sent to the person you want to request from. The first transaction that is sent to your Card will take some extra time to execute. This is because, in the background, an onchain transaction is being done to set up your Card. Sending Funds There are two different ways to send funds. If the receiver already has a Dai Card and you know their address, then it\u2019s best to just use the simple send functionality. If the receiver has never used a Dai Card before, you can use a Link payment instead. Link payments generate an unspent payment object which can be \"claimed\" by the recipient that produces the correct secret. Note that the link generated here contains the secret to redeem funds in plaintext, so you should be careful with it. Settings It\u2019s possible to backup your Card's seed and restore it in any browser, at any time. You can also restore this seed in other wallets such as Metamask, MyCrypto or TrustWallet. However, this will not give you access to the channel funds themselves, only the signing key used to control those funds. FAQ When I deposit ETH into a Card and I receive Dai, is the ETH being automatically sold to Connext? A: Yes. Connext's payment channel hub automatically swaps any ETH for Dai that you deposit at market price. The swapped ETH then goes into the hub's collateral reserves, which is used either when users \"cash out\" in Eth or when more Dai needs to be bought by the Connext team. Since it's much easier for most users to get access to Eth than Dai (and to off-ramp to fiat from Eth), Connext expects that this will make it simpler to use Dai for everyday payments. If I deposit 1 ETH into a channel can I later withdraw 1 ETH from that channel? For example, if the price of ETH goes up while my ETH is in a channel and I then withdraw it, do I get the value of the ETH at the time of withdraw or at the time of deposit? A: No. You are swapping into Dai when you use the Card. Users have the benefit of being protected from volatility but, obviously, this means that you wouldn\u2019t see the upside of an Eth bull run. Since you're not meant to hold large amounts of value in your Card anyway (only daily spending cash), the upside that you would miss out on should be minimal. Is the Dai Card noncustodial? A: The concept of custodial is more nuanced for channels: In Connext's payment channel hub system, your funds are always your own since you can exit the system at any time by sending your latest channel state to the payment channel contract. This can be done regardless of the status of the hub - i.e. it is completely uncensorable. Note, this assumes that you have access to your channel state - the Connext team is still working on making sure that this will always be the case. A payment itself can be custodial. This means that for the brief moment that a payment is \"in-flight\", it can be intercepted and/or censored by the hub. Obviously, if this happened and you knew about it, you would exit the system so your financial risk is constrained by the size of the payment itself. Payments can also be noncustodial using more complex mechanisms (such as lightning-style HTLCs or, in Connext's case, a dispute-based system called \"threads). Connext's system is live with custodial payments for now. The noncustodial payment code is in the hub and client codebase as part of the launch, but the team is still working on making sure that the user experience of noncustodial payments is seamless, and so they have kept it deactivated for the initial launch. They plan to reactivate it within the first couple of weeks of going live. For a more in-depth breakdown of the current trust assumptions in the system and how the team plans to address them, please see Connext's Dai Card launch post here . What is the difference between this approach and Sidechain/Plasma approaches like xDai? A: The primary difference between channels and sidechains are that channels are a solution that scale up the existing blockchain whereas sidechains shift load out onto other chains. Because channelized systems can be built on top of any underlying chain, they are theoretically better for widespread horizontal infrastructure that aims to serve ALL users whereas sidechain/plasma based solutions are better for application-specific use cases. Think of the difference between the Visa network and Uber. At scale, sidechains and plasma suffer from the same scalability problems as the base chain, which would require creating further sub-chains or using channels to solve. Moving into and out of sidechains/plasma systems can be more difficult since it involves moving value across different chains, rather than within the base chain. In the event of a mass exit from the system (because the chain went down), it is also sometimes unclear how all users could move their value back onto the base chain. However, sidechains/plasma are much more flexible once within the system, do not require significant collateral lockuup to run, and do not require counterparties to be online/available. Channels, on the other hand, are easier to get into and out of. They are also much cheaper to run/scale and funds can always be exited onto the base chain no matter the circumstances. The downsides of channel networks are that they require intermediaries to hold collateral in order to ensure that a transaction will be completed and that they require that those intermediaries (and counterparties) to be available when a transaction occurs. Note that the availability requirements can be improved with better conditional payment functionality. Does Connext have to put reserves in the channel itself? Can this run or cap out? A: Yes. The ChannelManager contract (0xdfa6edae2ec0cf1d4a60542422724a48195a5071) has Eth and Dai reserves in it. All channels are automatically collateralized based on the reserves in this contract. If it runs out, channels would stop being collateralized and this would interrupt payments. If a channel stops being collateralized, how will users be alerted that payments are currently interrupted (e.g. does the UI show an alert and grey\u2019s out the SEND button)? How long might outages last, on average? A: The most noticeable instance of this occurring will be when a Card receives its first payment. For a standard payment, the sender's UI will state that the receiver's Card is still being set up and whill show a progress indicator. For a link payment, the redeem payment screen will state that the Card is being set up and will show a similar progress indicator. In both of these cases, collateralization of the channel occurs in the background and takes ~30-40s (block time + 2 block confirmations) to complete. Aside from these instances, most payments should be instant. Connext is still working on better ways to optmistically allocate collateral to channels so users can expect the user experience around this to improve with time. Resources DeFi Pulse Website","title":"The Dai Card"},{"location":"built-on-ethereum/open-finance/payments/daicard/#the-dai-card","text":"","title":"The Dai Card"},{"location":"built-on-ethereum/open-finance/payments/daicard/#summary","text":"Dai Card is a Dai payment channel solution created by Connext . The Dai Card uses payment channel hubs - a L2 solution built on top of Ethereum - to allow for instant and micro-fee transactions for users and developers.","title":"Summary"},{"location":"built-on-ethereum/open-finance/payments/daicard/#how-to-use-the-dai-card","text":"","title":"How to Use the Dai Card"},{"location":"built-on-ethereum/open-finance/payments/daicard/#getting-funds","text":"There are multiple ways to get funds onto your Dai Card. The first is to directly send funds (i.e. \"deposit\") to the Dai Card's address. You can deposit either ETH or Dai. If you deposit ETH, it will be instantly and automatically swapped into Dai at the current Eth-Dai price. Note: the beta version of the Dai Card imposes a $30 limit and will refund any deposits above this amount. You can also request funds from someone else who is already using a Dai Card. This can be done by clicking the request button and entering in how much you\u2019d like to request. A link will be generated and can be sent to the person you want to request from. The first transaction that is sent to your Card will take some extra time to execute. This is because, in the background, an onchain transaction is being done to set up your Card.","title":"Getting Funds"},{"location":"built-on-ethereum/open-finance/payments/daicard/#sending-funds","text":"There are two different ways to send funds. If the receiver already has a Dai Card and you know their address, then it\u2019s best to just use the simple send functionality. If the receiver has never used a Dai Card before, you can use a Link payment instead. Link payments generate an unspent payment object which can be \"claimed\" by the recipient that produces the correct secret. Note that the link generated here contains the secret to redeem funds in plaintext, so you should be careful with it.","title":"Sending Funds"},{"location":"built-on-ethereum/open-finance/payments/daicard/#settings","text":"It\u2019s possible to backup your Card's seed and restore it in any browser, at any time. You can also restore this seed in other wallets such as Metamask, MyCrypto or TrustWallet. However, this will not give you access to the channel funds themselves, only the signing key used to control those funds.","title":"Settings"},{"location":"built-on-ethereum/open-finance/payments/daicard/#faq","text":"When I deposit ETH into a Card and I receive Dai, is the ETH being automatically sold to Connext? A: Yes. Connext's payment channel hub automatically swaps any ETH for Dai that you deposit at market price. The swapped ETH then goes into the hub's collateral reserves, which is used either when users \"cash out\" in Eth or when more Dai needs to be bought by the Connext team. Since it's much easier for most users to get access to Eth than Dai (and to off-ramp to fiat from Eth), Connext expects that this will make it simpler to use Dai for everyday payments. If I deposit 1 ETH into a channel can I later withdraw 1 ETH from that channel? For example, if the price of ETH goes up while my ETH is in a channel and I then withdraw it, do I get the value of the ETH at the time of withdraw or at the time of deposit? A: No. You are swapping into Dai when you use the Card. Users have the benefit of being protected from volatility but, obviously, this means that you wouldn\u2019t see the upside of an Eth bull run. Since you're not meant to hold large amounts of value in your Card anyway (only daily spending cash), the upside that you would miss out on should be minimal. Is the Dai Card noncustodial? A: The concept of custodial is more nuanced for channels: In Connext's payment channel hub system, your funds are always your own since you can exit the system at any time by sending your latest channel state to the payment channel contract. This can be done regardless of the status of the hub - i.e. it is completely uncensorable. Note, this assumes that you have access to your channel state - the Connext team is still working on making sure that this will always be the case. A payment itself can be custodial. This means that for the brief moment that a payment is \"in-flight\", it can be intercepted and/or censored by the hub. Obviously, if this happened and you knew about it, you would exit the system so your financial risk is constrained by the size of the payment itself. Payments can also be noncustodial using more complex mechanisms (such as lightning-style HTLCs or, in Connext's case, a dispute-based system called \"threads). Connext's system is live with custodial payments for now. The noncustodial payment code is in the hub and client codebase as part of the launch, but the team is still working on making sure that the user experience of noncustodial payments is seamless, and so they have kept it deactivated for the initial launch. They plan to reactivate it within the first couple of weeks of going live. For a more in-depth breakdown of the current trust assumptions in the system and how the team plans to address them, please see Connext's Dai Card launch post here . What is the difference between this approach and Sidechain/Plasma approaches like xDai? A: The primary difference between channels and sidechains are that channels are a solution that scale up the existing blockchain whereas sidechains shift load out onto other chains. Because channelized systems can be built on top of any underlying chain, they are theoretically better for widespread horizontal infrastructure that aims to serve ALL users whereas sidechain/plasma based solutions are better for application-specific use cases. Think of the difference between the Visa network and Uber. At scale, sidechains and plasma suffer from the same scalability problems as the base chain, which would require creating further sub-chains or using channels to solve. Moving into and out of sidechains/plasma systems can be more difficult since it involves moving value across different chains, rather than within the base chain. In the event of a mass exit from the system (because the chain went down), it is also sometimes unclear how all users could move their value back onto the base chain. However, sidechains/plasma are much more flexible once within the system, do not require significant collateral lockuup to run, and do not require counterparties to be online/available. Channels, on the other hand, are easier to get into and out of. They are also much cheaper to run/scale and funds can always be exited onto the base chain no matter the circumstances. The downsides of channel networks are that they require intermediaries to hold collateral in order to ensure that a transaction will be completed and that they require that those intermediaries (and counterparties) to be available when a transaction occurs. Note that the availability requirements can be improved with better conditional payment functionality. Does Connext have to put reserves in the channel itself? Can this run or cap out? A: Yes. The ChannelManager contract (0xdfa6edae2ec0cf1d4a60542422724a48195a5071) has Eth and Dai reserves in it. All channels are automatically collateralized based on the reserves in this contract. If it runs out, channels would stop being collateralized and this would interrupt payments. If a channel stops being collateralized, how will users be alerted that payments are currently interrupted (e.g. does the UI show an alert and grey\u2019s out the SEND button)? How long might outages last, on average? A: The most noticeable instance of this occurring will be when a Card receives its first payment. For a standard payment, the sender's UI will state that the receiver's Card is still being set up and whill show a progress indicator. For a link payment, the redeem payment screen will state that the Card is being set up and will show a similar progress indicator. In both of these cases, collateralization of the channel occurs in the background and takes ~30-40s (block time + 2 block confirmations) to complete. Aside from these instances, most payments should be instant. Connext is still working on better ways to optmistically allocate collateral to channels so users can expect the user experience around this to improve with time.","title":"FAQ"},{"location":"built-on-ethereum/open-finance/payments/daicard/#resources","text":"DeFi Pulse Website","title":"Resources"},{"location":"built-on-ethereum/open-finance/payments/stablepay/","text":"StablePay Summary StablePay is a decentralized payment platform that enables users to make payments or donations with Ethereum or other ERC20 tokens, that get instantly converted to DAI token. How StablePay Works The contracts function as a gateway for receiving tokens, seek the best rate for trading on existing decentralized exchanges(Uniswap, Kyber), and swap the tokens to DAI token, to finally send them over to the receiver. Resources WebSite Twitter Linkedin Telegram Github Medium Documentation Important Links Quick intro and demo of StablePay widget. Introducing the StablePay Platform","title":"StablePay"},{"location":"built-on-ethereum/open-finance/payments/stablepay/#stablepay","text":"","title":"StablePay"},{"location":"built-on-ethereum/open-finance/payments/stablepay/#summary","text":"StablePay is a decentralized payment platform that enables users to make payments or donations with Ethereum or other ERC20 tokens, that get instantly converted to DAI token.","title":"Summary"},{"location":"built-on-ethereum/open-finance/payments/stablepay/#how-stablepay-works","text":"The contracts function as a gateway for receiving tokens, seek the best rate for trading on existing decentralized exchanges(Uniswap, Kyber), and swap the tokens to DAI token, to finally send them over to the receiver.","title":"How StablePay Works"},{"location":"built-on-ethereum/open-finance/payments/stablepay/#resources","text":"WebSite Twitter Linkedin Telegram Github Medium Documentation","title":"Resources"},{"location":"built-on-ethereum/open-finance/payments/stablepay/#important-links","text":"Quick intro and demo of StablePay widget. Introducing the StablePay Platform","title":"Important Links"},{"location":"built-on-ethereum/open-finance/prediction-markets/augur/","text":"Augur Summary Augur is a trustless, decentralized oracle and prediction market. Individuals can speculate on the outcome of future events, those who forecast correctly win money and those that forecast incorrectly lose money. Augur was founded in 2014 and officially launched on the Ethereum mainnet on July 2018. Token Augur has a native token called Reputation (REP). REP is needed by market creators and reporters on the Augur platform. Both reporters and market creators can earn a return on their REP by participating in the network. Individuals are able to trade on the Augur platform even if they do not own the REP token. Resources DeFi Pulse Website Whitepaper Market Explorer Podcasts Unchained Epicenter","title":"Augur"},{"location":"built-on-ethereum/open-finance/prediction-markets/augur/#augur","text":"","title":"Augur"},{"location":"built-on-ethereum/open-finance/prediction-markets/augur/#summary","text":"Augur is a trustless, decentralized oracle and prediction market. Individuals can speculate on the outcome of future events, those who forecast correctly win money and those that forecast incorrectly lose money. Augur was founded in 2014 and officially launched on the Ethereum mainnet on July 2018.","title":"Summary"},{"location":"built-on-ethereum/open-finance/prediction-markets/augur/#token","text":"Augur has a native token called Reputation (REP). REP is needed by market creators and reporters on the Augur platform. Both reporters and market creators can earn a return on their REP by participating in the network. Individuals are able to trade on the Augur platform even if they do not own the REP token.","title":"Token"},{"location":"built-on-ethereum/open-finance/prediction-markets/augur/#resources","text":"DeFi Pulse Website Whitepaper Market Explorer","title":"Resources"},{"location":"built-on-ethereum/open-finance/prediction-markets/augur/#podcasts","text":"Unchained Epicenter","title":"Podcasts"},{"location":"built-on-ethereum/open-finance/prediction-markets/gnosis/","text":"Gnosis Summary Gnosis creates a global forecasting and information discovery tool by building a prediction market platform on Ethereum. This platform strives to gather liquidity of expert information. Gnosis starts with a core layer, which is a set of smart contracts. Value-added paid services built by the team will form the Gnosis Service layer. Gnosis also plans to make end-user applications along with third-party developers at the spplication layer. Token There are two tokens in Gnosis: GNO and OWL. The main utility of OWL token is to pay for the creation of prediction markets. Users receive OWL by locking their GNO tokens. The used OWL is burned. Gnosis Safe On November 28th, 2018, the Gnosis Safe smart contract went live on the Ethereum mainnet. The Gnosis Safe allows you to download the Android or iOS app and deploy a mobile-friendly personal smart contract wallet (multisig). You can add a Chrome extension that will hold the second key and will allow you to interact with dApps similar to Metamask (but then with your phone effectively as a 2FA device). DutchX and slow.trade DutchX is a protocol implementing Dutch action to perform trades of ERC20 tokens. Every 6 hours, a new action is started for each listed token. The price of a lot decreases with time. Traders place their bids based on what they think is a fair price. When the lot price will match the bids, a trade will be settled. All traders which bid above or equal to the lot price will receive tokens in exchange for their ether. slow.trade is an UI for DutchX. It is a user-friendly way to trade tokens without needing to worry about picking the right price or directly interacting with a smart contract. slow.trade shows the price of a last closed auction as an estimate of a current market price. The application also keeps track of auctions that a user takes part in. Resources Website Gnosis Safe slow.trade","title":"Gnosis"},{"location":"built-on-ethereum/open-finance/prediction-markets/gnosis/#gnosis","text":"","title":"Gnosis"},{"location":"built-on-ethereum/open-finance/prediction-markets/gnosis/#summary","text":"Gnosis creates a global forecasting and information discovery tool by building a prediction market platform on Ethereum. This platform strives to gather liquidity of expert information. Gnosis starts with a core layer, which is a set of smart contracts. Value-added paid services built by the team will form the Gnosis Service layer. Gnosis also plans to make end-user applications along with third-party developers at the spplication layer.","title":"Summary"},{"location":"built-on-ethereum/open-finance/prediction-markets/gnosis/#token","text":"There are two tokens in Gnosis: GNO and OWL. The main utility of OWL token is to pay for the creation of prediction markets. Users receive OWL by locking their GNO tokens. The used OWL is burned.","title":"Token"},{"location":"built-on-ethereum/open-finance/prediction-markets/gnosis/#gnosis-safe","text":"On November 28th, 2018, the Gnosis Safe smart contract went live on the Ethereum mainnet. The Gnosis Safe allows you to download the Android or iOS app and deploy a mobile-friendly personal smart contract wallet (multisig). You can add a Chrome extension that will hold the second key and will allow you to interact with dApps similar to Metamask (but then with your phone effectively as a 2FA device).","title":"Gnosis Safe"},{"location":"built-on-ethereum/open-finance/prediction-markets/gnosis/#dutchx-and-slowtrade","text":"DutchX is a protocol implementing Dutch action to perform trades of ERC20 tokens. Every 6 hours, a new action is started for each listed token. The price of a lot decreases with time. Traders place their bids based on what they think is a fair price. When the lot price will match the bids, a trade will be settled. All traders which bid above or equal to the lot price will receive tokens in exchange for their ether. slow.trade is an UI for DutchX. It is a user-friendly way to trade tokens without needing to worry about picking the right price or directly interacting with a smart contract. slow.trade shows the price of a last closed auction as an estimate of a current market price. The application also keeps track of auctions that a user takes part in.","title":"DutchX and slow.trade"},{"location":"built-on-ethereum/open-finance/prediction-markets/gnosis/#resources","text":"Website Gnosis Safe slow.trade","title":"Resources"},{"location":"built-on-ethereum/open-finance/prediction-markets/what-are-prediction-markets/","text":"Prediction Markets Summary Prediction markets facilitate the trading of event derivatives. They have been around since the 1990s and are sometimes also referred to as information markets, idea futures, and decision markets. Participants use prediction markets to speculate on outcomes of events. Many believe that decentralizing prediction markets will allow us to harness their full potential by lowering the cost of participating, bypassing strict regulation and increasing adoption by making the platforms more accessible across geographies. Resources Wikipedia Circle Prediction Markets Report","title":"What are Prediction Markets?"},{"location":"built-on-ethereum/open-finance/prediction-markets/what-are-prediction-markets/#prediction-markets","text":"","title":"Prediction Markets"},{"location":"built-on-ethereum/open-finance/prediction-markets/what-are-prediction-markets/#summary","text":"Prediction markets facilitate the trading of event derivatives. They have been around since the 1990s and are sometimes also referred to as information markets, idea futures, and decision markets. Participants use prediction markets to speculate on outcomes of events. Many believe that decentralizing prediction markets will allow us to harness their full potential by lowering the cost of participating, bypassing strict regulation and increasing adoption by making the platforms more accessible across geographies.","title":"Summary"},{"location":"built-on-ethereum/open-finance/prediction-markets/what-are-prediction-markets/#resources","text":"Wikipedia Circle Prediction Markets Report","title":"Resources"},{"location":"built-on-ethereum/open-finance/securities/abacus/","text":"Abacus Summary Abacus makes an ecosystem for financial applications and service providers. Users can interact with financial applications using Abacus. Under the hood, these applications communicate with smart contracts and service providers. Service providers can be used for identity, compliance, and appraisal. They can run either on-hain or off-chain. In case the service is running off-chain, users should first request a quote for the service. After the user submits the data and pays for the service, a provider will write results in the blockchain, where applications and the protocol can access it. Resources Website","title":"Abacus"},{"location":"built-on-ethereum/open-finance/securities/abacus/#abacus","text":"","title":"Abacus"},{"location":"built-on-ethereum/open-finance/securities/abacus/#summary","text":"Abacus makes an ecosystem for financial applications and service providers. Users can interact with financial applications using Abacus. Under the hood, these applications communicate with smart contracts and service providers. Service providers can be used for identity, compliance, and appraisal. They can run either on-hain or off-chain. In case the service is running off-chain, users should first request a quote for the service. After the user submits the data and pays for the service, a provider will write results in the blockchain, where applications and the protocol can access it.","title":"Summary"},{"location":"built-on-ethereum/open-finance/securities/abacus/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/open-finance/securities/harbor/","text":"Harbor Summary Harbor works on the R-Token - a token standard for regulated trading of tokenized securities. Although blockchains like Ethereum are permissionless, and in theory anyone can create a token and distribute it on their own terms, issuing and trading securities is a heavily regulated space. The rules vary depending on the country and the type of security. R-Token is a regulated token that can represent ownership of a security and it is based on the ERC-20 standard. Every time an investor transfers a token, the smart contract checks a 'Regulator Service' to ensure that an investor has the right to make a particular transfer. A 'Regulator Service' is an approved entity that verifies security token transfers based on KYC/AML rules, security regulations, vesting schedules, and participants' identity. Resources Website","title":"Harbor"},{"location":"built-on-ethereum/open-finance/securities/harbor/#harbor","text":"","title":"Harbor"},{"location":"built-on-ethereum/open-finance/securities/harbor/#summary","text":"Harbor works on the R-Token - a token standard for regulated trading of tokenized securities. Although blockchains like Ethereum are permissionless, and in theory anyone can create a token and distribute it on their own terms, issuing and trading securities is a heavily regulated space. The rules vary depending on the country and the type of security. R-Token is a regulated token that can represent ownership of a security and it is based on the ERC-20 standard. Every time an investor transfers a token, the smart contract checks a 'Regulator Service' to ensure that an investor has the right to make a particular transfer. A 'Regulator Service' is an approved entity that verifies security token transfers based on KYC/AML rules, security regulations, vesting schedules, and participants' identity.","title":"Summary"},{"location":"built-on-ethereum/open-finance/securities/harbor/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/open-finance/securities/polymath/","text":"Polymath Summary Polymath aims to bring compliant securities to Ethereum in the form of tokens. Any company can apply to issue tokenized securities using Polymaths platform. Legal delegates review the application, place their bids and then an issuer selects a delegate based on the bid and their past performance. The issuer publishes all required documentation, with the hash of the documents placed on-chain. In collaboration with the chosen legal delegate, they define a set of restrictions to comply with regulators. Investors can purchase tokenized securities from issuers as long as they fit the compliance criteria. They will need to work with one of the KYC providers to bind their identity with their Ethereum address. Once they are approved, they can trade security tokens on primary and secondary markets. Resources Website","title":"Polymath"},{"location":"built-on-ethereum/open-finance/securities/polymath/#polymath","text":"","title":"Polymath"},{"location":"built-on-ethereum/open-finance/securities/polymath/#summary","text":"Polymath aims to bring compliant securities to Ethereum in the form of tokens. Any company can apply to issue tokenized securities using Polymaths platform. Legal delegates review the application, place their bids and then an issuer selects a delegate based on the bid and their past performance. The issuer publishes all required documentation, with the hash of the documents placed on-chain. In collaboration with the chosen legal delegate, they define a set of restrictions to comply with regulators. Investors can purchase tokenized securities from issuers as long as they fit the compliance criteria. They will need to work with one of the KYC providers to bind their identity with their Ethereum address. Once they are approved, they can trade security tokens on primary and secondary markets.","title":"Summary"},{"location":"built-on-ethereum/open-finance/securities/polymath/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/open-finance/securities/securitize/","text":"Securitize Summary The Securitize platform is a proven, robust, feature-rich platform with multiple successful issuances of digital securities on the blockchain. Securitize is a full stack technology & services platform with powerful features and specialized tools for both investors and issuers. The Securitize platform allows users to manage their digital securities from one convenient dashboard. The Securitize DS Protocol provides the most complete, flexible and adopted compliance solution in the market today. The DS Protocol ensures digital securities issued via the Securitize platform can be traded compliantly across all marketplaces and exchanges. Resources Website","title":"Securitize"},{"location":"built-on-ethereum/open-finance/securities/securitize/#securitize","text":"","title":"Securitize"},{"location":"built-on-ethereum/open-finance/securities/securitize/#summary","text":"The Securitize platform is a proven, robust, feature-rich platform with multiple successful issuances of digital securities on the blockchain. Securitize is a full stack technology & services platform with powerful features and specialized tools for both investors and issuers. The Securitize platform allows users to manage their digital securities from one convenient dashboard. The Securitize DS Protocol provides the most complete, flexible and adopted compliance solution in the market today. The DS Protocol ensures digital securities issued via the Securitize platform can be traded compliantly across all marketplaces and exchanges.","title":"Summary"},{"location":"built-on-ethereum/open-finance/securities/securitize/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/open-finance/securities/templum/","text":"Templum Summary Templum is a technology innovator that provides regulated market infrastructure for the digital asset sector, including a blockchain-enabled platform for capital raising and secondary trading. Templum\u2019s flagship broker-dealer subsidiary, Templum Markets, is a blockchain-enabled, regulated marketplace for the primary sale and secondary trading of digital assets. Resources Website","title":"Templum"},{"location":"built-on-ethereum/open-finance/securities/templum/#templum","text":"","title":"Templum"},{"location":"built-on-ethereum/open-finance/securities/templum/#summary","text":"Templum is a technology innovator that provides regulated market infrastructure for the digital asset sector, including a blockchain-enabled platform for capital raising and secondary trading. Templum\u2019s flagship broker-dealer subsidiary, Templum Markets, is a blockchain-enabled, regulated marketplace for the primary sale and secondary trading of digital assets.","title":"Summary"},{"location":"built-on-ethereum/open-finance/securities/templum/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/open-finance/securities/what-are-tokenized-securities/","text":"Tokenized Securities What are tokenized securities? Security Tokens are digital assets subject to federal security regulations. In layman terms, they are the intersection of digital assets (tokens) with traditional financial products. If cryptocurrencies like Bitcoin are considered \u201cprogrammable money\u201d then you can consider Security Tokens a version of \u201cprogrammable ownership.\u201d This means that any asset with ownership can and will be tokenized (public & private equities, debt, real estate, etc). Some of the potential benefits include: Illiquid assets\u200a\u2014\u200alike VC interest, hedge fund interest, real estate etc can become liquid Lower issuance cost, i.e. fundraise at much lower cost Global markets could become accessible with less friction and thus lead to a larger investor base Trade fractions of an asset Overall lower cost, ease of transfer and settlement Potentially enables an open financial system as security tokens become compatible with smart contracts Instant convertibility between crypto assets and currencies Securities platforms Abacus Harbor Polymath Templum Securitize Resources The Crypto-Securities Canon Security Tokens Explained How Tokenization Is Putting Real-World Assets on Blockchains Understanding Security Token Offerings (STO)","title":"What are Tokenized Securities?"},{"location":"built-on-ethereum/open-finance/securities/what-are-tokenized-securities/#tokenized-securities","text":"","title":"Tokenized Securities"},{"location":"built-on-ethereum/open-finance/securities/what-are-tokenized-securities/#what-are-tokenized-securities","text":"Security Tokens are digital assets subject to federal security regulations. In layman terms, they are the intersection of digital assets (tokens) with traditional financial products. If cryptocurrencies like Bitcoin are considered \u201cprogrammable money\u201d then you can consider Security Tokens a version of \u201cprogrammable ownership.\u201d This means that any asset with ownership can and will be tokenized (public & private equities, debt, real estate, etc). Some of the potential benefits include: Illiquid assets\u200a\u2014\u200alike VC interest, hedge fund interest, real estate etc can become liquid Lower issuance cost, i.e. fundraise at much lower cost Global markets could become accessible with less friction and thus lead to a larger investor base Trade fractions of an asset Overall lower cost, ease of transfer and settlement Potentially enables an open financial system as security tokens become compatible with smart contracts Instant convertibility between crypto assets and currencies","title":"What are tokenized securities?"},{"location":"built-on-ethereum/open-finance/securities/what-are-tokenized-securities/#securities-platforms","text":"Abacus Harbor Polymath Templum Securitize","title":"Securities platforms"},{"location":"built-on-ethereum/open-finance/securities/what-are-tokenized-securities/#resources","text":"The Crypto-Securities Canon Security Tokens Explained How Tokenization Is Putting Real-World Assets on Blockchains Understanding Security Token Offerings (STO)","title":"Resources"},{"location":"built-on-ethereum/open-finance/stablecoins/dai/","text":"Dai Summary Dai is an asset-backed stable currency created by the Maker Decentralized Autonomous Organization (MakerDAO). The Dai Stablecoin system maintains the stable value of Dai by ensuring that each Dai is always backed by a collateralized asset of more value. Single collateral Dai requires that each Dai is backed by at least 150% Ether. If at anytime, the amount of collateral backing Dai falls below 150%, \"watchers\" (community run bots) will call functions within the MakerDAO smart contracts that trigger liquidation of enough collateral to payback the debt. MakerDAO is one of the earliest projects in the Ethereum ecosystem. Importance Crypto assets are known for their high volatility which renders them unsuitable for medium of exchange. A stable cryptocurrency strives to become a medium of exchange by suppressing volatility and maintaining a consistant value through time. This innovation allows for individuals and business to enter into future agreements at a known cost. Just as one US Dollar today is equal to one dollar tomorrow, people can transact knowing they will have a certain fixed cost. Accomplishments The Dai Stablecoin System has been operating in Beta mode since December 2017. The Beta mode allows for a single collateral type, Ether. During the period of Dececember 2017 - December 2018, the price of Ether fell over 93% while Dai remained stable and over-collateralized throughout. Next Multi-Collateral Dai is the next and full version of the Dai Stablecoin System. In this system, all ERC-20 tokens are capable of being used as collateral for Dai. MakerDAO token (MKR) holders will be responsible for voting in and setting risk parameters for each collateral type. The scope of collateral types are as wide as tokens issued on the Ethereum platform. Resources Website CDP Interface Reddit Twitter Chat Podcasts Epicenter","title":"Dai"},{"location":"built-on-ethereum/open-finance/stablecoins/dai/#dai","text":"","title":"Dai"},{"location":"built-on-ethereum/open-finance/stablecoins/dai/#summary","text":"Dai is an asset-backed stable currency created by the Maker Decentralized Autonomous Organization (MakerDAO). The Dai Stablecoin system maintains the stable value of Dai by ensuring that each Dai is always backed by a collateralized asset of more value. Single collateral Dai requires that each Dai is backed by at least 150% Ether. If at anytime, the amount of collateral backing Dai falls below 150%, \"watchers\" (community run bots) will call functions within the MakerDAO smart contracts that trigger liquidation of enough collateral to payback the debt. MakerDAO is one of the earliest projects in the Ethereum ecosystem.","title":"Summary"},{"location":"built-on-ethereum/open-finance/stablecoins/dai/#importance","text":"Crypto assets are known for their high volatility which renders them unsuitable for medium of exchange. A stable cryptocurrency strives to become a medium of exchange by suppressing volatility and maintaining a consistant value through time. This innovation allows for individuals and business to enter into future agreements at a known cost. Just as one US Dollar today is equal to one dollar tomorrow, people can transact knowing they will have a certain fixed cost.","title":"Importance"},{"location":"built-on-ethereum/open-finance/stablecoins/dai/#accomplishments","text":"The Dai Stablecoin System has been operating in Beta mode since December 2017. The Beta mode allows for a single collateral type, Ether. During the period of Dececember 2017 - December 2018, the price of Ether fell over 93% while Dai remained stable and over-collateralized throughout.","title":"Accomplishments"},{"location":"built-on-ethereum/open-finance/stablecoins/dai/#next","text":"Multi-Collateral Dai is the next and full version of the Dai Stablecoin System. In this system, all ERC-20 tokens are capable of being used as collateral for Dai. MakerDAO token (MKR) holders will be responsible for voting in and setting risk parameters for each collateral type. The scope of collateral types are as wide as tokens issued on the Ethereum platform.","title":"Next"},{"location":"built-on-ethereum/open-finance/stablecoins/dai/#resources","text":"Website CDP Interface Reddit Twitter Chat","title":"Resources"},{"location":"built-on-ethereum/open-finance/stablecoins/dai/#podcasts","text":"Epicenter","title":"Podcasts"},{"location":"built-on-ethereum/open-finance/stablecoins/gusd/","text":"Gemini Dollar Summary On September 10, 2018, Gemini announced that it would released an ERC20 token pegged to the US Dollar called GUSD. Gemini users are able to convert US Dollars in their Gemini accounts into GUSD. However, the U.S dollars that correspond to the Gemini dollars issued and in circulation will be held at a bank located in the United States and eligible for FDIC \u201cpass-through\u201d deposit insurance, subject to applicable limitations. Risk of Frozen or Blacklisted Accounts To comply with regulations, GUSD uses an ERC20Proxy contract that gives Gemini, as the custodian, the ability to upgrade the contract once every 48 hours. Gemini included a mechanism in GUSD which would allow them to freeze user's funds. Auditing Process U.S. dollars that correspond to the Gemini dollars issued and in circulation are held at State Street Bank and Trust Company. The U.S. dollar deposit balance of Gemini's account is examined monthly by BPM, LLP, a registered public accounting firm, in order to verify the 1:1 peg. All Independent Accountants' Reports are published and available here: https://gemini.com/dollar/#reports Resources Website Whitepaper Smart Contract Adddress","title":"GUSD"},{"location":"built-on-ethereum/open-finance/stablecoins/gusd/#gemini-dollar","text":"","title":"Gemini Dollar"},{"location":"built-on-ethereum/open-finance/stablecoins/gusd/#summary","text":"On September 10, 2018, Gemini announced that it would released an ERC20 token pegged to the US Dollar called GUSD. Gemini users are able to convert US Dollars in their Gemini accounts into GUSD. However, the U.S dollars that correspond to the Gemini dollars issued and in circulation will be held at a bank located in the United States and eligible for FDIC \u201cpass-through\u201d deposit insurance, subject to applicable limitations.","title":"Summary"},{"location":"built-on-ethereum/open-finance/stablecoins/gusd/#risk-of-frozen-or-blacklisted-accounts","text":"To comply with regulations, GUSD uses an ERC20Proxy contract that gives Gemini, as the custodian, the ability to upgrade the contract once every 48 hours. Gemini included a mechanism in GUSD which would allow them to freeze user's funds.","title":"Risk of Frozen or Blacklisted Accounts"},{"location":"built-on-ethereum/open-finance/stablecoins/gusd/#auditing-process","text":"U.S. dollars that correspond to the Gemini dollars issued and in circulation are held at State Street Bank and Trust Company. The U.S. dollar deposit balance of Gemini's account is examined monthly by BPM, LLP, a registered public accounting firm, in order to verify the 1:1 peg. All Independent Accountants' Reports are published and available here: https://gemini.com/dollar/#reports","title":"Auditing Process"},{"location":"built-on-ethereum/open-finance/stablecoins/gusd/#resources","text":"Website Whitepaper Smart Contract Adddress","title":"Resources"},{"location":"built-on-ethereum/open-finance/stablecoins/paxos/","text":"Paxos Standard Summary Paxos is a Trust company, regulated by the New York State Department of Financial Services, with deep experience as an intermediary between fiat and digital assets. Paxos Standard is the first digital asset issued by a financial institution, and is fully collateralized by USD. PAX will always be redeemable one-to-one with USD (1 PAX = $1 USD), providing a stable and common currency for digital transactions. Resources Website","title":"Paxos"},{"location":"built-on-ethereum/open-finance/stablecoins/paxos/#paxos-standard","text":"","title":"Paxos Standard"},{"location":"built-on-ethereum/open-finance/stablecoins/paxos/#summary","text":"Paxos is a Trust company, regulated by the New York State Department of Financial Services, with deep experience as an intermediary between fiat and digital assets. Paxos Standard is the first digital asset issued by a financial institution, and is fully collateralized by USD. PAX will always be redeemable one-to-one with USD (1 PAX = $1 USD), providing a stable and common currency for digital transactions.","title":"Summary"},{"location":"built-on-ethereum/open-finance/stablecoins/paxos/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/open-finance/stablecoins/tether/","text":"Tether Summary Launched in 2014, Tether is a blockchain-enabled platform designed to facilitate the use of fiat currencies in a digital manner. Tether works to disrupt the conventional financial system via a more modern approach to money. Tether has made headway by giving customers the ability to transact with traditional currencies across the blockchain, without the inherent volatility and complexity typically associated with a digital currency. How does Tether work? Tethers exists on blockchains using the Omni Protocol and as ERC20 tokens. These transport protocols consist of open source software that interface with blockchains to allow for the issuance and redemption of cryptocurrency tokens \u201ctethers\u201d. Tether Platform currencies are 100% backed by actual fiat currency assets in a reserve bank account. Tethers are redeemable and exchangeable pursuant to Tether Limited\u2019s terms of service. The conversion rate is 1 tether USD\u20ae equals 1 USD. Controversy A blockchain critic has raised questions about the relationship between Bitfinex and Tether, accusing Bitfinex of creating \"magic Tethers out of thin air\". In September 2017, Tether published a memorandum from a public accounting firm that Tether Limited then said showed that tethers were fully backed by US dollars; however, according to the New York Times, independent attorney Lewis Cohen stated the document, because of the careful way it was phrased, does not prove that the Tether coins are backed by dollars\". The documents also fail to ascertain whether the balances in question are otherwise encumbered.\". The accounting firm specifically stated that this information is intended solely to assist the management of Tether Limited ... and is not intended to be, and should not be, used or relied upon by any other party. During the course of a price manipulation investigation by the U.S. Commodity Futures Trading Commission and the United States Department of Justice, Phil Potter, Chief Strategy Officer of Bitfinex and an executive of Tether Limited, departed Bitfinex in 2018. The investigation was continuing on November 20, 2018 and focusing on Tether and Bitfinex, according to Bloomberg. Resources Website","title":"Tether"},{"location":"built-on-ethereum/open-finance/stablecoins/tether/#tether","text":"","title":"Tether"},{"location":"built-on-ethereum/open-finance/stablecoins/tether/#summary","text":"Launched in 2014, Tether is a blockchain-enabled platform designed to facilitate the use of fiat currencies in a digital manner. Tether works to disrupt the conventional financial system via a more modern approach to money. Tether has made headway by giving customers the ability to transact with traditional currencies across the blockchain, without the inherent volatility and complexity typically associated with a digital currency.","title":"Summary"},{"location":"built-on-ethereum/open-finance/stablecoins/tether/#how-does-tether-work","text":"Tethers exists on blockchains using the Omni Protocol and as ERC20 tokens. These transport protocols consist of open source software that interface with blockchains to allow for the issuance and redemption of cryptocurrency tokens \u201ctethers\u201d. Tether Platform currencies are 100% backed by actual fiat currency assets in a reserve bank account. Tethers are redeemable and exchangeable pursuant to Tether Limited\u2019s terms of service. The conversion rate is 1 tether USD\u20ae equals 1 USD.","title":"How does Tether work?"},{"location":"built-on-ethereum/open-finance/stablecoins/tether/#controversy","text":"A blockchain critic has raised questions about the relationship between Bitfinex and Tether, accusing Bitfinex of creating \"magic Tethers out of thin air\". In September 2017, Tether published a memorandum from a public accounting firm that Tether Limited then said showed that tethers were fully backed by US dollars; however, according to the New York Times, independent attorney Lewis Cohen stated the document, because of the careful way it was phrased, does not prove that the Tether coins are backed by dollars\". The documents also fail to ascertain whether the balances in question are otherwise encumbered.\". The accounting firm specifically stated that this information is intended solely to assist the management of Tether Limited ... and is not intended to be, and should not be, used or relied upon by any other party. During the course of a price manipulation investigation by the U.S. Commodity Futures Trading Commission and the United States Department of Justice, Phil Potter, Chief Strategy Officer of Bitfinex and an executive of Tether Limited, departed Bitfinex in 2018. The investigation was continuing on November 20, 2018 and focusing on Tether and Bitfinex, according to Bloomberg.","title":"Controversy"},{"location":"built-on-ethereum/open-finance/stablecoins/tether/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/open-finance/stablecoins/trueusd/","text":"True USD Summary TrueUSD (TUSD) is a stablecoin that you can redeem 1-for-1 for US dollars. TUSD is the first asset token created on the TrustToken Platform. Resources Website","title":"True USD"},{"location":"built-on-ethereum/open-finance/stablecoins/trueusd/#true-usd","text":"","title":"True USD"},{"location":"built-on-ethereum/open-finance/stablecoins/trueusd/#summary","text":"TrueUSD (TUSD) is a stablecoin that you can redeem 1-for-1 for US dollars. TUSD is the first asset token created on the TrustToken Platform.","title":"Summary"},{"location":"built-on-ethereum/open-finance/stablecoins/trueusd/#resources","text":"Website","title":"Resources"},{"location":"built-on-ethereum/open-finance/stablecoins/usdc/","text":"USD Coin Summary USD Coin (USDC) is an currency-backed stablecoin created by Centre which was founded by Circle and Coinbase. The initial implementation is an ERC-20 token that creates possibilities in payments, lending, investing, trading and trade finance. Individuals and institutions can deposit US dollars from bank accounts, convert those dollars into tokens usable everywhere the internet reaches (subject to the token\u2019s compliance controls), and redeem USDC tokens and cash out to bank accounts. USD Coin is supported by many wallets, exchanges and software applications. Resources Website Blog","title":"USDC"},{"location":"built-on-ethereum/open-finance/stablecoins/usdc/#usd-coin","text":"","title":"USD Coin"},{"location":"built-on-ethereum/open-finance/stablecoins/usdc/#summary","text":"USD Coin (USDC) is an currency-backed stablecoin created by Centre which was founded by Circle and Coinbase. The initial implementation is an ERC-20 token that creates possibilities in payments, lending, investing, trading and trade finance. Individuals and institutions can deposit US dollars from bank accounts, convert those dollars into tokens usable everywhere the internet reaches (subject to the token\u2019s compliance controls), and redeem USDC tokens and cash out to bank accounts. USD Coin is supported by many wallets, exchanges and software applications.","title":"Summary"},{"location":"built-on-ethereum/open-finance/stablecoins/usdc/#resources","text":"Website Blog","title":"Resources"},{"location":"built-on-ethereum/open-finance/stablecoins/what-are-stablecoins/","text":"Stablecoins What are Stablecoins? A useful currency should be a medium of exchange, a unit of account, and a store of value. Cryptocurrencies excel at the first, but as a store of value or unit of account, they\u2019re pretty bad. You cannot be an effective store of value if your price fluctuates by 20% on a normal day. Stablecoins are cryptocurrencies designed to minimize the effects of price volatility, thus they seek to function as a store of value and a unit of account. To minimize volatility the value of a stablecoin can be pegged to a currency, or to exchange traded commodities (such as precious metals or industrial metals). Stablecoins backed by currencies or commodities directly are said to be centralized, whereas those leveraging other cryptocurrencies are referred to as decentralized. Types of Stablecoins Currency-backed Cryptocurrencies backed by currency (fiat) are the most common and were the first type of stablecoins on the market. Their characteristics are: Their value is pegged to one or more currencies (most commonly the US dollar, also the Euro and the Swiss franc). The peg is realized off-chain, through banks or other types of regulated financial institutions which serve as depositaries of the currency used to back the stablecoin. The amount of the currency used for backing of the stablecoin has to reflect the circulating supply of the stablecoin. Notable currency-backed stablecoins: Gemini Dollar USD Coin Tether TrueUSD Paxos Standard Collateralized (crypto-backed) Cryptocurrency backed stablecoins are issued with cryptocurrencies as collateral, which is conceptually similar to fiat-backed stablecoins. However, the significant difference between the two designs is that while fiat collateralization typically happens off the blockchain, the cryptocurrency or crypto asset used to back this type of stablecoins is done on the blockchain, using smart contracts in a more decentralized fashion. For example, MakerDAO's DAI stablecoin is generated when someone opens a collateralized debt position (CDP), deposits some ETH as collateral, and then withdraws DAI from their CDP. The ETH acts as collateral. Notable collateral-backed stablecoins: MakerDAO - DAI Bitshares - BitUSD Synthetix - SUSD Seigniorage (algorithmic) Seigniorage (or algorithmic) stablecoins can be linked to a decentralized autonomous organization which controls issuance and pricing. The supply of algorithmic stablecoins is typically controlled by issuing and destroying coins depending on the market demand, until the target price is reached. In the general case, market participants are incentivized to act in a way that the price is kept at target level by issuing either bonds, in times of decreasing price or seigniorage shares when the price is above target. Notable algorithmic stablecoins: Basis (project was cancelled) Ampleforth Tethered (sub-type of algorithmic) Tethered cryptocurrency assets have certain features of algorithmic stablecoins \u2013 and can be considered their sub-type, except they don\u2019t offer incentives in form of separate instruments (bonds or shares) to holders of the \u201cunderlying\u201d cryptocurrency and there is no governing algorithm that forces the price towards the target, except at the moment of creation of the asset. Tethered cryptocurrency assets are issued on-chain, by holders of the native cryptocurrency, with different pegs chosen by the issuer. The peg value is imported into the blockchain by consensus and can be a number of fiat currencies and exchange-traded commodities (e.g. USD, EUR, gold, silver, etc). Resources https://www.tokendaily.co/blog/a-taxonomy-of-stablecoins https://stablecoinindex.com https://en.wikipedia.org/wiki/Stablecoin","title":"What are Stablecoins?"},{"location":"built-on-ethereum/open-finance/stablecoins/what-are-stablecoins/#stablecoins","text":"","title":"Stablecoins"},{"location":"built-on-ethereum/open-finance/stablecoins/what-are-stablecoins/#what-are-stablecoins","text":"A useful currency should be a medium of exchange, a unit of account, and a store of value. Cryptocurrencies excel at the first, but as a store of value or unit of account, they\u2019re pretty bad. You cannot be an effective store of value if your price fluctuates by 20% on a normal day. Stablecoins are cryptocurrencies designed to minimize the effects of price volatility, thus they seek to function as a store of value and a unit of account. To minimize volatility the value of a stablecoin can be pegged to a currency, or to exchange traded commodities (such as precious metals or industrial metals). Stablecoins backed by currencies or commodities directly are said to be centralized, whereas those leveraging other cryptocurrencies are referred to as decentralized.","title":"What are Stablecoins?"},{"location":"built-on-ethereum/open-finance/stablecoins/what-are-stablecoins/#types-of-stablecoins","text":"","title":"Types of Stablecoins"},{"location":"built-on-ethereum/open-finance/stablecoins/what-are-stablecoins/#currency-backed","text":"Cryptocurrencies backed by currency (fiat) are the most common and were the first type of stablecoins on the market. Their characteristics are: Their value is pegged to one or more currencies (most commonly the US dollar, also the Euro and the Swiss franc). The peg is realized off-chain, through banks or other types of regulated financial institutions which serve as depositaries of the currency used to back the stablecoin. The amount of the currency used for backing of the stablecoin has to reflect the circulating supply of the stablecoin.","title":"Currency-backed"},{"location":"built-on-ethereum/open-finance/stablecoins/what-are-stablecoins/#notable-currency-backed-stablecoins","text":"Gemini Dollar USD Coin Tether TrueUSD Paxos Standard","title":"Notable currency-backed stablecoins:"},{"location":"built-on-ethereum/open-finance/stablecoins/what-are-stablecoins/#collateralized-crypto-backed","text":"Cryptocurrency backed stablecoins are issued with cryptocurrencies as collateral, which is conceptually similar to fiat-backed stablecoins. However, the significant difference between the two designs is that while fiat collateralization typically happens off the blockchain, the cryptocurrency or crypto asset used to back this type of stablecoins is done on the blockchain, using smart contracts in a more decentralized fashion. For example, MakerDAO's DAI stablecoin is generated when someone opens a collateralized debt position (CDP), deposits some ETH as collateral, and then withdraws DAI from their CDP. The ETH acts as collateral.","title":"Collateralized (crypto-backed)"},{"location":"built-on-ethereum/open-finance/stablecoins/what-are-stablecoins/#notable-collateral-backed-stablecoins","text":"MakerDAO - DAI Bitshares - BitUSD Synthetix - SUSD","title":"Notable collateral-backed stablecoins:"},{"location":"built-on-ethereum/open-finance/stablecoins/what-are-stablecoins/#seigniorage-algorithmic","text":"Seigniorage (or algorithmic) stablecoins can be linked to a decentralized autonomous organization which controls issuance and pricing. The supply of algorithmic stablecoins is typically controlled by issuing and destroying coins depending on the market demand, until the target price is reached. In the general case, market participants are incentivized to act in a way that the price is kept at target level by issuing either bonds, in times of decreasing price or seigniorage shares when the price is above target.","title":"Seigniorage (algorithmic)"},{"location":"built-on-ethereum/open-finance/stablecoins/what-are-stablecoins/#notable-algorithmic-stablecoins","text":"Basis (project was cancelled) Ampleforth","title":"Notable algorithmic stablecoins:"},{"location":"built-on-ethereum/open-finance/stablecoins/what-are-stablecoins/#tethered-sub-type-of-algorithmic","text":"Tethered cryptocurrency assets have certain features of algorithmic stablecoins \u2013 and can be considered their sub-type, except they don\u2019t offer incentives in form of separate instruments (bonds or shares) to holders of the \u201cunderlying\u201d cryptocurrency and there is no governing algorithm that forces the price towards the target, except at the moment of creation of the asset. Tethered cryptocurrency assets are issued on-chain, by holders of the native cryptocurrency, with different pegs chosen by the issuer. The peg value is imported into the blockchain by consensus and can be a number of fiat currencies and exchange-traded commodities (e.g. USD, EUR, gold, silver, etc).","title":"Tethered (sub-type of algorithmic)"},{"location":"built-on-ethereum/open-finance/stablecoins/what-are-stablecoins/#resources","text":"https://www.tokendaily.co/blog/a-taxonomy-of-stablecoins https://stablecoinindex.com https://en.wikipedia.org/wiki/Stablecoin","title":"Resources"},{"location":"built-on-ethereum/open-finance/synthetics/synthetix/","text":"Synthetix Summary Synthetix is a decentralized platform on Ethereum for the creation of Synths: on-chain synthetic assets that track the value of real-world assets. Born as stablecoin project Havven, launched first USD pegged stablecoin in June 2018 . Havven rebranded as Synthetix and expanded its scope to a synthetic asset platform launching on mainnet December 2018 . As of June 2019, the Synthetix platform supports over 20 Synths representing fiat currencies, commodities (e.g., gold), and cryptoassets. Stocks, indices, and other derivatives are expected to be added soon. It is one of the only platforms that supports shorting some tokens via the Synthetic inverse tokens such as iMKR, iXTZ, iBNB, iETH, iBTC. Synthetix has explored novel incentive mechanisms in token economics, including an inflationary monetary policy, establishing a liquidity ramp on Uniswap for traders to enter and exit the Synthetix exchange, and creating a pool of SNX to reward arbitraguers who buy sETH when it is more than 1 basis point off its peg to ETH. Synthetix also created a first-of-its-kind Exchange Index Synth. How Synthetix Works Synthetix has a native token called SNX. Holders lock SNX as collateral to mint Synths, which are freely tradeable ERC20 tokens. Trading fees from Synths exchanged on Synthetix\u2019s non-custodial DEX, Synthetix.Exchange, go to SNX holders/Synth minters, incentivizing Synth creation and giving value to the underlying collateral (i.e., the SNX token). There are two types of staking rewards , SNX inflationary rewards and Synth exchange rewards, which are paid in SNX and sUSD respectively. Exchange rewards are generated by trades on Synthetix.Exchange. The exchange fee (either 0.30% or 0.50%) from each trade is sent to the fee pool where it is available to be claimed by staked SNX holders. To earn rewards from staking SNX , you need to mint sUSD using Mintr. Rewards can be claimed on a weekly basis for up to two weeks. If your Collateralisation Ration is below 675%, you cannot claim rewards until updating your Collateralisation Ration to be at least 675%. As of October 2019, SNX's 78.59% Staking Yield ranks in the top three of all digital assets , according to StakingRewards.com. The average staking yield is 12.66%. The SNX staking community is very active relative to its peers. The Average Stake Ratio among assets reviewed by StakingRewards.com is 37%, while 82% of SNX tokens are staked. Monetary Policy Synthetix initially started with supply of 100 million SNX ECR-20 tokens. In February 2019, shortly after the pivot from Havven to Synthetix, a new monetary policy was instituted to encourage staking on the platform while bootstrapping network effects. Recognizing the SNX token is fundamentally a work token, and not a currency whose primary purpose is purchasing power, the inflation schedule provides for a sequence of decreasing inflationary rewards to SNX stakers. Under the schedule, SNX increases in supply by 75 million from 100 million to 175 million from March 2019 to March 2020 (75% increase). Running up to March 2021, the SNX supply will increase from 175 million to 212.5 million (21% increase). In March 2022, the SNX supply will reach 231.25 million (9% increase. By March 2023, supply will grow to 240.625 million (4% increase). In March 2024, total supply will hit 245,312,500 SNX (2% increase). To mitigate instant dumping of SNX rewards by SNX stakers, which puts downward pressure on SNX price and therefore weakens the value of staked SNX collateral, SNX rewards distributed from March 2019 to March 2020 are locked and cannot be sold on the open market during this period. SNX earned from staking can be collateralized to mint new Synths, however. Uniswap sETH Pool Liquidity Incentive Mechanism In July 2019, Synthetix founder Kain Warwick announced \"an experiment we will be running for the next four weeks to test whether protocol level incentives lead to a deep liquidity pool for the sETH/ETH pair on Uniswap.\" Explaining the motivation for the experiment, Warwick said, \"Think of Uniswap as a gateway into the Synthetix ecosystem, in order to trade on sX you need to have Synths, which right now typically means converting ETH into sUSD. Once you have Synths you can trade on sX and take advantage of the infinite liquidity mechanism allowing you to convert between Synths. What happens though, when you are done trading and want to exit the system back into ETH? Unfortunately there is a significant cost to exit the system as slippage on Uniswap is high and the exchange rate between sUSD/ETH typically trades at a discount of 5-10%.\" The experiment tested how well an incentive of 72,000 SNX per week, 5% of inflation, could attract ETH holders to provide liquidity on Uniswap. \"This experiment will hopefully demonstrate a new kind of composability within the DeFi ecosystem, where protocols can combine incentives across protocols to align incentives in a symbiotic and self reinforcing fashion,\" Warwick said in a blog post at the time. In fewer than three months, the Synthetic Eth:ETH liquidity pool became the largest pool on Uniswap with more than 12,000 ETH and 12,000 sETH. The four-week experiment evolved into Synthetix Improvement Proposal (SIP) 8 . SIP 8 states \"The distribution will be managed by an m/n multisig contract with signers selected from LP providers...By implementing this distribution mechanism using a multisig, we prepare for the next phase of the project where the foundation can no longer modify distribution and other aspects of the system and begin to test aspects of decentralised goveranance.\" sETH:ETH Arbitrage Incentives To strengthen the soft peg between sETH and ETH, Synthetix introduced an arb contract to create an incentive for maintaining sETH:ETH parity. Following a successful experimentation of the arb contract over several weeks in August 2019, 2% of inflation was dedicated toward supporting the arb contract. According to a Synthetix blog post , \"If the sETH/ETH rate on Uniswap falls below 99/100, people can send ETH to the arb contract, which is then converted to SNX at par value. Essentially this means if the sETH ratio falls too low you can use this to exchange ETH to SNX at a discounted rate.\" Index Synths: sCEX and iCEX In August 2019, the first exchange index synths went live on Synthetix.exchange. Dubbed sCEX, the sCEX token represents a basket of tokens issued by the top centralized exchanges (CEXs) in the industry: Binance Coin (BNB), Bitfinex's LEO, Huobi's HT, Okex's OKB, and Kucoin's KuCoin Shares (KCS). This basket provides unique exposure to a new strain of synthetic assets that enables traders and investors to gain exposure to the price of several exchanges' tokens without having to own the underlying tokens or maintain an account with one of the represented exchanges. When sCEX was introduced, so too was iCEX born, which effectively enables beneficial exposure to downward price movement in the aforementioned tokens. Like iXTZ, iMKR, or iBNB, iCEX appreciates in price when its underlying components depreciate. This is akin to taking a short position, though the parameters of Inverse Synths makes the term inverse more appropriate. The inaugural sCEX and iCEX tokens are weighted as follows: BNB (50%), LEO (20%), HT (10%), OKB (10%) and KCS (10%.) Resources DeFi Pulse Litepaper Website Dashboard Mintr Synthetix.Exchange github Developer docs Synthetix for Dummies Monetary Policy Comprehensive Guide to SNX Staking Compare SNX Staking Rewards 24-Hour Volume on Synthetix.Exchange How to Participate in the sETH Liquidity Pool on Uniswap Why does my sUSD debt fluctuate over time? Track SNX Supply on Exchange Wallets SNX Volume Traded on Kyber DEX SNX Volume Traded on Uniswap DEX","title":"Synthetix"},{"location":"built-on-ethereum/open-finance/synthetics/synthetix/#synthetix","text":"","title":"Synthetix"},{"location":"built-on-ethereum/open-finance/synthetics/synthetix/#summary","text":"Synthetix is a decentralized platform on Ethereum for the creation of Synths: on-chain synthetic assets that track the value of real-world assets. Born as stablecoin project Havven, launched first USD pegged stablecoin in June 2018 . Havven rebranded as Synthetix and expanded its scope to a synthetic asset platform launching on mainnet December 2018 . As of June 2019, the Synthetix platform supports over 20 Synths representing fiat currencies, commodities (e.g., gold), and cryptoassets. Stocks, indices, and other derivatives are expected to be added soon. It is one of the only platforms that supports shorting some tokens via the Synthetic inverse tokens such as iMKR, iXTZ, iBNB, iETH, iBTC. Synthetix has explored novel incentive mechanisms in token economics, including an inflationary monetary policy, establishing a liquidity ramp on Uniswap for traders to enter and exit the Synthetix exchange, and creating a pool of SNX to reward arbitraguers who buy sETH when it is more than 1 basis point off its peg to ETH. Synthetix also created a first-of-its-kind Exchange Index Synth.","title":"Summary"},{"location":"built-on-ethereum/open-finance/synthetics/synthetix/#how-synthetix-works","text":"Synthetix has a native token called SNX. Holders lock SNX as collateral to mint Synths, which are freely tradeable ERC20 tokens. Trading fees from Synths exchanged on Synthetix\u2019s non-custodial DEX, Synthetix.Exchange, go to SNX holders/Synth minters, incentivizing Synth creation and giving value to the underlying collateral (i.e., the SNX token). There are two types of staking rewards , SNX inflationary rewards and Synth exchange rewards, which are paid in SNX and sUSD respectively. Exchange rewards are generated by trades on Synthetix.Exchange. The exchange fee (either 0.30% or 0.50%) from each trade is sent to the fee pool where it is available to be claimed by staked SNX holders. To earn rewards from staking SNX , you need to mint sUSD using Mintr. Rewards can be claimed on a weekly basis for up to two weeks. If your Collateralisation Ration is below 675%, you cannot claim rewards until updating your Collateralisation Ration to be at least 675%. As of October 2019, SNX's 78.59% Staking Yield ranks in the top three of all digital assets , according to StakingRewards.com. The average staking yield is 12.66%. The SNX staking community is very active relative to its peers. The Average Stake Ratio among assets reviewed by StakingRewards.com is 37%, while 82% of SNX tokens are staked.","title":"How Synthetix Works"},{"location":"built-on-ethereum/open-finance/synthetics/synthetix/#monetary-policy","text":"Synthetix initially started with supply of 100 million SNX ECR-20 tokens. In February 2019, shortly after the pivot from Havven to Synthetix, a new monetary policy was instituted to encourage staking on the platform while bootstrapping network effects. Recognizing the SNX token is fundamentally a work token, and not a currency whose primary purpose is purchasing power, the inflation schedule provides for a sequence of decreasing inflationary rewards to SNX stakers. Under the schedule, SNX increases in supply by 75 million from 100 million to 175 million from March 2019 to March 2020 (75% increase). Running up to March 2021, the SNX supply will increase from 175 million to 212.5 million (21% increase). In March 2022, the SNX supply will reach 231.25 million (9% increase. By March 2023, supply will grow to 240.625 million (4% increase). In March 2024, total supply will hit 245,312,500 SNX (2% increase). To mitigate instant dumping of SNX rewards by SNX stakers, which puts downward pressure on SNX price and therefore weakens the value of staked SNX collateral, SNX rewards distributed from March 2019 to March 2020 are locked and cannot be sold on the open market during this period. SNX earned from staking can be collateralized to mint new Synths, however.","title":"Monetary Policy"},{"location":"built-on-ethereum/open-finance/synthetics/synthetix/#uniswap-seth-pool-liquidity-incentive-mechanism","text":"In July 2019, Synthetix founder Kain Warwick announced \"an experiment we will be running for the next four weeks to test whether protocol level incentives lead to a deep liquidity pool for the sETH/ETH pair on Uniswap.\" Explaining the motivation for the experiment, Warwick said, \"Think of Uniswap as a gateway into the Synthetix ecosystem, in order to trade on sX you need to have Synths, which right now typically means converting ETH into sUSD. Once you have Synths you can trade on sX and take advantage of the infinite liquidity mechanism allowing you to convert between Synths. What happens though, when you are done trading and want to exit the system back into ETH? Unfortunately there is a significant cost to exit the system as slippage on Uniswap is high and the exchange rate between sUSD/ETH typically trades at a discount of 5-10%.\" The experiment tested how well an incentive of 72,000 SNX per week, 5% of inflation, could attract ETH holders to provide liquidity on Uniswap. \"This experiment will hopefully demonstrate a new kind of composability within the DeFi ecosystem, where protocols can combine incentives across protocols to align incentives in a symbiotic and self reinforcing fashion,\" Warwick said in a blog post at the time. In fewer than three months, the Synthetic Eth:ETH liquidity pool became the largest pool on Uniswap with more than 12,000 ETH and 12,000 sETH. The four-week experiment evolved into Synthetix Improvement Proposal (SIP) 8 . SIP 8 states \"The distribution will be managed by an m/n multisig contract with signers selected from LP providers...By implementing this distribution mechanism using a multisig, we prepare for the next phase of the project where the foundation can no longer modify distribution and other aspects of the system and begin to test aspects of decentralised goveranance.\"","title":"Uniswap sETH Pool Liquidity Incentive Mechanism"},{"location":"built-on-ethereum/open-finance/synthetics/synthetix/#setheth-arbitrage-incentives","text":"To strengthen the soft peg between sETH and ETH, Synthetix introduced an arb contract to create an incentive for maintaining sETH:ETH parity. Following a successful experimentation of the arb contract over several weeks in August 2019, 2% of inflation was dedicated toward supporting the arb contract. According to a Synthetix blog post , \"If the sETH/ETH rate on Uniswap falls below 99/100, people can send ETH to the arb contract, which is then converted to SNX at par value. Essentially this means if the sETH ratio falls too low you can use this to exchange ETH to SNX at a discounted rate.\"","title":"sETH:ETH Arbitrage Incentives"},{"location":"built-on-ethereum/open-finance/synthetics/synthetix/#index-synths-scex-and-icex","text":"In August 2019, the first exchange index synths went live on Synthetix.exchange. Dubbed sCEX, the sCEX token represents a basket of tokens issued by the top centralized exchanges (CEXs) in the industry: Binance Coin (BNB), Bitfinex's LEO, Huobi's HT, Okex's OKB, and Kucoin's KuCoin Shares (KCS). This basket provides unique exposure to a new strain of synthetic assets that enables traders and investors to gain exposure to the price of several exchanges' tokens without having to own the underlying tokens or maintain an account with one of the represented exchanges. When sCEX was introduced, so too was iCEX born, which effectively enables beneficial exposure to downward price movement in the aforementioned tokens. Like iXTZ, iMKR, or iBNB, iCEX appreciates in price when its underlying components depreciate. This is akin to taking a short position, though the parameters of Inverse Synths makes the term inverse more appropriate. The inaugural sCEX and iCEX tokens are weighted as follows: BNB (50%), LEO (20%), HT (10%), OKB (10%) and KCS (10%.)","title":"Index Synths: sCEX and iCEX"},{"location":"built-on-ethereum/open-finance/synthetics/synthetix/#resources","text":"DeFi Pulse Litepaper Website Dashboard Mintr Synthetix.Exchange github Developer docs Synthetix for Dummies Monetary Policy Comprehensive Guide to SNX Staking Compare SNX Staking Rewards 24-Hour Volume on Synthetix.Exchange How to Participate in the sETH Liquidity Pool on Uniswap Why does my sUSD debt fluctuate over time? Track SNX Supply on Exchange Wallets SNX Volume Traded on Kyber DEX SNX Volume Traded on Uniswap DEX","title":"Resources"},{"location":"built-on-ethereum/oracles/chainlink/","text":"Chainlink Summary Chainlink is a decentralized oracle network that provides secure and reliable inputs and outputs for complex smart contracts on any blockchain. Its decentral Price Feeds are securing hundreds of millions of dollars by top Defi projects include Synthetix, Aave, Loopring, Set Protocol and counting. In addition, you can access any API using Chainlink, and build a custom decentralized network of nodes to provide reliable decentral data. Chainlink also enables uses to create with provably random on-chain numbers , and time their smart contracts with Chainlink Alarms . How Chainlink Works Chainlink is a general-purpose framework for building decentralized oracle networks that give your smart contract access to secure and reliable data inputs and outputs. Each decentralized oracle network consists of a collection of independent node operators, a method for aggregating data, and pre-made \"Chainlinks\" (also called external adaptor) that act as middleware to give you access to any API you want to leverage for data and/or external services. You can take advantage of existing oracle networks, such as the Price Reference Data feeds for DeFi, providing highly accurate market prices, or you can build your own oracle network and external adaptor. Chainlink currently provides decentralization at both the oracle and data source level. By using multiple independent Chainlink nodes, the user can protect against one oracle being a single point of failure. Similarly, using multiple data sources for sourcing market prices, the user can protect against one data source being a single source of truth. Both of these ensure that the oracle mechanism triggering your important smart contract is as secure and reliable as the underlying blockchain. You can use Chainlink to connect to data providers, web APIs, enterprise systems, cloud providers, IoT devices, payment systems, other blockchains and much more. Resources Website Whitepaper Twitter Telegram Discord YouTube Blog","title":"Chainlink"},{"location":"built-on-ethereum/oracles/chainlink/#chainlink","text":"","title":"Chainlink"},{"location":"built-on-ethereum/oracles/chainlink/#summary","text":"Chainlink is a decentralized oracle network that provides secure and reliable inputs and outputs for complex smart contracts on any blockchain. Its decentral Price Feeds are securing hundreds of millions of dollars by top Defi projects include Synthetix, Aave, Loopring, Set Protocol and counting. In addition, you can access any API using Chainlink, and build a custom decentralized network of nodes to provide reliable decentral data. Chainlink also enables uses to create with provably random on-chain numbers , and time their smart contracts with Chainlink Alarms .","title":"Summary"},{"location":"built-on-ethereum/oracles/chainlink/#how-chainlink-works","text":"Chainlink is a general-purpose framework for building decentralized oracle networks that give your smart contract access to secure and reliable data inputs and outputs. Each decentralized oracle network consists of a collection of independent node operators, a method for aggregating data, and pre-made \"Chainlinks\" (also called external adaptor) that act as middleware to give you access to any API you want to leverage for data and/or external services. You can take advantage of existing oracle networks, such as the Price Reference Data feeds for DeFi, providing highly accurate market prices, or you can build your own oracle network and external adaptor. Chainlink currently provides decentralization at both the oracle and data source level. By using multiple independent Chainlink nodes, the user can protect against one oracle being a single point of failure. Similarly, using multiple data sources for sourcing market prices, the user can protect against one data source being a single source of truth. Both of these ensure that the oracle mechanism triggering your important smart contract is as secure and reliable as the underlying blockchain. You can use Chainlink to connect to data providers, web APIs, enterprise systems, cloud providers, IoT devices, payment systems, other blockchains and much more.","title":"How Chainlink Works"},{"location":"built-on-ethereum/oracles/chainlink/#resources","text":"Website Whitepaper Twitter Telegram Discord YouTube Blog","title":"Resources"},{"location":"built-on-ethereum/oracles/tellor/","text":"Tellor Summary Tellor is a decentralized oracle that provides off-chain pricing data for smart contracts on the Ethereum network. Tellor formed in March 2019, was part of the Binance Labs incubator and launched to mainnet in August 2019. How Tellor Works The Tellor network mints a token, Tributes (TRB). Tellor utilizes a network of miners, required to stake 1000 TRB, competing to solve PoW challenges for the right to submit data to Tellor\u2019s on-chain price feed database. A user submits a query to the Oracle using TRB to incentivize miners to choose this query over other submissions. Other users who want the same data \u2018tip\u2019 this data series to further incentivize selection by miners. Every 10 minutes, the Oracle selects the best funded query and provides a new challenge for miners to solve. Miners submit their PoW solution and off-chain data point to the Oracle contract. The Oracle contract sorts the values as they come in and as soon as five values are received, the official value (median of the five) is selected and saved on-chain. The miners are then allocated their payout (base reward + tips). Anyone holding TRB can dispute the validity of a mined value within one day of it being mined by paying a dispute fee. Over the next week, Tellor token holders will vote on the validity of the data point; if the data point is deemed to be false, the miner will lose their stake. However, if the vote determines the value is correct, the reporting party\u2019s dispute fee is given to the reported miner. Resources Website Whitepaper FAQ Twitter Medium Telegram Discord","title":"Tellor"},{"location":"built-on-ethereum/oracles/tellor/#tellor","text":"","title":"Tellor"},{"location":"built-on-ethereum/oracles/tellor/#summary","text":"Tellor is a decentralized oracle that provides off-chain pricing data for smart contracts on the Ethereum network. Tellor formed in March 2019, was part of the Binance Labs incubator and launched to mainnet in August 2019.","title":"Summary"},{"location":"built-on-ethereum/oracles/tellor/#how-tellor-works","text":"The Tellor network mints a token, Tributes (TRB). Tellor utilizes a network of miners, required to stake 1000 TRB, competing to solve PoW challenges for the right to submit data to Tellor\u2019s on-chain price feed database. A user submits a query to the Oracle using TRB to incentivize miners to choose this query over other submissions. Other users who want the same data \u2018tip\u2019 this data series to further incentivize selection by miners. Every 10 minutes, the Oracle selects the best funded query and provides a new challenge for miners to solve. Miners submit their PoW solution and off-chain data point to the Oracle contract. The Oracle contract sorts the values as they come in and as soon as five values are received, the official value (median of the five) is selected and saved on-chain. The miners are then allocated their payout (base reward + tips). Anyone holding TRB can dispute the validity of a mined value within one day of it being mined by paying a dispute fee. Over the next week, Tellor token holders will vote on the validity of the data point; if the data point is deemed to be false, the miner will lose their stake. However, if the vote determines the value is correct, the reporting party\u2019s dispute fee is given to the reported miner.","title":"How Tellor Works"},{"location":"built-on-ethereum/oracles/tellor/#resources","text":"Website Whitepaper FAQ Twitter Medium Telegram Discord","title":"Resources"},{"location":"built-on-ethereum/oracles/what-are-oracles/","text":"Oracles Summary Smart contracts on Ethereum are fully self-contained and any information or access to off-chain data is restricted. This is required for security reasons as execution in blockchains must be deterministic and the response to subsequent calls to outside API's could change in unknown ways. Nevertheless, certain desirable types of smart contracts are only possible with additional outside data. An Oracle is a conceptual solution which takes real-world off-chain data and submits an immutable copy of this information into blocks \u2013 thereby making it available for future smart contract use. The Oracle Problem The (\u2018Oracle\u2019) problem is that there are no currently successful decentralized designs. Therefore, all currently functioning oracles are centralized and introduce a series of attack vectors & issues including: Accuracy \u2013 even without malice, a centralized entity is often mistaken about the status or value of something. This prevents an oracle from providing the \u201creal\u201d answer to be memorialized on the blockchain. Gaming \u2013 many oracles are critical for the functioning of smart contracts holding significant amounts of assets. If an attacker can trick the oracle into changing its value then it becomes quite simple to steal assets. Consistency \u2013 the most desired oracles are information streams, where the values change constantly. This means users expect oracles to accurately and consistently provide information on a certain schedule (often every block). However, there is no guarantee that a transaction (to post the information) will be certain to enter a block, no matter the fee that is paid. This is both a usability issue and an attack vector. Solutions Solutions to the oracle problem center around ways to both validate the data being queried and also place this data on chain in both an available and non-centralized manner. The solutions come in two forms. One is to make your centralized oracles better and the second is to make your oracles decentralized. In certain cases, a centralized oracle may be the best solution. For example, for a proprietary dataset which is posted directly by the owner with a widely accepted signature. An example might be a centralized exchange\u2019s daily settlement value posted to the exchange\u2019s website and certified by the exchange\u2019s private key. In such a case, no new risks are incurred by using this oracle above what was already incurred by using the centralized price feed in general. In other cases, a decentralized solution is desirable. This is an active area of research but attempted solutions include consensus-based truth, schelling point oracles (e.g. prediction markets), staked reporters (skin-in-the-game), trusted execution environments (TEEs), and many combinations of the various game theoretic crypto-economic security measures. The main drawback with most of these methods is the same main drawback of blockchains in general. Data points (from the oracle) like blocks (on a blockchain), can only be trusted up to a certain threshold (\u201cthis number/block is correct or $50k will be slashed\u201d). But again, like a blockchain, in certain circumstances by gaming the oracle, an attacker can make more than $50k. So designing systems where assets at stake actually guarantee the validity of the number/content/block is hard and continues to be researched. Resources Decentralized Oracles","title":"What are Oracles?"},{"location":"built-on-ethereum/oracles/what-are-oracles/#oracles","text":"","title":"Oracles"},{"location":"built-on-ethereum/oracles/what-are-oracles/#summary","text":"Smart contracts on Ethereum are fully self-contained and any information or access to off-chain data is restricted. This is required for security reasons as execution in blockchains must be deterministic and the response to subsequent calls to outside API's could change in unknown ways. Nevertheless, certain desirable types of smart contracts are only possible with additional outside data. An Oracle is a conceptual solution which takes real-world off-chain data and submits an immutable copy of this information into blocks \u2013 thereby making it available for future smart contract use.","title":"Summary"},{"location":"built-on-ethereum/oracles/what-are-oracles/#the-oracle-problem","text":"The (\u2018Oracle\u2019) problem is that there are no currently successful decentralized designs. Therefore, all currently functioning oracles are centralized and introduce a series of attack vectors & issues including: Accuracy \u2013 even without malice, a centralized entity is often mistaken about the status or value of something. This prevents an oracle from providing the \u201creal\u201d answer to be memorialized on the blockchain. Gaming \u2013 many oracles are critical for the functioning of smart contracts holding significant amounts of assets. If an attacker can trick the oracle into changing its value then it becomes quite simple to steal assets. Consistency \u2013 the most desired oracles are information streams, where the values change constantly. This means users expect oracles to accurately and consistently provide information on a certain schedule (often every block). However, there is no guarantee that a transaction (to post the information) will be certain to enter a block, no matter the fee that is paid. This is both a usability issue and an attack vector.","title":"The Oracle Problem"},{"location":"built-on-ethereum/oracles/what-are-oracles/#solutions","text":"Solutions to the oracle problem center around ways to both validate the data being queried and also place this data on chain in both an available and non-centralized manner. The solutions come in two forms. One is to make your centralized oracles better and the second is to make your oracles decentralized. In certain cases, a centralized oracle may be the best solution. For example, for a proprietary dataset which is posted directly by the owner with a widely accepted signature. An example might be a centralized exchange\u2019s daily settlement value posted to the exchange\u2019s website and certified by the exchange\u2019s private key. In such a case, no new risks are incurred by using this oracle above what was already incurred by using the centralized price feed in general. In other cases, a decentralized solution is desirable. This is an active area of research but attempted solutions include consensus-based truth, schelling point oracles (e.g. prediction markets), staked reporters (skin-in-the-game), trusted execution environments (TEEs), and many combinations of the various game theoretic crypto-economic security measures. The main drawback with most of these methods is the same main drawback of blockchains in general. Data points (from the oracle) like blocks (on a blockchain), can only be trusted up to a certain threshold (\u201cthis number/block is correct or $50k will be slashed\u201d). But again, like a blockchain, in certain circumstances by gaming the oracle, an attacker can make more than $50k. So designing systems where assets at stake actually guarantee the validity of the number/content/block is hard and continues to be researched.","title":"Solutions"},{"location":"built-on-ethereum/oracles/what-are-oracles/#resources","text":"Decentralized Oracles","title":"Resources"},{"location":"built-on-ethereum/supply-chain/shipchain/","text":"ShipChain Summary ShipChain is building an end to end logistics and supply chain visibility platform, based both on Ethereum and Loom for scalability. ShipChain has a modified fork of the Loom Dappchain as a Layer 2 solution to isolate supply chain transactions from the mainnet, while still posting back to the Ethereum mainnet, in what they are calling Industry Chains . ShipChain is separating into two distinct entities, one being a non-profit foundation to steward the sidechain as well as open standards and open source software for supply chain and logistics, and a for-profit developer on top of the open source solutions. History ShipChain was initially founded in 2017 by John Monarch , Brian D. Evans , Lee Bailey , Sami Rusani , and Aaron Kelly. It performed its first pilot with Perdue Farms across 2018, and it officially had a public launch in January 2019. Testnet The ShipChain network is currently in testnet with nodes validating blocks actively. Their API solution and Vault Engine are in production and available as open source products. Plug and Play ShipChain was added to the Plug and Play accelerator program in Silicon Valley, focused on Enterprise/B2B solutions. ShipChain was in the Food/Beverage program in 2019, with a focus on supply chain traceability and trust using public blockchain. SHIP Token The SHIP token is the native token of the ShipChain sidechain. The token is required for dapp developers to deploy contracts, modeled after the Loom Karma system. End users do not pay for direct contract interactions, developers that deploy live contracts are responsible for gas costs, reducing the barrier to entry for end users. Validator nodes on the sidechain are paid in SHIP. Resources: Website GitHub Technical documentation Network and Block explorer","title":"Shipchain"},{"location":"built-on-ethereum/supply-chain/shipchain/#shipchain","text":"","title":"ShipChain"},{"location":"built-on-ethereum/supply-chain/shipchain/#summary","text":"ShipChain is building an end to end logistics and supply chain visibility platform, based both on Ethereum and Loom for scalability. ShipChain has a modified fork of the Loom Dappchain as a Layer 2 solution to isolate supply chain transactions from the mainnet, while still posting back to the Ethereum mainnet, in what they are calling Industry Chains . ShipChain is separating into two distinct entities, one being a non-profit foundation to steward the sidechain as well as open standards and open source software for supply chain and logistics, and a for-profit developer on top of the open source solutions.","title":"Summary"},{"location":"built-on-ethereum/supply-chain/shipchain/#history","text":"ShipChain was initially founded in 2017 by John Monarch , Brian D. Evans , Lee Bailey , Sami Rusani , and Aaron Kelly. It performed its first pilot with Perdue Farms across 2018, and it officially had a public launch in January 2019.","title":"History"},{"location":"built-on-ethereum/supply-chain/shipchain/#testnet","text":"The ShipChain network is currently in testnet with nodes validating blocks actively. Their API solution and Vault Engine are in production and available as open source products.","title":"Testnet"},{"location":"built-on-ethereum/supply-chain/shipchain/#plug-and-play","text":"ShipChain was added to the Plug and Play accelerator program in Silicon Valley, focused on Enterprise/B2B solutions. ShipChain was in the Food/Beverage program in 2019, with a focus on supply chain traceability and trust using public blockchain.","title":"Plug and Play"},{"location":"built-on-ethereum/supply-chain/shipchain/#ship-token","text":"The SHIP token is the native token of the ShipChain sidechain. The token is required for dapp developers to deploy contracts, modeled after the Loom Karma system. End users do not pay for direct contract interactions, developers that deploy live contracts are responsible for gas costs, reducing the barrier to entry for end users. Validator nodes on the sidechain are paid in SHIP.","title":"SHIP Token"},{"location":"built-on-ethereum/supply-chain/shipchain/#resources","text":"Website GitHub Technical documentation Network and Block explorer","title":"Resources:"},{"location":"built-on-ethereum/tcrs/types-of-tcrs/","text":"Types of TCRs Unordered TCR Ordered TCR Graded TCR Layered TCR Nested TCR Combinatorial TCR Resources TCR Design Patterns","title":"Types of TCRs"},{"location":"built-on-ethereum/tcrs/types-of-tcrs/#types-of-tcrs","text":"","title":"Types of TCRs"},{"location":"built-on-ethereum/tcrs/types-of-tcrs/#unordered-tcr","text":"","title":"Unordered TCR"},{"location":"built-on-ethereum/tcrs/types-of-tcrs/#ordered-tcr","text":"","title":"Ordered TCR"},{"location":"built-on-ethereum/tcrs/types-of-tcrs/#graded-tcr","text":"","title":"Graded TCR"},{"location":"built-on-ethereum/tcrs/types-of-tcrs/#layered-tcr","text":"","title":"Layered TCR"},{"location":"built-on-ethereum/tcrs/types-of-tcrs/#nested-tcr","text":"","title":"Nested TCR"},{"location":"built-on-ethereum/tcrs/types-of-tcrs/#combinatorial-tcr","text":"","title":"Combinatorial TCR"},{"location":"built-on-ethereum/tcrs/types-of-tcrs/#resources","text":"TCR Design Patterns","title":"Resources"},{"location":"built-on-ethereum/tcrs/what-are-tcrs/","text":"Token Curated Registries (TCRs) Summary Token Curated Registries (TCRs) are registries of listings generated by token holders. Listings can be anything from names to hashes of full-blown records stored in IPFS. A holder stakes a portion of tokens to perform an action, i.e. adding a listing. Token holders can vote on whether to accept or reject the action using their tokens. A majority wins the vote and the action is accepted or rejected. The list is updated and should become more valuable given the improved listings and the fact that the staked tokens are now out of circulation. Token holders, acting in their own self-interest, will produce a valuable list by obtaining and staking a finite supply token. The more listings staked, the scarcer the tokens; the more valuable the list, the more valuable the tokens. Resources Token-Curated Registries 1.0","title":"What are TCRs"},{"location":"built-on-ethereum/tcrs/what-are-tcrs/#token-curated-registries-tcrs","text":"","title":"Token Curated Registries (TCRs)"},{"location":"built-on-ethereum/tcrs/what-are-tcrs/#summary","text":"Token Curated Registries (TCRs) are registries of listings generated by token holders. Listings can be anything from names to hashes of full-blown records stored in IPFS. A holder stakes a portion of tokens to perform an action, i.e. adding a listing. Token holders can vote on whether to accept or reject the action using their tokens. A majority wins the vote and the action is accepted or rejected. The list is updated and should become more valuable given the improved listings and the fact that the staked tokens are now out of circulation. Token holders, acting in their own self-interest, will produce a valuable list by obtaining and staking a finite supply token. The more listings staked, the scarcer the tokens; the more valuable the list, the more valuable the tokens.","title":"Summary"},{"location":"built-on-ethereum/tcrs/what-are-tcrs/#resources","text":"Token-Curated Registries 1.0","title":"Resources"},{"location":"ethereum-basics/ethereum-foundation/","text":"Ethereum Foundation Mission Statement \u201cThe Ethereum Foundation\u2019s mission is to promote and support Ethereum platform and base layer research, development and education to bring decentralized protocols and tools to the world that empower developers to produce next generation decentralized applications (dapps).\u201d People and Teams According to Vitalik Buterin in August of 2018, the Ethereum foundation is \u201cfairly ad-hoc distributed\u201d and is made up 90 people across approximately 7 teams working on different areas. They are: Research (mainly Eth 2.0) Geth Client WASM Whisper/Swarm Pyevm/Trinity/Vyper Solidity Developer Tools Despite not being mentioned in the comment by Vitalik, there is also a team dedicated to Ethereum Grants . Organizational Structure Ethereum Foundation incorporated as Swiss non-proft Stiftung Ethereum at Zug, Switzerland. Miyaguchi Ayako( @mi_ayako ) is the Executive Director of Stiftung Ethereum since 12.06.2018 Ethereum Foundation is the owner of trademarks : ETHEREUM, ETHER, ENTERPRISE ETHEREUM and ENTERPRISE ETHEREUM ALLIANCE. Funding and Burn Rate The Ethereum Foundation\u2019s multisig wallet is known and as of 7/12/20 holds 562,438 Ether. That equates to ~$330,000,000. It is currently not known how much the Ethereum Foundation spends on its organization and grants every year. Resources Vitalik\u2019s comments on internal teams","title":"Ethereum Foundation"},{"location":"ethereum-basics/ethereum-foundation/#ethereum-foundation","text":"","title":"Ethereum Foundation"},{"location":"ethereum-basics/ethereum-foundation/#mission-statement","text":"\u201cThe Ethereum Foundation\u2019s mission is to promote and support Ethereum platform and base layer research, development and education to bring decentralized protocols and tools to the world that empower developers to produce next generation decentralized applications (dapps).\u201d","title":"Mission Statement"},{"location":"ethereum-basics/ethereum-foundation/#people-and-teams","text":"According to Vitalik Buterin in August of 2018, the Ethereum foundation is \u201cfairly ad-hoc distributed\u201d and is made up 90 people across approximately 7 teams working on different areas. They are: Research (mainly Eth 2.0) Geth Client WASM Whisper/Swarm Pyevm/Trinity/Vyper Solidity Developer Tools Despite not being mentioned in the comment by Vitalik, there is also a team dedicated to Ethereum Grants .","title":"People and Teams"},{"location":"ethereum-basics/ethereum-foundation/#organizational-structure","text":"Ethereum Foundation incorporated as Swiss non-proft Stiftung Ethereum at Zug, Switzerland. Miyaguchi Ayako( @mi_ayako ) is the Executive Director of Stiftung Ethereum since 12.06.2018 Ethereum Foundation is the owner of trademarks : ETHEREUM, ETHER, ENTERPRISE ETHEREUM and ENTERPRISE ETHEREUM ALLIANCE.","title":"Organizational Structure"},{"location":"ethereum-basics/ethereum-foundation/#funding-and-burn-rate","text":"The Ethereum Foundation\u2019s multisig wallet is known and as of 7/12/20 holds 562,438 Ether. That equates to ~$330,000,000. It is currently not known how much the Ethereum Foundation spends on its organization and grants every year.","title":"Funding and Burn Rate"},{"location":"ethereum-basics/ethereum-foundation/#resources","text":"Vitalik\u2019s comments on internal teams","title":"Resources"},{"location":"ethereum-basics/governance/","text":"Governance Summary Blockchains are distributed systems. They are essentially consensus protocols, which means that different nodes in the network (e.g. computers on the internet) have to be running compatible software. \u201cNode operators\u201d are the owners and managers of nodes that run the protocol. Most node operators don\u2019t want to write much software, and it\u2019s a technical challenge for anyone to independently write compatible implementations of any consensus protocol even if they have a specification. As a result, node operators rely on software repositories (usually hosted on Microsoft/Github servers) to provide them with the software they choose to run. \u201cCore developers\u201d of a blockchain are software developers who work on the software that implement that protocol. Developers have processes that are supposed to assure the quality of the software they release, and are generally very interested in maintaining the legitimacy of their software repositories because they want to see people using their software (as opposed to someone else\u2019s). Critical Components of Governance 1. Incentives Each group in the system has their own incentives. Those incentives are not always 100% aligned with all other groups in the system. Groups will propose changes over time which are advantageous for them. Organisms are biased towards their own survival. This commonly manifests in changes to the reward structure, monetary policy, or balances of power. 2. Mechanisms for Coordination Since it\u2019s unlikely all groups have 100% incentive alignment at all times, the ability for each group to coordinate around their common incentives is critical for them to affect change. If one group can coordinate better than another, it creates power imbalances in their favor. In practice, a major factor is how much coordination can be done on-chain vs. off-chain, where on-chain coordination makes coordinating easier. In some new blockchains (such as Tezos or Polkadot), on-chain coordination allows the rules or even the ledger history itself to be changed. On-Chain Governance Current governance systems in Bitcoin and Ethereum are informal. They were designed using a decentralized ethos, first promulgated by Satoshi Nakamoto in his original paper. Improvement proposals to make changes to the blockchain are submitted by developers and a core group, consisting mostly of developers, is responsible for coordinating and achieving consensus between stakeholders. The stakeholders in this case are miners (who operate nodes), developers (who are responsible for core blockchain algorithms) and users (who use and invest in various coins). What is on-chain governance? On-chain governance is a system for managing and implementing changes to cryptocurrency blockchains. In this type of governance, rules for instituting changes are encoded into the blockchain protocol. Developers propose changes through code updates and each node votes on whether to accept or reject the proposed change. How does it work? Unlike informal governance systems, which use a combination of offline coordination and online code modifications to effect changes, on-chain governance systems solely work online. Changes to a blockchain are proposed through code updates. Subsequently, nodes can vote to accept or decline the change. Not all nodes have equal voting power. Nodes with greater holdings of coins have more votes as compared to nodes that have a relatively lesser number of holdings. If the change is accepted, it is included in the blockchain and baselined. In some instances of on-chain governance implementation, the updated code may be rolled back to its version before a baseline, if the proposed change is unsuccessful. Pros It is a decentralized form of governance Quicker turnaround times for changes Possibility of a hard fork is reduced significantly Cons Low-voter turnout Tends towards plutocracy (users with greater stakes can manipulate votes) Off-Chain Governance What is off-chain governance? Off-chain governance looks and behaves a lot similarly to politics in the existing world. Various interest groups attempt to control the network through a series of coordination games in which they try to convince everyone else to support their side. There is no code that binds these groups to specific behaviors, but rather, they choose what\u2019s in their best interest given the known preferences of the other stakeholders. There\u2019s a reason blockchain technology and game theory are so interwoven. How does it work? Improvement proposals to make changes to the blockchain are submitted by developers and a core group, consisting mostly of developers, is responsible for coordinating and achieving consensus between stakeholders. The stakeholders in this case are miners (who operate nodes), developers (who are responsible for core blockchain algorithms) and users (who use and invest in various coins). The various stakeholders signal their approval or disapproval for an improvement proposal through private and community discourse. Then, the core developers get a sense for whether or not node operators and miners will agree to upgrade their software. Ideally, all sides agree and the code changes are made smoothly. Everything is announced beforehand and stakeholders have time to update. In the case of disagreement, stakeholders have two options. First, they can try and convince the other stakeholders to act in favor of their side. If they can\u2019t reach consensus, they have the ability to hard fork the protocol and keep or change features they think are necessary. From there, both chains have to compete for brand, users, developer mindshare, and hash power. Resources Why on-chain governance? On-chain governance explained Off-chain governance explained","title":"Governance"},{"location":"ethereum-basics/governance/#governance","text":"","title":"Governance"},{"location":"ethereum-basics/governance/#summary","text":"Blockchains are distributed systems. They are essentially consensus protocols, which means that different nodes in the network (e.g. computers on the internet) have to be running compatible software. \u201cNode operators\u201d are the owners and managers of nodes that run the protocol. Most node operators don\u2019t want to write much software, and it\u2019s a technical challenge for anyone to independently write compatible implementations of any consensus protocol even if they have a specification. As a result, node operators rely on software repositories (usually hosted on Microsoft/Github servers) to provide them with the software they choose to run. \u201cCore developers\u201d of a blockchain are software developers who work on the software that implement that protocol. Developers have processes that are supposed to assure the quality of the software they release, and are generally very interested in maintaining the legitimacy of their software repositories because they want to see people using their software (as opposed to someone else\u2019s).","title":"Summary"},{"location":"ethereum-basics/governance/#critical-components-of-governance","text":"1. Incentives Each group in the system has their own incentives. Those incentives are not always 100% aligned with all other groups in the system. Groups will propose changes over time which are advantageous for them. Organisms are biased towards their own survival. This commonly manifests in changes to the reward structure, monetary policy, or balances of power. 2. Mechanisms for Coordination Since it\u2019s unlikely all groups have 100% incentive alignment at all times, the ability for each group to coordinate around their common incentives is critical for them to affect change. If one group can coordinate better than another, it creates power imbalances in their favor. In practice, a major factor is how much coordination can be done on-chain vs. off-chain, where on-chain coordination makes coordinating easier. In some new blockchains (such as Tezos or Polkadot), on-chain coordination allows the rules or even the ledger history itself to be changed.","title":"Critical Components of Governance"},{"location":"ethereum-basics/governance/#on-chain-governance","text":"Current governance systems in Bitcoin and Ethereum are informal. They were designed using a decentralized ethos, first promulgated by Satoshi Nakamoto in his original paper. Improvement proposals to make changes to the blockchain are submitted by developers and a core group, consisting mostly of developers, is responsible for coordinating and achieving consensus between stakeholders. The stakeholders in this case are miners (who operate nodes), developers (who are responsible for core blockchain algorithms) and users (who use and invest in various coins).","title":"On-Chain Governance"},{"location":"ethereum-basics/governance/#what-is-on-chain-governance","text":"On-chain governance is a system for managing and implementing changes to cryptocurrency blockchains. In this type of governance, rules for instituting changes are encoded into the blockchain protocol. Developers propose changes through code updates and each node votes on whether to accept or reject the proposed change.","title":"What is on-chain governance?"},{"location":"ethereum-basics/governance/#how-does-it-work","text":"Unlike informal governance systems, which use a combination of offline coordination and online code modifications to effect changes, on-chain governance systems solely work online. Changes to a blockchain are proposed through code updates. Subsequently, nodes can vote to accept or decline the change. Not all nodes have equal voting power. Nodes with greater holdings of coins have more votes as compared to nodes that have a relatively lesser number of holdings. If the change is accepted, it is included in the blockchain and baselined. In some instances of on-chain governance implementation, the updated code may be rolled back to its version before a baseline, if the proposed change is unsuccessful.","title":"How does it work?"},{"location":"ethereum-basics/governance/#pros","text":"It is a decentralized form of governance Quicker turnaround times for changes Possibility of a hard fork is reduced significantly","title":"Pros"},{"location":"ethereum-basics/governance/#cons","text":"Low-voter turnout Tends towards plutocracy (users with greater stakes can manipulate votes)","title":"Cons"},{"location":"ethereum-basics/governance/#off-chain-governance","text":"","title":"Off-Chain Governance"},{"location":"ethereum-basics/governance/#what-is-off-chain-governance","text":"Off-chain governance looks and behaves a lot similarly to politics in the existing world. Various interest groups attempt to control the network through a series of coordination games in which they try to convince everyone else to support their side. There is no code that binds these groups to specific behaviors, but rather, they choose what\u2019s in their best interest given the known preferences of the other stakeholders. There\u2019s a reason blockchain technology and game theory are so interwoven.","title":"What is off-chain governance?"},{"location":"ethereum-basics/governance/#how-does-it-work_1","text":"Improvement proposals to make changes to the blockchain are submitted by developers and a core group, consisting mostly of developers, is responsible for coordinating and achieving consensus between stakeholders. The stakeholders in this case are miners (who operate nodes), developers (who are responsible for core blockchain algorithms) and users (who use and invest in various coins). The various stakeholders signal their approval or disapproval for an improvement proposal through private and community discourse. Then, the core developers get a sense for whether or not node operators and miners will agree to upgrade their software. Ideally, all sides agree and the code changes are made smoothly. Everything is announced beforehand and stakeholders have time to update. In the case of disagreement, stakeholders have two options. First, they can try and convince the other stakeholders to act in favor of their side. If they can\u2019t reach consensus, they have the ability to hard fork the protocol and keep or change features they think are necessary. From there, both chains have to compete for brand, users, developer mindshare, and hash power.","title":"How does it work?"},{"location":"ethereum-basics/governance/#resources","text":"Why on-chain governance? On-chain governance explained Off-chain governance explained","title":"Resources"},{"location":"ethereum-basics/history-and-forks/","text":"History and Network Upgrades Initial Concept Vitalik Buterin first described the concept of Ethereum through the White Paper and first introduced the concept publicly at Bitcoin Miami 2014. The underlying impetus to develop Ethereum and consequently Ether was to utilize aspects of the technology initially developed as part of the Bitcoin blockchain and combine it with the capabilities of smart contract technology. The idea was that this marriage would lead to a platform that could sustain not only the money or medium of exchange use case, but also to add programmability to money, introducing conditional logic to the equation that would open up a world of possibilities with regards to decentralized financial applications and products, and additional decentralized applications. Initial ETH Distribution The Ethereum presale took place from Tuesday, 22 July 2014 to Tuesday, 2 September 2014, lasting a total of 42 days. The price of ether was initially set to a discounted price of 2000 ETH per BTC, and stayed that way for 14 days before linearly declining to a final rate of 1337 ETH per BTC. 60 Million ether was created for the presale of which 80% was available for purchase with 20% (or 12 Million) being retained by the Ethereum Foundations 'development fund' which consisted of early contributors to the project and developers. The presale ended with ~31,000 BTC (equivalent to ~$18.3 million) being raised by the Ethereum Foundation over the 42 days. Ether was not usable or transferable until the launch of the genesis block which occurred on July 30th, 2015. Network Upgrade History Name Block Date Frontier 1 2015-07-30 Frontier Thawing 200000 2015-09-07 Homestead 1150000 2016-03-14 DAO Fork 1920000 2016-07-20 Tangerine Whistle 2463000 2016-10-18 Spurious Dragon 2675000 2016-11-22 Byzantium 4370000 2017-10-16 Constantinople 7280000 2019-02-28 Istanbul 9069000 2019-12-06 Muir Glacier 9200000 2020-01-02 History Timeline For a digital history book on Ethereum, visit \"The History of Ethereum\" timeline . Resources Launching the Ether Sale A Statistical Overview of the Ether Sale","title":"History and Network Upgrades"},{"location":"ethereum-basics/history-and-forks/#history-and-network-upgrades","text":"","title":"History and Network Upgrades"},{"location":"ethereum-basics/history-and-forks/#initial-concept","text":"Vitalik Buterin first described the concept of Ethereum through the White Paper and first introduced the concept publicly at Bitcoin Miami 2014. The underlying impetus to develop Ethereum and consequently Ether was to utilize aspects of the technology initially developed as part of the Bitcoin blockchain and combine it with the capabilities of smart contract technology. The idea was that this marriage would lead to a platform that could sustain not only the money or medium of exchange use case, but also to add programmability to money, introducing conditional logic to the equation that would open up a world of possibilities with regards to decentralized financial applications and products, and additional decentralized applications.","title":"Initial Concept"},{"location":"ethereum-basics/history-and-forks/#initial-eth-distribution","text":"The Ethereum presale took place from Tuesday, 22 July 2014 to Tuesday, 2 September 2014, lasting a total of 42 days. The price of ether was initially set to a discounted price of 2000 ETH per BTC, and stayed that way for 14 days before linearly declining to a final rate of 1337 ETH per BTC. 60 Million ether was created for the presale of which 80% was available for purchase with 20% (or 12 Million) being retained by the Ethereum Foundations 'development fund' which consisted of early contributors to the project and developers. The presale ended with ~31,000 BTC (equivalent to ~$18.3 million) being raised by the Ethereum Foundation over the 42 days. Ether was not usable or transferable until the launch of the genesis block which occurred on July 30th, 2015.","title":"Initial ETH Distribution"},{"location":"ethereum-basics/history-and-forks/#network-upgrade-history","text":"Name Block Date Frontier 1 2015-07-30 Frontier Thawing 200000 2015-09-07 Homestead 1150000 2016-03-14 DAO Fork 1920000 2016-07-20 Tangerine Whistle 2463000 2016-10-18 Spurious Dragon 2675000 2016-11-22 Byzantium 4370000 2017-10-16 Constantinople 7280000 2019-02-28 Istanbul 9069000 2019-12-06 Muir Glacier 9200000 2020-01-02","title":"Network Upgrade History"},{"location":"ethereum-basics/history-and-forks/#history-timeline","text":"For a digital history book on Ethereum, visit \"The History of Ethereum\" timeline .","title":"History Timeline"},{"location":"ethereum-basics/history-and-forks/#resources","text":"Launching the Ether Sale A Statistical Overview of the Ether Sale","title":"Resources"},{"location":"ethereum-basics/monetary-policy/","text":"Monetary Policy Summary: Minimum Necessary Issuance Ethereum's Monetary Policy is defined by the rewards that are paid out by the protocol at any given time. Ethereum's current yearly network issuance is approximately 4.5% with 2 Ether per block and an additional 1.75 Ether per uncle block (plus fees) being rewarded to miners. Ethereum does not have a fixed supply because a fixed supply would also require a fixed security budget for the Ethereum network. Rather than arbitrarily fix Ethereum's security, Ethereum's monetary policy is best described as \"minimum issuance to secure the network\". Ethereum has had a history of reducing issuance to these estimated minimums and the network has never increased issuance. The move to proof-of-stake is also part of Ethereum's effort to reduce issuance to minimum amounts without sacrificing security. Ethereum's minimum necessary issuance policy is enforced by a wide range of stakeholders within the ecosystem - including: Developers Community members Ecosystem spokes/projects Miners and other network participants As Ethereum is a decentralized network, the Monetary Policy cannot be successfully modified unless there is overwhelming consensus from the aforementioned stakeholders. Ethereum follows an off-chain governance process meaning that any and all decisions on changes to the network happen extra-protocol. That said, due to natural incentives, Ether's issuance is unlikely to ever increase unless the security of the network is at risk. Additionally, the upcoming Ethereum 2.0 proof-of-stake transition will progressively allow for a drastic reduction of Ether issuance while maintaining the same level of network security. Important Events Genesis Block As part of the Ethereum genesis block, initial contributors to Ethereum sale were allocated 60,000,000 Ether. Another 12,000,000 Ether was given to the development fund which was distributed among early contributors and the Ethereum Foundation. Historical Issuance Impacts Block Reward Reductions Every block produced on the Ethereum network has an associated block reward which incentivizes miners to support the network. On top of the base block reward, miners that find an uncle block receive ~75% of the current block reward. This results in a growing supply of Ether across time. The history of the block reward are as follows: Block 0 to Block 4,369,999: 5 Ether Block 4,370,000 to 7,280,000: 3 Ether (changed via EIP-649 ) Block 7,280,000 to now: 2 Ether (changed via EIP-1234 ) Other Events Issuance rate is also impacted by the speed of blocks. There have been a few other events in Ethereum's history which has impacted the issuance rate. Some planned and some not planned. The Homestead fork in March 2016 saw a decrease in block times and therefore a temporary increase in issuance rate. In late 2016, the network was under DDoS attack. This increased the uncle rate, therefore causing a temporary rise in issuance rate. In mid 2017, a mechanism called the difficulty bomb (or \"Ethereum Ice Age\") started to kick in. This meant that the difficulty of mining a block rose, therefore slowing down blocks. This resulted in a dramatic decrease in issuance rate. In late 2017, the Byzantium fork was released which delayed the difficulty bomb and also reduced block rewards from 5 to 3. In early 2019, after a few months of difficulty bomb activation, the bomb was reset and block rewards were reduced from 3 to 2 in the Constantinople fork. In early 2020, the Muir Glacier fork reset the difficulty bomb. Proof of Stake Impact According to the current Eth 2.0 spec , issuance rate will be greatly reduced as a part of Proof of Stake. There will be a sliding scale between total amount of Ether at stake and annual interest earned by stakers. The current spec would produce the following annual interest and inflation numbers based on total network stake: ETH validating Max annual issuance Max annual network issuance % Max annual return rate (for validators) 1,000,000 181,019 0.17% 18.10% 3,000,000 313,534 0.30% 10.45% 10,000,000 572,433 0.54% 5.72% 30,000,000 991,483 0.94% 3.30% 100,000,000 1,810,193 1.71% 1.81% Historical and Future Supply Forecast There are two majors upcoming factors when it comes to Ethereum's issuance rate and supply curve. They are: Eth2 Phase 0 : Slight bump in issuance due to Beacon Chain launch. Eth2 Phase 1.5 : PoW rewards will be removed due to Eth1 PoW chain being moved into a shard on the Eth2 chain. This means that the only rewards on chain will be to PoS validators, using the chart above. Resources Ethereum issuance reduction process explained","title":"Monetary Policy"},{"location":"ethereum-basics/monetary-policy/#monetary-policy","text":"","title":"Monetary Policy"},{"location":"ethereum-basics/monetary-policy/#summary-minimum-necessary-issuance","text":"Ethereum's Monetary Policy is defined by the rewards that are paid out by the protocol at any given time. Ethereum's current yearly network issuance is approximately 4.5% with 2 Ether per block and an additional 1.75 Ether per uncle block (plus fees) being rewarded to miners. Ethereum does not have a fixed supply because a fixed supply would also require a fixed security budget for the Ethereum network. Rather than arbitrarily fix Ethereum's security, Ethereum's monetary policy is best described as \"minimum issuance to secure the network\". Ethereum has had a history of reducing issuance to these estimated minimums and the network has never increased issuance. The move to proof-of-stake is also part of Ethereum's effort to reduce issuance to minimum amounts without sacrificing security. Ethereum's minimum necessary issuance policy is enforced by a wide range of stakeholders within the ecosystem - including: Developers Community members Ecosystem spokes/projects Miners and other network participants As Ethereum is a decentralized network, the Monetary Policy cannot be successfully modified unless there is overwhelming consensus from the aforementioned stakeholders. Ethereum follows an off-chain governance process meaning that any and all decisions on changes to the network happen extra-protocol. That said, due to natural incentives, Ether's issuance is unlikely to ever increase unless the security of the network is at risk. Additionally, the upcoming Ethereum 2.0 proof-of-stake transition will progressively allow for a drastic reduction of Ether issuance while maintaining the same level of network security.","title":"Summary: Minimum Necessary Issuance"},{"location":"ethereum-basics/monetary-policy/#important-events","text":"","title":"Important Events"},{"location":"ethereum-basics/monetary-policy/#genesis-block","text":"As part of the Ethereum genesis block, initial contributors to Ethereum sale were allocated 60,000,000 Ether. Another 12,000,000 Ether was given to the development fund which was distributed among early contributors and the Ethereum Foundation.","title":"Genesis Block"},{"location":"ethereum-basics/monetary-policy/#historical-issuance-impacts","text":"Block Reward Reductions Every block produced on the Ethereum network has an associated block reward which incentivizes miners to support the network. On top of the base block reward, miners that find an uncle block receive ~75% of the current block reward. This results in a growing supply of Ether across time. The history of the block reward are as follows: Block 0 to Block 4,369,999: 5 Ether Block 4,370,000 to 7,280,000: 3 Ether (changed via EIP-649 ) Block 7,280,000 to now: 2 Ether (changed via EIP-1234 ) Other Events Issuance rate is also impacted by the speed of blocks. There have been a few other events in Ethereum's history which has impacted the issuance rate. Some planned and some not planned. The Homestead fork in March 2016 saw a decrease in block times and therefore a temporary increase in issuance rate. In late 2016, the network was under DDoS attack. This increased the uncle rate, therefore causing a temporary rise in issuance rate. In mid 2017, a mechanism called the difficulty bomb (or \"Ethereum Ice Age\") started to kick in. This meant that the difficulty of mining a block rose, therefore slowing down blocks. This resulted in a dramatic decrease in issuance rate. In late 2017, the Byzantium fork was released which delayed the difficulty bomb and also reduced block rewards from 5 to 3. In early 2019, after a few months of difficulty bomb activation, the bomb was reset and block rewards were reduced from 3 to 2 in the Constantinople fork. In early 2020, the Muir Glacier fork reset the difficulty bomb.","title":"Historical Issuance Impacts"},{"location":"ethereum-basics/monetary-policy/#proof-of-stake-impact","text":"According to the current Eth 2.0 spec , issuance rate will be greatly reduced as a part of Proof of Stake. There will be a sliding scale between total amount of Ether at stake and annual interest earned by stakers. The current spec would produce the following annual interest and inflation numbers based on total network stake: ETH validating Max annual issuance Max annual network issuance % Max annual return rate (for validators) 1,000,000 181,019 0.17% 18.10% 3,000,000 313,534 0.30% 10.45% 10,000,000 572,433 0.54% 5.72% 30,000,000 991,483 0.94% 3.30% 100,000,000 1,810,193 1.71% 1.81%","title":"Proof of Stake Impact"},{"location":"ethereum-basics/monetary-policy/#historical-and-future-supply-forecast","text":"There are two majors upcoming factors when it comes to Ethereum's issuance rate and supply curve. They are: Eth2 Phase 0 : Slight bump in issuance due to Beacon Chain launch. Eth2 Phase 1.5 : PoW rewards will be removed due to Eth1 PoW chain being moved into a shard on the Eth2 chain. This means that the only rewards on chain will be to PoS validators, using the chart above.","title":"Historical and Future Supply Forecast"},{"location":"ethereum-basics/monetary-policy/#resources","text":"Ethereum issuance reduction process explained","title":"Resources"},{"location":"ethereum-basics/resources/","text":"Resources Getting Started Intro to Ethereum Complete Beginners Guide to Cryptocurrency What is Ethereum? An absolute beginner\u2019s guide. (Animated comic.) Decrypt - Ethereum Ethereum Explained Ethereum Syllabus Cryptocurrency Explained How A Blockchain Works (6 min video) Blockchain for Babies Further Education Awesome Decentralized Finance Awesome Zeppelin Cryptocurrency Education Portal Blockchain.com Learning Portal Interactive Blockchain Demo Crypto and Blockchain Glossary Cryptoeconomics.study Binance Academy Coinmonks Media News The Block Token Daily Token Economy Subreddits /r/Ethereum /r/EthFinance /r/EthStaker /r/EtherMining /r/EthDev /r/EthereumNoobies Podcasts Into the Ether Bankless Podcast The Defiant Podcast Epicenter The Block Experience Dose of Ether Unchained Unconfirmed Zero Knowledge Flippening for Crypto Investors Digitally Rare Village Global Multicoin Capital The Third Web a16z Podcast Blockchain Curated Newsletters EthHub Weekly Newsletter The Daily Gwei Week In Ethereum The Defiant Bankless The Ethernaut Diaries DeFi Rate Our Network Token Tuesdays JAMM Messari Coin Metrics The Block OrgTech Weekly Long Reads Sunday Proof of Work Tony Sheng Global Coin Research DeFi Weekly Token Economy Token Daily #Web3Vibes DeFi Pulse Farmer Videos DeFi Educational Videos by Chris Blec Social Media Who to Follow on Twitter Reading Crypto Reading List Beginners Guide Series on Cryptoassets Master Reading List by a16z Mastering Ethereum Cryptoassets: The Innovative Investor's Guide to Bitcoin and Beyond Ethereum Whitepaper Blogs Vitalik Buterin (Ethereum Founder) Fred Ehrsam (Coinbase Co-Founder) Vlad Zamfir (Ethereum Core Developer) The Control by Nick Tomaino Multicoin Capital Hacking, Distributed (Emin G\u00fcn Sirer) Simon de la Rouviere Tony Sheng Technical Resources Ethereum Tools Block Explorers Etherscan Etherchain Ethplorer EnjinX Bloxy Bitquery Eth2 Block Explorers Etherscan Etherchain Wallets EthHub Wallets Section MyEtherWallet MyCrypto MetaMask Dapp Explorers Dap.ps Loanscan - Ethereum Loan Explorer State of the dApps DeFi Pulse - The Decentralized Finance Leaderboard Ethereum Data Explorers Dune Analytics Ethtective Ethereum Network Statistics Ethereum Network Statistics (New) Gas Price History Chart Ethereum Gas Station Ethereum Blockchain on Kaggle Ethereum Network Hashrate Ethereum Network Difficulty BTC on Ethereum USD on Ethereum Bloxy Analytics Reports Miscellaneous List of Ethereum Public Calls Flippening Watch Run an Ethereum node Run an Ethereum Node AVADO DAppNode QuikNode Blockdaemon Vipnode Ethereum Development Ethereum Github Page Go-Ethereum Gitter Intro to Smart Contracts Ethereum Research Forum Ethereum Sharding Roadmap Ethereum 2.0 Phase 2 Wiki Ethereum Developer Tools List Ethereum Stack Exchange Ethereum Bounties EthList: The Crowdsourced Ethereum Reading List Ethereum 2.0 Devs Handbook and FAQs EatTheBlocks Solidity Video Tutorials Quickblocks LearnChannels VDF Research Awesome Cryptoeconomics Web3 Foundation Wiki Zero-Knowledge Proofs Starter Pack Awesome Ethreum Virtual Machine Solidity and Vyper cheat sheet Solidity Development Guides Security MyCrypto's Security Guide Hardware Wallet Guide Paper Wallet Guide Common Scams on Mobile Devices General Security Principles Trading Decentralized Exchanges (DEXs) EthHub DEX Section List of all Decentralized Exchanges Uniswap Radar Relay IDEX ForkDelta Paradex DEX aggregator Market Data DeFi Market Cap CoinGecko Nomics Messari Screener Coinlib CoinMarketCap Cryptowat.ch All-time-high Coin Index Bitgur Cryptofinance LootCap Portfolio Tracking Delta Blockfolio Coink (iOS) Visualizations Token Sale History Coin 360 (CryptoMaps) Real time Ethereum transactions Security Tracker Infrastructure TxStreet live visualizer Dapp Resources Non-fungible Token (NFT) Resources OpenSea (Digital Asset Marketplace) Emoon (Digital Asset Marketplace) Nifty Gateway Cryptogoods Gallery NFT Reading List Nonfungible - Market Discovery and Analysis The Creative Crypto Magazine Dapp Tools General Awesome Crypto Trackers Universal dApp Store Awesome DeFi Trackers Dapp Trackers dApp Radar dApp Store dApp.com dApp Review MakerDAO MakerDAO Vault Portal Awesome MakerDAO Augur Guesser Predictions.global - Augur Prediction Markets DEX Tools Uniswap Explorer 0x Tracker Misc InstaDApp DeFipulse - Value Locked in DeFi DeFiprime - Curated list of DeFi Products Curious Giraffe - Blockchain Analytics Miscellaneous Definitive SEC Guide Custodial Bitcoin on Ethereum Ethereum Obituaries Crypto Periodic Table KeySheet Etherean.org Blockchain Security Contacts Crypto Grant Programs Plasma Map Ethereum.org Swag Store","title":"Resources"},{"location":"ethereum-basics/resources/#resources","text":"","title":"Resources"},{"location":"ethereum-basics/resources/#getting-started","text":"","title":"Getting Started"},{"location":"ethereum-basics/resources/#intro-to-ethereum","text":"Complete Beginners Guide to Cryptocurrency What is Ethereum? An absolute beginner\u2019s guide. (Animated comic.) Decrypt - Ethereum Ethereum Explained Ethereum Syllabus Cryptocurrency Explained How A Blockchain Works (6 min video) Blockchain for Babies","title":"Intro to Ethereum"},{"location":"ethereum-basics/resources/#further-education","text":"Awesome Decentralized Finance Awesome Zeppelin Cryptocurrency Education Portal Blockchain.com Learning Portal Interactive Blockchain Demo Crypto and Blockchain Glossary Cryptoeconomics.study Binance Academy Coinmonks","title":"Further Education"},{"location":"ethereum-basics/resources/#media","text":"","title":"Media"},{"location":"ethereum-basics/resources/#news","text":"The Block Token Daily Token Economy","title":"News"},{"location":"ethereum-basics/resources/#subreddits","text":"/r/Ethereum /r/EthFinance /r/EthStaker /r/EtherMining /r/EthDev /r/EthereumNoobies","title":"Subreddits"},{"location":"ethereum-basics/resources/#podcasts","text":"Into the Ether Bankless Podcast The Defiant Podcast Epicenter The Block Experience Dose of Ether Unchained Unconfirmed Zero Knowledge Flippening for Crypto Investors Digitally Rare Village Global Multicoin Capital The Third Web a16z Podcast Blockchain Curated","title":"Podcasts"},{"location":"ethereum-basics/resources/#newsletters","text":"EthHub Weekly Newsletter The Daily Gwei Week In Ethereum The Defiant Bankless The Ethernaut Diaries DeFi Rate Our Network Token Tuesdays JAMM Messari Coin Metrics The Block OrgTech Weekly Long Reads Sunday Proof of Work Tony Sheng Global Coin Research DeFi Weekly Token Economy Token Daily #Web3Vibes DeFi Pulse Farmer","title":"Newsletters"},{"location":"ethereum-basics/resources/#videos","text":"DeFi Educational Videos by Chris Blec","title":"Videos"},{"location":"ethereum-basics/resources/#social-media","text":"Who to Follow on Twitter","title":"Social Media"},{"location":"ethereum-basics/resources/#reading","text":"Crypto Reading List Beginners Guide Series on Cryptoassets Master Reading List by a16z Mastering Ethereum Cryptoassets: The Innovative Investor's Guide to Bitcoin and Beyond Ethereum Whitepaper","title":"Reading"},{"location":"ethereum-basics/resources/#blogs","text":"Vitalik Buterin (Ethereum Founder) Fred Ehrsam (Coinbase Co-Founder) Vlad Zamfir (Ethereum Core Developer) The Control by Nick Tomaino Multicoin Capital Hacking, Distributed (Emin G\u00fcn Sirer) Simon de la Rouviere Tony Sheng","title":"Blogs"},{"location":"ethereum-basics/resources/#technical-resources","text":"","title":"Technical Resources"},{"location":"ethereum-basics/resources/#ethereum-tools","text":"","title":"Ethereum Tools"},{"location":"ethereum-basics/resources/#block-explorers","text":"Etherscan Etherchain Ethplorer EnjinX Bloxy Bitquery","title":"Block Explorers"},{"location":"ethereum-basics/resources/#eth2-block-explorers","text":"Etherscan Etherchain","title":"Eth2 Block Explorers"},{"location":"ethereum-basics/resources/#wallets","text":"EthHub Wallets Section MyEtherWallet MyCrypto MetaMask","title":"Wallets"},{"location":"ethereum-basics/resources/#dapp-explorers","text":"Dap.ps Loanscan - Ethereum Loan Explorer State of the dApps DeFi Pulse - The Decentralized Finance Leaderboard","title":"Dapp Explorers"},{"location":"ethereum-basics/resources/#ethereum-data-explorers","text":"Dune Analytics Ethtective Ethereum Network Statistics Ethereum Network Statistics (New) Gas Price History Chart Ethereum Gas Station Ethereum Blockchain on Kaggle Ethereum Network Hashrate Ethereum Network Difficulty BTC on Ethereum USD on Ethereum Bloxy Analytics Reports","title":"Ethereum Data Explorers"},{"location":"ethereum-basics/resources/#miscellaneous","text":"List of Ethereum Public Calls Flippening Watch","title":"Miscellaneous"},{"location":"ethereum-basics/resources/#run-an-ethereum-node","text":"Run an Ethereum Node AVADO DAppNode QuikNode Blockdaemon Vipnode","title":"Run an Ethereum node"},{"location":"ethereum-basics/resources/#ethereum-development","text":"Ethereum Github Page Go-Ethereum Gitter Intro to Smart Contracts Ethereum Research Forum Ethereum Sharding Roadmap Ethereum 2.0 Phase 2 Wiki Ethereum Developer Tools List Ethereum Stack Exchange Ethereum Bounties EthList: The Crowdsourced Ethereum Reading List Ethereum 2.0 Devs Handbook and FAQs EatTheBlocks Solidity Video Tutorials Quickblocks LearnChannels VDF Research Awesome Cryptoeconomics Web3 Foundation Wiki Zero-Knowledge Proofs Starter Pack Awesome Ethreum Virtual Machine Solidity and Vyper cheat sheet Solidity Development Guides","title":"Ethereum Development"},{"location":"ethereum-basics/resources/#security","text":"MyCrypto's Security Guide Hardware Wallet Guide Paper Wallet Guide Common Scams on Mobile Devices General Security Principles","title":"Security"},{"location":"ethereum-basics/resources/#trading","text":"","title":"Trading"},{"location":"ethereum-basics/resources/#decentralized-exchanges-dexs","text":"EthHub DEX Section List of all Decentralized Exchanges Uniswap Radar Relay IDEX ForkDelta Paradex DEX aggregator","title":"Decentralized Exchanges (DEXs)"},{"location":"ethereum-basics/resources/#market-data","text":"DeFi Market Cap CoinGecko Nomics Messari Screener Coinlib CoinMarketCap Cryptowat.ch All-time-high Coin Index Bitgur Cryptofinance LootCap","title":"Market Data"},{"location":"ethereum-basics/resources/#portfolio-tracking","text":"Delta Blockfolio Coink (iOS)","title":"Portfolio Tracking"},{"location":"ethereum-basics/resources/#visualizations","text":"Token Sale History Coin 360 (CryptoMaps) Real time Ethereum transactions Security Tracker Infrastructure TxStreet live visualizer","title":"Visualizations"},{"location":"ethereum-basics/resources/#dapp-resources","text":"","title":"Dapp Resources"},{"location":"ethereum-basics/resources/#non-fungible-token-nft-resources","text":"OpenSea (Digital Asset Marketplace) Emoon (Digital Asset Marketplace) Nifty Gateway Cryptogoods Gallery NFT Reading List Nonfungible - Market Discovery and Analysis The Creative Crypto Magazine","title":"Non-fungible Token (NFT) Resources"},{"location":"ethereum-basics/resources/#dapp-tools","text":"","title":"Dapp Tools"},{"location":"ethereum-basics/resources/#general","text":"Awesome Crypto Trackers Universal dApp Store Awesome DeFi Trackers","title":"General"},{"location":"ethereum-basics/resources/#dapp-trackers","text":"dApp Radar dApp Store dApp.com dApp Review","title":"Dapp Trackers"},{"location":"ethereum-basics/resources/#makerdao","text":"MakerDAO Vault Portal Awesome MakerDAO","title":"MakerDAO"},{"location":"ethereum-basics/resources/#augur","text":"Guesser Predictions.global - Augur Prediction Markets","title":"Augur"},{"location":"ethereum-basics/resources/#dex-tools","text":"Uniswap Explorer 0x Tracker","title":"DEX Tools"},{"location":"ethereum-basics/resources/#misc","text":"InstaDApp DeFipulse - Value Locked in DeFi DeFiprime - Curated list of DeFi Products Curious Giraffe - Blockchain Analytics","title":"Misc"},{"location":"ethereum-basics/resources/#miscellaneous_1","text":"Definitive SEC Guide Custodial Bitcoin on Ethereum Ethereum Obituaries Crypto Periodic Table KeySheet Etherean.org Blockchain Security Contacts Crypto Grant Programs Plasma Map Ethereum.org Swag Store","title":"Miscellaneous"},{"location":"ethereum-basics/what-is-ether/","text":"What is Ether? Summary Ether (ETH or \u039e) is the native cryptocurrency used on the Ethereum network and is used to compensate miners who secure transactions. A planned upgrade to the Ethereum protocol in 2019-2021 would replace mining with a less computationally expensive Proof of Stake mechanism which will be secured by validators, who are also expected to receive a proportional compensation in Ether. Ether also has many current use cases, such as a store of value (e.g. in lending collateral), a medium of exchange (e.g. in trade and payments), and a unit of account (e.g. in digital marketplaces). Ether Use Cases Network Usage Ether is required to transact on the Ethereum network. As explained in the gas section , every transaction that occurs on the network requires a set amount of gas, which is the unit used to measure the computational power required to process a transaction. To process a transaction and include it in a block, miners are expected to be compensated for this task. This is accomplished by setting a gas price with every transaction, which is the cost of 1 unit of gas, denominated in Gwei (1 ETH = 1,000,000,000 Gwei). For example, when you simply send ETH from one account to another, this cost 21,000 gas. If you were to set a gas price of 1 Gwei, this transaction would cost 0.000021 ETH. Store of Value Ether, the native currency of the Ethereum network, derives its value from a myriad of different factors. It is used within the Ethereum network to perform a range of functions, including: used to pay Ethereum transaction fees (in the form of \u2018gas\u2019), used as collateral for a wide range of open finance applications (MakerDAO, Compound), can be lent or borrowed (Dharma), accepted as payment by certain retailers and service providers use it as a medium of exchange to purchase Ethereum-based tokens (via ICOs or exchanges), crypto-collectibles, in-game items, and other non-fungible tokens (NFTs) earned as a reward for completing bounties (Gitcoin, Bounties Network). Furthermore, in Ethereum 2.0 (Serenity), users will be able to become a validator and help secure the network by providing computational resources and locking up 32 Ether per validator. Due to this, it is expected that Proof of Stake will lock a substantial amount of the circulating supply of Ether. There are also discussions around introducing a \u2018fee-burn\u2019 model where a percentage of Ether used to pay transaction fees would be \u2018burned\u2019 and thus reduce the circulating supply of Ether. In addition to utility value, Ether also has speculative value. This is value that is derived from speculative activities (such as trading and investing) which currently accounts for most of the value behind all crypto-assets. As observed in 2017, crypto-assets can attract substantial speculative interest, with some assets increasing in value by 1000x over just a few months. This speculative interest often brings fresh capital into the ecosystem that can be reinvested into various verticals, but it can be damaging to the short-term market sentiment of all crypto-assets. Can\u2019t tokens on Ethereum be used instead of Ether? Theoretically, yes. Practically, no. The concept of using another asset to secure the Ethereum network is called \u2018economic abstraction\u2019 (a good primer can be found here . This would involve miners / validators accepting tokens other than Ether in exchange for adding valid transactions to new blocks. It is highly unlikely that the Ethereum protocol will ever implement economic abstraction as it could potentially reduce the security of the blockchain by compromising the value of Ether. How does valuable Ether help to secure the network? In Proof of Work systems, miners compete with each other to find a block and thus be rewarded for their work (in the form of the native crypto-asset of the protocol). As the price of the asset increases, it naturally brings with it more miners, which then increases the network difficulty. As the network difficulty increases, it becomes increasingly difficult for miners to find a block which results in large scale mining operations (commonly referred to as \u201cmining farms\u201d) being one of the only profitable ways to mine on a Proof of Work network (once it reaches a certain size). Miners can also join \u2018mining pools\u2019 in order to increase their chances of finding a block and thus increase their rewards. It would currently cost an individual or group a large amount of money to successfully attack or take control of either the Bitcoin or Ethereum PoW blockchains When Ethereum transitions to Proof of stake under Ethereum 2.0, it is expected that users will be able to stake 32 Ether per validator and receive rewards for their work in the form of additional Ether (at a dynamic issuance rate , discussed later in this essay). Under Proof of Stake, the cost of attacking Ethereum will be tied to the cost of Ether. Instead of using energy intensive mining (as it is under Proof of Work), validators will \u201cstake\u201d Ether, and will lose part or all of their stake if they attempt to behave fraudulently. The more validators with staked Ether securing the network, the more Ether an attacker would need to purchase in order to carry out an attack. Such an attack would likely rapidly increase the price of Ether and thus make it prohibitively more expensive for the attacker. Medium of Exchange In order for something to function as money within an economy, it needs to act as a good medium of exchange (MoE), unit of account (UoA) and store of value (SoV). Ether is used as a medium of exchange within the Ethereum economy for a wide range of apps, with dApp providers accepting it in exchange for fungible / non-fungible tokens, or other services. It is also used as a unit of account by various parties (including companies that have raised Ether via ICOs). Finally, Ether has historically been used as a store of value, with investors and speculators purchasing Ether to hold for investment purposes, given its relative scarcity, predictable supply growth, and inherent utility. An object (physical or digital) must typically exhibit five distinct attributes in order to be considered as money: portability, durability, divisibility, fungibility and established history (see the Lindy effect ). Ether is highly portable (because it\u2019s digital), durable (again, because it\u2019s digital), divisible (up to 18 decimal places), but has limited fungibility as ETH tokens are interchangeable with one another, but accounts/addresses can be blacklisted quite easily. Privacy protocols such as zk-SNARKs will eventually improve this property for Ethereum. Ethereum has been in operation since 2015 and continues to build a strong established history. The Ethereum network (and Ether) have functioned as expected for 99.99% of its life. The other 0.01% includes surviving The DAO, multiple large hacks of smart contracts, multiple protocol-level exploits, the Shanghai DoS attacks, constant negative remarks from the wider crypto community and multiple bear markets (including a recent 94% drop in price). On top of this, Ether has additional properties such as being censorship-resistant, permission-less, pseudonymous and interoperable with other crypto-networks. The supply scheme of crypto-assets is hotly debated among various parties (especially those in the Bitcoin community) and there are currently two main approaches: a capped supply (like Bitcoin) or a low, predictable and hard to change issuance rate (like what is planned for Ethereum 2.0). In Ethereum 2.0 (with Sharding and Proof of Stake implemented), while a low inflation rate will always guarantee the validators are rewarded for securing the network, it suffers from the fact that it may dilute the value of Ether for those that are not validators. Though, this is offset by Ether being taken out of the circulating supply through staking, various open finance applications, fee burning, and people simply losing access to their Ether. Resources Why Ether is Valuable Ether: A New Model for Money","title":"What is Ether?"},{"location":"ethereum-basics/what-is-ether/#what-is-ether","text":"","title":"What is Ether?"},{"location":"ethereum-basics/what-is-ether/#summary","text":"Ether (ETH or \u039e) is the native cryptocurrency used on the Ethereum network and is used to compensate miners who secure transactions. A planned upgrade to the Ethereum protocol in 2019-2021 would replace mining with a less computationally expensive Proof of Stake mechanism which will be secured by validators, who are also expected to receive a proportional compensation in Ether. Ether also has many current use cases, such as a store of value (e.g. in lending collateral), a medium of exchange (e.g. in trade and payments), and a unit of account (e.g. in digital marketplaces).","title":"Summary"},{"location":"ethereum-basics/what-is-ether/#ether-use-cases","text":"","title":"Ether Use Cases"},{"location":"ethereum-basics/what-is-ether/#network-usage","text":"Ether is required to transact on the Ethereum network. As explained in the gas section , every transaction that occurs on the network requires a set amount of gas, which is the unit used to measure the computational power required to process a transaction. To process a transaction and include it in a block, miners are expected to be compensated for this task. This is accomplished by setting a gas price with every transaction, which is the cost of 1 unit of gas, denominated in Gwei (1 ETH = 1,000,000,000 Gwei). For example, when you simply send ETH from one account to another, this cost 21,000 gas. If you were to set a gas price of 1 Gwei, this transaction would cost 0.000021 ETH.","title":"Network Usage"},{"location":"ethereum-basics/what-is-ether/#store-of-value","text":"Ether, the native currency of the Ethereum network, derives its value from a myriad of different factors. It is used within the Ethereum network to perform a range of functions, including: used to pay Ethereum transaction fees (in the form of \u2018gas\u2019), used as collateral for a wide range of open finance applications (MakerDAO, Compound), can be lent or borrowed (Dharma), accepted as payment by certain retailers and service providers use it as a medium of exchange to purchase Ethereum-based tokens (via ICOs or exchanges), crypto-collectibles, in-game items, and other non-fungible tokens (NFTs) earned as a reward for completing bounties (Gitcoin, Bounties Network). Furthermore, in Ethereum 2.0 (Serenity), users will be able to become a validator and help secure the network by providing computational resources and locking up 32 Ether per validator. Due to this, it is expected that Proof of Stake will lock a substantial amount of the circulating supply of Ether. There are also discussions around introducing a \u2018fee-burn\u2019 model where a percentage of Ether used to pay transaction fees would be \u2018burned\u2019 and thus reduce the circulating supply of Ether. In addition to utility value, Ether also has speculative value. This is value that is derived from speculative activities (such as trading and investing) which currently accounts for most of the value behind all crypto-assets. As observed in 2017, crypto-assets can attract substantial speculative interest, with some assets increasing in value by 1000x over just a few months. This speculative interest often brings fresh capital into the ecosystem that can be reinvested into various verticals, but it can be damaging to the short-term market sentiment of all crypto-assets. Can\u2019t tokens on Ethereum be used instead of Ether? Theoretically, yes. Practically, no. The concept of using another asset to secure the Ethereum network is called \u2018economic abstraction\u2019 (a good primer can be found here . This would involve miners / validators accepting tokens other than Ether in exchange for adding valid transactions to new blocks. It is highly unlikely that the Ethereum protocol will ever implement economic abstraction as it could potentially reduce the security of the blockchain by compromising the value of Ether. How does valuable Ether help to secure the network? In Proof of Work systems, miners compete with each other to find a block and thus be rewarded for their work (in the form of the native crypto-asset of the protocol). As the price of the asset increases, it naturally brings with it more miners, which then increases the network difficulty. As the network difficulty increases, it becomes increasingly difficult for miners to find a block which results in large scale mining operations (commonly referred to as \u201cmining farms\u201d) being one of the only profitable ways to mine on a Proof of Work network (once it reaches a certain size). Miners can also join \u2018mining pools\u2019 in order to increase their chances of finding a block and thus increase their rewards. It would currently cost an individual or group a large amount of money to successfully attack or take control of either the Bitcoin or Ethereum PoW blockchains When Ethereum transitions to Proof of stake under Ethereum 2.0, it is expected that users will be able to stake 32 Ether per validator and receive rewards for their work in the form of additional Ether (at a dynamic issuance rate , discussed later in this essay). Under Proof of Stake, the cost of attacking Ethereum will be tied to the cost of Ether. Instead of using energy intensive mining (as it is under Proof of Work), validators will \u201cstake\u201d Ether, and will lose part or all of their stake if they attempt to behave fraudulently. The more validators with staked Ether securing the network, the more Ether an attacker would need to purchase in order to carry out an attack. Such an attack would likely rapidly increase the price of Ether and thus make it prohibitively more expensive for the attacker.","title":"Store of Value"},{"location":"ethereum-basics/what-is-ether/#medium-of-exchange","text":"In order for something to function as money within an economy, it needs to act as a good medium of exchange (MoE), unit of account (UoA) and store of value (SoV). Ether is used as a medium of exchange within the Ethereum economy for a wide range of apps, with dApp providers accepting it in exchange for fungible / non-fungible tokens, or other services. It is also used as a unit of account by various parties (including companies that have raised Ether via ICOs). Finally, Ether has historically been used as a store of value, with investors and speculators purchasing Ether to hold for investment purposes, given its relative scarcity, predictable supply growth, and inherent utility. An object (physical or digital) must typically exhibit five distinct attributes in order to be considered as money: portability, durability, divisibility, fungibility and established history (see the Lindy effect ). Ether is highly portable (because it\u2019s digital), durable (again, because it\u2019s digital), divisible (up to 18 decimal places), but has limited fungibility as ETH tokens are interchangeable with one another, but accounts/addresses can be blacklisted quite easily. Privacy protocols such as zk-SNARKs will eventually improve this property for Ethereum. Ethereum has been in operation since 2015 and continues to build a strong established history. The Ethereum network (and Ether) have functioned as expected for 99.99% of its life. The other 0.01% includes surviving The DAO, multiple large hacks of smart contracts, multiple protocol-level exploits, the Shanghai DoS attacks, constant negative remarks from the wider crypto community and multiple bear markets (including a recent 94% drop in price). On top of this, Ether has additional properties such as being censorship-resistant, permission-less, pseudonymous and interoperable with other crypto-networks. The supply scheme of crypto-assets is hotly debated among various parties (especially those in the Bitcoin community) and there are currently two main approaches: a capped supply (like Bitcoin) or a low, predictable and hard to change issuance rate (like what is planned for Ethereum 2.0). In Ethereum 2.0 (with Sharding and Proof of Stake implemented), while a low inflation rate will always guarantee the validators are rewarded for securing the network, it suffers from the fact that it may dilute the value of Ether for those that are not validators. Though, this is offset by Ether being taken out of the circulating supply through staking, various open finance applications, fee burning, and people simply losing access to their Ether.","title":"Medium of Exchange"},{"location":"ethereum-basics/what-is-ether/#resources","text":"Why Ether is Valuable Ether: A New Model for Money","title":"Resources"},{"location":"ethereum-basics/what-is-ethereum/","text":"What is Ethereum? Summary Ethereum is an open-source, public, blockchain-based distributed ledger featuring smart contract (scripting) functionality. It enables developers to build blockchain applications with business logic that execute in a trustless environment, while leveraging the high availability of the Ethereum network. Why does it matter? Because it opens the door to a global financial system where an Internet connection is all you need to access applications, products and services that operate in a trustless manner. Anyone can interact with the Ethereum network and participate in this digital economy, without the need for third parties and without the risk of censorship. What are Smart Contracts and Decentralized Applications? While the word \"contract\" brings to mind legal agreements; in Ethereum \"smart contracts\" are just pieces of code that run on the blockchain and are guaranteed to produce the same result for everyone who runs them. These can be used to create a wide range of Decentralized Applications (DApps) which can include games, digital collectibles, online-voting systems, financial products and many others. The term \"Smart Contract\" was coined by Nick Szabo in the 90's. Szabo used the basic example of a vending machine to describe how real-world contractual obligations can be programmed into software and hardware systems. Everyone who puts the correct amount of coins into the machine can expect to receive a product in exchange. Similarly, on Ethereum, contracts can hold value and unlock it only if specific conditions are met. The scripting language used by Ethereum is Turing-complete, essentially meaning that the types of DApps users can design is limited only by their programming skills and creativity. Resources Ethereum.org - What is Ethereum? Blockgeek - What is Ethereum Cointelegraph - What is Ethereum. Guide for Beginners Wikipedia - Ethereum The Ethereum Whitepaper","title":"What is Ethereum?"},{"location":"ethereum-basics/what-is-ethereum/#what-is-ethereum","text":"","title":"What is Ethereum?"},{"location":"ethereum-basics/what-is-ethereum/#summary","text":"Ethereum is an open-source, public, blockchain-based distributed ledger featuring smart contract (scripting) functionality. It enables developers to build blockchain applications with business logic that execute in a trustless environment, while leveraging the high availability of the Ethereum network.","title":"Summary"},{"location":"ethereum-basics/what-is-ethereum/#why-does-it-matter","text":"Because it opens the door to a global financial system where an Internet connection is all you need to access applications, products and services that operate in a trustless manner. Anyone can interact with the Ethereum network and participate in this digital economy, without the need for third parties and without the risk of censorship.","title":"Why does it matter?"},{"location":"ethereum-basics/what-is-ethereum/#what-are-smart-contracts-and-decentralized-applications","text":"While the word \"contract\" brings to mind legal agreements; in Ethereum \"smart contracts\" are just pieces of code that run on the blockchain and are guaranteed to produce the same result for everyone who runs them. These can be used to create a wide range of Decentralized Applications (DApps) which can include games, digital collectibles, online-voting systems, financial products and many others. The term \"Smart Contract\" was coined by Nick Szabo in the 90's. Szabo used the basic example of a vending machine to describe how real-world contractual obligations can be programmed into software and hardware systems. Everyone who puts the correct amount of coins into the machine can expect to receive a product in exchange. Similarly, on Ethereum, contracts can hold value and unlock it only if specific conditions are met. The scripting language used by Ethereum is Turing-complete, essentially meaning that the types of DApps users can design is limited only by their programming skills and creativity.","title":"What are Smart Contracts and Decentralized Applications?"},{"location":"ethereum-basics/what-is-ethereum/#resources","text":"Ethereum.org - What is Ethereum? Blockgeek - What is Ethereum Cointelegraph - What is Ethereum. Guide for Beginners Wikipedia - Ethereum The Ethereum Whitepaper","title":"Resources"},{"location":"ethereum-basics/development/ethereum-development-basics/","text":"Development Summary Ethereum is a blockchain, first-and-foremost. Its primary artifact is the smart contract, written in the programming language Solidity, a language with syntax similar to JavaScript. Currently Vyper is being developed to offer another choice when developing smart contracts, with syntax similar to Python. Languages Solidity - Most commonly used language. Docs GitHub Community Audited Contracts by OpenZeppelin Vyper - Newer language focused on security and auditability. Docs GitHub Clients go-ethereum - Official Go Implementation Docs GitHub OpenEthereum - Rust Implementation Docs GitHub Development Chats/Forums Ethereum Gitter Solidity Gitter Web3.js Gitter ETH 2.0 Gitter ETH Research Discourse Ethereum Developer Discord Resources Mastering Ethereum by Andreas M. Antonopoulos, Gavin Wood Ethereum Developer Tools List Awesome Solidity List Awesome Ethereum Security List Best Practices by Consensys Awesome Ethereum Virtual Machine List Ethereum Development with Golang More resources can be found here","title":"Ethereum Development Basics"},{"location":"ethereum-basics/development/ethereum-development-basics/#development","text":"","title":"Development"},{"location":"ethereum-basics/development/ethereum-development-basics/#summary","text":"Ethereum is a blockchain, first-and-foremost. Its primary artifact is the smart contract, written in the programming language Solidity, a language with syntax similar to JavaScript. Currently Vyper is being developed to offer another choice when developing smart contracts, with syntax similar to Python.","title":"Summary"},{"location":"ethereum-basics/development/ethereum-development-basics/#languages","text":"Solidity - Most commonly used language. Docs GitHub Community Audited Contracts by OpenZeppelin Vyper - Newer language focused on security and auditability. Docs GitHub","title":"Languages"},{"location":"ethereum-basics/development/ethereum-development-basics/#clients","text":"go-ethereum - Official Go Implementation Docs GitHub OpenEthereum - Rust Implementation Docs GitHub","title":"Clients"},{"location":"ethereum-basics/development/ethereum-development-basics/#development-chatsforums","text":"Ethereum Gitter Solidity Gitter Web3.js Gitter ETH 2.0 Gitter ETH Research Discourse Ethereum Developer Discord","title":"Development Chats/Forums"},{"location":"ethereum-basics/development/ethereum-development-basics/#resources","text":"Mastering Ethereum by Andreas M. Antonopoulos, Gavin Wood Ethereum Developer Tools List Awesome Solidity List Awesome Ethereum Security List Best Practices by Consensys Awesome Ethereum Virtual Machine List Ethereum Development with Golang More resources can be found here","title":"Resources"},{"location":"ethereum-basics/development/interacting-with-clients/","text":"Interacting with an Ethereum Client: JSON-RPC JSON-RPC is the primary protocol used by Ethereum and bitcoin. is a lightweight data-interchange format. It is easy for humans to read and write. It is easy for machines to parse and generate. While it is transport agnostic, most ethereum clients today implement one or all of the following: HTTP, IPC and websockets. Ethereum JSON-RPC Specification There exists a specification for ethereum JSON-RPC that is expected to be implemented by all client developers. The OpenRPC document can be found here . Within the above linked repo you will also find generated code for making RPC calls to any ethereum client.","title":"Interacting with clients"},{"location":"ethereum-basics/development/interacting-with-clients/#interacting-with-an-ethereum-client-json-rpc","text":"JSON-RPC is the primary protocol used by Ethereum and bitcoin. is a lightweight data-interchange format. It is easy for humans to read and write. It is easy for machines to parse and generate. While it is transport agnostic, most ethereum clients today implement one or all of the following: HTTP, IPC and websockets.","title":"Interacting with an Ethereum Client: JSON-RPC"},{"location":"ethereum-basics/development/interacting-with-clients/#ethereum-json-rpc-specification","text":"There exists a specification for ethereum JSON-RPC that is expected to be implemented by all client developers. The OpenRPC document can be found here . Within the above linked repo you will also find generated code for making RPC calls to any ethereum client.","title":"Ethereum JSON-RPC Specification"},{"location":"ethereum-basics/development/patterns/","text":"Patterns Data modelling Augur-style data encapsulation. Characteristics library defined for a named entity. e.g. Order struct Data {} within the library is the abstract data type to be passed around. e.g. Order.Data function create which returns an instance of Data . other related types (such as enum's and constants) are also encapsulated by this library. e.g. Order.Types pure helper functions that compute higher-level information on this entity. e.g. getOrderId which computes the ID from the hash of the data Example library Order { struct Data { // Contracts IOrders orders; IMarket market; IAugur augur; // Order bytes32 id; address creator; uint256 outcome; Order.Types orderType; uint256 amount; uint256 price; uint256 sharesEscrowed; uint256 moneyEscrowed; bytes32 betterOrderId; bytes32 worseOrderId; } enum Types { Bid, Ask } function create(IController _controller, address _creator, uint256 _outcome, Order.Types _type, uint256 _attoshares, uint256 _price, IMarket _market, bytes32 _betterOrderId, bytes32 _worseOrderId) internal view returns (Data) { require(_outcome < _market.getNumberOfOutcomes()); require(_price < _market.getNumTicks()); require(_attoshares > 0); IOrders _orders = IOrders(_controller.lookup(\"Orders\")); IAugur _augur = _controller.getAugur(); return Data({ orders: _orders, market: _market, augur: _augur, id: 0, creator: _creator, outcome: _outcome, orderType: _type, amount: _attoshares, price: _price, sharesEscrowed: 0, moneyEscrowed: 0, betterOrderId: _betterOrderId, worseOrderId: _worseOrderId }); } function getOrderId(Order.Data _orderData) internal view returns (bytes32) { if (_orderData.id == bytes32(0)) { bytes32 _orderId = _orderData.orders.getOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed); require(_orderData.orders.getAmount(_orderId) == 0); _orderData.id = _orderId; } return _orderData.id; } }","title":"Patterns"},{"location":"ethereum-basics/development/patterns/#patterns","text":"","title":"Patterns"},{"location":"ethereum-basics/development/patterns/#data-modelling","text":"Augur-style data encapsulation.","title":"Data modelling"},{"location":"ethereum-basics/development/patterns/#characteristics","text":"library defined for a named entity. e.g. Order struct Data {} within the library is the abstract data type to be passed around. e.g. Order.Data function create which returns an instance of Data . other related types (such as enum's and constants) are also encapsulated by this library. e.g. Order.Types pure helper functions that compute higher-level information on this entity. e.g. getOrderId which computes the ID from the hash of the data","title":"Characteristics"},{"location":"ethereum-basics/development/patterns/#example","text":"library Order { struct Data { // Contracts IOrders orders; IMarket market; IAugur augur; // Order bytes32 id; address creator; uint256 outcome; Order.Types orderType; uint256 amount; uint256 price; uint256 sharesEscrowed; uint256 moneyEscrowed; bytes32 betterOrderId; bytes32 worseOrderId; } enum Types { Bid, Ask } function create(IController _controller, address _creator, uint256 _outcome, Order.Types _type, uint256 _attoshares, uint256 _price, IMarket _market, bytes32 _betterOrderId, bytes32 _worseOrderId) internal view returns (Data) { require(_outcome < _market.getNumberOfOutcomes()); require(_price < _market.getNumTicks()); require(_attoshares > 0); IOrders _orders = IOrders(_controller.lookup(\"Orders\")); IAugur _augur = _controller.getAugur(); return Data({ orders: _orders, market: _market, augur: _augur, id: 0, creator: _creator, outcome: _outcome, orderType: _type, amount: _attoshares, price: _price, sharesEscrowed: 0, moneyEscrowed: 0, betterOrderId: _betterOrderId, worseOrderId: _worseOrderId }); } function getOrderId(Order.Data _orderData) internal view returns (bytes32) { if (_orderData.id == bytes32(0)) { bytes32 _orderId = _orderData.orders.getOrderId(_orderData.orderType, _orderData.market, _orderData.amount, _orderData.price, _orderData.creator, block.number, _orderData.outcome, _orderData.moneyEscrowed, _orderData.sharesEscrowed); require(_orderData.orders.getAmount(_orderId) == 0); _orderData.id = _orderId; } return _orderData.id; } }","title":"Example"},{"location":"ethereum-basics/development/testing/","text":"Testing Not only does Test-Driven Development make your codebase stellar, it's extremely useful when interacting with a new language with different semantics. And surprisingly, it's actually not so hard in Ethereum development to get started with it! The Truffle framework makes it very easy to test contracts with Solidity and JS. Beware: while you can test contracts in Solidity, I highly advise you don't. The tooling is very nascent, and Solidity itself has very few libraries already - you won't be able to load test data (fixtures) from files for example, since Solidity doesn't have an FS API like JS/Node does. for unit testing simple functions, Solidity comes in handy. However you might find using Remix IDE just as quick for accomplishing this to start with (although you won't reap the benefits of having a test later when your code breaks ;)). Running a persistent test blockchain A persistent chain is often useful when you want to test a frontend UI, and you need to persist the data you've transacted onto a blockchain. You can use Ganache (n\u00e9e testrpc) CLI to do this: ganache-cli -d --db ./ganache --gasPrice 1 --gasLimit 10000000 --networkId 123 -u 0 -u 1 This will persist data to ./ganache and most importantly set the network ID (otherwise this is generated from system time on startup, and is not 'persistent' otherwise). Connecting MetaMask with your test blockchain wallets When you run Ganache CLI, it will list private keys on first launch in hex form. You can import these into Metamask and then access your 100 ETH issued by default. Gas You will probably encounter issues with gas. Note that contracts cannot be bigger than 24,000 bytes, and transactions no bigger than 32kb ( source ). Contract creations take gas, which you can estimate with estimateGas . Gas is the internal Ethereum unit for pricing computation, and is converted at a fixed rate to Ether (set by clients), termed the gasPrice . It is measured in the smallest unit, which is gwei. The gasLimit is the maximum amount of gas that can be used in one setting. An example of some gas arithmetic: estimateGas(YourContract) => 286056 # if we run a test blockchain with a gas price of 2 (2 units for 1 gwei) ganache-cli --gasLimit 100000000000 --gasPrice 2 then the minimum amount to send with the transaction is: 286056 * 2 = 572,112 gwei 0.000572112 ETH You might be tempted to set gasLimit to something like 1000000000000000 . This will break Metamask, as it can't encode that value into 53 bits for BigNumber ( see here ). Gas Units Unit Amount per ETH ETH 1 Finney 1,000 Szabo 1,000,000 Gwei 1,000,000,000 Mwei 1,000,000,000,000 Kwei 1,000,000,000,000,000 Wei 1,000,000,000,000,000,000 Debugging Testing is important, but you will never ascertain as much information as to the execution of a contract as by using the official debugger tooling, the Remix IDE ( demo , docs ). Remix is a bit of a hack piece put together, but it works very well once you're using it correctly. It can run Solidity in a JavaScript VM, an injected Web3 provider (e.g. Metamask) or connect to your local Ganache / other setup on http://localhost:8545 . Using Remix like a pro Remix is a web app, so it doesn't have access to your file system (whether you access it from remix.ethereum.org or as an Electron desktop app). While you can copy-paste code in, it's much better to install remixd , which will expose a local folder to Remix. Install it globally and save the dep - npm install -g -S remixd Add this to your package.json . javascript { \"scripts\": { \"remix\": \"remixd -s .\", } } Run yarn remix remixd knows to look into node_modules for imported contracts (e.g. SafeMath) from packages like OpenZeppelin, so we run it in our project root . rather than in ./contracts as you might assume. Unit testing Unit testing is for testing individual functions of your contracts. Integration testing Integration testing generally requires multiple interactions from various users/contracts. Since this requires the use of multiple addresses, it is unsuitable to accomplish in Solidity as above. Exposing contracts You may encounter difficulty testing contracts due to the (in)visibility of methods/types, the lack of insertion point for validating data being returned, and so on. It is possible to test not the contract itself, but a wrapped contract for testing purposes only. contract Market { uint[] private orders; function doSomething() {} } How would we access Market.orders here? contract MarketForTesting is Market { function getOrdersCount() public returns (uint8) { return orders.length; } } Testing return values When you call a method on a contract, and it updates state (i.e. is not view / pure ), it must be transacted upon the network. In such case, the Web3 interfaces do not give you the return value of the method. This can be frustrating if you're trying to test such a value, so you can do something like so: async function txWithReturnValue(method, ...args) { let [retval, tx] = await Promise.all([ method.call(...args), method.sendTransaction(...args) ]); return retval; } await txWithReturnValue(Contract.method, 1, \"0x123\", { from: \"0x12312\", value: 2 }); Testing with various 'users' You will want to test the contract's interaction from the POV of multiple users with different addresses (whether it be human or other contracts). This is quite easy to achieve. Whenever you transact with a contract in calling a method, you have the option to specify the from address of who will be funding the tx. Below is a Truffle test which combines this with access to accounts , which is the same output as web3.personal.getListAccounts: const MyContract = artifacts.require(\"./MyContract.sol\"); contract('MyContract', async (accounts) => { it('tests with various users', async () => { let instance = await MyContract.new(); for(let i = 0; i < 5; i++) { let from = accounts[i]; console.log(`Submitting tx from addr: ${from}`); let txid = await instance.yourMethod.sendTransaction(arg1, arg2, { from, }); } }) })","title":"Testing"},{"location":"ethereum-basics/development/testing/#testing","text":"Not only does Test-Driven Development make your codebase stellar, it's extremely useful when interacting with a new language with different semantics. And surprisingly, it's actually not so hard in Ethereum development to get started with it! The Truffle framework makes it very easy to test contracts with Solidity and JS. Beware: while you can test contracts in Solidity, I highly advise you don't. The tooling is very nascent, and Solidity itself has very few libraries already - you won't be able to load test data (fixtures) from files for example, since Solidity doesn't have an FS API like JS/Node does. for unit testing simple functions, Solidity comes in handy. However you might find using Remix IDE just as quick for accomplishing this to start with (although you won't reap the benefits of having a test later when your code breaks ;)).","title":"Testing"},{"location":"ethereum-basics/development/testing/#running-a-persistent-test-blockchain","text":"A persistent chain is often useful when you want to test a frontend UI, and you need to persist the data you've transacted onto a blockchain. You can use Ganache (n\u00e9e testrpc) CLI to do this: ganache-cli -d --db ./ganache --gasPrice 1 --gasLimit 10000000 --networkId 123 -u 0 -u 1 This will persist data to ./ganache and most importantly set the network ID (otherwise this is generated from system time on startup, and is not 'persistent' otherwise).","title":"Running a persistent test blockchain"},{"location":"ethereum-basics/development/testing/#connecting-metamask-with-your-test-blockchain-wallets","text":"When you run Ganache CLI, it will list private keys on first launch in hex form. You can import these into Metamask and then access your 100 ETH issued by default.","title":"Connecting MetaMask with your test blockchain wallets"},{"location":"ethereum-basics/development/testing/#gas","text":"You will probably encounter issues with gas. Note that contracts cannot be bigger than 24,000 bytes, and transactions no bigger than 32kb ( source ). Contract creations take gas, which you can estimate with estimateGas . Gas is the internal Ethereum unit for pricing computation, and is converted at a fixed rate to Ether (set by clients), termed the gasPrice . It is measured in the smallest unit, which is gwei. The gasLimit is the maximum amount of gas that can be used in one setting. An example of some gas arithmetic: estimateGas(YourContract) => 286056 # if we run a test blockchain with a gas price of 2 (2 units for 1 gwei) ganache-cli --gasLimit 100000000000 --gasPrice 2 then the minimum amount to send with the transaction is: 286056 * 2 = 572,112 gwei 0.000572112 ETH You might be tempted to set gasLimit to something like 1000000000000000 . This will break Metamask, as it can't encode that value into 53 bits for BigNumber ( see here ).","title":"Gas"},{"location":"ethereum-basics/development/testing/#gas-units","text":"Unit Amount per ETH ETH 1 Finney 1,000 Szabo 1,000,000 Gwei 1,000,000,000 Mwei 1,000,000,000,000 Kwei 1,000,000,000,000,000 Wei 1,000,000,000,000,000,000","title":"Gas Units"},{"location":"ethereum-basics/development/testing/#debugging","text":"Testing is important, but you will never ascertain as much information as to the execution of a contract as by using the official debugger tooling, the Remix IDE ( demo , docs ). Remix is a bit of a hack piece put together, but it works very well once you're using it correctly. It can run Solidity in a JavaScript VM, an injected Web3 provider (e.g. Metamask) or connect to your local Ganache / other setup on http://localhost:8545 .","title":"Debugging"},{"location":"ethereum-basics/development/testing/#using-remix-like-a-pro","text":"Remix is a web app, so it doesn't have access to your file system (whether you access it from remix.ethereum.org or as an Electron desktop app). While you can copy-paste code in, it's much better to install remixd , which will expose a local folder to Remix. Install it globally and save the dep - npm install -g -S remixd Add this to your package.json . javascript { \"scripts\": { \"remix\": \"remixd -s .\", } } Run yarn remix remixd knows to look into node_modules for imported contracts (e.g. SafeMath) from packages like OpenZeppelin, so we run it in our project root . rather than in ./contracts as you might assume.","title":"Using Remix like a pro"},{"location":"ethereum-basics/development/testing/#unit-testing","text":"Unit testing is for testing individual functions of your contracts.","title":"Unit testing"},{"location":"ethereum-basics/development/testing/#integration-testing","text":"Integration testing generally requires multiple interactions from various users/contracts. Since this requires the use of multiple addresses, it is unsuitable to accomplish in Solidity as above.","title":"Integration testing"},{"location":"ethereum-basics/development/testing/#exposing-contracts","text":"You may encounter difficulty testing contracts due to the (in)visibility of methods/types, the lack of insertion point for validating data being returned, and so on. It is possible to test not the contract itself, but a wrapped contract for testing purposes only. contract Market { uint[] private orders; function doSomething() {} } How would we access Market.orders here? contract MarketForTesting is Market { function getOrdersCount() public returns (uint8) { return orders.length; } }","title":"Exposing contracts"},{"location":"ethereum-basics/development/testing/#testing-return-values","text":"When you call a method on a contract, and it updates state (i.e. is not view / pure ), it must be transacted upon the network. In such case, the Web3 interfaces do not give you the return value of the method. This can be frustrating if you're trying to test such a value, so you can do something like so: async function txWithReturnValue(method, ...args) { let [retval, tx] = await Promise.all([ method.call(...args), method.sendTransaction(...args) ]); return retval; } await txWithReturnValue(Contract.method, 1, \"0x123\", { from: \"0x12312\", value: 2 });","title":"Testing return values"},{"location":"ethereum-basics/development/testing/#testing-with-various-users","text":"You will want to test the contract's interaction from the POV of multiple users with different addresses (whether it be human or other contracts). This is quite easy to achieve. Whenever you transact with a contract in calling a method, you have the option to specify the from address of who will be funding the tx. Below is a Truffle test which combines this with access to accounts , which is the same output as web3.personal.getListAccounts: const MyContract = artifacts.require(\"./MyContract.sol\"); contract('MyContract', async (accounts) => { it('tests with various users', async () => { let instance = await MyContract.new(); for(let i = 0; i < 5; i++) { let from = accounts[i]; console.log(`Submitting tx from addr: ${from}`); let txid = await instance.yourMethod.sendTransaction(arg1, arg2, { from, }); } }) })","title":"Testing with various 'users'"},{"location":"ethereum-basics/development/tooling/","text":"Tooling For those who wish to tackle smart contract development on Ethereum, there are a vast amount of tools one can use to leverage their smart contracts even further. IDEs Remix - (Great for starters!) Web IDE with built in static analysis, test blockchain VM. Atom Solidity Linter , Etheratom , autocomplete-solidity , and language-solidity packages Vim solidity - Vim syntax file for solidity Solidity VS Code - Visual Studio Code extension that adds support for Solidity Intellij-Solidity Plugin Open-source plug-in for IntelliJ. YAKINDU Solidity Tools - Eclipse based IDE. Features context sensitive code completion and help, code navigation, syntax coloring, build in compiler, quick fixes and templates. Eth Fiddle - IDE developed by The Loom Network that allows you to write, compile and debug your smart contract. Easy to share and find code snippets. Frameworks Truffle - Most popular smart contract development, testing, and deployment framework. The Truffle suite includes Truffle, Ganache , and Drizzle . Deep dive on Truffle here Embark - Framework for DApp development Dapp - Framework for DApp development, successor to DApple Brownie - A Python framework for testing, deploying and interacting with Ethereum smart contracts. Etherlime - ethers.js based framework for Dapp deployment Test blockchain networks Ganache - App for testing Ethereum blockchain with visual UI and logs Kaleido - Use Kaleido for spinning up a consortium blockchain network. Great for PoCs and testing Besu Private Network - Run a private network of Besu nodes Local Raiden - Run a local Raiden network in docker containers for demo and testing purposes Private networks deployment scripts - Out-of-the-box deployment scripts for private PoA networks Local Ethereum Network - Out-of-the-box deployment scripts for private PoW networks Ethereum on Azure - Deployment and governance of consortium Ethereum PoA networks","title":"Tooling"},{"location":"ethereum-basics/development/tooling/#tooling","text":"For those who wish to tackle smart contract development on Ethereum, there are a vast amount of tools one can use to leverage their smart contracts even further.","title":"Tooling"},{"location":"ethereum-basics/development/tooling/#ides","text":"Remix - (Great for starters!) Web IDE with built in static analysis, test blockchain VM. Atom Solidity Linter , Etheratom , autocomplete-solidity , and language-solidity packages Vim solidity - Vim syntax file for solidity Solidity VS Code - Visual Studio Code extension that adds support for Solidity Intellij-Solidity Plugin Open-source plug-in for IntelliJ. YAKINDU Solidity Tools - Eclipse based IDE. Features context sensitive code completion and help, code navigation, syntax coloring, build in compiler, quick fixes and templates. Eth Fiddle - IDE developed by The Loom Network that allows you to write, compile and debug your smart contract. Easy to share and find code snippets.","title":"IDEs"},{"location":"ethereum-basics/development/tooling/#frameworks","text":"Truffle - Most popular smart contract development, testing, and deployment framework. The Truffle suite includes Truffle, Ganache , and Drizzle . Deep dive on Truffle here Embark - Framework for DApp development Dapp - Framework for DApp development, successor to DApple Brownie - A Python framework for testing, deploying and interacting with Ethereum smart contracts. Etherlime - ethers.js based framework for Dapp deployment","title":"Frameworks"},{"location":"ethereum-basics/development/tooling/#test-blockchain-networks","text":"Ganache - App for testing Ethereum blockchain with visual UI and logs Kaleido - Use Kaleido for spinning up a consortium blockchain network. Great for PoCs and testing Besu Private Network - Run a private network of Besu nodes Local Raiden - Run a local Raiden network in docker containers for demo and testing purposes Private networks deployment scripts - Out-of-the-box deployment scripts for private PoA networks Local Ethereum Network - Out-of-the-box deployment scripts for private PoW networks Ethereum on Azure - Deployment and governance of consortium Ethereum PoA networks","title":"Test blockchain networks"},{"location":"ethereum-roadmap/ethereum-1.x/","text":"Ethereum 1.x Summary Ethereum 1.x is a codename for a comprehensive set of upgrades to the Ethereum mainnet intended for near-term adoption. Ethereum 2.0 (Serenity) won't be fully rolled out for another 2-3 years with Phase 0 and Phase 1 due within 1-2 and Phase 2 due sometime in 2022. Ethereum 2.0 is being deployed as a separate blockchain so it does not supersede ETH 1.0 which means the chain needs to be sustainable for another 5-10 years. Eth1.x is a result of a group of Ethereum core developers and friends discussing the current challenges of Ethereum at Devcon IV and realising that they all share a similar view - that the Ethereum mainnet, if left unchanged, would become very hard or impossible to use due to severe performance degradation and increased storage requirements. Performance degradation mostly due to the large (and increasing) state size. Increased storage requirements mostly due to keeping blocks, event logs (receipts), and state history (currently prunable in major clients). The 1.x set of improvements will introduce major, breaking changes to the mainnet, while 2.0 (aka Serenity) undergoes prototyping and development in parallel. The plan for 1.x encompasses three primary goals: (1) mainnet scalability boost by increasing the tx/s throughput (achieved with client optimizations that will enable raising the block gas limit substantially); (2) ensure that operating a full node will be sustainable by reducing and capping the disk space requirements with \u201cstorage rent\u201d; (3) improved developer experience with VM upgrades including eWASM. Pre-History of Ethereum 1.x October 2017, Devcon3 in Cancun Vitalik Buterin presents \"Modest proposal for Ethereum 2.0\" , suggesting that Layer 1 of Ethereum 1.0 should stay \u201csafe and conservative\u201d, and most of the innovation go into Layer 2 and into shards. May 2018, EDCON in Toronto Vitalik Buterin gives a talk \u201cSo you want to become Casper validator?\u201d , signaling that Casper FFG validators may be running on laptops and rollout is getting close. June 2018 Casper FFG research is merged with sharding due to challenges of implementing Casper FFG as a contract, and due to large overlap with Sharding research, as discussed at the Core Dev Meeting 40 . October-November 2018, Devcon IV in Prague It becomes apparent that Serenity (full Casper + Sharding) is not going to functionally supersede Ethereum 1.0 for another 3-5 years. Main Objectives Develop, formalize, and implement set of measures, deployable on the Ethereum 1.0 mainnet, within the next 2 years, to ensure that the chain stays viable and usable. That mainly means curbing the state growth or limiting the state size. Emphasize focus on these measures and de-emphasize introduction of specific \u201cfeatures\u201d. This is one of the places where eWASM engine comes in. Current computational pre-compiles are seen as features requiring case-by-case work. Introduction of eWASM engine would first enable \u201cpre-compile\u201d factory, where more pre-compiles are introduced faster. Later it would enable any contracts written in eWASM, obviating the need for pre-compiles altogether. Working groups State rent (now called as state fees because it might not be just rent) eWASM Storage pruning Simulation and Emulation State Rent Proposal framework Since State rent is a potentially higher impact change (and therefore more controversial, possibly unpopular) than any other changes within Ethereum 1.x, it requires a clear logical framework for designing, evaluating, and comparing proposals. This framework attempts to ensure, as much as possible, that the change plan eventually chosen is likely close to the best available. It defines the path of reasoning from \u201cWhat is the problem (what happens if we do nothing)?\u201d to \u201cHow exactly we are doing it\u201d. Current location of the proposal framework document (Work in progress) Alexey explains the idea of state rent - \"to charge people not once when they start using storage and then paying them back a certain amount if they free it up again, but actually charging people by the day or by the block based on the storage that they're using, and if they decide that they don\u2019t need these things anymore they can just withdraw their Ether or they just leave it and then it will be garbage collected by the rent\". Reasoning questions Why is state a valuable resource and to whom? (can this value be replicated) Why state size needs to be managed? (effect on system performance + possible partial mitigations) How can state size be managed? (feedforward vs feedback control) What metrics need to be regulated? (state size, state growth, or both) Do metrics need to be in-state or off-state? What parameters (control inputs) do we use? (cost of state expansion, charge per size unit per block) Can controlled system weaken or evade control? (dark rent, miner rebates) How can we get active contracts that are using lots of storage to pay a rent that more accurately represents the cost of storing that data permanently on-chain over a period of time? (Linear cross-contract storage could be a solution here) How can we clear the state of abandoned contracts that are not being used anymore? (This problem is not addressed in any such proposal as abandoned contracts represent only 6% of the state) How about keeping rent simple and maximally effective at the protocol level and completely deleting anything which runs out of funds? (Bad Idea, Users forget about some application they are involved in all the time) Moving portions of the smart contracts data off chain? (A subprotocol is needed for the delivery) \"Say you have a smart contract now and it uses storage so it has to pay rent. So it has to have funds or someone needs to pay funds on behalf of it. So what happens if no one pays?\" Under all three of the current proposals, when the smart contract exhausts its balance and the rent balance, they are considered two separate things. So when both of these balances are empty, an eviction happens. Eviction, under the current proposals, doesn\u2019t just happen automatically - somebody actually has to 'poke' the contract. Poking means that somebody has to create a transaction which touches it to access it in some way. For non contracts, eviction means just removing from the state as it doesn't have any information at all but for contracts, there's storage, so eviction doesn't completely remove it from a state but it leaves a so-called stub which is essentially the commitment to the entire state of the contract before the eviction, and this stub, unfortunately has an effect that it does not completely remove it from the state so it has to still dangle there, but this stub is what allows us to restore it later on. Let's take an example , \"if you had a multisig wallet with lots of tokens in it and then you've forgotten to pay the rent, the multisig is \"gone\" but you would still be able to use the recovery mechanism to rebuild the storage of this contract in another contract and simply use a special code to restore it from the stub - then the contract comes \"back to life\". You can also top up the rent and then keep using the contract or you can move the things elsewhere.\" The stub is expected to be a 32 byte hash which is a commitment to what the contract looked like before it was evicted. How is this different from stateless contracts? The difference is that in stateless contracts we assume that when the contract is represented as a stub it\u2019s still accessible by the normal operations. In this proposal, when the contract is in hibernation state (ie when it\u2019s a stub) it\u2019s not accessible by anything. It\u2019s basically invisible to the Ethereum Virtual Machine( EVM ) with the exception of this special opcode, which it\u2019s restored to, and only that opcode can see that stub - nothing else can. Is this the best solution? This is not a perfect solution as if we find that there are lots of little contracts having the hash stubs and then the state is still not small enough. Watch the whole talk where Alexey explains state rent and more about Eth 1.x. Current proposals There are currently three proposals being worked upon: * Introduce rent on all accounts (contracts and non-contracts), existing and newly created ones, with the ability to restore evicted contracts. Current location * Introduce fund lock-up when state is expanded (creation of accounts, adding store items), which is partially released when the state is cleared. Apply rent only on the pre-existing state. Current location * Increase the cost of state expansion in \u201cshort term\u201d, to enable block gas limit increase before state rent is implemented Challenges inherent to most proposals How will existing dApps be affected? Will they become too expensive/cumbersome to use? Will they need to be optimized/rewritten completely? Denomination of the extra state expansion charge or rent - should it be priced in gas, ETH, and how should be the price be determined (feedback loop on the state size?). Will volatility of ETH price affect those charges too much? Will miners help users evade charges? Classes of contracts and impacts Part of the state rent research is to identify main classes of contracts that are likely to be affected by the changes in the protocol, and provide guidelines on what they can do about it. Likely important classes: ERC20 token contracts and applications managing them (DAI, Augur) On-chain order books (DEXs) Ethereum Name Service ENS Non-fungible token contracts Multi-signature wallets Gaming contracts Gambling contracts Resources State Fees Proposal Alexey explains State Fees eWASM Enhancement to the Ethereum protocol is currently hindered by the inflexibility of the Ethereum Virtual Machine( EVM ) architecture. The method of extending the execution layer has been the introduction of special \u201cprecompile\u201d contracts. The use of WebAssembly as a virtual machine specification for executing high-performance \u201cprecompile\u201d contracts promises to streamline the process of introducing such contracts. eWASM is a subset of Wasm, Wasm has a couple of features which are non-deterministic, we need to eliminate them by validating contract while deploying. If contract uses non-deterministic features then it's rejected. The current proposal is to use an even smaller subset of eWASM (only allowing precompiles to be written as eWASM). Main unresolved questions Gas metering Memory allocation Interaction with the rest of EVM state (e.g. contract storage, balances) Interpreter/compiler guarantees on compilation time and runtime Gas metering Two main approaches: Injection. Wasm bytecode gets pre-processed. An extra register is added to serve as a gas counter. It gets incremented at certain points (jumps, calls) and out-of-gas check is performed. Pro: generic. Con: performance overhead. Automatic upper bound estimation. Static analysis is performed on the bytecode, and, for some subset of codes, upper bound of executed instructions (virtual gas) can be calculated. Pro: no performance overhead. Con: only subset of codes Current approach for the 1st phase (pre-compiles) is upper-bound based. Memory allocation Wasm semantics dictates that its execution has a linear memory (only one in the current version of the spec) that can be grown on demand. Will that linear memory be allocated every time the engine is called and then torn down at the end of the execution? If yes, how much more efficient is this compared to the current EVM model (which does this allocation and tearing down at each CALL opcode). Interaction with the rest of EVM state This was proposed via external functions, for example (name made up): function_SLOAD(storage_index: uint256) The alternative approach is not to have eWASM code access EVM state, but only exchange input/output when called. This, of course, makes maintaining large persistent data structures difficult. Interpreter/compiler guarantees Initially, this problem was brought up in the context of JITs (Just In Time) compilers. JIT compilers were one of the reasons why WebAssembly was a big performance improvement over JavaScript. JIT compilers might be problematic in an adversarial environment because it is usually possible to find a program that takes an unusually long time to compile, and algorithms that decide what to compile \u201cjust in time\u201d can be targeted too. AOT (Ahead of Time) compilers can be used for Core Dev-controlled pre-compiles (Phase 1). For Phase 2, the plan was to initially use very straightforward interpreters, and then develop AOT compilers with necessary guarantees. The idea of first introducing interpreters is to make sure eWASM is there, giving people more motivation to work on the compilers (which is harder than interpreter) Resources eWASM Proposal eWASM Design Storage Pruning Ethereum 1.0 has a storage scaling issue. Yes, the rate of growth itself is implicitly limited by the block gas limit, but there is no limit on the total amount of data accumulated over time. Also known as Chain Pruning, this group is not related to state directly instead it is concerned with the growing size of logs, blocks, data, etc. \"If Ethereum were to grow at its current rate, 91 GB would be added per year to storage\", according to the core team. Storage Pruning is necessary and seeks to place a cap on Ethereum's data storage growth. Part of the proposal includes the deletion of historical blocks, logs, and indexes. The questions to be answered are: What do we absolutely need to keep to comply with the Ethereum protocol? Do we always need to keep all the blocks? (maybe not, if we use backward sync, for example) Do we need to keep receipts, or just logs, how much (in Gigabytes), or for how long? Do we need to always download the entire header chain or can we compress it (with STARK proofs for example)? Can we improve snapshot sync procedures (fast sync, warp sync) so that they prevent invalid state transitions (with Validity Proofs, for example)? How to handle removal of history The first challenge to solve with regard to pruning historical chain segments is to ensure that we can prove the past even though we've deleted the past. There are two possible approaches for this: Maintain a Merkle (or other cryptographic) proof of deleted chain segments Light clients work exactly like this and that's why are able to sync in a couple of minutes. Instead of having to go through all the headers from genesis, light clients are hard coded (or fed from the config file) a trusted checkpoint, which they start syncing from. This mechanism has two issues however: To keep sync fast, we constantly have to update the hard coded snapshots or the config file. This works for mainnet with an active maintenance schedule, but does not scale for private Ethereum networks. If no release is made, sync currently takes longer. If however the full nodes would start deleting old headers themselves, old checkpoints would become useless, forcing devs to constantly issue new releases and users to constantly pull new releases. It just doesn't scale. Maintain the header chain indefinitely It solve all of the issues that the Merkle proof mechanism has, you can always fast sync based on the header chain with only the genesis. The downside is that opposed to the Merkle proof, which is 32 bytes for arbitrary history, keeping the headers available indefinitely means indefinite chain growth. Garbage Collection If we agree on an N month/block retention policy, whenever the chain progresses, each client would delete bodies and receipts older than HEAD-N. This has an implication on the RPC APIs too however. We need to introduce the concept of a \"virtual genesis block\" (open for better names) which define the point of history before which the APIs cannot return data (or return that they don't maintain it any more). Block/Receipt Archives Archiving historical chain segments so they remain available for later reconstruction if need be is the hardest part of this proposal. So where to store these archives, internally or externally: Extra-protocol storage means hosting the data files on classical external servers, mirrored and replicated according to our security needs: FTP, S3, CDNs, etc. These could be archived by major players (Ethereum Foundation, Consensys, Parity Technologies, Internet Archive, etc). Access to these could boil down to dumb web requests. Intra-protocol storage means hosting the data files within some of the nodes in the Ethereum network itself: Swarm/devp2p, IPFS/libp2p, BitTorrent, etc. The archives would still be run by the same major players, but running an archive would be approachable to anyone, thus closer to the ethos of decentralization. Since the whole point of Ethereum is decentralization, the only option we have is intra-protocol. However there are many methods by which we can store the archives in a decentralized way. Some of them are listed here: Swarm (but not production ready) IPFS (accessing is easy, hosting is hard) BitTorrent LES/PIP Broken Invariants Pruning historical chain segments breaks a few important invariants within the Ethereum ecosystem: DApps will no longer be able to access events past the retention policy. Nodes will have no way of knowing if a transaction was already deleted, or never existed in the first place. It will be harder for nodes to do a full sync, a full sync on Ethereum mainnet with current Geth takes about 5 days, 4 days out of which is the last 2.7M blocks. If we bump the transaction throughput to 10x, apart from very special users, nobody will be able to do a full sync, nor will want to really. Resources Pruning Proposal Simulation and Emulation What are the tools that we can use to support the other groups like State Rent and the chain pruning group, to run some test scenarios and try to predict what problems that we\u2019re going to face in the future? Simulation and Emulation group produces data for making projections, benchmarks, and parameter calibrations for other groups. The working group is tasked with developing three setups: * A simulation framework that, when a dataset is entered, produces an output to estimate properties of proposed changes (such as uncle rate reduction and gas limit increases). Currently Wittgenstein is suggested. * An emulation framework that alters environment conditions to test properties of launched changes * A testnet that launches these changes together on the same network Simulation handles models of the software agents (in our case Ethereum client software instances), coarse enough to be performant, and fine enough to capture the important facets of the agents. Emulation handles the actual software agents (in our case the actual implementations of Ethereum like geth and parity), placed into the virtual environments with lots of freedom to change parameters of virtual machines and the network connecting them. Potential questions that simulation may be able to answer: Will uncle rate become much less of an indicator of the network congestion if most of the Ethereum nodes propagate blocks straight after verifying Proof Of Work (instead of fully processing the block as they used to do)? Potential questions that emulations may be able to answer: What is the function that describes the relationship between the rate of success for snapshot synchronizations (fast sync, warp sync) and things like prevailing bandwidth and state history pruning threshold? Developers are in the process of collecting datasets for simulation and finalizing parameters for simulation (one of which might be uncle rate). Properties to test Block propagation, to reduce uncle rate If yes, raise gas block limit If yes, consider increasing cost of storage wrt compute Determining what the next bottleneck is (a) Assume compute time is reduced (b) Assume bandwidth limit results in many uncles Dataset Preparation Datasets are being collected here from various sources like WhiteBlock , Etherscan etc. Resources Simulation Proposal Deliverables Measures requiring hard-forks: State rent (or state growth limiting) eWASM Measures likely not requiring hard-forks, but requiring cross client code coordination on the network protocol: Storage pruning Resources Ethereum 1x Definition (part 1) Ethereum 1x Definition (part 2) Ethereum 1x Definition (part 3)","title":"Ethereum 1.x"},{"location":"ethereum-roadmap/ethereum-1.x/#ethereum-1x","text":"","title":"Ethereum 1.x"},{"location":"ethereum-roadmap/ethereum-1.x/#summary","text":"Ethereum 1.x is a codename for a comprehensive set of upgrades to the Ethereum mainnet intended for near-term adoption. Ethereum 2.0 (Serenity) won't be fully rolled out for another 2-3 years with Phase 0 and Phase 1 due within 1-2 and Phase 2 due sometime in 2022. Ethereum 2.0 is being deployed as a separate blockchain so it does not supersede ETH 1.0 which means the chain needs to be sustainable for another 5-10 years. Eth1.x is a result of a group of Ethereum core developers and friends discussing the current challenges of Ethereum at Devcon IV and realising that they all share a similar view - that the Ethereum mainnet, if left unchanged, would become very hard or impossible to use due to severe performance degradation and increased storage requirements. Performance degradation mostly due to the large (and increasing) state size. Increased storage requirements mostly due to keeping blocks, event logs (receipts), and state history (currently prunable in major clients). The 1.x set of improvements will introduce major, breaking changes to the mainnet, while 2.0 (aka Serenity) undergoes prototyping and development in parallel. The plan for 1.x encompasses three primary goals: (1) mainnet scalability boost by increasing the tx/s throughput (achieved with client optimizations that will enable raising the block gas limit substantially); (2) ensure that operating a full node will be sustainable by reducing and capping the disk space requirements with \u201cstorage rent\u201d; (3) improved developer experience with VM upgrades including eWASM.","title":"Summary"},{"location":"ethereum-roadmap/ethereum-1.x/#pre-history-of-ethereum-1x","text":"","title":"Pre-History of Ethereum 1.x"},{"location":"ethereum-roadmap/ethereum-1.x/#october-2017-devcon3-in-cancun","text":"Vitalik Buterin presents \"Modest proposal for Ethereum 2.0\" , suggesting that Layer 1 of Ethereum 1.0 should stay \u201csafe and conservative\u201d, and most of the innovation go into Layer 2 and into shards.","title":"October 2017, Devcon3 in Cancun"},{"location":"ethereum-roadmap/ethereum-1.x/#may-2018-edcon-in-toronto","text":"Vitalik Buterin gives a talk \u201cSo you want to become Casper validator?\u201d , signaling that Casper FFG validators may be running on laptops and rollout is getting close.","title":"May 2018, EDCON in Toronto"},{"location":"ethereum-roadmap/ethereum-1.x/#june-2018","text":"Casper FFG research is merged with sharding due to challenges of implementing Casper FFG as a contract, and due to large overlap with Sharding research, as discussed at the Core Dev Meeting 40 .","title":"June 2018"},{"location":"ethereum-roadmap/ethereum-1.x/#october-november-2018-devcon-iv-in-prague","text":"It becomes apparent that Serenity (full Casper + Sharding) is not going to functionally supersede Ethereum 1.0 for another 3-5 years.","title":"October-November 2018, Devcon IV in Prague"},{"location":"ethereum-roadmap/ethereum-1.x/#main-objectives","text":"Develop, formalize, and implement set of measures, deployable on the Ethereum 1.0 mainnet, within the next 2 years, to ensure that the chain stays viable and usable. That mainly means curbing the state growth or limiting the state size. Emphasize focus on these measures and de-emphasize introduction of specific \u201cfeatures\u201d. This is one of the places where eWASM engine comes in. Current computational pre-compiles are seen as features requiring case-by-case work. Introduction of eWASM engine would first enable \u201cpre-compile\u201d factory, where more pre-compiles are introduced faster. Later it would enable any contracts written in eWASM, obviating the need for pre-compiles altogether.","title":"Main Objectives"},{"location":"ethereum-roadmap/ethereum-1.x/#working-groups","text":"State rent (now called as state fees because it might not be just rent) eWASM Storage pruning Simulation and Emulation","title":"Working groups"},{"location":"ethereum-roadmap/ethereum-1.x/#state-rent","text":"","title":"State Rent"},{"location":"ethereum-roadmap/ethereum-1.x/#proposal-framework","text":"Since State rent is a potentially higher impact change (and therefore more controversial, possibly unpopular) than any other changes within Ethereum 1.x, it requires a clear logical framework for designing, evaluating, and comparing proposals. This framework attempts to ensure, as much as possible, that the change plan eventually chosen is likely close to the best available. It defines the path of reasoning from \u201cWhat is the problem (what happens if we do nothing)?\u201d to \u201cHow exactly we are doing it\u201d. Current location of the proposal framework document (Work in progress) Alexey explains the idea of state rent - \"to charge people not once when they start using storage and then paying them back a certain amount if they free it up again, but actually charging people by the day or by the block based on the storage that they're using, and if they decide that they don\u2019t need these things anymore they can just withdraw their Ether or they just leave it and then it will be garbage collected by the rent\".","title":"Proposal framework"},{"location":"ethereum-roadmap/ethereum-1.x/#reasoning-questions","text":"Why is state a valuable resource and to whom? (can this value be replicated) Why state size needs to be managed? (effect on system performance + possible partial mitigations) How can state size be managed? (feedforward vs feedback control) What metrics need to be regulated? (state size, state growth, or both) Do metrics need to be in-state or off-state? What parameters (control inputs) do we use? (cost of state expansion, charge per size unit per block) Can controlled system weaken or evade control? (dark rent, miner rebates) How can we get active contracts that are using lots of storage to pay a rent that more accurately represents the cost of storing that data permanently on-chain over a period of time? (Linear cross-contract storage could be a solution here) How can we clear the state of abandoned contracts that are not being used anymore? (This problem is not addressed in any such proposal as abandoned contracts represent only 6% of the state) How about keeping rent simple and maximally effective at the protocol level and completely deleting anything which runs out of funds? (Bad Idea, Users forget about some application they are involved in all the time) Moving portions of the smart contracts data off chain? (A subprotocol is needed for the delivery) \"Say you have a smart contract now and it uses storage so it has to pay rent. So it has to have funds or someone needs to pay funds on behalf of it. So what happens if no one pays?\" Under all three of the current proposals, when the smart contract exhausts its balance and the rent balance, they are considered two separate things. So when both of these balances are empty, an eviction happens. Eviction, under the current proposals, doesn\u2019t just happen automatically - somebody actually has to 'poke' the contract. Poking means that somebody has to create a transaction which touches it to access it in some way. For non contracts, eviction means just removing from the state as it doesn't have any information at all but for contracts, there's storage, so eviction doesn't completely remove it from a state but it leaves a so-called stub which is essentially the commitment to the entire state of the contract before the eviction, and this stub, unfortunately has an effect that it does not completely remove it from the state so it has to still dangle there, but this stub is what allows us to restore it later on. Let's take an example , \"if you had a multisig wallet with lots of tokens in it and then you've forgotten to pay the rent, the multisig is \"gone\" but you would still be able to use the recovery mechanism to rebuild the storage of this contract in another contract and simply use a special code to restore it from the stub - then the contract comes \"back to life\". You can also top up the rent and then keep using the contract or you can move the things elsewhere.\" The stub is expected to be a 32 byte hash which is a commitment to what the contract looked like before it was evicted. How is this different from stateless contracts? The difference is that in stateless contracts we assume that when the contract is represented as a stub it\u2019s still accessible by the normal operations. In this proposal, when the contract is in hibernation state (ie when it\u2019s a stub) it\u2019s not accessible by anything. It\u2019s basically invisible to the Ethereum Virtual Machine( EVM ) with the exception of this special opcode, which it\u2019s restored to, and only that opcode can see that stub - nothing else can. Is this the best solution? This is not a perfect solution as if we find that there are lots of little contracts having the hash stubs and then the state is still not small enough. Watch the whole talk where Alexey explains state rent and more about Eth 1.x.","title":"Reasoning questions"},{"location":"ethereum-roadmap/ethereum-1.x/#current-proposals","text":"There are currently three proposals being worked upon: * Introduce rent on all accounts (contracts and non-contracts), existing and newly created ones, with the ability to restore evicted contracts. Current location * Introduce fund lock-up when state is expanded (creation of accounts, adding store items), which is partially released when the state is cleared. Apply rent only on the pre-existing state. Current location * Increase the cost of state expansion in \u201cshort term\u201d, to enable block gas limit increase before state rent is implemented","title":"Current proposals"},{"location":"ethereum-roadmap/ethereum-1.x/#challenges-inherent-to-most-proposals","text":"How will existing dApps be affected? Will they become too expensive/cumbersome to use? Will they need to be optimized/rewritten completely? Denomination of the extra state expansion charge or rent - should it be priced in gas, ETH, and how should be the price be determined (feedback loop on the state size?). Will volatility of ETH price affect those charges too much? Will miners help users evade charges?","title":"Challenges inherent to most proposals"},{"location":"ethereum-roadmap/ethereum-1.x/#classes-of-contracts-and-impacts","text":"Part of the state rent research is to identify main classes of contracts that are likely to be affected by the changes in the protocol, and provide guidelines on what they can do about it. Likely important classes: ERC20 token contracts and applications managing them (DAI, Augur) On-chain order books (DEXs) Ethereum Name Service ENS Non-fungible token contracts Multi-signature wallets Gaming contracts Gambling contracts","title":"Classes of contracts and impacts"},{"location":"ethereum-roadmap/ethereum-1.x/#resources","text":"State Fees Proposal Alexey explains State Fees","title":"Resources"},{"location":"ethereum-roadmap/ethereum-1.x/#ewasm","text":"Enhancement to the Ethereum protocol is currently hindered by the inflexibility of the Ethereum Virtual Machine( EVM ) architecture. The method of extending the execution layer has been the introduction of special \u201cprecompile\u201d contracts. The use of WebAssembly as a virtual machine specification for executing high-performance \u201cprecompile\u201d contracts promises to streamline the process of introducing such contracts. eWASM is a subset of Wasm, Wasm has a couple of features which are non-deterministic, we need to eliminate them by validating contract while deploying. If contract uses non-deterministic features then it's rejected. The current proposal is to use an even smaller subset of eWASM (only allowing precompiles to be written as eWASM).","title":"eWASM"},{"location":"ethereum-roadmap/ethereum-1.x/#main-unresolved-questions","text":"Gas metering Memory allocation Interaction with the rest of EVM state (e.g. contract storage, balances) Interpreter/compiler guarantees on compilation time and runtime","title":"Main unresolved questions"},{"location":"ethereum-roadmap/ethereum-1.x/#gas-metering","text":"Two main approaches: Injection. Wasm bytecode gets pre-processed. An extra register is added to serve as a gas counter. It gets incremented at certain points (jumps, calls) and out-of-gas check is performed. Pro: generic. Con: performance overhead. Automatic upper bound estimation. Static analysis is performed on the bytecode, and, for some subset of codes, upper bound of executed instructions (virtual gas) can be calculated. Pro: no performance overhead. Con: only subset of codes Current approach for the 1st phase (pre-compiles) is upper-bound based.","title":"Gas metering"},{"location":"ethereum-roadmap/ethereum-1.x/#memory-allocation","text":"Wasm semantics dictates that its execution has a linear memory (only one in the current version of the spec) that can be grown on demand. Will that linear memory be allocated every time the engine is called and then torn down at the end of the execution? If yes, how much more efficient is this compared to the current EVM model (which does this allocation and tearing down at each CALL opcode).","title":"Memory allocation"},{"location":"ethereum-roadmap/ethereum-1.x/#interaction-with-the-rest-of-evm-state","text":"This was proposed via external functions, for example (name made up): function_SLOAD(storage_index: uint256) The alternative approach is not to have eWASM code access EVM state, but only exchange input/output when called. This, of course, makes maintaining large persistent data structures difficult.","title":"Interaction with the rest of EVM state"},{"location":"ethereum-roadmap/ethereum-1.x/#interpretercompiler-guarantees","text":"Initially, this problem was brought up in the context of JITs (Just In Time) compilers. JIT compilers were one of the reasons why WebAssembly was a big performance improvement over JavaScript. JIT compilers might be problematic in an adversarial environment because it is usually possible to find a program that takes an unusually long time to compile, and algorithms that decide what to compile \u201cjust in time\u201d can be targeted too. AOT (Ahead of Time) compilers can be used for Core Dev-controlled pre-compiles (Phase 1). For Phase 2, the plan was to initially use very straightforward interpreters, and then develop AOT compilers with necessary guarantees. The idea of first introducing interpreters is to make sure eWASM is there, giving people more motivation to work on the compilers (which is harder than interpreter)","title":"Interpreter/compiler guarantees"},{"location":"ethereum-roadmap/ethereum-1.x/#resources_1","text":"eWASM Proposal eWASM Design","title":"Resources"},{"location":"ethereum-roadmap/ethereum-1.x/#storage-pruning","text":"Ethereum 1.0 has a storage scaling issue. Yes, the rate of growth itself is implicitly limited by the block gas limit, but there is no limit on the total amount of data accumulated over time. Also known as Chain Pruning, this group is not related to state directly instead it is concerned with the growing size of logs, blocks, data, etc. \"If Ethereum were to grow at its current rate, 91 GB would be added per year to storage\", according to the core team. Storage Pruning is necessary and seeks to place a cap on Ethereum's data storage growth. Part of the proposal includes the deletion of historical blocks, logs, and indexes.","title":"Storage Pruning"},{"location":"ethereum-roadmap/ethereum-1.x/#the-questions-to-be-answered-are","text":"What do we absolutely need to keep to comply with the Ethereum protocol? Do we always need to keep all the blocks? (maybe not, if we use backward sync, for example) Do we need to keep receipts, or just logs, how much (in Gigabytes), or for how long? Do we need to always download the entire header chain or can we compress it (with STARK proofs for example)? Can we improve snapshot sync procedures (fast sync, warp sync) so that they prevent invalid state transitions (with Validity Proofs, for example)?","title":"The questions to be answered are:"},{"location":"ethereum-roadmap/ethereum-1.x/#how-to-handle-removal-of-history","text":"The first challenge to solve with regard to pruning historical chain segments is to ensure that we can prove the past even though we've deleted the past. There are two possible approaches for this:","title":"How to handle removal of history"},{"location":"ethereum-roadmap/ethereum-1.x/#maintain-a-merkle-or-other-cryptographic-proof-of-deleted-chain-segments","text":"Light clients work exactly like this and that's why are able to sync in a couple of minutes. Instead of having to go through all the headers from genesis, light clients are hard coded (or fed from the config file) a trusted checkpoint, which they start syncing from. This mechanism has two issues however: To keep sync fast, we constantly have to update the hard coded snapshots or the config file. This works for mainnet with an active maintenance schedule, but does not scale for private Ethereum networks. If no release is made, sync currently takes longer. If however the full nodes would start deleting old headers themselves, old checkpoints would become useless, forcing devs to constantly issue new releases and users to constantly pull new releases. It just doesn't scale.","title":"Maintain a Merkle (or other cryptographic) proof of deleted chain segments"},{"location":"ethereum-roadmap/ethereum-1.x/#maintain-the-header-chain-indefinitely","text":"It solve all of the issues that the Merkle proof mechanism has, you can always fast sync based on the header chain with only the genesis. The downside is that opposed to the Merkle proof, which is 32 bytes for arbitrary history, keeping the headers available indefinitely means indefinite chain growth.","title":"Maintain the header chain indefinitely"},{"location":"ethereum-roadmap/ethereum-1.x/#garbage-collection","text":"If we agree on an N month/block retention policy, whenever the chain progresses, each client would delete bodies and receipts older than HEAD-N. This has an implication on the RPC APIs too however. We need to introduce the concept of a \"virtual genesis block\" (open for better names) which define the point of history before which the APIs cannot return data (or return that they don't maintain it any more).","title":"Garbage Collection"},{"location":"ethereum-roadmap/ethereum-1.x/#blockreceipt-archives","text":"Archiving historical chain segments so they remain available for later reconstruction if need be is the hardest part of this proposal. So where to store these archives, internally or externally: Extra-protocol storage means hosting the data files on classical external servers, mirrored and replicated according to our security needs: FTP, S3, CDNs, etc. These could be archived by major players (Ethereum Foundation, Consensys, Parity Technologies, Internet Archive, etc). Access to these could boil down to dumb web requests. Intra-protocol storage means hosting the data files within some of the nodes in the Ethereum network itself: Swarm/devp2p, IPFS/libp2p, BitTorrent, etc. The archives would still be run by the same major players, but running an archive would be approachable to anyone, thus closer to the ethos of decentralization. Since the whole point of Ethereum is decentralization, the only option we have is intra-protocol. However there are many methods by which we can store the archives in a decentralized way. Some of them are listed here: Swarm (but not production ready) IPFS (accessing is easy, hosting is hard) BitTorrent LES/PIP Broken Invariants Pruning historical chain segments breaks a few important invariants within the Ethereum ecosystem: DApps will no longer be able to access events past the retention policy. Nodes will have no way of knowing if a transaction was already deleted, or never existed in the first place. It will be harder for nodes to do a full sync, a full sync on Ethereum mainnet with current Geth takes about 5 days, 4 days out of which is the last 2.7M blocks. If we bump the transaction throughput to 10x, apart from very special users, nobody will be able to do a full sync, nor will want to really.","title":"Block/Receipt Archives"},{"location":"ethereum-roadmap/ethereum-1.x/#resources_2","text":"Pruning Proposal","title":"Resources"},{"location":"ethereum-roadmap/ethereum-1.x/#simulation-and-emulation","text":"What are the tools that we can use to support the other groups like State Rent and the chain pruning group, to run some test scenarios and try to predict what problems that we\u2019re going to face in the future? Simulation and Emulation group produces data for making projections, benchmarks, and parameter calibrations for other groups. The working group is tasked with developing three setups: * A simulation framework that, when a dataset is entered, produces an output to estimate properties of proposed changes (such as uncle rate reduction and gas limit increases). Currently Wittgenstein is suggested. * An emulation framework that alters environment conditions to test properties of launched changes * A testnet that launches these changes together on the same network Simulation handles models of the software agents (in our case Ethereum client software instances), coarse enough to be performant, and fine enough to capture the important facets of the agents. Emulation handles the actual software agents (in our case the actual implementations of Ethereum like geth and parity), placed into the virtual environments with lots of freedom to change parameters of virtual machines and the network connecting them. Potential questions that simulation may be able to answer: Will uncle rate become much less of an indicator of the network congestion if most of the Ethereum nodes propagate blocks straight after verifying Proof Of Work (instead of fully processing the block as they used to do)? Potential questions that emulations may be able to answer: What is the function that describes the relationship between the rate of success for snapshot synchronizations (fast sync, warp sync) and things like prevailing bandwidth and state history pruning threshold? Developers are in the process of collecting datasets for simulation and finalizing parameters for simulation (one of which might be uncle rate). Properties to test Block propagation, to reduce uncle rate If yes, raise gas block limit If yes, consider increasing cost of storage wrt compute Determining what the next bottleneck is (a) Assume compute time is reduced (b) Assume bandwidth limit results in many uncles Dataset Preparation Datasets are being collected here from various sources like WhiteBlock , Etherscan etc.","title":"Simulation and Emulation"},{"location":"ethereum-roadmap/ethereum-1.x/#resources_3","text":"Simulation Proposal","title":"Resources"},{"location":"ethereum-roadmap/ethereum-1.x/#deliverables","text":"","title":"Deliverables"},{"location":"ethereum-roadmap/ethereum-1.x/#measures-requiring-hard-forks","text":"State rent (or state growth limiting) eWASM","title":"Measures requiring hard-forks:"},{"location":"ethereum-roadmap/ethereum-1.x/#measures-likely-not-requiring-hard-forks-but-requiring-cross-client-code-coordination-on-the-network-protocol","text":"Storage pruning","title":"Measures likely not requiring hard-forks, but requiring cross client code coordination on the network protocol:"},{"location":"ethereum-roadmap/ethereum-1.x/#resources_4","text":"Ethereum 1x Definition (part 1) Ethereum 1x Definition (part 2) Ethereum 1x Definition (part 3)","title":"Resources"},{"location":"ethereum-roadmap/privacy/","text":"Privacy Summary Privacy on Ethereum is being actively worked on by a number of different teams. There are a couple of key technologies to know about: The main technology used for privacy are called 'zero knowledge proofs'. This technology allows for privacy by mathematically preventing certain information (such as amount, sender, recipient, etc.) from being revealed to the public while the protocol can still guarantee the transaction executes correctly. An older technology called 'Mixers' have some benefits for privacy as well as they serve to obfuscate the data, often making it confusing (or even empirically impossible) to correlate the information correctly. Zero Knowledge-based zk-SNARKs (used in Zcash) zk-STARKs zk-SNARKs are the more studied type of zero-knowledge proof. Due to their widespread usage, the community is reletively certain of their effectiveness. However, they come with a notable downside. zk-SNARKs rely on a polynomial for determining certain computations in the algorithm. If the full factorization of this polynomial is known by someone, then it is trivial for that person to make proofs for that specific zk-SNARK to say incorrect statements. Therefore, it is required that no single person or entity know the entire factorization of the polynomial. The main way this has been achieved is by opening up the polynomial creation process publicly. When Zcash did their last fork, they updated their polynomial and underwent a public polynomial creation (\"powers of tau ceremony\"). If each person privately submits a factor and then destroys that information - so long as a single person in the whole process did it correctly, then no single entity will know the complete factorization. This part is generally called the \"trusted setup\" of a zk-SNARK. So long as you participated, then you can be 100% certain that this issue is not present. There are other studied methods to handle this issue. One of the most interesting is to use a specific type of polynomial that only has complex (imaginary) factors. This prevents there from even existing a factorization which could fool the system. However, it is generally accepted that this method is understudied and needs more research before it is ready to secure significant money. zk-STARKs are a second type of zero-knowledge proof. STARKs rely on slightly different mathematics and dont need a trusted setup. The biggest issue with STARKs is that they require a lot of space (a lot of data for proofs). SNARKs also require a lot of space but more optimizations have been found, making them smaller at the moment. As blockchains are particularly space constrained, the large size of STARKs is a significant issue. There is continued research into reducing the size requirements. But at the moment they are prohibitively large. Both STARKs and SNARKs require a non-0 amount of computation and so if they are to be implemented at large scale, computation can also become a limiting factor. Aztec Protocol is building an efficient zero-knowledge privacy protocol and decentralised exchange. The protocol is already live on Ethereum's mainnet. Starkware Industries is using STARK technology to improve scalability and privacy on Ethereum. Secret Network are building 'secret contracts' which enable computation over encrypted data. Zether is a confidential (transaction amounts are hidden) and anonymous (transaction sender and receiver are hidden) payment mechanism on blockchains with the account model like Ethereum. More info on Zether . Mixers Mixers work a bit differently to zero-knowledge proof technology. In truth, both technologies work by scrambling transactions together. But Mixers only work with transactions happening at that moment by using a set of fake transactions (called \"Mix-ins\") plus several real transactions all which sum to approximated the same number of units of ETH. Basically, when you send a transaction for 5 units of ETH, you need to wait for 1 or 2 other people to also send 5 ETH so that you can scramble all 3 transactions together. Mixers send the outputs to a bunch of addresses with smaller amounts which sum to your original units. This way it can be very confusing to line up who sent what to where when you are actively trying to make transactions look similar. The system works better the more people who are using it at that moment. Tornado is mixer, which uses zk-SNARKS. Vitalik Buterin created a post on EthMagicians calling for more attention towards privacy solutions: Mixers We can encourage the development of easy-to-use, and importantly decentralized (ie. not just \u201ctrustless\u201d, completely serverless) mixers targeting privacy-preserving transfer of small amounts of ETH, so if you want to send gas payment to another account you can do so without linking the two. Note that here, one major challenge with (eg. ringsig or zk snark based) smart contract mixers is that if you want to send funds from A to B, B still needs to have ETH to pay gas to submit the proof to receive their funds, and sending that gas would be a privacy leak; this can be solved with a layer-2 protocol where a user can broadcast their proof (including a commitment to what address they want to receive to and what fee they are willing to pay) over something like Whisper, and a specialized set of nodes could accept these proofs, include them into a transaction and pay for the gas, and collect the fee from the recipient. But this protocol needs to be specced out, standardized and implemented\u2026 DApp-specific addresses Vitalik Buterin created a post on EthMagicians calling for more attention towards privacy solutions: \" If we make a default that for every dapp, a user uses a separate account, we have to overcome a few challenges: Address generation: It would be nice to keep wallet software stateless, so users can easily export and import their keys between wallets; this implies using some deterministic scheme like privkey_for_dapp = hash(master_key + dapp_id). But then what is the dapp_id? How would that work for multi-contract dapps? Dapp interaction: The most common category here is using ERC20 tokens inside another dapp. What is the workflow by which they would do that? To use KNC on Uniswap, would you first transfer KNC from their \u201cKyber account\u201d to your \u201cUniswap account\u201d and then do whatever you wanted to do with Uniswap? Something else? Ideally from a UX point of view, it would still feel like the user makes one operation; the UX of dapps that requires users to sign three transactions in a row to do something honestly really sucks.\" Resources: Master ZKP Reading List Private DAI transactions on Ethereum using Zk-SNARKs Explain Like I\u2019m 5: Zero Knowledge Proof","title":"Privacy"},{"location":"ethereum-roadmap/privacy/#privacy","text":"","title":"Privacy"},{"location":"ethereum-roadmap/privacy/#summary","text":"Privacy on Ethereum is being actively worked on by a number of different teams.","title":"Summary"},{"location":"ethereum-roadmap/privacy/#there-are-a-couple-of-key-technologies-to-know-about","text":"The main technology used for privacy are called 'zero knowledge proofs'. This technology allows for privacy by mathematically preventing certain information (such as amount, sender, recipient, etc.) from being revealed to the public while the protocol can still guarantee the transaction executes correctly. An older technology called 'Mixers' have some benefits for privacy as well as they serve to obfuscate the data, often making it confusing (or even empirically impossible) to correlate the information correctly.","title":"There are a couple of key technologies to know about:"},{"location":"ethereum-roadmap/privacy/#zero-knowledge-based","text":"zk-SNARKs (used in Zcash) zk-STARKs zk-SNARKs are the more studied type of zero-knowledge proof. Due to their widespread usage, the community is reletively certain of their effectiveness. However, they come with a notable downside. zk-SNARKs rely on a polynomial for determining certain computations in the algorithm. If the full factorization of this polynomial is known by someone, then it is trivial for that person to make proofs for that specific zk-SNARK to say incorrect statements. Therefore, it is required that no single person or entity know the entire factorization of the polynomial. The main way this has been achieved is by opening up the polynomial creation process publicly. When Zcash did their last fork, they updated their polynomial and underwent a public polynomial creation (\"powers of tau ceremony\"). If each person privately submits a factor and then destroys that information - so long as a single person in the whole process did it correctly, then no single entity will know the complete factorization. This part is generally called the \"trusted setup\" of a zk-SNARK. So long as you participated, then you can be 100% certain that this issue is not present. There are other studied methods to handle this issue. One of the most interesting is to use a specific type of polynomial that only has complex (imaginary) factors. This prevents there from even existing a factorization which could fool the system. However, it is generally accepted that this method is understudied and needs more research before it is ready to secure significant money. zk-STARKs are a second type of zero-knowledge proof. STARKs rely on slightly different mathematics and dont need a trusted setup. The biggest issue with STARKs is that they require a lot of space (a lot of data for proofs). SNARKs also require a lot of space but more optimizations have been found, making them smaller at the moment. As blockchains are particularly space constrained, the large size of STARKs is a significant issue. There is continued research into reducing the size requirements. But at the moment they are prohibitively large. Both STARKs and SNARKs require a non-0 amount of computation and so if they are to be implemented at large scale, computation can also become a limiting factor. Aztec Protocol is building an efficient zero-knowledge privacy protocol and decentralised exchange. The protocol is already live on Ethereum's mainnet. Starkware Industries is using STARK technology to improve scalability and privacy on Ethereum. Secret Network are building 'secret contracts' which enable computation over encrypted data. Zether is a confidential (transaction amounts are hidden) and anonymous (transaction sender and receiver are hidden) payment mechanism on blockchains with the account model like Ethereum. More info on Zether .","title":"Zero Knowledge-based"},{"location":"ethereum-roadmap/privacy/#mixers","text":"Mixers work a bit differently to zero-knowledge proof technology. In truth, both technologies work by scrambling transactions together. But Mixers only work with transactions happening at that moment by using a set of fake transactions (called \"Mix-ins\") plus several real transactions all which sum to approximated the same number of units of ETH. Basically, when you send a transaction for 5 units of ETH, you need to wait for 1 or 2 other people to also send 5 ETH so that you can scramble all 3 transactions together. Mixers send the outputs to a bunch of addresses with smaller amounts which sum to your original units. This way it can be very confusing to line up who sent what to where when you are actively trying to make transactions look similar. The system works better the more people who are using it at that moment. Tornado is mixer, which uses zk-SNARKS. Vitalik Buterin created a post on EthMagicians calling for more attention towards privacy solutions: Mixers We can encourage the development of easy-to-use, and importantly decentralized (ie. not just \u201ctrustless\u201d, completely serverless) mixers targeting privacy-preserving transfer of small amounts of ETH, so if you want to send gas payment to another account you can do so without linking the two. Note that here, one major challenge with (eg. ringsig or zk snark based) smart contract mixers is that if you want to send funds from A to B, B still needs to have ETH to pay gas to submit the proof to receive their funds, and sending that gas would be a privacy leak; this can be solved with a layer-2 protocol where a user can broadcast their proof (including a commitment to what address they want to receive to and what fee they are willing to pay) over something like Whisper, and a specialized set of nodes could accept these proofs, include them into a transaction and pay for the gas, and collect the fee from the recipient. But this protocol needs to be specced out, standardized and implemented\u2026","title":"Mixers"},{"location":"ethereum-roadmap/privacy/#dapp-specific-addresses","text":"Vitalik Buterin created a post on EthMagicians calling for more attention towards privacy solutions: \" If we make a default that for every dapp, a user uses a separate account, we have to overcome a few challenges: Address generation: It would be nice to keep wallet software stateless, so users can easily export and import their keys between wallets; this implies using some deterministic scheme like privkey_for_dapp = hash(master_key + dapp_id). But then what is the dapp_id? How would that work for multi-contract dapps? Dapp interaction: The most common category here is using ERC20 tokens inside another dapp. What is the workflow by which they would do that? To use KNC on Uniswap, would you first transfer KNC from their \u201cKyber account\u201d to your \u201cUniswap account\u201d and then do whatever you wanted to do with Uniswap? Something else? Ideally from a UX point of view, it would still feel like the user makes one operation; the UX of dapps that requires users to sign three transactions in a row to do something honestly really sucks.\"","title":"DApp-specific addresses"},{"location":"ethereum-roadmap/privacy/#resources","text":"Master ZKP Reading List Private DAI transactions on Ethereum using Zk-SNARKs Explain Like I\u2019m 5: Zero Knowledge Proof","title":"Resources:"},{"location":"ethereum-roadmap/ethereum-2.0/account-abstraction/","text":"Account Abstraction Introduction Data abstraction in computer science is the practice of information hiding. This increases the ability of a computer system to be used at a higher level with less knowledge of the processes going on underneath. Consider the software developer. A high level programming language is used to create virtual interactions between objects. The programmer does not need to know how to write the 1's and 0's that compose the machine code that runs physically in the memory and processor. This is an example of data abstraction. On the Ethereum network there are currently two types of accounts. External accounts are wallets from which cryptocurrency is transacted in send and receive functions that exist outside of the EVM (Ethereum Virtual Machine). Contract accounts are \"smart contracts\" that exist in the EVM. The EVM is a virtual computer that exists on the Ethereum blockchain. A series of OPCODES have been hard programmed into the Ethereum blockchain to be able to act as a virtual machine; memory, storage, and processing in the execution of smart contracts. Ethereum account abstraction has the goal of reducing from two account types down to one, a contract account. The single account type will have the functionality to transact both coin and contract. Developer and user will no longer need to make a distinction between account type since transacting will be moved fully into the EVM and off of the blockchain protocol. Account abstraction is going to be an Ethereum 2.0 implementation and there is still fierce debate about the methodology in so doing. Possible Implementation Methods As described by Ethereum co-founder Vitalik Buterin Lazy full abstraction How it works: the only type of account is a contract. There is one transaction type, which has the following fields: [gas, addr, data]. Executing the transaction consists of playing a message, with msg.sender being some standard \u201cENTRY_POINT\u201d address (eg. 0xff\u2026ff), msg.to being the addr, and the gas and data being the provided values. Users are expected to store funds in contract accounts, where the code of the contract interprets the provided data as an ABI encoding of [nonce, signature, gasprice, value, data], verifies the nonce and signature, pays gas to the miner, sends a message to the desired address with the desired value, and then asks for a refund for the remaining gas. Pros: makes the protocol very simple. apply_tx becomes a very trivial wrapper around apply_msg. Cons: requires fairly complex code inside of each account to verify the nonce and signature and pay gas. Second, requires fairly complex code in the miner to determine what transactions actually are guaranteed to pay for gas. Third, it requires additional logic for the sender and the miner to create new accounts. Finally, it introduces the possibility that, with accounts constructed in a \u201cnon-standard\u201d way, a transaction with the same hash could get included multiple times. The miner\u2019s problem is as follows. The miner needs to verify, in O(1) time, that a given transaction actually is guaranteed to pay for gas if the miner decides to process the transaction and try to include it in the block. In an abstraction system, this could involve asking the miner to run some code, say, with a limit of 200000 gas, but the miner would need to be sure that, after this happens, the transaction execution is in a state where the gas is paid for, and the payment cannot be reverted. Currently, the protocol handles this automatically; in full abstraction, this must all be implemented in code, and possibly in a fairly complex way. Remove nonce abstraction How it works: same as above, except a transaction also has a nonce field. A rule is added that a transaction\u2019s nonce must equal the account nonce, and that the nonce is incremented upon a successful transaction. Pros: removes the possibility of a transaction appearing in multiple places. Cons: increases base protocol complexity slightly, and remove the possibility of alternative schemes (eg. UTXOs, parallelizable nonces) Standardize signature scheme How it works: add a byte-array field sig to the transaction. In the top-level message, add to the transaction\u2019s return data sighash ++ sig, where sighash is the sha3 of the transaction not including the sig. Pros: makes signature verification much simpler. Cons: increases base protocol complexity slightly. Add BREAKPOINT opcode How it works: add an opcode BREAKPOINT, which has the property that if a transaction throws after a breakpoint, it only reverts up to the breakpoint. Pros: makes it much easier for the miner to detect if a transaction pays for gas; the miner\u2019s code would only need to be something like \u201crun for N steps or until a breakpoint, see that the breakpoint has been reached, and that gas has been paid for\u201d. Cons: deep and fundamental change to the EVM. Historically not the best idea. Add PAYGAS opcode How it works: takes as input one argument (gasprice), immediately transfers the gasprice * tx.gas to a temporary account, and then at the end of executing the transaction refunds any unused gas. Pros: makes paying for gas simpler, and particularly does not require the transaction to include merkle branches to process a call to the coinbase. Avoids the overhead of a call to the coinbase. Cons: increases base protocol complexity. Also does not allow abstracting gas payment, eg. paying with ERC20 tokens. Gasprice + PANIC How it works: a transaction adds a parameter gasprice. At the start of execution, gasprice * startgas is subtracted. A PANIC opcode is added, which can only be called in a top-level execution context (ie. if msg.sender == ENTRY_POINT) and where (tx.gas - msg.gas) <= PANICLIMIT (eg. PANICLIMIT = 200000). If this opcode is triggered, then the entire transaction is invalid. A user account would make sure to check the signature and nonce within the limit, preventing invalid transactions from consuming gas. Miners would run transactions with a sufficient gasprice and reject those that panic. Pros: account code is simple, and miner code is simple, while still adding full signature and nonce abstraction Cons: increases base protocol complexity slightly. Also does not allow abstracting gas payment, eg. paying with ERC20 tokens. Third, does not provide flexibility in how much time signature verification can take (though Casper already enforces a limit, so the limit can be set to be the same value). One possible variant is to simply make the transaction invalidity behavior be part of the behavior of THROW if called in a top-level context with the given amount of remaining gas. Combine PANIC and PAYGAS How it works: remove PANIC. Instead, have all exceptions have behavior equivalent to PANIC if PAYGAS has not yet been called. Pros: allows accounts to set their own base verification gas limit. A miner can run the algorithm of running the code for up to N gas, where N is chosen by the miner, until PAYGAS has been called. Also, removes the need for gasprice to be part of the transaction body. Cons: makes the output state of a message slightly more complicated, as it also needs to carry the information of whether or not a PAYGAS opcode was triggered and if so with what gasprice. Salt + code in transaction How it works: a transaction has two new fields: salt and code. If the target account of a transaction is nonempty, then these two fields must be empty [variant: are ignored]. If the target account is empty, then the last 20 bytes of sha3(salt + code) must equal the account, and if this is the case then the code is put into that position in the account code [variant: is used as init code]. Pros: creates a standard and clean way to create new accounts. Cons: adds protocol complexity. Newly created account pays How it works: a transaction can be a contract creation transaction by specifying a salt and code. If the target address is empty, then it takes funds from that address to pay for gas, and then creates the contract. Pros: similar to existing contract creation. Cons: sending the first transaction from an account takes an additional step. Minimally Simple Account Abstraction without Gas refunds As described by Ethereum co-founder Vitalk Buterin: This is an account abstraction proposal that achieves significantly greater simplicity, and greater generality, than anything proposed so far, but at a price: transactions whose gas costs are not completely static may end up overcharging gas. The proposal is simple. Add an opcode BREAKPOINT, with the property that a function call that fails after a BREAKPOINT reverts only up to the BREAKPOINT. User account code would in general be structured as follows: verify_nonce() verify_signature() send(coinbase, x) breakpoint() do_stuff() do_more_stuff() After the execution hits the BREAKPOINT opcode, the block proposer is certain that they will get compensated for including the transaction. Note that in this model, refunds for unused gas are not possible. To add more flexibility, add another opcode, DECREASE_LIMIT, which decreases the remaining gas limit without consuming gas. This would allow for account code where the gas limit of a transaction can be determined in the \u201cheader\u201d (ie. before the send and BREAKPOINT). Consequences apply_msg and apply_tx become identical (fee market reform 7 can be done at the per-block level), greatly reducing complexity The ABI would need to specify the max gas consumption of each function call, so that tight maximums can be more easily computed Does not require static analysis of code Would lead to some inefficiency in cases where gas costs truly are variable (the most common use case being CREATE2\u2019ing a contract if and only if it does not exist yet), as the user would need to pay for the higher level of consumption even if the lower level of consumption is more frequent Implements full abstraction, so we would lose the tx hash uniqueness guarantee Security Considerations To pay for the computing resources of nodes and miners and to incentivize the use of efficient code, there is a Gas cost associated with interactions of smart contracts. One of the attack vectors for the Ethereum blockchain is DoS (denial of service) by creating transactions that are computationally intensive. The efforts seen above are intended to be able to charge the correct amount of Gas without allowing an attack vector for DoS. Resources Account Abstraction Link Tree Abstraction in Computer Science Tradeoffs in Account Abstraction Proposals A recap of where we are at on account abstraction Maximally Simple Account Abstraction without Gas Refund Work to Natively Integrate Eth1 into Eth2 The Ethereum Virtual Machine - How does it work?","title":"Ethereum Account Abstraction"},{"location":"ethereum-roadmap/ethereum-2.0/account-abstraction/#account-abstraction","text":"","title":"Account Abstraction"},{"location":"ethereum-roadmap/ethereum-2.0/account-abstraction/#introduction","text":"Data abstraction in computer science is the practice of information hiding. This increases the ability of a computer system to be used at a higher level with less knowledge of the processes going on underneath. Consider the software developer. A high level programming language is used to create virtual interactions between objects. The programmer does not need to know how to write the 1's and 0's that compose the machine code that runs physically in the memory and processor. This is an example of data abstraction. On the Ethereum network there are currently two types of accounts. External accounts are wallets from which cryptocurrency is transacted in send and receive functions that exist outside of the EVM (Ethereum Virtual Machine). Contract accounts are \"smart contracts\" that exist in the EVM. The EVM is a virtual computer that exists on the Ethereum blockchain. A series of OPCODES have been hard programmed into the Ethereum blockchain to be able to act as a virtual machine; memory, storage, and processing in the execution of smart contracts. Ethereum account abstraction has the goal of reducing from two account types down to one, a contract account. The single account type will have the functionality to transact both coin and contract. Developer and user will no longer need to make a distinction between account type since transacting will be moved fully into the EVM and off of the blockchain protocol. Account abstraction is going to be an Ethereum 2.0 implementation and there is still fierce debate about the methodology in so doing.","title":"Introduction"},{"location":"ethereum-roadmap/ethereum-2.0/account-abstraction/#possible-implementation-methods","text":"As described by Ethereum co-founder Vitalik Buterin","title":"Possible Implementation Methods"},{"location":"ethereum-roadmap/ethereum-2.0/account-abstraction/#lazy-full-abstraction","text":"How it works: the only type of account is a contract. There is one transaction type, which has the following fields: [gas, addr, data]. Executing the transaction consists of playing a message, with msg.sender being some standard \u201cENTRY_POINT\u201d address (eg. 0xff\u2026ff), msg.to being the addr, and the gas and data being the provided values. Users are expected to store funds in contract accounts, where the code of the contract interprets the provided data as an ABI encoding of [nonce, signature, gasprice, value, data], verifies the nonce and signature, pays gas to the miner, sends a message to the desired address with the desired value, and then asks for a refund for the remaining gas. Pros: makes the protocol very simple. apply_tx becomes a very trivial wrapper around apply_msg. Cons: requires fairly complex code inside of each account to verify the nonce and signature and pay gas. Second, requires fairly complex code in the miner to determine what transactions actually are guaranteed to pay for gas. Third, it requires additional logic for the sender and the miner to create new accounts. Finally, it introduces the possibility that, with accounts constructed in a \u201cnon-standard\u201d way, a transaction with the same hash could get included multiple times. The miner\u2019s problem is as follows. The miner needs to verify, in O(1) time, that a given transaction actually is guaranteed to pay for gas if the miner decides to process the transaction and try to include it in the block. In an abstraction system, this could involve asking the miner to run some code, say, with a limit of 200000 gas, but the miner would need to be sure that, after this happens, the transaction execution is in a state where the gas is paid for, and the payment cannot be reverted. Currently, the protocol handles this automatically; in full abstraction, this must all be implemented in code, and possibly in a fairly complex way.","title":"Lazy full abstraction"},{"location":"ethereum-roadmap/ethereum-2.0/account-abstraction/#remove-nonce-abstraction","text":"How it works: same as above, except a transaction also has a nonce field. A rule is added that a transaction\u2019s nonce must equal the account nonce, and that the nonce is incremented upon a successful transaction. Pros: removes the possibility of a transaction appearing in multiple places. Cons: increases base protocol complexity slightly, and remove the possibility of alternative schemes (eg. UTXOs, parallelizable nonces)","title":"Remove nonce abstraction"},{"location":"ethereum-roadmap/ethereum-2.0/account-abstraction/#standardize-signature-scheme","text":"How it works: add a byte-array field sig to the transaction. In the top-level message, add to the transaction\u2019s return data sighash ++ sig, where sighash is the sha3 of the transaction not including the sig. Pros: makes signature verification much simpler. Cons: increases base protocol complexity slightly.","title":"Standardize signature scheme"},{"location":"ethereum-roadmap/ethereum-2.0/account-abstraction/#add-breakpoint-opcode","text":"How it works: add an opcode BREAKPOINT, which has the property that if a transaction throws after a breakpoint, it only reverts up to the breakpoint. Pros: makes it much easier for the miner to detect if a transaction pays for gas; the miner\u2019s code would only need to be something like \u201crun for N steps or until a breakpoint, see that the breakpoint has been reached, and that gas has been paid for\u201d. Cons: deep and fundamental change to the EVM. Historically not the best idea.","title":"Add BREAKPOINT opcode"},{"location":"ethereum-roadmap/ethereum-2.0/account-abstraction/#add-paygas-opcode","text":"How it works: takes as input one argument (gasprice), immediately transfers the gasprice * tx.gas to a temporary account, and then at the end of executing the transaction refunds any unused gas. Pros: makes paying for gas simpler, and particularly does not require the transaction to include merkle branches to process a call to the coinbase. Avoids the overhead of a call to the coinbase. Cons: increases base protocol complexity. Also does not allow abstracting gas payment, eg. paying with ERC20 tokens.","title":"Add PAYGAS opcode"},{"location":"ethereum-roadmap/ethereum-2.0/account-abstraction/#gasprice-panic","text":"How it works: a transaction adds a parameter gasprice. At the start of execution, gasprice * startgas is subtracted. A PANIC opcode is added, which can only be called in a top-level execution context (ie. if msg.sender == ENTRY_POINT) and where (tx.gas - msg.gas) <= PANICLIMIT (eg. PANICLIMIT = 200000). If this opcode is triggered, then the entire transaction is invalid. A user account would make sure to check the signature and nonce within the limit, preventing invalid transactions from consuming gas. Miners would run transactions with a sufficient gasprice and reject those that panic. Pros: account code is simple, and miner code is simple, while still adding full signature and nonce abstraction Cons: increases base protocol complexity slightly. Also does not allow abstracting gas payment, eg. paying with ERC20 tokens. Third, does not provide flexibility in how much time signature verification can take (though Casper already enforces a limit, so the limit can be set to be the same value). One possible variant is to simply make the transaction invalidity behavior be part of the behavior of THROW if called in a top-level context with the given amount of remaining gas.","title":"Gasprice + PANIC"},{"location":"ethereum-roadmap/ethereum-2.0/account-abstraction/#combine-panic-and-paygas","text":"How it works: remove PANIC. Instead, have all exceptions have behavior equivalent to PANIC if PAYGAS has not yet been called. Pros: allows accounts to set their own base verification gas limit. A miner can run the algorithm of running the code for up to N gas, where N is chosen by the miner, until PAYGAS has been called. Also, removes the need for gasprice to be part of the transaction body. Cons: makes the output state of a message slightly more complicated, as it also needs to carry the information of whether or not a PAYGAS opcode was triggered and if so with what gasprice.","title":"Combine PANIC and PAYGAS"},{"location":"ethereum-roadmap/ethereum-2.0/account-abstraction/#salt-code-in-transaction","text":"How it works: a transaction has two new fields: salt and code. If the target account of a transaction is nonempty, then these two fields must be empty [variant: are ignored]. If the target account is empty, then the last 20 bytes of sha3(salt + code) must equal the account, and if this is the case then the code is put into that position in the account code [variant: is used as init code]. Pros: creates a standard and clean way to create new accounts. Cons: adds protocol complexity.","title":"Salt + code in transaction"},{"location":"ethereum-roadmap/ethereum-2.0/account-abstraction/#newly-created-account-pays","text":"How it works: a transaction can be a contract creation transaction by specifying a salt and code. If the target address is empty, then it takes funds from that address to pay for gas, and then creates the contract. Pros: similar to existing contract creation. Cons: sending the first transaction from an account takes an additional step.","title":"Newly created account pays"},{"location":"ethereum-roadmap/ethereum-2.0/account-abstraction/#minimally-simple-account-abstraction-without-gas-refunds","text":"As described by Ethereum co-founder Vitalk Buterin: This is an account abstraction proposal that achieves significantly greater simplicity, and greater generality, than anything proposed so far, but at a price: transactions whose gas costs are not completely static may end up overcharging gas. The proposal is simple. Add an opcode BREAKPOINT, with the property that a function call that fails after a BREAKPOINT reverts only up to the BREAKPOINT. User account code would in general be structured as follows: verify_nonce() verify_signature() send(coinbase, x) breakpoint() do_stuff() do_more_stuff() After the execution hits the BREAKPOINT opcode, the block proposer is certain that they will get compensated for including the transaction. Note that in this model, refunds for unused gas are not possible. To add more flexibility, add another opcode, DECREASE_LIMIT, which decreases the remaining gas limit without consuming gas. This would allow for account code where the gas limit of a transaction can be determined in the \u201cheader\u201d (ie. before the send and BREAKPOINT).","title":"Minimally Simple Account Abstraction without Gas refunds"},{"location":"ethereum-roadmap/ethereum-2.0/account-abstraction/#consequences","text":"apply_msg and apply_tx become identical (fee market reform 7 can be done at the per-block level), greatly reducing complexity The ABI would need to specify the max gas consumption of each function call, so that tight maximums can be more easily computed Does not require static analysis of code Would lead to some inefficiency in cases where gas costs truly are variable (the most common use case being CREATE2\u2019ing a contract if and only if it does not exist yet), as the user would need to pay for the higher level of consumption even if the lower level of consumption is more frequent Implements full abstraction, so we would lose the tx hash uniqueness guarantee","title":"Consequences"},{"location":"ethereum-roadmap/ethereum-2.0/account-abstraction/#security-considerations","text":"To pay for the computing resources of nodes and miners and to incentivize the use of efficient code, there is a Gas cost associated with interactions of smart contracts. One of the attack vectors for the Ethereum blockchain is DoS (denial of service) by creating transactions that are computationally intensive. The efforts seen above are intended to be able to charge the correct amount of Gas without allowing an attack vector for DoS.","title":"Security Considerations"},{"location":"ethereum-roadmap/ethereum-2.0/account-abstraction/#resources","text":"Account Abstraction Link Tree Abstraction in Computer Science Tradeoffs in Account Abstraction Proposals A recap of where we are at on account abstraction Maximally Simple Account Abstraction without Gas Refund Work to Natively Integrate Eth1 into Eth2 The Ethereum Virtual Machine - How does it work?","title":"Resources"},{"location":"ethereum-roadmap/ethereum-2.0/deposit-contract/","text":"Ethereum 2.0 Deposit Contract Details Introduction This page provides the details of the deposit contract address that is used to send ETH from the Ethereum 1.0 chain to the Ethereum 2.0 in order to participate in Proof of Stake. If you are interested in staking in eth2, it is important that you make sure that you are sending your ETH to a correct deposit contract address. Please ensure that you only send your ETH to this community-sanctioned address: 0x00000000219ab540356cBB839Cbe05303d7705Fa We also highly recommend that you cross-reference this address with other trusted sources which are listed below. There will likely be many scam campaigns that will try to get you to send your ETH to an incorrect deposit contract address - please do not send any ETH to any address claiming to be a deposit contract unless you have verified it with other trusted sources first. Trusted Sources Ethereum.org Launchpad Ethereum.org Announcement Etherscan Link for the Deposit Contract","title":"Deposit Contract"},{"location":"ethereum-roadmap/ethereum-2.0/deposit-contract/#ethereum-20-deposit-contract-details","text":"","title":"Ethereum 2.0 Deposit Contract Details"},{"location":"ethereum-roadmap/ethereum-2.0/deposit-contract/#introduction","text":"This page provides the details of the deposit contract address that is used to send ETH from the Ethereum 1.0 chain to the Ethereum 2.0 in order to participate in Proof of Stake. If you are interested in staking in eth2, it is important that you make sure that you are sending your ETH to a correct deposit contract address. Please ensure that you only send your ETH to this community-sanctioned address: 0x00000000219ab540356cBB839Cbe05303d7705Fa We also highly recommend that you cross-reference this address with other trusted sources which are listed below. There will likely be many scam campaigns that will try to get you to send your ETH to an incorrect deposit contract address - please do not send any ETH to any address claiming to be a deposit contract unless you have verified it with other trusted sources first.","title":"Introduction"},{"location":"ethereum-roadmap/ethereum-2.0/deposit-contract/#trusted-sources","text":"Ethereum.org Launchpad Ethereum.org Announcement Etherscan Link for the Deposit Contract","title":"Trusted Sources"},{"location":"ethereum-roadmap/ethereum-2.0/eth-1.0-to-2.0-migration/","text":"Eth 1.0 to 2.0 Migration Introduction There are two important factors to consider when it comes to migrating from the Eth 1.0 chain to the Eth 2.0 chain. First, we have the need to migrate existing ether over and secondly, we have to transition the state of the chain over. Ether Migration The current proposal is that in phase 0 , users on the Eth 1.0 chain will be able to lock their ether up in a contract and will be credited with that same amount of ether on the Beacon Chain in Eth 2.0. At that point, they can stake that ether and begin to earn rewards on the Eth 2.0 chain. However, there is also some community interest in creating a two way bridge for that ether between the 1.0 and 2.0 chains. Pros and cons of each bridge are found below. One-way bridge Pros Cons Steady security, deposits can only go up High lockup risk for early stakers (at least ~1.5 years) Less complexity for early stages Potential for two coins via futures market Keeps forks isolated to each chain Fragmented community/economics Two-way bridge Pros Cons Less risk of lockup, more deposit inflow High volatility of total stake Keeps just a single ETH coin, no Beacon ETH (BETH) ( only if issuance of Eth 1.0 is changed ) Additional code complexity in early stages If issues arise with Eth 2.0, can bring coins back Risk of lockup is absent, will likely see more games played on early code Having a one-way bridge promises security, less complexity, but the lockup risk is significant as ether from Eth 1.0 is effectively burned. Transfers in phase 0 have been disabled since version 0.6.0 of the spec , with no current plans of being re-enabled. As resuming validator duties is tied to the transfer mechanism, this also means that if you decide to stop validating for a bit, you can't resume validating until such a time as the transfer functionality is implemented. Danny Ryan tells us more about why two-way bridge is not included in phase 0: \"The more we encumber the 1.0 consensus with 2.0, the more we tie the development and fork processes which would likely slow down the shipping/iterating on 2.0. It is not technically infeasible. It would require 2.0 light clients to be run by all 1.0 clients and some changes to the 1.0 consensus rules allowing for a similar burn/receipt method in the opposite direction. If we were to create fungibility, the path would be (1) release 2.0 beacon chain, (2) once stable beacon chain and light clients exist then require 1.0 clients to be light clients of 2.0 and finalize 1.0 with 2.0 and expose beacon chain state root to 1.0 (3) add additional consensus rules to 1.0 and 2.0 to handle the reminting on 1.0 with proof of burn on 2.0. I think it would be detrimental to 2.0 development to demand fungibility out the gate. Over time as light clients are released and we begin to finalize 1.0 with 2.0 if the community wants fungibility, then we can assess proposals then. ...we can't prove things about the beacon chain until we force 1.0 clients to agree on the current state of the beacon chain (thus the light client requirement). That's why it logically falls after finalizing 1.0 if the community really wants it.\" Validators will also be able to sell their Eth 2.0 ether balance to another validator, presumably at some discount to the prevailing ether price due to the lock-up and risks. Nonetheless, anyone can exit with funds if they really need to. This is a nice feature that will hopefully encourage more participants to feel comfortable committing to staking. Using BETH on shard chains (for smart contracts) will be available in phase 2. State Migration Old Proposal The old proposal is that in phase 2 , the state of the current Eth 1.0 chain will be transferred into a shard on the Eth 2.0 chain. At this point, all information from the Eth 1.0 chain will be available on the Eth 2.0 chain. Currently Lighthouse is working upon a state transition library . Replacing EVM with eWASM? Ethereum-flavoured web assembly is a deterministic smart contract execution engine built on the modern, standard WebAssembly virtual machine. It was first proposed in EIP 48 . It may be the future execution engine for smart contracts on the Ethereum blockchain and is the primary candidate to replace EVM (the Ethereum virtual machine) as part of the phase 2 of Ethereum 2.0 roadmap. Buterin also thinks that the EVM should be retired soon and contracts should be on Ewasm with an EVM interpreter ( source ). Since EVM makes use of 256-bit bytecode, smaller computations have to be converted to 256-bit strings before the EVM can process them. The WASM code, however, has been designed with production in mind. The elimination of precompiling is an added advantage for eWASM. WASM is an open standard (backed by Google, Microsoft, Apple) and because of this it will allow more programming languages (C/C++, JS, Go) to be used for smart contract development (Solidity included). Challenges of Old Proposal There are speculations that phase 2 might be divided into sub-forks and there will be a fork during/after phase 2 to bring in the Eth 1.0 state into a contract. Before we migrate the state there's going to be validators earning rewards, and overall the cumulative issuance of ether will go up. So what will be the economics of ETH throughout? New Proposal An Alternative Proposal for early transition is proposed by Vitalik Buterin, Which is getting accepted by among the wider community. Goals Getting rid of PoW chain & moving everything onto the beacon chain. Development of Stateless clients. Stateless Client Features A pure function for verifying blocks and witnesses, Along with a method for generating witnesses for the block. Available with multiple implementations. Eth1-side protocol changes to bound witness size to ~1-2 MB. Development of Stateless Clients requires much less rearchitecting to accomplish as it neither requires stateless miners or webassembly. Stateless Client is an important feature for the switch as it stops the malicious actions, according to Buterin . New beacon chain features State root of the eth1 system transfers to the state of shard 0 New Validator list known as eth1_friendly_validators will be added. Any validator has the right to register themselves as eth1-friendly (and deregister) at any time. The proposer on shard 0 at any given slot is chosen randomly out of the eth1-friendly validators. Committee of shard 0 verifies the blocks of shard 0, which are expressed in this format Block body(currently exists) & stateless client witness . All the other shard committees verify their shard blocks, where they would only be verifying data availability, not the state execution, as shard 0 is the only shard that would be running computation. Operation The eth1 system would \u201clive\u201d as shard 0 of eth2 (eventually, Will be one of the execution environments, but at the beginning, it can be the entire shard). Validators that want to participate in the eth1 system can register themselves as eth1-friendly validators and would be expected to maintain an eth1 full node in addition to their beacon node. The eth1 full node would download all blocks on shard 0 and maintain an updated full eth1 state. Advantages of New Proposal over the Old Proposal Earlier proposal transfers the whole Eth1.0 chain to Eth2 shard, but now it will get rid of PoW, which solves the challenges faced during the Old proposal. As instead of Miners there will eth1_friendly_validators to validate the blocks. Development of Stateless Clients requires much less rearchitecting to accomplish. According to Danny Ryan, the Eth2.0 lead: He thinks it only depends on a successful and stable phase 0 and Phase 1 release, which may be demonstrating the security instability. Core developers: They seem to be in the consensus of the Alternative Proposal and agreed that there is a decent amount of work to be done on the Eth1.x statelessness and is going to be a huge priority this year. But this approach is a much cleaner way for Eth1 to utilize the scalable data layer of Phase 1. There's a lot to learn and figure out before it comes into action but most of them seem positive about it. It was made official that the 'Alternative proposal for early eth1 <-> eth2 merge' model will be followed for the switch and the transition would still be done using a procedure similar to the eth1 -> eth2 transition .","title":"Ethereum 1.0 to 2.0 Migration"},{"location":"ethereum-roadmap/ethereum-2.0/eth-1.0-to-2.0-migration/#eth-10-to-20-migration","text":"","title":"Eth 1.0 to 2.0 Migration"},{"location":"ethereum-roadmap/ethereum-2.0/eth-1.0-to-2.0-migration/#introduction","text":"There are two important factors to consider when it comes to migrating from the Eth 1.0 chain to the Eth 2.0 chain. First, we have the need to migrate existing ether over and secondly, we have to transition the state of the chain over.","title":"Introduction"},{"location":"ethereum-roadmap/ethereum-2.0/eth-1.0-to-2.0-migration/#ether-migration","text":"The current proposal is that in phase 0 , users on the Eth 1.0 chain will be able to lock their ether up in a contract and will be credited with that same amount of ether on the Beacon Chain in Eth 2.0. At that point, they can stake that ether and begin to earn rewards on the Eth 2.0 chain. However, there is also some community interest in creating a two way bridge for that ether between the 1.0 and 2.0 chains. Pros and cons of each bridge are found below. One-way bridge Pros Cons Steady security, deposits can only go up High lockup risk for early stakers (at least ~1.5 years) Less complexity for early stages Potential for two coins via futures market Keeps forks isolated to each chain Fragmented community/economics Two-way bridge Pros Cons Less risk of lockup, more deposit inflow High volatility of total stake Keeps just a single ETH coin, no Beacon ETH (BETH) ( only if issuance of Eth 1.0 is changed ) Additional code complexity in early stages If issues arise with Eth 2.0, can bring coins back Risk of lockup is absent, will likely see more games played on early code Having a one-way bridge promises security, less complexity, but the lockup risk is significant as ether from Eth 1.0 is effectively burned. Transfers in phase 0 have been disabled since version 0.6.0 of the spec , with no current plans of being re-enabled. As resuming validator duties is tied to the transfer mechanism, this also means that if you decide to stop validating for a bit, you can't resume validating until such a time as the transfer functionality is implemented. Danny Ryan tells us more about why two-way bridge is not included in phase 0: \"The more we encumber the 1.0 consensus with 2.0, the more we tie the development and fork processes which would likely slow down the shipping/iterating on 2.0. It is not technically infeasible. It would require 2.0 light clients to be run by all 1.0 clients and some changes to the 1.0 consensus rules allowing for a similar burn/receipt method in the opposite direction. If we were to create fungibility, the path would be (1) release 2.0 beacon chain, (2) once stable beacon chain and light clients exist then require 1.0 clients to be light clients of 2.0 and finalize 1.0 with 2.0 and expose beacon chain state root to 1.0 (3) add additional consensus rules to 1.0 and 2.0 to handle the reminting on 1.0 with proof of burn on 2.0. I think it would be detrimental to 2.0 development to demand fungibility out the gate. Over time as light clients are released and we begin to finalize 1.0 with 2.0 if the community wants fungibility, then we can assess proposals then. ...we can't prove things about the beacon chain until we force 1.0 clients to agree on the current state of the beacon chain (thus the light client requirement). That's why it logically falls after finalizing 1.0 if the community really wants it.\" Validators will also be able to sell their Eth 2.0 ether balance to another validator, presumably at some discount to the prevailing ether price due to the lock-up and risks. Nonetheless, anyone can exit with funds if they really need to. This is a nice feature that will hopefully encourage more participants to feel comfortable committing to staking. Using BETH on shard chains (for smart contracts) will be available in phase 2.","title":"Ether Migration"},{"location":"ethereum-roadmap/ethereum-2.0/eth-1.0-to-2.0-migration/#state-migration","text":"","title":"State Migration"},{"location":"ethereum-roadmap/ethereum-2.0/eth-1.0-to-2.0-migration/#old-proposal","text":"The old proposal is that in phase 2 , the state of the current Eth 1.0 chain will be transferred into a shard on the Eth 2.0 chain. At this point, all information from the Eth 1.0 chain will be available on the Eth 2.0 chain. Currently Lighthouse is working upon a state transition library . Replacing EVM with eWASM? Ethereum-flavoured web assembly is a deterministic smart contract execution engine built on the modern, standard WebAssembly virtual machine. It was first proposed in EIP 48 . It may be the future execution engine for smart contracts on the Ethereum blockchain and is the primary candidate to replace EVM (the Ethereum virtual machine) as part of the phase 2 of Ethereum 2.0 roadmap. Buterin also thinks that the EVM should be retired soon and contracts should be on Ewasm with an EVM interpreter ( source ). Since EVM makes use of 256-bit bytecode, smaller computations have to be converted to 256-bit strings before the EVM can process them. The WASM code, however, has been designed with production in mind. The elimination of precompiling is an added advantage for eWASM. WASM is an open standard (backed by Google, Microsoft, Apple) and because of this it will allow more programming languages (C/C++, JS, Go) to be used for smart contract development (Solidity included). Challenges of Old Proposal There are speculations that phase 2 might be divided into sub-forks and there will be a fork during/after phase 2 to bring in the Eth 1.0 state into a contract. Before we migrate the state there's going to be validators earning rewards, and overall the cumulative issuance of ether will go up. So what will be the economics of ETH throughout?","title":"Old Proposal"},{"location":"ethereum-roadmap/ethereum-2.0/eth-1.0-to-2.0-migration/#new-proposal","text":"An Alternative Proposal for early transition is proposed by Vitalik Buterin, Which is getting accepted by among the wider community. Goals Getting rid of PoW chain & moving everything onto the beacon chain. Development of Stateless clients. Stateless Client Features A pure function for verifying blocks and witnesses, Along with a method for generating witnesses for the block. Available with multiple implementations. Eth1-side protocol changes to bound witness size to ~1-2 MB. Development of Stateless Clients requires much less rearchitecting to accomplish as it neither requires stateless miners or webassembly. Stateless Client is an important feature for the switch as it stops the malicious actions, according to Buterin . New beacon chain features State root of the eth1 system transfers to the state of shard 0 New Validator list known as eth1_friendly_validators will be added. Any validator has the right to register themselves as eth1-friendly (and deregister) at any time. The proposer on shard 0 at any given slot is chosen randomly out of the eth1-friendly validators. Committee of shard 0 verifies the blocks of shard 0, which are expressed in this format Block body(currently exists) & stateless client witness . All the other shard committees verify their shard blocks, where they would only be verifying data availability, not the state execution, as shard 0 is the only shard that would be running computation. Operation The eth1 system would \u201clive\u201d as shard 0 of eth2 (eventually, Will be one of the execution environments, but at the beginning, it can be the entire shard). Validators that want to participate in the eth1 system can register themselves as eth1-friendly validators and would be expected to maintain an eth1 full node in addition to their beacon node. The eth1 full node would download all blocks on shard 0 and maintain an updated full eth1 state. Advantages of New Proposal over the Old Proposal Earlier proposal transfers the whole Eth1.0 chain to Eth2 shard, but now it will get rid of PoW, which solves the challenges faced during the Old proposal. As instead of Miners there will eth1_friendly_validators to validate the blocks. Development of Stateless Clients requires much less rearchitecting to accomplish. According to Danny Ryan, the Eth2.0 lead: He thinks it only depends on a successful and stable phase 0 and Phase 1 release, which may be demonstrating the security instability. Core developers: They seem to be in the consensus of the Alternative Proposal and agreed that there is a decent amount of work to be done on the Eth1.x statelessness and is going to be a huge priority this year. But this approach is a much cleaner way for Eth1 to utilize the scalable data layer of Phase 1. There's a lot to learn and figure out before it comes into action but most of them seem positive about it. It was made official that the 'Alternative proposal for early eth1 <-> eth2 merge' model will be followed for the switch and the transition would still be done using a procedure similar to the eth1 -> eth2 transition .","title":"New Proposal"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-client-architecture/","text":"Eth 2.0 Client Architecture With Ethereum 2.0, we move away from the concept of a single full node to maintain the security of the network to two separate clients, the beacon node and the validator client. Beacon node The beacon node is the primary link in the beacon chain that forms the backbone of the Eth 2.0 blockchain. Below are the beacon node's responsibilities: Run and maintain the random beacon chain from the genesis block Sync this beacon chain with peer nodes via peer to peer (as Eth1.0 nodes do today when they maintain the Eth 1.0 blockchain) Process block attestations from validator clients/committees Serve as RPC server/endpoint for validator clients to leverage to propose/attest beacon blocks Handle beacon chain state transitions for each beacon block Serve as source of randomness for validator slot/shard assignment Sync and maintain current state of a subset of shards (anticipated to be the shards that connected validator clients are staking on) Listen for block hashes/validator deposits on Eth 1.0 chain for new validators Maintain the validator registry on the beacon chain, including adding and removing validators as necessary Maintain a synchronized clock with other beacon nodes to help enforce slashing rules for validator clients Beacon Node Hardware requirements Beacon nodes are intended to be high-performance, highly available platforms that can support connections to numerous validator clients and maintain ongoing p2p connectivity with other beacon nodes. As such, their hardware requirements are anticipated to be server-grade CPU/SSD/networking connections Beacon Node Staking requirements Beacon nodes are the fundamental building blocks of Eth 2.0. Theoretically, anyone can run a beacon node and sync the current state of the overall beacon chain as there is no staking requirement to operate a beacon node. It is expected that most wouldbe validators on Eth 2.0 will run their own beacon nodes as validator clients will need to trust the beacon node they connect to ensure that their block proposals/attestations are broadcasted correctly. Validator client The validator client is more or less equivalent to the miner on the Ethereum 1.0 blockchain and responsibilities are outlined below: Propose new blocks on shards to which the validator is assigned Participate in committees by signing attestations on blocks proposed by other validators within the committee Aggregrate attestations from other validators on a committee when assigned for broadcasting to the beacon chain Maintain an RPC connection to a trusted beacon node to listen for validator assignment/shuffling Sync assigned shard with beacon chain for each proof of custody period Validator Client Staking requirements Each validator client requires a 32 ETH stake in the deposit contract on the Eth 1.0 blockchain. Validator Client Hardware requirements Unlike miners on the Eth 1.0, PoW chain, PoS is designed to be resource efficient and run on consumer-grade hardware like a mobile phone or single-board-computer with minimal processing/storage capacity. Several of the Eth 2.0 teams have designed their clients to run on resource-constrained devices like a Raspberry Pi. Slashing Conditions Slashing is defined as when a validator is ejected from the active validator set and has some portion of deposited validator funds burned. This can occur for two specific violations as part of Phase 0 Proposer slashing - occurs when a validator signs two different beacon blocks in the same epoch Attester slashing - occurs when a validator signs two conflicting attestations Differences between beacon nodes and validator clients Networking - Beacon nodes are connected via p2p to other beacon nodes while validator clients maintain a dedicated connection with a single beacon node Staking - Only validator clients are required to stake Eth to be able to participate in the network Block creation - Only validator clients may propose/sign blocks and beacon nodes merely validate attestations and propogate blocks across the beacon chain Eth 2.0 APIs There are two main APIs defined by the Eth 2.0 spec that should be supported by beacon nodes. All APIs are currently defined using a REST spec served over HTTP with a JSON return type. Beacon Node API The Beacon Node API allows for interactions between beacon nodes, including p2p networking connectivity as well as getting current beacon chain state and blocks from other nodes. Validator Client API The Validator Client API is specifically designed for the interactions between a single validator client and the beacon node it is connected to for purposes of propagating block proposals and attestations to the network.","title":"Ethereum 2.0 Client Architecture"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-client-architecture/#eth-20-client-architecture","text":"With Ethereum 2.0, we move away from the concept of a single full node to maintain the security of the network to two separate clients, the beacon node and the validator client.","title":"Eth 2.0 Client Architecture"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-client-architecture/#beacon-node","text":"The beacon node is the primary link in the beacon chain that forms the backbone of the Eth 2.0 blockchain. Below are the beacon node's responsibilities: Run and maintain the random beacon chain from the genesis block Sync this beacon chain with peer nodes via peer to peer (as Eth1.0 nodes do today when they maintain the Eth 1.0 blockchain) Process block attestations from validator clients/committees Serve as RPC server/endpoint for validator clients to leverage to propose/attest beacon blocks Handle beacon chain state transitions for each beacon block Serve as source of randomness for validator slot/shard assignment Sync and maintain current state of a subset of shards (anticipated to be the shards that connected validator clients are staking on) Listen for block hashes/validator deposits on Eth 1.0 chain for new validators Maintain the validator registry on the beacon chain, including adding and removing validators as necessary Maintain a synchronized clock with other beacon nodes to help enforce slashing rules for validator clients","title":"Beacon node"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-client-architecture/#beacon-node-hardware-requirements","text":"Beacon nodes are intended to be high-performance, highly available platforms that can support connections to numerous validator clients and maintain ongoing p2p connectivity with other beacon nodes. As such, their hardware requirements are anticipated to be server-grade CPU/SSD/networking connections","title":"Beacon Node Hardware requirements"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-client-architecture/#beacon-node-staking-requirements","text":"Beacon nodes are the fundamental building blocks of Eth 2.0. Theoretically, anyone can run a beacon node and sync the current state of the overall beacon chain as there is no staking requirement to operate a beacon node. It is expected that most wouldbe validators on Eth 2.0 will run their own beacon nodes as validator clients will need to trust the beacon node they connect to ensure that their block proposals/attestations are broadcasted correctly.","title":"Beacon Node Staking requirements"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-client-architecture/#validator-client","text":"The validator client is more or less equivalent to the miner on the Ethereum 1.0 blockchain and responsibilities are outlined below: Propose new blocks on shards to which the validator is assigned Participate in committees by signing attestations on blocks proposed by other validators within the committee Aggregrate attestations from other validators on a committee when assigned for broadcasting to the beacon chain Maintain an RPC connection to a trusted beacon node to listen for validator assignment/shuffling Sync assigned shard with beacon chain for each proof of custody period","title":"Validator client"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-client-architecture/#validator-client-staking-requirements","text":"Each validator client requires a 32 ETH stake in the deposit contract on the Eth 1.0 blockchain.","title":"Validator Client Staking requirements"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-client-architecture/#validator-client-hardware-requirements","text":"Unlike miners on the Eth 1.0, PoW chain, PoS is designed to be resource efficient and run on consumer-grade hardware like a mobile phone or single-board-computer with minimal processing/storage capacity. Several of the Eth 2.0 teams have designed their clients to run on resource-constrained devices like a Raspberry Pi.","title":"Validator Client Hardware requirements"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-client-architecture/#slashing-conditions","text":"Slashing is defined as when a validator is ejected from the active validator set and has some portion of deposited validator funds burned. This can occur for two specific violations as part of Phase 0 Proposer slashing - occurs when a validator signs two different beacon blocks in the same epoch Attester slashing - occurs when a validator signs two conflicting attestations","title":"Slashing Conditions"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-client-architecture/#differences-between-beacon-nodes-and-validator-clients","text":"Networking - Beacon nodes are connected via p2p to other beacon nodes while validator clients maintain a dedicated connection with a single beacon node Staking - Only validator clients are required to stake Eth to be able to participate in the network Block creation - Only validator clients may propose/sign blocks and beacon nodes merely validate attestations and propogate blocks across the beacon chain","title":"Differences between beacon nodes and validator clients"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-client-architecture/#eth-20-apis","text":"There are two main APIs defined by the Eth 2.0 spec that should be supported by beacon nodes. All APIs are currently defined using a REST spec served over HTTP with a JSON return type.","title":"Eth 2.0 APIs"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-client-architecture/#beacon-node-api","text":"The Beacon Node API allows for interactions between beacon nodes, including p2p networking connectivity as well as getting current beacon chain state and blocks from other nodes.","title":"Beacon Node API"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-client-architecture/#validator-client-api","text":"The Validator Client API is specifically designed for the interactions between a single validator client and the beacon node it is connected to for purposes of propagating block proposals and attestations to the network.","title":"Validator Client API"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-economics/","text":"Eth 2.0 Economics Introduction The Ethereum 2.0 upgrade will bring with it a switch from Proof of Work to Proof of Stake. This means instead of miners competing for a block reward, validators will be paid to perform assigned rules and secure the network. It's vitally important to get the economics of staking right so that the network stays healthy and secure. If the incentive to stake is too low, the network will not get the minimum amount of validators needed to maintain consistent cross-shard communication. If the incentive is too high, the network is overpaying for security and inflating at a rate that is detrimental to the economics of the network as a whole. There are a few considerations when it comes to how many validators the network \"needs\". According to the latest spec, for phase 0 there is a 16,384 validator count requirement for the chain to begin. For phase 1+ the recommended minimum validators per committee is 128. In order for all shards to crosslink (learn eachothers state) on every slot, for 64 shards that would be 262,144 validators and 8,388,608 total ETH staked. Terms NOTE: Some of these are taken from https://github.com/ethereum/eth2.0-specs/blob/master/specs/phase0/beacon-chain.md Validator - a participant in the Ethereum 2.0 consensus. You can become one by depositing 32 ETH into the deposit contract. Committee - a (pseudo-) randomly sampled subset of active validators, chosen to perform duties for a given slot on a selected shard. Issuance Rate - The annualized rate at which ETH supply grows. Return Rate - The annualized rate at which validators are rewarded (in ETH). Staking Rewards In order to incentivize those that have ETH to stake in the network, validators will be rewarded for performing their assigned duties. Every 6 minutes, a validator is assigned a duty and is rewarded if it is performed. This reward is a sliding scale based on total network stake. So if total ETH staked is very low, the return rate per validator increases, but as stake rises, total annual issuance increases to fund those validators, while they individually will receive less rewards. The current suggested payouts are as follows: ETH validating Max annual issuance Max annual network issuance % Max annual return rate (for validators) 1,000,000 181,019 0.17% 18.10% 3,000,000 313,534 0.30% 10.45% 10,000,000 572,433 0.54% 5.72% 30,000,000 991,483 0.94% 3.30% 100,000,000 1,810,193 1.71% 1.81% According to Vitalik Buterin , these are maximum numbers and there are many factors that can decrease the total issuance amounts. They are: Validators going offline. Combining the individual and collective penalties, every 1% of validators offline cuts total issuance by around 3%, and if more than 33% ever go offline at once, this will lead to finality leaking which will incur extra penalties for offline validators. Validators getting slashed. Probably will happen infrequently in practice. Transaction fees being burned due to EIP 1559 (estimate ~10k ETH/year initially while usage is still low, ramping up to hopefully hundreds of thousands of ETH/year eventually) Staking Costs and Risks Validating and earning rewards is not a free lunch. There are many things to consider for one to become a validator. These factors will be considered by every validator when contemplating if the staking rewards are \"worth it\". They are: Computing cost Users will need to run a validators client at a minimum and likely a beacon node as well. This requires computing resources. Beacon Node: capable of running on a raspberry pi 4 in phase 0, will want to run 1 of these. Validator client: lightweight and 1000s of validators can run on one client. Rough estimates on costs are $120/year for a beacon node and validator client. Capital acquisition and lockup The user must acquire the necessary 32 Ether and send a one-way transaction to the deposit contract. Stakers can't directly sell staked Ether while it's staked. For phase 0, funds will be locked on the beacon chain until phase 1. It is possible to stop validating, but after submitting an exit you cannot resume or withdraw until after phase 1. Code Risk By staking your ETH, you are trusting the staking software you are running on to perform its duties accurately. However, with block explorers and validator dashboards, it will be easy to see if anything is going wrong. It is the implementors role to create functional software that can work reliably. There is also a risk of network-wide flaws, however these can mostly be solved socially through hard forks if needed. General uptime and maintenance cost Users can stay net-positive in earnings if they are online >50% of the time (assuming normal network conditions). However, you should not stake if you're not able to commit to strong uptime in some form. If greater than 1/3rd of the network goes offline at once, finality cannot be reached. If this continues for over 4 epochs (25 minutes), all offline validators will incur finality leak penalties. If a user wishes to distribute their validators among multiple setups, maintenance cost and worry of the infrastructure comes into play. Security risk Beyond failures in the client code, stakers are responsible for the security environment of their validator clients (internet connection, operating system, hardware, etc.). If their validator client gets hacked due to a security failure, leading to forced downtime and/or misbehavior, there's currently no way to recover funds. This risk is similar to the risk of getting Ether stolen from a wallet due to a hacked laptop or smartphone. With decentralized autonomy comes responsibility. A recommended read for those interested in validating is: 8 Things Every Validator Should Know Before Staking . Competition A very important factor in determining if staking ETH is worth it is comparing the net reward versus competition. Decentralized Finance Decentralized finance applications such as Compound Finance , Dharma and Maker . These applications offer ways for users to lock up ETH and gain a reward. Trying to understand what these offerings are or will be is something that should be considered. Other Investment Vehicles More traditional investment alternatives such as bonds, certificates of deposit, savings account, etc. can be considered competition to staking as well. While not as directly influential to the decent as DeFi apps, they need to be considered. Resources ETH2 Staking Calculator 8 Things Every Validator Should Know Before Staking","title":"Ethereum 2.0 Economics"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-economics/#eth-20-economics","text":"","title":"Eth 2.0 Economics"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-economics/#introduction","text":"The Ethereum 2.0 upgrade will bring with it a switch from Proof of Work to Proof of Stake. This means instead of miners competing for a block reward, validators will be paid to perform assigned rules and secure the network. It's vitally important to get the economics of staking right so that the network stays healthy and secure. If the incentive to stake is too low, the network will not get the minimum amount of validators needed to maintain consistent cross-shard communication. If the incentive is too high, the network is overpaying for security and inflating at a rate that is detrimental to the economics of the network as a whole. There are a few considerations when it comes to how many validators the network \"needs\". According to the latest spec, for phase 0 there is a 16,384 validator count requirement for the chain to begin. For phase 1+ the recommended minimum validators per committee is 128. In order for all shards to crosslink (learn eachothers state) on every slot, for 64 shards that would be 262,144 validators and 8,388,608 total ETH staked.","title":"Introduction"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-economics/#terms","text":"NOTE: Some of these are taken from https://github.com/ethereum/eth2.0-specs/blob/master/specs/phase0/beacon-chain.md Validator - a participant in the Ethereum 2.0 consensus. You can become one by depositing 32 ETH into the deposit contract. Committee - a (pseudo-) randomly sampled subset of active validators, chosen to perform duties for a given slot on a selected shard. Issuance Rate - The annualized rate at which ETH supply grows. Return Rate - The annualized rate at which validators are rewarded (in ETH).","title":"Terms"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-economics/#staking-rewards","text":"In order to incentivize those that have ETH to stake in the network, validators will be rewarded for performing their assigned duties. Every 6 minutes, a validator is assigned a duty and is rewarded if it is performed. This reward is a sliding scale based on total network stake. So if total ETH staked is very low, the return rate per validator increases, but as stake rises, total annual issuance increases to fund those validators, while they individually will receive less rewards. The current suggested payouts are as follows: ETH validating Max annual issuance Max annual network issuance % Max annual return rate (for validators) 1,000,000 181,019 0.17% 18.10% 3,000,000 313,534 0.30% 10.45% 10,000,000 572,433 0.54% 5.72% 30,000,000 991,483 0.94% 3.30% 100,000,000 1,810,193 1.71% 1.81% According to Vitalik Buterin , these are maximum numbers and there are many factors that can decrease the total issuance amounts. They are: Validators going offline. Combining the individual and collective penalties, every 1% of validators offline cuts total issuance by around 3%, and if more than 33% ever go offline at once, this will lead to finality leaking which will incur extra penalties for offline validators. Validators getting slashed. Probably will happen infrequently in practice. Transaction fees being burned due to EIP 1559 (estimate ~10k ETH/year initially while usage is still low, ramping up to hopefully hundreds of thousands of ETH/year eventually)","title":"Staking Rewards"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-economics/#staking-costs-and-risks","text":"Validating and earning rewards is not a free lunch. There are many things to consider for one to become a validator. These factors will be considered by every validator when contemplating if the staking rewards are \"worth it\". They are: Computing cost Users will need to run a validators client at a minimum and likely a beacon node as well. This requires computing resources. Beacon Node: capable of running on a raspberry pi 4 in phase 0, will want to run 1 of these. Validator client: lightweight and 1000s of validators can run on one client. Rough estimates on costs are $120/year for a beacon node and validator client. Capital acquisition and lockup The user must acquire the necessary 32 Ether and send a one-way transaction to the deposit contract. Stakers can't directly sell staked Ether while it's staked. For phase 0, funds will be locked on the beacon chain until phase 1. It is possible to stop validating, but after submitting an exit you cannot resume or withdraw until after phase 1. Code Risk By staking your ETH, you are trusting the staking software you are running on to perform its duties accurately. However, with block explorers and validator dashboards, it will be easy to see if anything is going wrong. It is the implementors role to create functional software that can work reliably. There is also a risk of network-wide flaws, however these can mostly be solved socially through hard forks if needed. General uptime and maintenance cost Users can stay net-positive in earnings if they are online >50% of the time (assuming normal network conditions). However, you should not stake if you're not able to commit to strong uptime in some form. If greater than 1/3rd of the network goes offline at once, finality cannot be reached. If this continues for over 4 epochs (25 minutes), all offline validators will incur finality leak penalties. If a user wishes to distribute their validators among multiple setups, maintenance cost and worry of the infrastructure comes into play. Security risk Beyond failures in the client code, stakers are responsible for the security environment of their validator clients (internet connection, operating system, hardware, etc.). If their validator client gets hacked due to a security failure, leading to forced downtime and/or misbehavior, there's currently no way to recover funds. This risk is similar to the risk of getting Ether stolen from a wallet due to a hacked laptop or smartphone. With decentralized autonomy comes responsibility. A recommended read for those interested in validating is: 8 Things Every Validator Should Know Before Staking .","title":"Staking Costs and Risks"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-economics/#competition","text":"A very important factor in determining if staking ETH is worth it is comparing the net reward versus competition. Decentralized Finance Decentralized finance applications such as Compound Finance , Dharma and Maker . These applications offer ways for users to lock up ETH and gain a reward. Trying to understand what these offerings are or will be is something that should be considered. Other Investment Vehicles More traditional investment alternatives such as bonds, certificates of deposit, savings account, etc. can be considered competition to staking as well. While not as directly influential to the decent as DeFi apps, they need to be considered.","title":"Competition"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-economics/#resources","text":"ETH2 Staking Calculator 8 Things Every Validator Should Know Before Staking","title":"Resources"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases-german/","text":"Phasen in Ethereum 2.0 Da sich Ethereum 2.0 aktuell stark in der Forschungs- und Entwicklungsphase befindet, kann diese Seite kurzfristig veraltet sein. Es wird versucht, sie nach bester M\u00f6glichkeit auf dem neuesten Stand zu halten. Einf\u00fchrung Ethereums gro\u00dfes Netzwerk-Upgrade, genannt Ethereum 2.0, Eth2.0 oder auch Serenity, wird Sharding, Proof of Stake, eine neue virtuelle Maschine (eWASM) und weitere Neuerungen einf\u00fchren. Es ist wichtig zu verstehen, dass dieses Upgrade nicht auf einmal stattfinden wird, sondern in verschiedenen Phasen ausgerollt wird. Dieses Dokument versucht, ein Bezugspunkt f\u00fcr diese Phasen und ihre jeweiligen Inhalte zu sein. Designziele Der Ethereum-Forscher Danny Ryan hat 5 verschiedene Designziele f\u00fcr Ethereum 2.0 festgelegt : Dezentralisierung: Damit ein handels\u00fcblicher Laptop mit begrenzten Ressourcen ausreicht, um die Validierung/Verarbeitung von O(1) Shards auszuf\u00fchren (einschlie\u00dflich jeder systemischen Validierung wie die der Beacon-Chain). Widerstandsf\u00e4higkeit: Damit das Netzwerk auch bei gro\u00dfen Spaltungen (Forks) oder wenn eine sehr gro\u00dfe Anzahl von Nodes offline geht, stabil und funktionsf\u00e4hig bleibt. Sicherheit: Sodass Crypto- und Designtechniken verwendet werden, die eine gro\u00dfe Anzahl von Validatoren/Nodes insgesamt und per Zeiteinheit erm\u00f6glichen. Einfachheit: Damit die Komplexit\u00e4t minimiert wird, wenn auch auf Kosten einiger Effizienzverluste. Langlebigkeit: Damit alle Komponenten so ausgew\u00e4hlt werden, dass sie entweder direkt Quantensicherheit besitzen oder einfach ausgetauscht werden k\u00f6nnen, wenn quantensichere Komponenten verf\u00fcgbar sind. Phase 0 \u2013 Beacon-Chain Was beinhaltet sie? Phase 0 beinhaltet den Start der sogenannten Beacon-Chain. Die Beacon-Chain verwaltet das \u201eCasper Proof of Stake\u201c-Protokoll f\u00fcr sich selbst und alle Shard-Chains. Wie Ben Edgington es ausdr\u00fcckt : \u201eEs gibt eine Reihe an auszuf\u00fchrenden Aufgaben: Die Verwaltung von Validatoren und deren Stakes/Eins\u00e4tze, die Nominierung des ausgew\u00e4hlten Block-Vorschlagenden f\u00fcr jeden Shard in jedem Schritt, die Organisation von Validatoren in Aussch\u00fcssen zum Abstimmen \u00fcber die vorgeschlagenen Bl\u00f6cke, die Anwendung der Konsensregeln, die Anwendung von Pr\u00e4mien und Strafen f\u00fcr Validatoren und die Funktion als Ankerpunkt, an dem die Shards ihre Status registrieren, um Shard-\u00fcbergreifende-Transaktionen (Cross-Shard-Transaktionen) zu erm\u00f6glichen.\u201c Die prim\u00e4re Quelle der Nutzlast auf der Beacon-Chain werden \u201eBescheinigungen\u201c sein. Bescheinigungen sind Verf\u00fcgbarkeitsabstimmungen f\u00fcr einen Shard-Block und gleichzeitig \u201eProof of Stake\u201c-Abstimmungen f\u00fcr einen Beacon-Block. Eine ausreichende Anzahl von Bescheinigungen f\u00fcr denselben Shard-Block erzeugt einen \u201eCrosslink\u201c, der das Shard-Segment bis zu diesem Shard-Block in die Beacon-Chain best\u00e4tigt. Phase 0 wird Casper das Friendly Finality Gadget (FFG) f\u00fcr die Endg\u00fcltigkeit verwenden. Die Endg\u00fcltigkeit bedeutet einfach ausgedr\u00fcckt, dass eine bestimmte Operation nach ihrer Durchf\u00fchrung f\u00fcr immer in der Geschichte der Blockchain festgeschrieben ist und nichts diese Operation r\u00fcckg\u00e4ngig machen kann. ETH2: Das neue Ether Phase 0 f\u00fchrt ETH2 ein, ein neues Asset f\u00fcr Staker (Validatoren), das in der Beacon-Chain verwendet wird. Es wird durch zwei Methoden generiert: Als Belohnung f\u00fcr die Validierung der Beacon-Chain (und Shards nach Phase 1). Mit dem Kauf f\u00fcr 1 ETH durch einen ETH1.X-Nutzer \u00fcber einen Registrierungsvertrag . Der Vertrag bezieht sich darauf als Hinterlegung. Derzeit gibt es keine M\u00f6glichkeit, ETH2 in Phase 0 aus der Beacon-Chain abzuheben oder zu \u00fcbertragen. Nach der Einzahlung im ETH1.x Validator-Vertrag wird das ETH1 Asset effektiv verbrannt. Beacon-Chain-Validatoren beobachten diesen Vertrag und \u00fcbermitteln Einlageninformationen an die Beacon-Chain, die dann entsprechend ETH2 an die Einleger ausgibt. Zu guter Letzt wird die Beacon-Chain eine gute Qualit\u00e4t von Zuf\u00e4lligkeit f\u00fcr den Rest des Systems erzeugen (verteilt, \u00fcberpr\u00fcfbar, unvorhersehbar und (angemessen) unparteiisch). Es wird RANDAO verwenden, womit von vielen Teilnehmern bereitgestellte Beitr\u00e4ge (individuelle Zufallszahlen) ganz unkompliziert in einer einzigen Ausgabenummer zusammengefasst werden k\u00f6nnen. Dies wird verwendet, um Validatoren in Block-Vorschl\u00e4ger und Aussch\u00fcsse f\u00fcr Entscheidungen zu organisieren. Wie wird das Netzwerk aussehen? Sobald Phase 0 abgeschlossen ist, wird es zwei aktive Ethereum-Blockchains geben. Der Klarheit halber nennen wir sie die Eth1-Chain (aktuelle, PoW \u00f6ffentliche Blockchain) und die Eth2-Chain (neue Beacon-Chain). W\u00e4hrend dieser Phase k\u00f6nnen Benutzer ihr ETH von der Eth1-Chain in die Eth2-Chain eintauschen und die Rolle von Validatoren einnehmen. Allerdings k\u00f6nnen sie diese ETH (vorl\u00e4ufig) NICHT zur Eth1-Chain zur\u00fcckmigrieren. Ein Grund f\u00fcr diesen Schritt k\u00f6nnte die Auszahlung von Zinsen in ETH in der Eth2-Chain sein. Um die Beacon-Chain ausf\u00fchren zu k\u00f6nnen, brauchst du einen Beacon-Chain-Client. Dieser wird derzeit getrennt von der bekannten Suite von standardm\u00e4\u00dfigen Ethereum-Clients (Geth, Parity, Pantheon, etc.) von einer Reihe von Teams entwickelt. Die meisten Eth2.0-Teams ver\u00f6ffentlichen regelm\u00e4\u00dfige Updates \u00fcber ihren Entwicklungsfortschritt der Clients. Einige Teams bieten Beitragenden Belohnungen an, um mehr und mehr Entwickler in den Aufbau der Eth2.0-Architektur einzubinden. Du kannst f\u00fcr Beitr\u00e4ge hier Gitcoin-Pr\u00e4mien bekommen. Isoliert ist die Beacon-Chain nicht besonders n\u00fctzlich. Aber als erste zu realisierende Komponente von Ethereum 2.0 ist es das Fundament des gesamten zuk\u00fcnftigen Systems. Wichtige \u00dcberlegungen ETH2 ist nach Abschluss der Phase 2 zu und von Shards frei \u00fcbertragbar (jedoch kann sich dies noch in Zukunft \u00e4ndern). Es wird eine Mindestmenge an ETH-Stakes notwendig sein, um die Beacon-Chain zu Beginn zu starten. Dies ist definiert als CHAIN_START_FULL_DEPOSIT_THRESHOLD im Einlagen-Vertrag, der auf der Eth1.0-Blockchain eingerichtet wird . Um ein Validator zu werden, musst du 32 ETH2 staken. W\u00e4hrend der Phase 0 werden alle Transaktionen und Smart-Contract-Berechnungen weiterhin auf der Eth1-Chain laufen. Phase 1 - Shard-Chains Was beinhalten sie? Shard-Chains sind der Schl\u00fcssel zu zuk\u00fcnftiger Skalierbarkeit, da sie einen parallelen Transaktionsdurchsatz erm\u00f6glichen. In Phase 1 werden 64 davon eingesetzt (mit der Option, im Laufe der Zeit mehr hinzuzuf\u00fcgen). Phase 1 befasst sich in erster Linie mit der Konstruktion, G\u00fcltigkeit und dem Konsens der Daten dieser Shard-Chains. Phase 1 gibt weder die Ausf\u00fchrung des Shard-Chain-Zustands noch die Kontost\u00e4nde an. Es erscheint eher wie ein Testlauf f\u00fcr die Sharding-Struktur als ein Versuch, Shards zu skalieren. Die Beacon-Chain behandelt Shard-Chain-Bl\u00f6cke als einfache Ansammlung von Bits ohne Struktur oder Bedeutung. Crosslinks Periodisch wird der aktuelle Zustand (die \u201ekombinierte Datenwurzel\u201c) jedes Shards in einem Beacon-Chain-Block als Querverbindung aufgezeichnet. Wenn der Beacon-Chain Block finalisiert wurde, wird auch der entsprechende Shard Block als finalisiert angesehen, und andere Shards wissen, dass sie sich bei Cross-Shard-Transaktionen auf diesen verlassen k\u00f6nnen. Crosslinks sind eine Reihe von Signaturen eines Ausschusses, die f\u00fcr einen Block in einer Shard-Chain best\u00e4tigt werden und in die Beacon-Chain aufgenommen werden k\u00f6nnen. Crosslinks sind die wichtigsten Verbindungen, mit denen die Beacon-Chain den aktualisierten Zustand der Shard-Chains \"erlernt\". Crosslinks dienen auch als Infrastruktur f\u00fcr asynchrone Cross-Shard Kommunikation. Shard-Validatoren, die von der Beacon-Chain f\u00fcr jeden Shard an jedem Slot zuf\u00e4llig ausgew\u00e4hlt werden, kommen lediglich zu einer Einigung \u00fcber den Inhalt jedes Blocks. Sie best\u00e4tigen den Inhalt und Status des Shards durch das Erstellen von Crosslinks. Es spielt keine Rolle, welche Informationen in Shard-Bl\u00f6cken erscheinen, solange alle Aussch\u00fcsse einen Konsens erzielen und die Beacon-Chain regelm\u00e4\u00dfig aktualisieren. Wie sieht das Netzwerk aus? Die Eth1- und Eth2-Chains werden nach Phase 1 weiterhin parallel laufen. Wichtige \u00dcberlegungen In Phase 0, 1 und 2 bleibt die Main PoW-Chain (Eth1) live, w\u00e4hrend Tests und \u00dcberg\u00e4nge auf der Eth2-Chain stattfinden. Dies bedeutet, dass Belohnungen sowohl an Ethereum 2.0-Validatoren als auch an die normalen PoW-Miner ausgezahlt werden. Daher kann die kombinierte Inflation der beiden Blockchains zun\u00e4chst steigen, jedoch wird sie danach beginnen, sich in Richtung 0-1% zu bewegen, da auf die alte PoW-Blockchain allm\u00e4hlich weniger Wert gelegt wird. Phase 2 - State Execution Was beinhaltet sie? Phase 2 ist der Zeitpunkt, an dem sich die Funktionalit\u00e4t des gesamten Systems vereint. Shard-Chains werden von einfachen Datencontainern in einen strukturierten Kettenzustand \u00fcberf\u00fchrt und Smart-Contracts werden wieder eingef\u00fchrt. Jeder Shard verwaltet eine virtuelle Maschine basierend auf eWASM . Phase 2 unterst\u00fctzt Konten, Vertr\u00e4ge, Zust\u00e4nde und andere Abstraktionen, die wir aus Solidity kennen. Wir k\u00f6nnen erwarten, dass bekannte Werkzeuge wie Truffle, Solc oder Ganache portiert werden, um eWASM vor oder w\u00e4hrend Phase 2 zu unterst\u00fctzen. Phase 2 f\u00fchrt auch das Konzept der Ausf\u00fchrungsumgebungen (Execution Environments, EEs) ein. EEs in einem Shard k\u00f6nnen auf jede Weise konstruiert werden, die ein Entwickler f\u00fcr passend h\u00e4lt. Es k\u00f6nnte eine EE f\u00fcr eine UTXO-Chain geben, ein System im Libra-Stil, eine EE f\u00fcr einen Geb\u00fchren-Markt-Verteiler oder andere. Jeder Shard hat Zugriff auf alle Ausf\u00fchrungsumgebungen und besitzt die M\u00f6glichkeit, Transaktionen in diesen zu t\u00e4tigen sowie Smart-Contracts auszuf\u00fchren und mit ihnen zu interagieren. Beachte, dass sich das Konzept von Ausf\u00fchrungsumgebungen noch immer in intensiver Forschungs- und Entwicklungsarbeit befindet. Wichtige \u00dcberlegungen Eine dApp muss ausw\u00e4hlen, auf welchem Shard sie sich befinden will. Diese Entscheidung ist wichtig, weil die Cross-Shard Kommunikation in Eth2 unterschiedlich ist, da sie nicht synchron ist, was wiederum bedeutet, dass zwischen den Shards eine gewisse Flexibilit\u00e4t verloren geht Eine dApp m\u00fcsste ziemlich gro\u00dfe Datenmengen beinhalten, um alle Ressourcen in einem gegebenen Shard zu verbrauchen und damit das Ausbreiten auf mehrere Shards zu rechtfertigen. Diese Phase stattet Shards mit eWASM als EVM 2.0 aus. Es bleibt offen, wann und wie Ethereum 1.0-Konten und -Vertr\u00e4ge auf Ethereum 2.0 migriert werden. Es gibt einige Upgrade-Pl\u00e4ne Wie geht es weiter? Die Sharding-Roadmap schl\u00e4gt nach dem offiziellen Wiki 6 Phasen vor. Ethereum-Forscher Justin Drake ist der festen \u00dcberzeugung, dass die Sharding Phase 1 und 2 in den Jahren 2020 und 2021 erfolgen wird (vorausgesetzt, dass die Beacon-Chain Anfang 2020 startet). Ab Phase 3 ist jede Art der Vorhersage Spekulation, da sich voraussichtlich viel ver\u00e4ndern wird. Du kannst dir das wiki ansehen, um weitere Informationen zu erhalten. Ressourcen Ethereum 2.0 Info Eth 2.0 Specs Phase 0 for Humans Sharding Roadmap State of Ethereum Protocol Ethereum 2.0 Design Goals Q&A Session ETHMagicians eWASM","title":"Ethereum 2.0 Phasen - EthHub"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases-german/#phasen-in-ethereum-20","text":"Da sich Ethereum 2.0 aktuell stark in der Forschungs- und Entwicklungsphase befindet, kann diese Seite kurzfristig veraltet sein. Es wird versucht, sie nach bester M\u00f6glichkeit auf dem neuesten Stand zu halten.","title":"Phasen in Ethereum 2.0"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases-german/#einfuhrung","text":"Ethereums gro\u00dfes Netzwerk-Upgrade, genannt Ethereum 2.0, Eth2.0 oder auch Serenity, wird Sharding, Proof of Stake, eine neue virtuelle Maschine (eWASM) und weitere Neuerungen einf\u00fchren. Es ist wichtig zu verstehen, dass dieses Upgrade nicht auf einmal stattfinden wird, sondern in verschiedenen Phasen ausgerollt wird. Dieses Dokument versucht, ein Bezugspunkt f\u00fcr diese Phasen und ihre jeweiligen Inhalte zu sein.","title":"Einf\u00fchrung"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases-german/#designziele","text":"Der Ethereum-Forscher Danny Ryan hat 5 verschiedene Designziele f\u00fcr Ethereum 2.0 festgelegt : Dezentralisierung: Damit ein handels\u00fcblicher Laptop mit begrenzten Ressourcen ausreicht, um die Validierung/Verarbeitung von O(1) Shards auszuf\u00fchren (einschlie\u00dflich jeder systemischen Validierung wie die der Beacon-Chain). Widerstandsf\u00e4higkeit: Damit das Netzwerk auch bei gro\u00dfen Spaltungen (Forks) oder wenn eine sehr gro\u00dfe Anzahl von Nodes offline geht, stabil und funktionsf\u00e4hig bleibt. Sicherheit: Sodass Crypto- und Designtechniken verwendet werden, die eine gro\u00dfe Anzahl von Validatoren/Nodes insgesamt und per Zeiteinheit erm\u00f6glichen. Einfachheit: Damit die Komplexit\u00e4t minimiert wird, wenn auch auf Kosten einiger Effizienzverluste. Langlebigkeit: Damit alle Komponenten so ausgew\u00e4hlt werden, dass sie entweder direkt Quantensicherheit besitzen oder einfach ausgetauscht werden k\u00f6nnen, wenn quantensichere Komponenten verf\u00fcgbar sind.","title":"Designziele"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases-german/#phase-0-beacon-chain","text":"","title":"Phase 0 \u2013 Beacon-Chain"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases-german/#was-beinhaltet-sie","text":"Phase 0 beinhaltet den Start der sogenannten Beacon-Chain. Die Beacon-Chain verwaltet das \u201eCasper Proof of Stake\u201c-Protokoll f\u00fcr sich selbst und alle Shard-Chains. Wie Ben Edgington es ausdr\u00fcckt : \u201eEs gibt eine Reihe an auszuf\u00fchrenden Aufgaben: Die Verwaltung von Validatoren und deren Stakes/Eins\u00e4tze, die Nominierung des ausgew\u00e4hlten Block-Vorschlagenden f\u00fcr jeden Shard in jedem Schritt, die Organisation von Validatoren in Aussch\u00fcssen zum Abstimmen \u00fcber die vorgeschlagenen Bl\u00f6cke, die Anwendung der Konsensregeln, die Anwendung von Pr\u00e4mien und Strafen f\u00fcr Validatoren und die Funktion als Ankerpunkt, an dem die Shards ihre Status registrieren, um Shard-\u00fcbergreifende-Transaktionen (Cross-Shard-Transaktionen) zu erm\u00f6glichen.\u201c Die prim\u00e4re Quelle der Nutzlast auf der Beacon-Chain werden \u201eBescheinigungen\u201c sein. Bescheinigungen sind Verf\u00fcgbarkeitsabstimmungen f\u00fcr einen Shard-Block und gleichzeitig \u201eProof of Stake\u201c-Abstimmungen f\u00fcr einen Beacon-Block. Eine ausreichende Anzahl von Bescheinigungen f\u00fcr denselben Shard-Block erzeugt einen \u201eCrosslink\u201c, der das Shard-Segment bis zu diesem Shard-Block in die Beacon-Chain best\u00e4tigt. Phase 0 wird Casper das Friendly Finality Gadget (FFG) f\u00fcr die Endg\u00fcltigkeit verwenden. Die Endg\u00fcltigkeit bedeutet einfach ausgedr\u00fcckt, dass eine bestimmte Operation nach ihrer Durchf\u00fchrung f\u00fcr immer in der Geschichte der Blockchain festgeschrieben ist und nichts diese Operation r\u00fcckg\u00e4ngig machen kann.","title":"Was beinhaltet sie?"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases-german/#eth2-das-neue-ether","text":"Phase 0 f\u00fchrt ETH2 ein, ein neues Asset f\u00fcr Staker (Validatoren), das in der Beacon-Chain verwendet wird. Es wird durch zwei Methoden generiert: Als Belohnung f\u00fcr die Validierung der Beacon-Chain (und Shards nach Phase 1). Mit dem Kauf f\u00fcr 1 ETH durch einen ETH1.X-Nutzer \u00fcber einen Registrierungsvertrag . Der Vertrag bezieht sich darauf als Hinterlegung. Derzeit gibt es keine M\u00f6glichkeit, ETH2 in Phase 0 aus der Beacon-Chain abzuheben oder zu \u00fcbertragen. Nach der Einzahlung im ETH1.x Validator-Vertrag wird das ETH1 Asset effektiv verbrannt. Beacon-Chain-Validatoren beobachten diesen Vertrag und \u00fcbermitteln Einlageninformationen an die Beacon-Chain, die dann entsprechend ETH2 an die Einleger ausgibt. Zu guter Letzt wird die Beacon-Chain eine gute Qualit\u00e4t von Zuf\u00e4lligkeit f\u00fcr den Rest des Systems erzeugen (verteilt, \u00fcberpr\u00fcfbar, unvorhersehbar und (angemessen) unparteiisch). Es wird RANDAO verwenden, womit von vielen Teilnehmern bereitgestellte Beitr\u00e4ge (individuelle Zufallszahlen) ganz unkompliziert in einer einzigen Ausgabenummer zusammengefasst werden k\u00f6nnen. Dies wird verwendet, um Validatoren in Block-Vorschl\u00e4ger und Aussch\u00fcsse f\u00fcr Entscheidungen zu organisieren.","title":"ETH2: Das neue Ether"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases-german/#wie-wird-das-netzwerk-aussehen","text":"Sobald Phase 0 abgeschlossen ist, wird es zwei aktive Ethereum-Blockchains geben. Der Klarheit halber nennen wir sie die Eth1-Chain (aktuelle, PoW \u00f6ffentliche Blockchain) und die Eth2-Chain (neue Beacon-Chain). W\u00e4hrend dieser Phase k\u00f6nnen Benutzer ihr ETH von der Eth1-Chain in die Eth2-Chain eintauschen und die Rolle von Validatoren einnehmen. Allerdings k\u00f6nnen sie diese ETH (vorl\u00e4ufig) NICHT zur Eth1-Chain zur\u00fcckmigrieren. Ein Grund f\u00fcr diesen Schritt k\u00f6nnte die Auszahlung von Zinsen in ETH in der Eth2-Chain sein. Um die Beacon-Chain ausf\u00fchren zu k\u00f6nnen, brauchst du einen Beacon-Chain-Client. Dieser wird derzeit getrennt von der bekannten Suite von standardm\u00e4\u00dfigen Ethereum-Clients (Geth, Parity, Pantheon, etc.) von einer Reihe von Teams entwickelt. Die meisten Eth2.0-Teams ver\u00f6ffentlichen regelm\u00e4\u00dfige Updates \u00fcber ihren Entwicklungsfortschritt der Clients. Einige Teams bieten Beitragenden Belohnungen an, um mehr und mehr Entwickler in den Aufbau der Eth2.0-Architektur einzubinden. Du kannst f\u00fcr Beitr\u00e4ge hier Gitcoin-Pr\u00e4mien bekommen. Isoliert ist die Beacon-Chain nicht besonders n\u00fctzlich. Aber als erste zu realisierende Komponente von Ethereum 2.0 ist es das Fundament des gesamten zuk\u00fcnftigen Systems. Wichtige \u00dcberlegungen ETH2 ist nach Abschluss der Phase 2 zu und von Shards frei \u00fcbertragbar (jedoch kann sich dies noch in Zukunft \u00e4ndern). Es wird eine Mindestmenge an ETH-Stakes notwendig sein, um die Beacon-Chain zu Beginn zu starten. Dies ist definiert als CHAIN_START_FULL_DEPOSIT_THRESHOLD im Einlagen-Vertrag, der auf der Eth1.0-Blockchain eingerichtet wird . Um ein Validator zu werden, musst du 32 ETH2 staken. W\u00e4hrend der Phase 0 werden alle Transaktionen und Smart-Contract-Berechnungen weiterhin auf der Eth1-Chain laufen.","title":"Wie wird das Netzwerk aussehen?"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases-german/#phase-1-shard-chains","text":"","title":"Phase 1 - Shard-Chains"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases-german/#was-beinhalten-sie","text":"Shard-Chains sind der Schl\u00fcssel zu zuk\u00fcnftiger Skalierbarkeit, da sie einen parallelen Transaktionsdurchsatz erm\u00f6glichen. In Phase 1 werden 64 davon eingesetzt (mit der Option, im Laufe der Zeit mehr hinzuzuf\u00fcgen). Phase 1 befasst sich in erster Linie mit der Konstruktion, G\u00fcltigkeit und dem Konsens der Daten dieser Shard-Chains. Phase 1 gibt weder die Ausf\u00fchrung des Shard-Chain-Zustands noch die Kontost\u00e4nde an. Es erscheint eher wie ein Testlauf f\u00fcr die Sharding-Struktur als ein Versuch, Shards zu skalieren. Die Beacon-Chain behandelt Shard-Chain-Bl\u00f6cke als einfache Ansammlung von Bits ohne Struktur oder Bedeutung. Crosslinks Periodisch wird der aktuelle Zustand (die \u201ekombinierte Datenwurzel\u201c) jedes Shards in einem Beacon-Chain-Block als Querverbindung aufgezeichnet. Wenn der Beacon-Chain Block finalisiert wurde, wird auch der entsprechende Shard Block als finalisiert angesehen, und andere Shards wissen, dass sie sich bei Cross-Shard-Transaktionen auf diesen verlassen k\u00f6nnen. Crosslinks sind eine Reihe von Signaturen eines Ausschusses, die f\u00fcr einen Block in einer Shard-Chain best\u00e4tigt werden und in die Beacon-Chain aufgenommen werden k\u00f6nnen. Crosslinks sind die wichtigsten Verbindungen, mit denen die Beacon-Chain den aktualisierten Zustand der Shard-Chains \"erlernt\". Crosslinks dienen auch als Infrastruktur f\u00fcr asynchrone Cross-Shard Kommunikation. Shard-Validatoren, die von der Beacon-Chain f\u00fcr jeden Shard an jedem Slot zuf\u00e4llig ausgew\u00e4hlt werden, kommen lediglich zu einer Einigung \u00fcber den Inhalt jedes Blocks. Sie best\u00e4tigen den Inhalt und Status des Shards durch das Erstellen von Crosslinks. Es spielt keine Rolle, welche Informationen in Shard-Bl\u00f6cken erscheinen, solange alle Aussch\u00fcsse einen Konsens erzielen und die Beacon-Chain regelm\u00e4\u00dfig aktualisieren.","title":"Was beinhalten sie?"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases-german/#wie-sieht-das-netzwerk-aus","text":"Die Eth1- und Eth2-Chains werden nach Phase 1 weiterhin parallel laufen.","title":"Wie sieht das Netzwerk aus?"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases-german/#wichtige-uberlegungen","text":"In Phase 0, 1 und 2 bleibt die Main PoW-Chain (Eth1) live, w\u00e4hrend Tests und \u00dcberg\u00e4nge auf der Eth2-Chain stattfinden. Dies bedeutet, dass Belohnungen sowohl an Ethereum 2.0-Validatoren als auch an die normalen PoW-Miner ausgezahlt werden. Daher kann die kombinierte Inflation der beiden Blockchains zun\u00e4chst steigen, jedoch wird sie danach beginnen, sich in Richtung 0-1% zu bewegen, da auf die alte PoW-Blockchain allm\u00e4hlich weniger Wert gelegt wird.","title":"Wichtige \u00dcberlegungen"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases-german/#phase-2-state-execution","text":"","title":"Phase 2 - State Execution"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases-german/#was-beinhaltet-sie_1","text":"Phase 2 ist der Zeitpunkt, an dem sich die Funktionalit\u00e4t des gesamten Systems vereint. Shard-Chains werden von einfachen Datencontainern in einen strukturierten Kettenzustand \u00fcberf\u00fchrt und Smart-Contracts werden wieder eingef\u00fchrt. Jeder Shard verwaltet eine virtuelle Maschine basierend auf eWASM . Phase 2 unterst\u00fctzt Konten, Vertr\u00e4ge, Zust\u00e4nde und andere Abstraktionen, die wir aus Solidity kennen. Wir k\u00f6nnen erwarten, dass bekannte Werkzeuge wie Truffle, Solc oder Ganache portiert werden, um eWASM vor oder w\u00e4hrend Phase 2 zu unterst\u00fctzen. Phase 2 f\u00fchrt auch das Konzept der Ausf\u00fchrungsumgebungen (Execution Environments, EEs) ein. EEs in einem Shard k\u00f6nnen auf jede Weise konstruiert werden, die ein Entwickler f\u00fcr passend h\u00e4lt. Es k\u00f6nnte eine EE f\u00fcr eine UTXO-Chain geben, ein System im Libra-Stil, eine EE f\u00fcr einen Geb\u00fchren-Markt-Verteiler oder andere. Jeder Shard hat Zugriff auf alle Ausf\u00fchrungsumgebungen und besitzt die M\u00f6glichkeit, Transaktionen in diesen zu t\u00e4tigen sowie Smart-Contracts auszuf\u00fchren und mit ihnen zu interagieren. Beachte, dass sich das Konzept von Ausf\u00fchrungsumgebungen noch immer in intensiver Forschungs- und Entwicklungsarbeit befindet.","title":"Was beinhaltet sie?"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases-german/#wichtige-uberlegungen_1","text":"Eine dApp muss ausw\u00e4hlen, auf welchem Shard sie sich befinden will. Diese Entscheidung ist wichtig, weil die Cross-Shard Kommunikation in Eth2 unterschiedlich ist, da sie nicht synchron ist, was wiederum bedeutet, dass zwischen den Shards eine gewisse Flexibilit\u00e4t verloren geht Eine dApp m\u00fcsste ziemlich gro\u00dfe Datenmengen beinhalten, um alle Ressourcen in einem gegebenen Shard zu verbrauchen und damit das Ausbreiten auf mehrere Shards zu rechtfertigen. Diese Phase stattet Shards mit eWASM als EVM 2.0 aus. Es bleibt offen, wann und wie Ethereum 1.0-Konten und -Vertr\u00e4ge auf Ethereum 2.0 migriert werden. Es gibt einige Upgrade-Pl\u00e4ne","title":"Wichtige \u00dcberlegungen"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases-german/#wie-geht-es-weiter","text":"Die Sharding-Roadmap schl\u00e4gt nach dem offiziellen Wiki 6 Phasen vor. Ethereum-Forscher Justin Drake ist der festen \u00dcberzeugung, dass die Sharding Phase 1 und 2 in den Jahren 2020 und 2021 erfolgen wird (vorausgesetzt, dass die Beacon-Chain Anfang 2020 startet). Ab Phase 3 ist jede Art der Vorhersage Spekulation, da sich voraussichtlich viel ver\u00e4ndern wird. Du kannst dir das wiki ansehen, um weitere Informationen zu erhalten.","title":"Wie geht es weiter?"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases-german/#ressourcen","text":"Ethereum 2.0 Info Eth 2.0 Specs Phase 0 for Humans Sharding Roadmap State of Ethereum Protocol Ethereum 2.0 Design Goals Q&A Session ETHMagicians eWASM","title":"Ressourcen"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases-portuguese/","text":"Fases da Ethereum 2.0 Como Ethereum 2.0 est\u00e1 em intensa pesquisa e desenvolvimento, essa p\u00e1gina pode se tornar obsoleta a qualquer momento. \u00c9 mantida atualizada com base nos melhores esfor\u00e7os. Introdu\u00e7\u00e3o A grande atualiza\u00e7\u00e3o da rede Ethereum, chamada Ethereum 2.0, Eth2 ou Serenity, trar\u00e1 com ela Sharding, Proof Stake, uma nova m\u00e1quina virtual (eWASM) e muito mais. \u00c9 importante entender que esta atualiza\u00e7\u00e3o n\u00e3o ocorrer\u00e1 em um \u00fanico momento - em vez disso, ser\u00e1 implantada por fases. Este documento tenta ser um ponto de refer\u00eancia para estas fases e o que cada uma inclui. Metas de Design O pesquisador de Ethereum Danny Ryan tem estipulado 5 objetivos de design distintos para a Ethereum 2.0: Descentraliza\u00e7\u00e3o: para permitir um laptop de um usu\u00e1rio t\u00edpico processar/validar fragmentos (incluindo qualquer valida\u00e7\u00e3o de n\u00edvel de sistema de uma cadeia de beacons). Resili\u00eancia: para permanecer online atrav\u00e9s de grandes parti\u00e7\u00f5es de rede e mesmo quando partes muito grandes de n\u00f3s ficam offline. Seguran\u00e7a: para utilizar t\u00e9cnicas de criptografia e design que permitam uma grande participa\u00e7\u00e3o de validadores no total e por hora unit\u00e1ria. Simplicidade: para minimizar a complexidade, mesmo que ao custo de algumas perdas de efici\u00eancia. Longevy: para selecionar todos os componentes como eles s\u00e3o ou qu\u00e2nticos seguros ou podem ser facilmente cambiados para contrapartes qu\u00e2nticas seguras quando dispon\u00edveis. Fase 0 - Cadeia de Beacon O que est\u00e1 inclu\u00eddo Fase 0 \u00e9 o nome dado para o lan\u00e7amento da Cadeia de Beacon. A Cadeia de Beacon gerenciar\u00e1 o protocolo de Proof of Stake Casper e todas as suas cadeias de fragmentos. Como Ben Edgington escreve , \"H\u00e1 uma s\u00e9rie de aspectos para isso: gerenciar validadores e suas participa\u00e7\u00f5es; nomeando o bloco escolhido proponente para cada fragmento em cada etapa; organizando validadores em comit\u00eas para votar nos blocos propostos; aplica\u00e7\u00e3o das regras de consenso; aplica\u00e7\u00e3o de recompensas e san\u00e7\u00f5es aos validadores; e, ser um ponto de refer\u00eancia em que os fragmentos registam os seus estados para facilitar transa\u00e7\u00f5es cruzadas.\u201d A fonte prim\u00e1ria de carga na Cadeia de Beacon ser\u00e1 \"atesta\u00e7\u00f5es\". Atesta\u00e7\u00f5es s\u00e3o votos dispon\u00edveis para um bloco de fragmentos e, simultaneamente, provas de pontos de interesse para um bloco de beacon. Um n\u00famero suficiente de atesta\u00e7\u00f5es para o mesmo bloco de fragmentos ir\u00e1 criar um \"cruzamento\" que confirma o segmento do fragmento at\u00e9 aquele bloco de fragmento na Cadeia de Beacon. A Fase 0 ir\u00e1 usar o Gadget de Finalidade Amig\u00e1vel (Casper the Friendly Finality Gadget - FFG) para esta finalidade. A finalidade, em termos muito vagos, significa que, uma vez conclu\u00edda uma determinada opera\u00e7\u00e3o, esta ficar\u00e1 para sempre gravado na hist\u00f3ria e nada pode reverter essa opera\u00e7\u00e3o. ETH2: O Novo Ether Fase 0 ir\u00e1 introduzir o ETH2 que ser\u00e1 um novo ativo para acionistas (validadores) para ser usado na Cadeia de Beacon. Ele ser\u00e1 criado utilizando dois m\u00e9todos: Como recompensa por validar a Cadeia de Beacon (e fragmentos ap\u00f3s a Fase 1). Compr\u00e1-lo para 1 ETH por qualquer usu\u00e1rio ETH1.X atrav\u00e9s de um contrato de registro . O contrato refere-se a ele como um dep\u00f3sito. Atualmente n\u00e3o h\u00e1 nenhuma maneira de retirar ou transferir ETH2 da Cadeia de Sinalizador na Fase 0. Uma vez depositado no contrato de registo de validador ETH1.x, o ETH1 \u00e9 efetivamente queimado. Os validadores da Cadeia de Beacons assistem a este contrato e enviam informa\u00e7\u00f5es de dep\u00f3sito \u00e0 Cadeia de Beacons, que ent\u00e3o emitem ETH2 aos depositantes. Por \u00faltimo, a Cadeia de Beacon ir\u00e1 gerar uma boa qualidade (distribu\u00edda, verific\u00e1vel, imprevis\u00edvel e (razoavelmente) aleat\u00f3ria) para o resto do sistema. Ela usar\u00e1 RANDAO que \u00e9 simplesmente uma maneira de combinar contribui\u00e7\u00f5es (n\u00fameros aleat\u00f3rios individuais) fornecidas por muitos participantes em um \u00fanico n\u00famero de sa\u00edda. Isso ser\u00e1 usado para organizar validadores em proponentes e comites de blocos. Como ser\u00e1 a rede? Quando a Fase 0 estiver completa, haver\u00e1 duas cadeias Ethereum ativas. Por uma quest\u00e3o de clareza, vamos cham\u00e1-las de rede ETH1 (atual, rede principal usando PoW) e de ETH2 (a nova rede de Cadeia de Beacons). Durante esta fase, os usu\u00e1rios poder\u00e3o migrar seu ETH da rede Eth1 para a rede de Eth2 e tornar-se validadores. No entanto, eles N\u00c3O conseguir\u00e3o migrar estes ETH de volta (por enquanto). A raz\u00e3o pela qual algu\u00e9m pode querer fazer isto \u00e9 porque ele pode ganhar juros pagos pelo ETH na rede de Eth2. Para executar a Cadeia de Beacons, voc\u00ea vai precisar de um cliente da rede da Cadeia de Beacons. Estes est\u00e3o sendo desenvolvidos separadamente do conjunto de clientes Ethereum padr\u00e3o (Geth, Parity, Pantheon, etc) por um n\u00famero de equipes . A maioria das equipes est\u00e1 publicando atualiza\u00e7\u00f5es peri\u00f3dicas sobre o progresso do desenvolvimento de seus clientes e algumas das equipes est\u00e3o oferecendo recompensas aos colaboradores para incluir cada vez mais desenvolvedores na constru\u00e7\u00e3o do Ethereum 2.0 . Voc\u00ea pode contribuir com doa\u00e7\u00f5es no Gitcoin aqui Por si s\u00f3, a Cadeia de Beacons pode n\u00e3o parecer particularmente \u00fatil. Mas, como primeiro componente da Ethereum 2.0 a ser entregue, \u00e9 a base de todo o sistema. Considera\u00e7\u00f5es importantes ETH2 \u00e9 transfer\u00edvel para e de fragmentos assim que a Fase 2 estiver completa (embora isso possa mudar no futuro). Haver\u00e1 uma quantidade m\u00ednima de ETH em dep\u00f3sito necess\u00e1ria para a inicializa\u00e7\u00e3o inicial da cadeia de sinalizadores. Isto \u00e9 definido como CHAIN_START_FUL_DEPOSIT_THRESHOLD no contrato de dep\u00f3sito que estar\u00e1 ativo na rede Eth 1.0 . Para se tornar um validador, voc\u00ea precisar\u00e1 depositar 32 ETH2. Durante a fase 0, todas as transa\u00e7\u00f5es de usu\u00e1rio e computa\u00e7\u00e3o de contratos inteligentes ainda ocorrer\u00e3o na rede Eth1. Fase 1 - Cadeias de Fragmento O que est\u00e1 inclu\u00eddo As cadeias de fragmentos s\u00e3o chave para a futura escalabilidade j\u00e1 que permitem transa\u00e7\u00f5es em paralelo, e haver\u00e1 64 delas implantadas na Fase 1 (com a op\u00e7\u00e3o de adicionar mais ao longo do tempo). A fase 1 est\u00e1 principalmente preocupada com a constru\u00e7\u00e3o, validade e consenso sobre os dados destas cadeias de fragmentos. Fase 1 n\u00e3o especifica o estado da execu\u00e7\u00e3o da cadeia de fragmentos ou os saldos da conta. Ser\u00e1 como uma execu\u00e7\u00e3o experimental para a estrutura de compartilhamento ao inv\u00e9s de uma tentativa de usar fragmentos em escala. A Cadeia de Beacon tratar\u00e1 os blocos da cadeia de fragmentos como simples cole\u00e7\u00f5es de bits sem estrutura ou significado. Crosslinks Periodicamente, o estado atual (a \"combina\u00e7\u00e3o de dados root\") de cada fragmento \u00e9 gravado em um bloco de Cadeia de Beacon como uma liga\u00e7\u00e3o cruzada. Quando o bloco de Cadeia de Beacon for finalizado, o bloco de fragmento correspondente \u00e9 considerado finalizado, e outros fragmentos sabem que podem confiar nisso para transa\u00e7\u00f5es cruzadas. Links cruzados s\u00e3o um conjunto de assinaturas de um comite atestando um bloco em uma cadeia de fragmentos que pode ser inclu\u00eddo na Cadeia de Beacon. Links cruzados s\u00e3o os principais meios pelos quais a Cadeia de Beacon \"aprende sobre\" o estado atualizado das cadeias de fragmentos. Os Links Cruzados tamb\u00e9m servem como infraestrutura para uma comunica\u00e7\u00e3o ass\u00edncrona entre cadeias de fragmentos. Validadores da cadeia de fragmentos, que s\u00e3o selecionados aleatoriamente pela Cadeia de Beacons para cada fragmento em cada segmento, meramente chegam a um acordo sobre o conte\u00fado de cada bloco. Eles atestam o conte\u00fado e o estado atrav\u00e9s de uma liga\u00e7\u00e3o cruzada. N\u00e3o importa qual informa\u00e7\u00e3o aparece nos blocos de fragmentos, desde que todas as comiss\u00f5es cheguem a consenso e atualizem a Cadeia de Beacon no fragmento regularmente. Como ser\u00e1 a rede? As cadeias Eth1 e Eth2 ainda funcionar\u00e3o em paralelo ap\u00f3s a fase 1. Considera\u00e7\u00f5es importantes Na fase 0, 1 e 2, a rede principal PoW (Eth1) continuar\u00e1 ativa enquanto se realizam testes e a transi\u00e7\u00e3o estiver ocorrendo para a rede Eth2. Isto significa que as recompensas ser\u00e3o pagas aos validadores do Ethereum 2.0, bem como as recompensas normais de blocos PoW. Por conseguinte, a infla\u00e7\u00e3o combinada das duas cadeias pode disparar inicialmente, mas depois come\u00e7ar\u00e1 a ter tend\u00eancia para a faixa dos 0-1%, \u00e0 medida que a cadeia PoW for gradualmente \"desenfatizada\". Fase 2 - Execu\u00e7\u00e3o do estado O que est\u00e1 inclu\u00eddo? A Fase 2 \u00e9 onde a funcionalidade de todo o sistema come\u00e7ar\u00e1 a reunir-se. A transi\u00e7\u00e3o de uma cadeia de fragmentos de simples containers de dados para uma cadeia de dados estruturados e com Contratos Inteligentes ser\u00e1 reintroduzida. Cada fragmento ir\u00e1 gerenciar uma m\u00e1quina virtual baseada em eWASM . Ele suportar\u00e1 contas, contratos, estado e outras abstra\u00e7\u00f5es que estamos familiarizados do Solidity. Podemos esperar ferramentas familiares como truffle, solc, ganache portado para suportar o eWASM antes ou durante a fase 2. A Fase 2 tamb\u00e9m introduz o conceito de 'Ambientes de Execu\u00e7\u00e3o' (EEs). EEs dentro de um fragmento podem ser constru\u00eddos da forma que um desenvolvedor considerar adequada - pode haver um EE para uma cadeia de estilo UTXO, um sistema ao estilo Libra, um EE para um fornecedor de taxas de mercado e al\u00e9m. Todo fragmento tem acesso a todos os ambientes de execu\u00e7\u00e3o e tem a capacidade de fazer transa\u00e7\u00f5es dentro deles, al\u00e9m de executar e interagir com contratos inteligentes. Observe que o conceito de ambiente de execu\u00e7\u00e3o ainda est\u00e1 em grande an\u00e1lise e desenvolvimento. Considera\u00e7\u00f5es importantes Um dApp ter\u00e1 que escolher em qual fragmento quer estar. Essa decis\u00e3o \u00e9 importante porque a comunica\u00e7\u00e3o cruzada difere no Eth2, uma vez que n\u00e3o \u00e9 s\u00edncrona, o que significa que se perde alguma composabilidade entre fragmentos Um dApp teria que ter dados bastante grandes para consumir todos os recursos em um dado fragmento para justificar se espalhar por v\u00e1rios deles. Esta fase vai dar fragmentos com eWASM como o EVM 2.0. \u00c9 uma pergunta em aberto quando e como as contas e contratos da Ethereum 1.0 ser\u00e3o migrados para a Ethereum 2.0. Existem alguns planos de atualiza\u00e7\u00e3o O que vem depois? O roteiro da cadeia de fragmentos de acordo com a wiki oficial sugere 6 fases. O pesquisador Justin Drake acredita firmemente que as fases de compartilhamento 1 e 2 vir\u00e3o em 2020 e 2021, respectivamente (assumindo que a Cadeia do Beacon inicia no come\u00e7o de 2020). A partir da fase 3, qualquer especula\u00e7\u00e3o feita \u00e9 sujeita a mudan\u00e7as, voc\u00ea pode ir verificar a wiki para mais informa\u00e7\u00f5es sobre a fase. Recursos Informa\u00e7\u00f5es da Ethereum 2.0 Especifica\u00e7\u00f5es da Ethereum 2.0 Fase 0 para Humanos Roadmap para a cadeia de fragmentos Estado do protocolo Ethereum Objetivos do Ethereum 2.0 Sess\u00e3o de perguntas e respostas do ETHMagicians eWASM","title":"Ethereum 2.0 Fases - EthHub"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases-portuguese/#fases-da-ethereum-20","text":"Como Ethereum 2.0 est\u00e1 em intensa pesquisa e desenvolvimento, essa p\u00e1gina pode se tornar obsoleta a qualquer momento. \u00c9 mantida atualizada com base nos melhores esfor\u00e7os.","title":"Fases da Ethereum 2.0"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases-portuguese/#introducao","text":"A grande atualiza\u00e7\u00e3o da rede Ethereum, chamada Ethereum 2.0, Eth2 ou Serenity, trar\u00e1 com ela Sharding, Proof Stake, uma nova m\u00e1quina virtual (eWASM) e muito mais. \u00c9 importante entender que esta atualiza\u00e7\u00e3o n\u00e3o ocorrer\u00e1 em um \u00fanico momento - em vez disso, ser\u00e1 implantada por fases. Este documento tenta ser um ponto de refer\u00eancia para estas fases e o que cada uma inclui.","title":"Introdu\u00e7\u00e3o"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases-portuguese/#metas-de-design","text":"O pesquisador de Ethereum Danny Ryan tem estipulado 5 objetivos de design distintos para a Ethereum 2.0: Descentraliza\u00e7\u00e3o: para permitir um laptop de um usu\u00e1rio t\u00edpico processar/validar fragmentos (incluindo qualquer valida\u00e7\u00e3o de n\u00edvel de sistema de uma cadeia de beacons). Resili\u00eancia: para permanecer online atrav\u00e9s de grandes parti\u00e7\u00f5es de rede e mesmo quando partes muito grandes de n\u00f3s ficam offline. Seguran\u00e7a: para utilizar t\u00e9cnicas de criptografia e design que permitam uma grande participa\u00e7\u00e3o de validadores no total e por hora unit\u00e1ria. Simplicidade: para minimizar a complexidade, mesmo que ao custo de algumas perdas de efici\u00eancia. Longevy: para selecionar todos os componentes como eles s\u00e3o ou qu\u00e2nticos seguros ou podem ser facilmente cambiados para contrapartes qu\u00e2nticas seguras quando dispon\u00edveis.","title":"Metas de Design"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases-portuguese/#fase-0-cadeia-de-beacon","text":"","title":"Fase 0 - Cadeia de Beacon"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases-portuguese/#o-que-esta-incluido","text":"Fase 0 \u00e9 o nome dado para o lan\u00e7amento da Cadeia de Beacon. A Cadeia de Beacon gerenciar\u00e1 o protocolo de Proof of Stake Casper e todas as suas cadeias de fragmentos. Como Ben Edgington escreve , \"H\u00e1 uma s\u00e9rie de aspectos para isso: gerenciar validadores e suas participa\u00e7\u00f5es; nomeando o bloco escolhido proponente para cada fragmento em cada etapa; organizando validadores em comit\u00eas para votar nos blocos propostos; aplica\u00e7\u00e3o das regras de consenso; aplica\u00e7\u00e3o de recompensas e san\u00e7\u00f5es aos validadores; e, ser um ponto de refer\u00eancia em que os fragmentos registam os seus estados para facilitar transa\u00e7\u00f5es cruzadas.\u201d A fonte prim\u00e1ria de carga na Cadeia de Beacon ser\u00e1 \"atesta\u00e7\u00f5es\". Atesta\u00e7\u00f5es s\u00e3o votos dispon\u00edveis para um bloco de fragmentos e, simultaneamente, provas de pontos de interesse para um bloco de beacon. Um n\u00famero suficiente de atesta\u00e7\u00f5es para o mesmo bloco de fragmentos ir\u00e1 criar um \"cruzamento\" que confirma o segmento do fragmento at\u00e9 aquele bloco de fragmento na Cadeia de Beacon. A Fase 0 ir\u00e1 usar o Gadget de Finalidade Amig\u00e1vel (Casper the Friendly Finality Gadget - FFG) para esta finalidade. A finalidade, em termos muito vagos, significa que, uma vez conclu\u00edda uma determinada opera\u00e7\u00e3o, esta ficar\u00e1 para sempre gravado na hist\u00f3ria e nada pode reverter essa opera\u00e7\u00e3o.","title":"O que est\u00e1 inclu\u00eddo"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases-portuguese/#eth2-o-novo-ether","text":"Fase 0 ir\u00e1 introduzir o ETH2 que ser\u00e1 um novo ativo para acionistas (validadores) para ser usado na Cadeia de Beacon. Ele ser\u00e1 criado utilizando dois m\u00e9todos: Como recompensa por validar a Cadeia de Beacon (e fragmentos ap\u00f3s a Fase 1). Compr\u00e1-lo para 1 ETH por qualquer usu\u00e1rio ETH1.X atrav\u00e9s de um contrato de registro . O contrato refere-se a ele como um dep\u00f3sito. Atualmente n\u00e3o h\u00e1 nenhuma maneira de retirar ou transferir ETH2 da Cadeia de Sinalizador na Fase 0. Uma vez depositado no contrato de registo de validador ETH1.x, o ETH1 \u00e9 efetivamente queimado. Os validadores da Cadeia de Beacons assistem a este contrato e enviam informa\u00e7\u00f5es de dep\u00f3sito \u00e0 Cadeia de Beacons, que ent\u00e3o emitem ETH2 aos depositantes. Por \u00faltimo, a Cadeia de Beacon ir\u00e1 gerar uma boa qualidade (distribu\u00edda, verific\u00e1vel, imprevis\u00edvel e (razoavelmente) aleat\u00f3ria) para o resto do sistema. Ela usar\u00e1 RANDAO que \u00e9 simplesmente uma maneira de combinar contribui\u00e7\u00f5es (n\u00fameros aleat\u00f3rios individuais) fornecidas por muitos participantes em um \u00fanico n\u00famero de sa\u00edda. Isso ser\u00e1 usado para organizar validadores em proponentes e comites de blocos.","title":"ETH2: O Novo Ether"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases-portuguese/#como-sera-a-rede","text":"Quando a Fase 0 estiver completa, haver\u00e1 duas cadeias Ethereum ativas. Por uma quest\u00e3o de clareza, vamos cham\u00e1-las de rede ETH1 (atual, rede principal usando PoW) e de ETH2 (a nova rede de Cadeia de Beacons). Durante esta fase, os usu\u00e1rios poder\u00e3o migrar seu ETH da rede Eth1 para a rede de Eth2 e tornar-se validadores. No entanto, eles N\u00c3O conseguir\u00e3o migrar estes ETH de volta (por enquanto). A raz\u00e3o pela qual algu\u00e9m pode querer fazer isto \u00e9 porque ele pode ganhar juros pagos pelo ETH na rede de Eth2. Para executar a Cadeia de Beacons, voc\u00ea vai precisar de um cliente da rede da Cadeia de Beacons. Estes est\u00e3o sendo desenvolvidos separadamente do conjunto de clientes Ethereum padr\u00e3o (Geth, Parity, Pantheon, etc) por um n\u00famero de equipes . A maioria das equipes est\u00e1 publicando atualiza\u00e7\u00f5es peri\u00f3dicas sobre o progresso do desenvolvimento de seus clientes e algumas das equipes est\u00e3o oferecendo recompensas aos colaboradores para incluir cada vez mais desenvolvedores na constru\u00e7\u00e3o do Ethereum 2.0 . Voc\u00ea pode contribuir com doa\u00e7\u00f5es no Gitcoin aqui Por si s\u00f3, a Cadeia de Beacons pode n\u00e3o parecer particularmente \u00fatil. Mas, como primeiro componente da Ethereum 2.0 a ser entregue, \u00e9 a base de todo o sistema. Considera\u00e7\u00f5es importantes ETH2 \u00e9 transfer\u00edvel para e de fragmentos assim que a Fase 2 estiver completa (embora isso possa mudar no futuro). Haver\u00e1 uma quantidade m\u00ednima de ETH em dep\u00f3sito necess\u00e1ria para a inicializa\u00e7\u00e3o inicial da cadeia de sinalizadores. Isto \u00e9 definido como CHAIN_START_FUL_DEPOSIT_THRESHOLD no contrato de dep\u00f3sito que estar\u00e1 ativo na rede Eth 1.0 . Para se tornar um validador, voc\u00ea precisar\u00e1 depositar 32 ETH2. Durante a fase 0, todas as transa\u00e7\u00f5es de usu\u00e1rio e computa\u00e7\u00e3o de contratos inteligentes ainda ocorrer\u00e3o na rede Eth1.","title":"Como ser\u00e1 a rede?"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases-portuguese/#fase-1-cadeias-de-fragmento","text":"","title":"Fase 1 - Cadeias de Fragmento"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases-portuguese/#o-que-esta-incluido_1","text":"As cadeias de fragmentos s\u00e3o chave para a futura escalabilidade j\u00e1 que permitem transa\u00e7\u00f5es em paralelo, e haver\u00e1 64 delas implantadas na Fase 1 (com a op\u00e7\u00e3o de adicionar mais ao longo do tempo). A fase 1 est\u00e1 principalmente preocupada com a constru\u00e7\u00e3o, validade e consenso sobre os dados destas cadeias de fragmentos. Fase 1 n\u00e3o especifica o estado da execu\u00e7\u00e3o da cadeia de fragmentos ou os saldos da conta. Ser\u00e1 como uma execu\u00e7\u00e3o experimental para a estrutura de compartilhamento ao inv\u00e9s de uma tentativa de usar fragmentos em escala. A Cadeia de Beacon tratar\u00e1 os blocos da cadeia de fragmentos como simples cole\u00e7\u00f5es de bits sem estrutura ou significado. Crosslinks Periodicamente, o estado atual (a \"combina\u00e7\u00e3o de dados root\") de cada fragmento \u00e9 gravado em um bloco de Cadeia de Beacon como uma liga\u00e7\u00e3o cruzada. Quando o bloco de Cadeia de Beacon for finalizado, o bloco de fragmento correspondente \u00e9 considerado finalizado, e outros fragmentos sabem que podem confiar nisso para transa\u00e7\u00f5es cruzadas. Links cruzados s\u00e3o um conjunto de assinaturas de um comite atestando um bloco em uma cadeia de fragmentos que pode ser inclu\u00eddo na Cadeia de Beacon. Links cruzados s\u00e3o os principais meios pelos quais a Cadeia de Beacon \"aprende sobre\" o estado atualizado das cadeias de fragmentos. Os Links Cruzados tamb\u00e9m servem como infraestrutura para uma comunica\u00e7\u00e3o ass\u00edncrona entre cadeias de fragmentos. Validadores da cadeia de fragmentos, que s\u00e3o selecionados aleatoriamente pela Cadeia de Beacons para cada fragmento em cada segmento, meramente chegam a um acordo sobre o conte\u00fado de cada bloco. Eles atestam o conte\u00fado e o estado atrav\u00e9s de uma liga\u00e7\u00e3o cruzada. N\u00e3o importa qual informa\u00e7\u00e3o aparece nos blocos de fragmentos, desde que todas as comiss\u00f5es cheguem a consenso e atualizem a Cadeia de Beacon no fragmento regularmente.","title":"O que est\u00e1 inclu\u00eddo"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases-portuguese/#como-sera-a-rede_1","text":"As cadeias Eth1 e Eth2 ainda funcionar\u00e3o em paralelo ap\u00f3s a fase 1.","title":"Como ser\u00e1 a rede?"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases-portuguese/#consideracoes-importantes","text":"Na fase 0, 1 e 2, a rede principal PoW (Eth1) continuar\u00e1 ativa enquanto se realizam testes e a transi\u00e7\u00e3o estiver ocorrendo para a rede Eth2. Isto significa que as recompensas ser\u00e3o pagas aos validadores do Ethereum 2.0, bem como as recompensas normais de blocos PoW. Por conseguinte, a infla\u00e7\u00e3o combinada das duas cadeias pode disparar inicialmente, mas depois come\u00e7ar\u00e1 a ter tend\u00eancia para a faixa dos 0-1%, \u00e0 medida que a cadeia PoW for gradualmente \"desenfatizada\".","title":"Considera\u00e7\u00f5es importantes"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases-portuguese/#fase-2-execucao-do-estado","text":"","title":"Fase 2 - Execu\u00e7\u00e3o do estado"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases-portuguese/#o-que-esta-incluido_2","text":"A Fase 2 \u00e9 onde a funcionalidade de todo o sistema come\u00e7ar\u00e1 a reunir-se. A transi\u00e7\u00e3o de uma cadeia de fragmentos de simples containers de dados para uma cadeia de dados estruturados e com Contratos Inteligentes ser\u00e1 reintroduzida. Cada fragmento ir\u00e1 gerenciar uma m\u00e1quina virtual baseada em eWASM . Ele suportar\u00e1 contas, contratos, estado e outras abstra\u00e7\u00f5es que estamos familiarizados do Solidity. Podemos esperar ferramentas familiares como truffle, solc, ganache portado para suportar o eWASM antes ou durante a fase 2. A Fase 2 tamb\u00e9m introduz o conceito de 'Ambientes de Execu\u00e7\u00e3o' (EEs). EEs dentro de um fragmento podem ser constru\u00eddos da forma que um desenvolvedor considerar adequada - pode haver um EE para uma cadeia de estilo UTXO, um sistema ao estilo Libra, um EE para um fornecedor de taxas de mercado e al\u00e9m. Todo fragmento tem acesso a todos os ambientes de execu\u00e7\u00e3o e tem a capacidade de fazer transa\u00e7\u00f5es dentro deles, al\u00e9m de executar e interagir com contratos inteligentes. Observe que o conceito de ambiente de execu\u00e7\u00e3o ainda est\u00e1 em grande an\u00e1lise e desenvolvimento.","title":"O que est\u00e1 inclu\u00eddo?"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases-portuguese/#consideracoes-importantes_1","text":"Um dApp ter\u00e1 que escolher em qual fragmento quer estar. Essa decis\u00e3o \u00e9 importante porque a comunica\u00e7\u00e3o cruzada difere no Eth2, uma vez que n\u00e3o \u00e9 s\u00edncrona, o que significa que se perde alguma composabilidade entre fragmentos Um dApp teria que ter dados bastante grandes para consumir todos os recursos em um dado fragmento para justificar se espalhar por v\u00e1rios deles. Esta fase vai dar fragmentos com eWASM como o EVM 2.0. \u00c9 uma pergunta em aberto quando e como as contas e contratos da Ethereum 1.0 ser\u00e3o migrados para a Ethereum 2.0. Existem alguns planos de atualiza\u00e7\u00e3o","title":"Considera\u00e7\u00f5es importantes"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases-portuguese/#o-que-vem-depois","text":"O roteiro da cadeia de fragmentos de acordo com a wiki oficial sugere 6 fases. O pesquisador Justin Drake acredita firmemente que as fases de compartilhamento 1 e 2 vir\u00e3o em 2020 e 2021, respectivamente (assumindo que a Cadeia do Beacon inicia no come\u00e7o de 2020). A partir da fase 3, qualquer especula\u00e7\u00e3o feita \u00e9 sujeita a mudan\u00e7as, voc\u00ea pode ir verificar a wiki para mais informa\u00e7\u00f5es sobre a fase.","title":"O que vem depois?"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases-portuguese/#recursos","text":"Informa\u00e7\u00f5es da Ethereum 2.0 Especifica\u00e7\u00f5es da Ethereum 2.0 Fase 0 para Humanos Roadmap para a cadeia de fragmentos Estado do protocolo Ethereum Objetivos do Ethereum 2.0 Sess\u00e3o de perguntas e respostas do ETHMagicians eWASM","title":"Recursos"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases/","text":"Ethereum 2.0 Phases As Ethereum 2.0 is in heavy research and development, this page may become outdated spontaneously. It is kept up to date on a best-effort basis. Last updated 16th of November, 2019. This page is also available in German and Portuguese . Introduction Ethereum's major network upgrade, dubbed Ethereum 2.0, Eth2 or Serenity, will bring with it Sharding, Proof of Stake, a new virtual machine (eWASM) and more. It\u2019s important to understand that this upgrade will not take place at a single point in time - instead, it will be rolled out in phases. This document attempts to be a reference point for these phases and what each one includes. Design Goals Ethereum researcher Danny Ryan has stipulated 5 distinct design goals for Ethereum 2.0: Decentralization: to allow for a typical consumer laptop with O(C) resources to process/validate O(1) shards (including any system level validation such as the beacon chain). Resilience: to remain live through major network partitions and when very large portions of nodes go offline. Security: to utilize crypto and design techniques that allow for a large participation of validators in total and per unit time. Simplicity: to minimize complexity, even at the cost of some losses in efficiency. Longevity: to select all components such that they are either quantum secure or can be easily swapped out for quantum secure counterparts when available. Phase 0 - Beacon Chain What is included? Phase 0 is the name given to the launch of the Beacon Chain. The Beacon Chain will manage the Casper Proof of Stake protocol for itself and all of the shard chains. As Ben Edgington puts it , \u201cThere are a number of aspects to this: managing validators and their stakes; nominating the chosen block proposer for each shard at each step; organizing validators into committees to vote on the proposed blocks; applying the consensus rules; applying rewards and penalties to validators; and, being an anchor point on which the shards register their states to facilitate cross-shard transactions.\u201d The primary source of load on the Beacon Chain will be \"attestations\". Attestations are availability votes for a shard block and, simultaneously, proof of stake votes for a beacon block. A sufficient number of attestations for the same shard block will create a \"crosslink\" which confirms the shard segment up to that shard block into the Beacon Chain. Phase 0 will use Casper the Friendly Finality Gadget (FFG) for finality. Finality, in very loose terms, means that once a particular operation has been done, it will forever be etched in history and nothing can revert that operation. Getting ether onto the beacon chain All ether on the beacon chain in phase 0 will be from a one-way transaction to the deposit contract. A deposit is made to this contract with transaction data indicating the validator the deposit is for. The deposit contract is watched by every validator on the network, who will submit the deposits to the beacon chain. After a validator public key reaches a balance of 32 ETH, it is registered as active validator and entered into queue for activation. Please note: this transfer to the deposit contract is only one-way, for phase 0 there is no way for the deposited eth to return to Eth1.x. This is expected to change as part of phase 1. What will the network look like? Once Phase 0 is complete, there will be two active Ethereum chains. For the sake of clarity let\u2019s call them the Eth1 chain (current, PoW main chain) and the Eth2 chain (new Beacon Chain). During this phase, users will be able to send their ETH from the Eth1 chain to the Eth2 chain and become validators. They will NOT be able to migrate this ETH back to Eth1 (for now). In order to run the Beacon Chain, you\u2019re going to need a Beacon Chain client. These are currently being developed separately from the familiar suite of standard Ethereum clients (Geth, Nethermind, Pantheon, et al.) by a number of teams . Most of the teams are putting out periodic updates on their client development progress, and some of the teams are offering bounties to contributors to include more and more developers in building 2.0. You can contribute on Gitcoin grants here On its own, the Beacon Chain might not seem particularly useful. But, as the first component of Ethereum 2.0 to be delivered, it is the foundation of the entire system. Important Considerations There will be a minimum amount of ETH stake needed in order to first bootstrap the beacon chain. This is defined as MIN_GENESIS_VALIDATOR_ACTIVE_COUNT in the beacon chain specification . During Phase 0, the Eth1 chain will live uninterrupted. Nothing will change for Eth1. Phase 1 - Shard Chains What is included? Shard chains are the key to future scalability as they allow parallel transaction throughput and there will be 64 of them deployed in Phase 1 (with the possibility of adding more over time as hardware scales). Phase 1 is primarily concerned with the construction, validity, and consensus on the data of these shard chains. Phase 1 does not specify shard chain state execution or account balances. It'll be like a trial run for the sharding structure rather than an attempt to use shards to scale. The Beacon Chain will treat shard chain blocks as simple collections of bits with no structure or meaning. Crosslinks Periodically, the current state (the \u201ccombined data root\u201d) of each shard gets recorded in a Beacon Chain block as a crosslink. When the Beacon Chain block has been finalised, the corresponding shard block is considered finalised, and other shards know that they can rely on it for cross-shard transactions. Crosslinks are a set of signatures from a committee attesting to a block in a shard chain, which can be included into the Beacon Chain. Crosslinks are the main means by which the Beacon Chain \"learns about\" the updated state of shard chains. Crosslinks also serve as infrastructure for asynchronous cross-shard communication. Shard validators, who are randomly selected by the Beacon Chain for each shard at each slot, merely come to agreement on each block\u2019s content. They attest to the shard\u2019s contents and state through crosslinking. It doesn\u2019t matter what information appears in shards blocks, so long as all committees reach consensus and update the Beacon Chain on the shard regularly. What will the network look like? The Eth1 and Eth2 chains will still operate in parallel after Phase 1. Important Considerations In Phase 0, 1, and 2 the main PoW chain (Eth1) will remain live while testing and transitioning is happening on the Eth2 chain. This means that rewards will be paid to both Ethereum 2.0 validators as well as the normal PoW block rewards. Therefore, the combined inflation of the two chains may spike initially but then start to trend towards the 0-1% range as the PoW chain is gradually de-emphasized. Phase 2 - State Execution What is included? Phase 2 is where the functionality of the entire system will start to come together. Shard chains transition from simple data containers to a structured chain state and Smart Contracts will be reintroduced. Each shard will manage a virtual machine based on eWASM . It'll support accounts, contracts, state, and other abstractions that we\u2019re familiar with from solidity. We can expect familiar tools like truffle, solc, ganache ported to support eWASM before or during Phase 2. Phase 2 also introduces the concept of 'Execution Environments (EEs)'. EEs within a shard can be constructed in whatever way a developer sees fit - there could be an EE for a UTXO-style chain, a Libra-style system, an EE for a fee market relayer and beyond. Every shard has access to all execution environments and has the ability to make transactions within them as well as run and interact with smart contracts. Do note that the concept of execution environments is still in heavy research and development. Important Considerations A dApp will have to choose what shard it wants to be on. That decision matters because cross-shard communication differs on Eth2 as it is not synchronous which means some composability is lost between shards A dApp would have to have rather large data to consume all the resources in a given shard to justify spreading itself over multiple ones. This phase will endow shards with eWASM as the EVM 2.0. It is an open question when and how Ethereum 1.0 accounts and contracts will be migrated to Ethereum 2.0, there are some upgrade plans Resources Ethereum Roadmap Ethereum 2.0 Info Eth 2.0 Specs Phase 0 for Humans Sharding Roadmap State of Ethereum Protocol Ethereum 2.0 Design Goals Q&A Session ETHMagicians eWASM","title":"Ethereum 2.0 Phases"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases/#ethereum-20-phases","text":"As Ethereum 2.0 is in heavy research and development, this page may become outdated spontaneously. It is kept up to date on a best-effort basis. Last updated 16th of November, 2019. This page is also available in German and Portuguese .","title":"Ethereum 2.0 Phases"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases/#introduction","text":"Ethereum's major network upgrade, dubbed Ethereum 2.0, Eth2 or Serenity, will bring with it Sharding, Proof of Stake, a new virtual machine (eWASM) and more. It\u2019s important to understand that this upgrade will not take place at a single point in time - instead, it will be rolled out in phases. This document attempts to be a reference point for these phases and what each one includes.","title":"Introduction"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases/#design-goals","text":"Ethereum researcher Danny Ryan has stipulated 5 distinct design goals for Ethereum 2.0: Decentralization: to allow for a typical consumer laptop with O(C) resources to process/validate O(1) shards (including any system level validation such as the beacon chain). Resilience: to remain live through major network partitions and when very large portions of nodes go offline. Security: to utilize crypto and design techniques that allow for a large participation of validators in total and per unit time. Simplicity: to minimize complexity, even at the cost of some losses in efficiency. Longevity: to select all components such that they are either quantum secure or can be easily swapped out for quantum secure counterparts when available.","title":"Design Goals"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases/#phase-0-beacon-chain","text":"","title":"Phase 0 - Beacon Chain"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases/#what-is-included","text":"Phase 0 is the name given to the launch of the Beacon Chain. The Beacon Chain will manage the Casper Proof of Stake protocol for itself and all of the shard chains. As Ben Edgington puts it , \u201cThere are a number of aspects to this: managing validators and their stakes; nominating the chosen block proposer for each shard at each step; organizing validators into committees to vote on the proposed blocks; applying the consensus rules; applying rewards and penalties to validators; and, being an anchor point on which the shards register their states to facilitate cross-shard transactions.\u201d The primary source of load on the Beacon Chain will be \"attestations\". Attestations are availability votes for a shard block and, simultaneously, proof of stake votes for a beacon block. A sufficient number of attestations for the same shard block will create a \"crosslink\" which confirms the shard segment up to that shard block into the Beacon Chain. Phase 0 will use Casper the Friendly Finality Gadget (FFG) for finality. Finality, in very loose terms, means that once a particular operation has been done, it will forever be etched in history and nothing can revert that operation.","title":"What is included?"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases/#getting-ether-onto-the-beacon-chain","text":"All ether on the beacon chain in phase 0 will be from a one-way transaction to the deposit contract. A deposit is made to this contract with transaction data indicating the validator the deposit is for. The deposit contract is watched by every validator on the network, who will submit the deposits to the beacon chain. After a validator public key reaches a balance of 32 ETH, it is registered as active validator and entered into queue for activation. Please note: this transfer to the deposit contract is only one-way, for phase 0 there is no way for the deposited eth to return to Eth1.x. This is expected to change as part of phase 1.","title":"Getting ether onto the beacon chain"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases/#what-will-the-network-look-like","text":"Once Phase 0 is complete, there will be two active Ethereum chains. For the sake of clarity let\u2019s call them the Eth1 chain (current, PoW main chain) and the Eth2 chain (new Beacon Chain). During this phase, users will be able to send their ETH from the Eth1 chain to the Eth2 chain and become validators. They will NOT be able to migrate this ETH back to Eth1 (for now). In order to run the Beacon Chain, you\u2019re going to need a Beacon Chain client. These are currently being developed separately from the familiar suite of standard Ethereum clients (Geth, Nethermind, Pantheon, et al.) by a number of teams . Most of the teams are putting out periodic updates on their client development progress, and some of the teams are offering bounties to contributors to include more and more developers in building 2.0. You can contribute on Gitcoin grants here On its own, the Beacon Chain might not seem particularly useful. But, as the first component of Ethereum 2.0 to be delivered, it is the foundation of the entire system. Important Considerations There will be a minimum amount of ETH stake needed in order to first bootstrap the beacon chain. This is defined as MIN_GENESIS_VALIDATOR_ACTIVE_COUNT in the beacon chain specification . During Phase 0, the Eth1 chain will live uninterrupted. Nothing will change for Eth1.","title":"What will the network look like?"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases/#phase-1-shard-chains","text":"","title":"Phase 1 - Shard Chains"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases/#what-is-included_1","text":"Shard chains are the key to future scalability as they allow parallel transaction throughput and there will be 64 of them deployed in Phase 1 (with the possibility of adding more over time as hardware scales). Phase 1 is primarily concerned with the construction, validity, and consensus on the data of these shard chains. Phase 1 does not specify shard chain state execution or account balances. It'll be like a trial run for the sharding structure rather than an attempt to use shards to scale. The Beacon Chain will treat shard chain blocks as simple collections of bits with no structure or meaning. Crosslinks Periodically, the current state (the \u201ccombined data root\u201d) of each shard gets recorded in a Beacon Chain block as a crosslink. When the Beacon Chain block has been finalised, the corresponding shard block is considered finalised, and other shards know that they can rely on it for cross-shard transactions. Crosslinks are a set of signatures from a committee attesting to a block in a shard chain, which can be included into the Beacon Chain. Crosslinks are the main means by which the Beacon Chain \"learns about\" the updated state of shard chains. Crosslinks also serve as infrastructure for asynchronous cross-shard communication. Shard validators, who are randomly selected by the Beacon Chain for each shard at each slot, merely come to agreement on each block\u2019s content. They attest to the shard\u2019s contents and state through crosslinking. It doesn\u2019t matter what information appears in shards blocks, so long as all committees reach consensus and update the Beacon Chain on the shard regularly.","title":"What is included?"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases/#what-will-the-network-look-like_1","text":"The Eth1 and Eth2 chains will still operate in parallel after Phase 1.","title":"What will the network look like?"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases/#important-considerations","text":"In Phase 0, 1, and 2 the main PoW chain (Eth1) will remain live while testing and transitioning is happening on the Eth2 chain. This means that rewards will be paid to both Ethereum 2.0 validators as well as the normal PoW block rewards. Therefore, the combined inflation of the two chains may spike initially but then start to trend towards the 0-1% range as the PoW chain is gradually de-emphasized.","title":"Important Considerations"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases/#phase-2-state-execution","text":"","title":"Phase 2 - State Execution"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases/#what-is-included_2","text":"Phase 2 is where the functionality of the entire system will start to come together. Shard chains transition from simple data containers to a structured chain state and Smart Contracts will be reintroduced. Each shard will manage a virtual machine based on eWASM . It'll support accounts, contracts, state, and other abstractions that we\u2019re familiar with from solidity. We can expect familiar tools like truffle, solc, ganache ported to support eWASM before or during Phase 2. Phase 2 also introduces the concept of 'Execution Environments (EEs)'. EEs within a shard can be constructed in whatever way a developer sees fit - there could be an EE for a UTXO-style chain, a Libra-style system, an EE for a fee market relayer and beyond. Every shard has access to all execution environments and has the ability to make transactions within them as well as run and interact with smart contracts. Do note that the concept of execution environments is still in heavy research and development.","title":"What is included?"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases/#important-considerations_1","text":"A dApp will have to choose what shard it wants to be on. That decision matters because cross-shard communication differs on Eth2 as it is not synchronous which means some composability is lost between shards A dApp would have to have rather large data to consume all the resources in a given shard to justify spreading itself over multiple ones. This phase will endow shards with eWASM as the EVM 2.0. It is an open question when and how Ethereum 1.0 accounts and contracts will be migrated to Ethereum 2.0, there are some upgrade plans","title":"Important Considerations"},{"location":"ethereum-roadmap/ethereum-2.0/eth-2.0-phases/#resources","text":"Ethereum Roadmap Ethereum 2.0 Info Eth 2.0 Specs Phase 0 for Humans Sharding Roadmap State of Ethereum Protocol Ethereum 2.0 Design Goals Q&A Session ETHMagicians eWASM","title":"Resources"},{"location":"ethereum-roadmap/ethereum-2.0/overview-playlist/","text":"ETH 2.0 Gitcoin Overview Playlist Scaling throughput ETH 2.0 What are the phases of the ETH 2.0 Roadmap? ETH 2.0 And Sharding How Will Gas Price Work on ETH 2.0? How Does Staking Work on ETH 2.0? How do keys, staking and slashing work on ETH2? How will composability be affected by ETH2.0? What does client collaboration on ETH2.0 look like? Is ETH 2.0 Less Tribal? ETH 2.0 and Cross Chain Will there be pooling on ETH 2.0? What is Quilt working on? You can run ETH2.0 on mobile with Nimbus- right now? You can spin up a ETH2 testnet with Whiteblock Genesis? What is theorized for ETH3?","title":"ETH 2.0 Gitcoin Overview Playlist"},{"location":"ethereum-roadmap/ethereum-2.0/overview-playlist/#eth-20-gitcoin-overview-playlist","text":"","title":"ETH 2.0 Gitcoin Overview Playlist"},{"location":"ethereum-roadmap/ethereum-2.0/overview-playlist/#scaling-throughput-eth-20","text":"","title":"Scaling throughput ETH 2.0"},{"location":"ethereum-roadmap/ethereum-2.0/overview-playlist/#what-are-the-phases-of-the-eth-20-roadmap","text":"","title":"What are the phases of the ETH 2.0 Roadmap?"},{"location":"ethereum-roadmap/ethereum-2.0/overview-playlist/#eth-20-and-sharding","text":"","title":"ETH 2.0 And Sharding"},{"location":"ethereum-roadmap/ethereum-2.0/overview-playlist/#how-will-gas-price-work-on-eth-20","text":"","title":"How Will Gas Price Work on ETH 2.0?"},{"location":"ethereum-roadmap/ethereum-2.0/overview-playlist/#how-does-staking-work-on-eth-20","text":"","title":"How Does Staking Work on ETH 2.0?"},{"location":"ethereum-roadmap/ethereum-2.0/overview-playlist/#how-do-keys-staking-and-slashing-work-on-eth2","text":"","title":"How do keys, staking and slashing work on ETH2?"},{"location":"ethereum-roadmap/ethereum-2.0/overview-playlist/#how-will-composability-be-affected-by-eth20","text":"","title":"How will composability be affected by ETH2.0?"},{"location":"ethereum-roadmap/ethereum-2.0/overview-playlist/#what-does-client-collaboration-on-eth20-look-like","text":"","title":"What does client collaboration on ETH2.0 look like?"},{"location":"ethereum-roadmap/ethereum-2.0/overview-playlist/#is-eth-20-less-tribal","text":"","title":"Is ETH 2.0 Less Tribal?"},{"location":"ethereum-roadmap/ethereum-2.0/overview-playlist/#eth-20-and-cross-chain","text":"","title":"ETH 2.0 and Cross Chain"},{"location":"ethereum-roadmap/ethereum-2.0/overview-playlist/#will-there-be-pooling-on-eth-20","text":"","title":"Will there be pooling on ETH 2.0?"},{"location":"ethereum-roadmap/ethereum-2.0/overview-playlist/#what-is-quilt-working-on","text":"","title":"What is Quilt working on?"},{"location":"ethereum-roadmap/ethereum-2.0/overview-playlist/#you-can-run-eth20-on-mobile-with-nimbus-right-now","text":"","title":"You can run ETH2.0 on mobile with Nimbus- right now?"},{"location":"ethereum-roadmap/ethereum-2.0/overview-playlist/#you-can-spin-up-a-eth2-testnet-with-whiteblock-genesis","text":"","title":"You can spin up a ETH2 testnet with Whiteblock Genesis?"},{"location":"ethereum-roadmap/ethereum-2.0/overview-playlist/#what-is-theorized-for-eth3","text":"","title":"What is theorized for ETH3?"},{"location":"ethereum-roadmap/ethereum-2.0/proof-of-stake/","text":"Proof of Stake (PoS) Summary Proof of Stake represents a class of consensus algorithms in which validators vote on the next block, and the weight of the vote depends upon the size of its stake. It is considered an improvement over Proof of Work (PoW) because of less consumption of electricity, reduced centralization risks, security against different types of 51% attacks, and more. PoS can be classified into two major types: * Chain-Based: Rely on the synchronicity of the network * BFT-Based: Favour consistency of nodes over availability To participate in voting (i.e. to become a validator) you are required to stake ETH for which you'll be rewarded with additional ETH at some interest rate in addition to receiving a portion of the network transaction fees. What is Proof of Stake Proof of Stake (PoS) is a category of consensus algorithms for public blockchains that depend on a validator's economic stake in the network. In Proof of Work (PoW) based public blockchains (e.g. Bitcoin and the current implementation of Ethereum), the algorithm rewards participants who solve cryptographic puzzles in order to validate transactions and create new blocks (i.e. mining). In PoS-based public blockchains (e.g. Ethereum's upcoming Casper implementation), a set of validators take turns proposing and voting on the next block, and the weight of each validator's vote depends on the size of its deposit (i.e. stake). Significant advantages of PoS include security, reduced risk of centralization, and energy efficiency. In general, a PoS algorithm looks as follows. The blockchain keeps track of a set of validators, and anyone who holds the blockchain's base cryptocurrency (in Ethereum's case, ETH) can become a validator by sending a special type of transaction that locks up their ETH into a deposit. The process of creating and agreeing to new blocks is then done through a consensus algorithm in which all current validators can and are expected to participate. There are many kinds of consensus algorithms, and many ways to assign rewards to validators who participate in the consensus algorithm, so there are many \"flavors\" of PoS. From an algorithmic perspective, there are two major types: chain-based and BFT-style PoS. In chain-based PoS, the algorithm pseudo-randomly selects a validator during each time slot (e.g. every period of 10 seconds might be a time slot), and assigns that validator the right to create a single block, and this block must point to some previous block (normally the block at the end of the previously longest chain), and so over time most blocks converge into a single constantly growing chain. In BFT-style PoS, validators are randomly assigned the right to propose blocks, but agreeing on which block is canonical is done through a multi-round process where every validator sends a \"vote\" for some specific block during each round, and at the end of the process all (honest and online) validators permanently agree on whether or not any given block is part of the chain. Note that blocks may still be chained together; the key difference is that consensus on a block can come within one block, and does not depend on the length or size of the chain after it. What are the benefits of Proof of Stake over Proof of Work? No need to consume large quantities of electricity in order to secure a blockchain. (It's estimated that both Bitcoin and Ethereum burn over $1 million worth of electricity and hardware costs per day as part of their consensus mechanism.) Because of the lack of high electricity consumption requirements there is not as much need to issue as many new coins in order to motivate participants to keep participating in the network. It may theoretically even be possible to have negative net issuance, where a portion of transaction fees is \"burned\" thus decreasing the supply over time. Proof of Stake opens the door to a wider array of techniques that use game-theoretic mechanism design in order to more effectively discourage centralized cartels from forming and, if they do form, from acting in ways that are harmful to the network (such as selfish mining in Proof of Work). Reduced centralization risks, as economies of scale are much less of an issue. $10 million of coins will get you exactly 10 times higher returns than $1 million of coins, without any additional disproportionate gains because at the higher level you can afford better mass-production equipment, which is an advantage for Proof of Work. Ability to use economic penalties to make various forms of 51% attacks vastly more expensive to carry out than Proof of Work. To paraphrase Vlad Zamfir, \"it's as though your ASIC farm burned down if you participated in a 51% attack\". What would the equivalent of a 51% attack against Casper look like? There are four basic types of 51% attack: Finality reversion: validators that already finalized block A then finalize some competing block A', thereby breaking the blockchain's finality guarantee. Invalid chain finalization: validators finalize an invalid (or unavailable) block. Liveness denial: validators stop finalizing blocks. Censorship: validators block some or all transactions or blocks from entering the chain. In the first case, users can socially coordinate out-of-band to agree which finalized block came first, and favor that block. The second case can be solved with fraud proofs and data availability proofs. The third case can be solved by a modification to PoS algorithms that gradually reduces (\"leaks\") non-participating nodes' weights in the validator set if they do not participate in consensus; the Casper FFG paper includes a description of this. The fourth is most difficult. The fourth can be recovered from via a \"minority soft fork\", where a minority of honest validators agree the majority is censoring them, and stop building on their chain. Instead, they continue their own chain, and eventually the \"leak\" mechanism described above ensures that this honest minority becomes a 2/3 supermajority on the new chain. At that point, the market is expected to favor the chain controlled by honest nodes over the chain controlled by dishonest nodes. Staking Logistics Why would I want to stake my ETH? For staking your ETH and attesting to correct blocks, you will be rewarded with additional ETH through a network wide interest rate as well as receive a portion of network transaction fees. Details can be found here . What are the minimum requirements to stake? A minimum of 32 ETH per validator Computer with sufficient hardware specs Internet connection What software do I need to run to stake? There are two main types of software to be aware of when considering staking on Ethereum: Beacon nodes: This is the hub for your validators. Stores canonical state, handles peers and incoming sync, propagates blocks and attestations. Has a gRPC server that clients can connect to and provides a public API. Validator clients: Talks to your beacon node and signs blocks. You can have multiple of these at 32 ETH each. Stores important secrets such as RANDAO reveal, proof of custody for shared data, and BLS private key. Can swap underlying beacon nodes efficiently. Tracks shared state execution data and data blobs that the validator has signed. This means that there are three possible combinations of software to run: Beacon node only Beacon node + validator client Beacon node + multiple validator clients What are the hardware requirements to run this software? Still TBD. Ideally we can get minimum requirements for all three setups mentioned above. What happens if I lose my internet connection while staking? The key to being a validator is to ensure that you are consistently available to vote for blocks which in turn secures the network. Therefore, there is a slight penalty if your validator client goes offline at any point, in order to encourage validator availability. There are two scenarios where this can happen: If blocks are finalizing and you're offline, you can lose x% of your deposit over a year where x=current_interest For example, if the current interest rate is 5%, you would lose 0.0137% of your deposit every day, but gain that for every day you're online. If blocks aren't finalizing (>33% of validators are offline) and you're offline, you can lose 60% in 18 days. If at any point your deposit drops below 16 ETH you will be removed from the validator set entirely. How long is my Ether locked up if I stake? You won't be able to withdraw your stake until Eth1 mainnet has docked with the Eth2 Beacon Chain and sharding system. This is known as \"Phase 1.5\" on technical roadmaps an will ship 2021/22. Once that happened, there will be a withdrawal queue that you are placed into when wanting to withdraw ETH from your validator. If there is no queue, then the minimum withdraw time is 18 hours and adjusts dynamically depending on how many people are withdrawing at that time. Resources Proof of Stake FAQ CBC Casper Resources Beacon and Validator explanations Some details around staking from Vitalik More on Docking Mainnet with Eth2","title":"Proof of Stake"},{"location":"ethereum-roadmap/ethereum-2.0/proof-of-stake/#proof-of-stake-pos","text":"","title":"Proof of Stake (PoS)"},{"location":"ethereum-roadmap/ethereum-2.0/proof-of-stake/#summary","text":"Proof of Stake represents a class of consensus algorithms in which validators vote on the next block, and the weight of the vote depends upon the size of its stake. It is considered an improvement over Proof of Work (PoW) because of less consumption of electricity, reduced centralization risks, security against different types of 51% attacks, and more. PoS can be classified into two major types: * Chain-Based: Rely on the synchronicity of the network * BFT-Based: Favour consistency of nodes over availability To participate in voting (i.e. to become a validator) you are required to stake ETH for which you'll be rewarded with additional ETH at some interest rate in addition to receiving a portion of the network transaction fees.","title":"Summary"},{"location":"ethereum-roadmap/ethereum-2.0/proof-of-stake/#what-is-proof-of-stake","text":"Proof of Stake (PoS) is a category of consensus algorithms for public blockchains that depend on a validator's economic stake in the network. In Proof of Work (PoW) based public blockchains (e.g. Bitcoin and the current implementation of Ethereum), the algorithm rewards participants who solve cryptographic puzzles in order to validate transactions and create new blocks (i.e. mining). In PoS-based public blockchains (e.g. Ethereum's upcoming Casper implementation), a set of validators take turns proposing and voting on the next block, and the weight of each validator's vote depends on the size of its deposit (i.e. stake). Significant advantages of PoS include security, reduced risk of centralization, and energy efficiency. In general, a PoS algorithm looks as follows. The blockchain keeps track of a set of validators, and anyone who holds the blockchain's base cryptocurrency (in Ethereum's case, ETH) can become a validator by sending a special type of transaction that locks up their ETH into a deposit. The process of creating and agreeing to new blocks is then done through a consensus algorithm in which all current validators can and are expected to participate. There are many kinds of consensus algorithms, and many ways to assign rewards to validators who participate in the consensus algorithm, so there are many \"flavors\" of PoS. From an algorithmic perspective, there are two major types: chain-based and BFT-style PoS. In chain-based PoS, the algorithm pseudo-randomly selects a validator during each time slot (e.g. every period of 10 seconds might be a time slot), and assigns that validator the right to create a single block, and this block must point to some previous block (normally the block at the end of the previously longest chain), and so over time most blocks converge into a single constantly growing chain. In BFT-style PoS, validators are randomly assigned the right to propose blocks, but agreeing on which block is canonical is done through a multi-round process where every validator sends a \"vote\" for some specific block during each round, and at the end of the process all (honest and online) validators permanently agree on whether or not any given block is part of the chain. Note that blocks may still be chained together; the key difference is that consensus on a block can come within one block, and does not depend on the length or size of the chain after it.","title":"What is Proof of Stake"},{"location":"ethereum-roadmap/ethereum-2.0/proof-of-stake/#what-are-the-benefits-of-proof-of-stake-over-proof-of-work","text":"No need to consume large quantities of electricity in order to secure a blockchain. (It's estimated that both Bitcoin and Ethereum burn over $1 million worth of electricity and hardware costs per day as part of their consensus mechanism.) Because of the lack of high electricity consumption requirements there is not as much need to issue as many new coins in order to motivate participants to keep participating in the network. It may theoretically even be possible to have negative net issuance, where a portion of transaction fees is \"burned\" thus decreasing the supply over time. Proof of Stake opens the door to a wider array of techniques that use game-theoretic mechanism design in order to more effectively discourage centralized cartels from forming and, if they do form, from acting in ways that are harmful to the network (such as selfish mining in Proof of Work). Reduced centralization risks, as economies of scale are much less of an issue. $10 million of coins will get you exactly 10 times higher returns than $1 million of coins, without any additional disproportionate gains because at the higher level you can afford better mass-production equipment, which is an advantage for Proof of Work. Ability to use economic penalties to make various forms of 51% attacks vastly more expensive to carry out than Proof of Work. To paraphrase Vlad Zamfir, \"it's as though your ASIC farm burned down if you participated in a 51% attack\".","title":"What are the benefits of Proof of Stake over Proof of Work?"},{"location":"ethereum-roadmap/ethereum-2.0/proof-of-stake/#what-would-the-equivalent-of-a-51-attack-against-casper-look-like","text":"There are four basic types of 51% attack: Finality reversion: validators that already finalized block A then finalize some competing block A', thereby breaking the blockchain's finality guarantee. Invalid chain finalization: validators finalize an invalid (or unavailable) block. Liveness denial: validators stop finalizing blocks. Censorship: validators block some or all transactions or blocks from entering the chain. In the first case, users can socially coordinate out-of-band to agree which finalized block came first, and favor that block. The second case can be solved with fraud proofs and data availability proofs. The third case can be solved by a modification to PoS algorithms that gradually reduces (\"leaks\") non-participating nodes' weights in the validator set if they do not participate in consensus; the Casper FFG paper includes a description of this. The fourth is most difficult. The fourth can be recovered from via a \"minority soft fork\", where a minority of honest validators agree the majority is censoring them, and stop building on their chain. Instead, they continue their own chain, and eventually the \"leak\" mechanism described above ensures that this honest minority becomes a 2/3 supermajority on the new chain. At that point, the market is expected to favor the chain controlled by honest nodes over the chain controlled by dishonest nodes.","title":"What would the equivalent of a 51% attack against Casper look like?"},{"location":"ethereum-roadmap/ethereum-2.0/proof-of-stake/#staking-logistics","text":"","title":"Staking Logistics"},{"location":"ethereum-roadmap/ethereum-2.0/proof-of-stake/#why-would-i-want-to-stake-my-eth","text":"For staking your ETH and attesting to correct blocks, you will be rewarded with additional ETH through a network wide interest rate as well as receive a portion of network transaction fees. Details can be found here .","title":"Why would I want to stake my ETH?"},{"location":"ethereum-roadmap/ethereum-2.0/proof-of-stake/#what-are-the-minimum-requirements-to-stake","text":"A minimum of 32 ETH per validator Computer with sufficient hardware specs Internet connection","title":"What are the minimum requirements to stake?"},{"location":"ethereum-roadmap/ethereum-2.0/proof-of-stake/#what-software-do-i-need-to-run-to-stake","text":"There are two main types of software to be aware of when considering staking on Ethereum: Beacon nodes: This is the hub for your validators. Stores canonical state, handles peers and incoming sync, propagates blocks and attestations. Has a gRPC server that clients can connect to and provides a public API. Validator clients: Talks to your beacon node and signs blocks. You can have multiple of these at 32 ETH each. Stores important secrets such as RANDAO reveal, proof of custody for shared data, and BLS private key. Can swap underlying beacon nodes efficiently. Tracks shared state execution data and data blobs that the validator has signed. This means that there are three possible combinations of software to run: Beacon node only Beacon node + validator client Beacon node + multiple validator clients","title":"What software do I need to run to stake?"},{"location":"ethereum-roadmap/ethereum-2.0/proof-of-stake/#what-are-the-hardware-requirements-to-run-this-software","text":"Still TBD. Ideally we can get minimum requirements for all three setups mentioned above.","title":"What are the hardware requirements to run this software?"},{"location":"ethereum-roadmap/ethereum-2.0/proof-of-stake/#what-happens-if-i-lose-my-internet-connection-while-staking","text":"The key to being a validator is to ensure that you are consistently available to vote for blocks which in turn secures the network. Therefore, there is a slight penalty if your validator client goes offline at any point, in order to encourage validator availability. There are two scenarios where this can happen: If blocks are finalizing and you're offline, you can lose x% of your deposit over a year where x=current_interest For example, if the current interest rate is 5%, you would lose 0.0137% of your deposit every day, but gain that for every day you're online. If blocks aren't finalizing (>33% of validators are offline) and you're offline, you can lose 60% in 18 days. If at any point your deposit drops below 16 ETH you will be removed from the validator set entirely.","title":"What happens if I lose my internet connection while staking?"},{"location":"ethereum-roadmap/ethereum-2.0/proof-of-stake/#how-long-is-my-ether-locked-up-if-i-stake","text":"You won't be able to withdraw your stake until Eth1 mainnet has docked with the Eth2 Beacon Chain and sharding system. This is known as \"Phase 1.5\" on technical roadmaps an will ship 2021/22. Once that happened, there will be a withdrawal queue that you are placed into when wanting to withdraw ETH from your validator. If there is no queue, then the minimum withdraw time is 18 hours and adjusts dynamically depending on how many people are withdrawing at that time.","title":"How long is my Ether locked up if I stake?"},{"location":"ethereum-roadmap/ethereum-2.0/proof-of-stake/#resources","text":"Proof of Stake FAQ CBC Casper Resources Beacon and Validator explanations Some details around staking from Vitalik More on Docking Mainnet with Eth2","title":"Resources"},{"location":"ethereum-roadmap/ethereum-2.0/sharding/","text":"Sharding Summary There is a trilemma in blockchain systems that can be visualized in form of a triangle known as DCS triangle, what it conveys is \"It is impossible to achieve all three Decentralization, Consistency, and Scalability simultaenously. A tradeoff is necessary (you can choose any two but not all)\". Sharding is an attempt to solve this challenge. It simply means partitioning large chains (databases) into smaller, faster ones hence making the entire system more scalable. How? To solve scalability, we split the state and history stored on the main chain into shards. Each shard manages itself, has its own transaction history, and the effect of transactions in some shard are limited to that shard only. Examples for this would be: * A dApp having a whole shard by himself so that all tx's related to it will be on that one shard only. * Several dApps related to a particular domain will be on one single shard. The later phases of ETH2.0 considers the possibility of cross-shard communications. Sharding also introduces different types of nodes like \"Light Node\", \"Super-Full Node\" etc. depending upon how much data it downloads, how much it verifies. The Scalability Trilemma The Scalability Trilemma claims that blockchain systems can only, at most, have two of the following three properties: Decentralization (defined as the system being able to run in a scenario where each participant only has access to O(c) resources, i.e. a regular laptop or small VPS) Scalability (defined as being able to process many transactions) Security (defined as being secure against attackers with up to O(n) resources) The key challenge of scalability is finding a way to achieve all three at the base layer of a blockchain - sharding is one such attempt at solving this challenge. What is sharding? Currently, in all blockchain protocols, each node stores the entire state (account balances, contract code and storage, etc.) and processes all transactions. This provides a large amount of security, but greatly limits scalability: a blockchain cannot process more transactions than a single node can. In large part, because of this, Bitcoin is limited to ~3-7 transactions per second, Ethereum to 7-15, etc. However, this poses a question: are there ways to create a new mechanism, where only a small subset of nodes verifies each transaction? As long as there are sufficiently many nodes verifying each transaction, then the system is still highly secure. But a sufficiently small percentage of the total validator set that the system can process many transactions in parallel, could we not split up transaction processing between smaller groups of nodes to greatly increase a blockchain's total throughput? What is the basic idea behind sharding? We split the state and history of Ethereum up into partitions that we call \u201cshards\u201d. For example, a sharding scheme on Ethereum might put all addresses starting with 0x00 into one shard, all addresses starting with 0x01 into another shard, etc. In the simplest form of sharding, each shard also has its own transaction history, and the effect of transactions in some shard are limited to the state of shard of that same shard. One simple example would be a multi-asset blockchain, where there are many shards and where each shard stores the balances and processes the transactions associated with one particular asset. In more advanced forms of sharding, there exists some form of cross-shard communication capability, where transactions on one shard can trigger events on other shards. What might a basic design of a sharded blockchain look like? There exists a set of validators (ie. proof of stake nodes), who randomly get assigned the right to create shard blocks. During each slot (eg. an 8-second period of time), for each shard in [0...999] a random validator gets selected, and given the right to create a block on a shard, which might contain up to, say, 32 kb of data. Also, for each shard, a set of 100 validators get selected as attestors. The header of a block, together with at least 67 of the attesting signatures, can be published as an object that gets included in the \"main chain\" (also called the beacon chain). Note that there are now several \"levels\" of nodes that can exist in such a system: Super-full node - downloads the full data of the beacon chain and every shard block referenced in the beacon chain. Top-level node - processes the beacon chain blocks only, including the headers and signatures of the shard blocks, but does not download all the data of the shard blocks. Single-shard node - acts as a top-level node, but also fully downloads and verifies every collation on some specific shard that it cares more about. Light node - downloads and verifies the block headers of main chain blocks only; does not process any collation headers or transactions unless it needs to read some specific entry in the state of some specific shard, in which case it downloads the Merkle branch to the most recent collation header for that shard and from there downloads the Merkle proof of the desired value in the state. Resources Sharding FAQ Sharding Roadmap DCS Triangle","title":"Sharding"},{"location":"ethereum-roadmap/ethereum-2.0/sharding/#sharding","text":"","title":"Sharding"},{"location":"ethereum-roadmap/ethereum-2.0/sharding/#summary","text":"There is a trilemma in blockchain systems that can be visualized in form of a triangle known as DCS triangle, what it conveys is \"It is impossible to achieve all three Decentralization, Consistency, and Scalability simultaenously. A tradeoff is necessary (you can choose any two but not all)\". Sharding is an attempt to solve this challenge. It simply means partitioning large chains (databases) into smaller, faster ones hence making the entire system more scalable. How? To solve scalability, we split the state and history stored on the main chain into shards. Each shard manages itself, has its own transaction history, and the effect of transactions in some shard are limited to that shard only. Examples for this would be: * A dApp having a whole shard by himself so that all tx's related to it will be on that one shard only. * Several dApps related to a particular domain will be on one single shard. The later phases of ETH2.0 considers the possibility of cross-shard communications. Sharding also introduces different types of nodes like \"Light Node\", \"Super-Full Node\" etc. depending upon how much data it downloads, how much it verifies.","title":"Summary"},{"location":"ethereum-roadmap/ethereum-2.0/sharding/#the-scalability-trilemma","text":"The Scalability Trilemma claims that blockchain systems can only, at most, have two of the following three properties: Decentralization (defined as the system being able to run in a scenario where each participant only has access to O(c) resources, i.e. a regular laptop or small VPS) Scalability (defined as being able to process many transactions) Security (defined as being secure against attackers with up to O(n) resources) The key challenge of scalability is finding a way to achieve all three at the base layer of a blockchain - sharding is one such attempt at solving this challenge.","title":"The Scalability Trilemma"},{"location":"ethereum-roadmap/ethereum-2.0/sharding/#what-is-sharding","text":"Currently, in all blockchain protocols, each node stores the entire state (account balances, contract code and storage, etc.) and processes all transactions. This provides a large amount of security, but greatly limits scalability: a blockchain cannot process more transactions than a single node can. In large part, because of this, Bitcoin is limited to ~3-7 transactions per second, Ethereum to 7-15, etc. However, this poses a question: are there ways to create a new mechanism, where only a small subset of nodes verifies each transaction? As long as there are sufficiently many nodes verifying each transaction, then the system is still highly secure. But a sufficiently small percentage of the total validator set that the system can process many transactions in parallel, could we not split up transaction processing between smaller groups of nodes to greatly increase a blockchain's total throughput?","title":"What is sharding?"},{"location":"ethereum-roadmap/ethereum-2.0/sharding/#what-is-the-basic-idea-behind-sharding","text":"We split the state and history of Ethereum up into partitions that we call \u201cshards\u201d. For example, a sharding scheme on Ethereum might put all addresses starting with 0x00 into one shard, all addresses starting with 0x01 into another shard, etc. In the simplest form of sharding, each shard also has its own transaction history, and the effect of transactions in some shard are limited to the state of shard of that same shard. One simple example would be a multi-asset blockchain, where there are many shards and where each shard stores the balances and processes the transactions associated with one particular asset. In more advanced forms of sharding, there exists some form of cross-shard communication capability, where transactions on one shard can trigger events on other shards.","title":"What is the basic idea behind sharding?"},{"location":"ethereum-roadmap/ethereum-2.0/sharding/#what-might-a-basic-design-of-a-sharded-blockchain-look-like","text":"There exists a set of validators (ie. proof of stake nodes), who randomly get assigned the right to create shard blocks. During each slot (eg. an 8-second period of time), for each shard in [0...999] a random validator gets selected, and given the right to create a block on a shard, which might contain up to, say, 32 kb of data. Also, for each shard, a set of 100 validators get selected as attestors. The header of a block, together with at least 67 of the attesting signatures, can be published as an object that gets included in the \"main chain\" (also called the beacon chain). Note that there are now several \"levels\" of nodes that can exist in such a system: Super-full node - downloads the full data of the beacon chain and every shard block referenced in the beacon chain. Top-level node - processes the beacon chain blocks only, including the headers and signatures of the shard blocks, but does not download all the data of the shard blocks. Single-shard node - acts as a top-level node, but also fully downloads and verifies every collation on some specific shard that it cares more about. Light node - downloads and verifies the block headers of main chain blocks only; does not process any collation headers or transactions unless it needs to read some specific entry in the state of some specific shard, in which case it downloads the Merkle branch to the most recent collation header for that shard and from there downloads the Merkle proof of the desired value in the state.","title":"What might a basic design of a sharded blockchain look like?"},{"location":"ethereum-roadmap/ethereum-2.0/sharding/#resources","text":"Sharding FAQ Sharding Roadmap DCS Triangle","title":"Resources"},{"location":"ethereum-roadmap/ethereum-2.0/stateless-clients/","text":"Stateless Clients Introduction Ethereum is based on blockchain technology. A blockchain is defined as a \"cryptographically secure transactional singleton machine with shared-state.\" \"Cryptographically secure\" means that creation and movement of the digital currency is mathematically obscured by extremely complex algorithms nearly impossible to decode. \"Transaction singleton machine\" means a single canonical instance of the machine is being created in the system to handle transactions. This is a singular truth that all participants on the network believe in. \"With shared-state\" means that the state of the machine is stored and shared with everyone. This is an examination of the concept of state in a virtual machine which introduces the concept of a stateless client in Ethereum. What does state mean? State defines the values contained in a block at any given time. The state of the virtual machine changes after each set of transactions are processed. State-defining Objects Account State The global \"shared-state\" is comprised of many objects called accounts. Two types of accounts exist, externally owned and contract accounts. Externally owned accounts are controlled by private keys and have no code associate with them. Contract accounts are controlled by their contract code and have code associated with them. Account state is further broken down into: nonce: For externally owned accounts this refers to number of transactions sent from the address. Contract accounts would store the number of contracts created by the account. balance: The amount of Ether stored on the account. storageRoot: A hash of the root node of a Merkle Patricia tree. This encodes a hash of storage contents on the account. codeHash: The hash of the EVM (Ethereum Virtual Machine) code of this account. Contract account code gets hashed and stored here. Externally owned accounts contain the hash of an empty string. World State World state is a mapping of account addresses between account states. This mapping is stored as a Merkle Patricia tree. This same structure is used to store transactions and receipts. This becomes a large amount of data which needs to be stored and processed if the entire state is stored and traversed when creating new blocks. Ethereum Stateless Client The way a block is constructed on Ethereum offers a method to create a sort of stateless client. It is important to know that as Ethereum evolves, statelessness is ultimately going to be a spectrum. Some knowledge of data in surrounding nodes will be required in order to create valid hashes. Statelessness allows the creation of light nodes. A light node contains only the chain of headers without the execution of any transactions or associated states. When a node comes online it will be fully stateless since it will hold zero information regarding state. Over time it will soak up the state as transactions touch upon it, putting together a more complete state with every change of state presented. New nodes will be more stateless offering benefits of lower memory usage, disk, and I/O. Bandwidth usage will be the highest because peers need to send larger proofs to the new node as it develops its own state data. More stateful clients will have higher demands on memory, disk, and I/O while bandwidth requirements would decrease. Nodes can become more stateful until a certain tradeoff point is reached and then halted from further acquisition of state information to optimize the trade off in computing power and bandwidth. Applications of Stateless Clients in Ethereum Ethereum 1.X implements stateless clients but not stateless miners. Fast sync initializes as a stateless node. It creates what is called a launch-block and only records the input and output state of this block locally. The launch block is a predetermined block number that is a certain amount of time in the future. The future dated deadline is so that the node can work on constructing the launch-block. Witness data is called by the node to construct blocks. As long as the launch-block is created early or on time, the creation of blocks will continue and the node is active. Use of witness data and input/output states only make this a stateless client. Ethereum 2.0 implements stateless clients and stateless miners in Sharding. All nodes are stateless so that faster processing with less data increases scalability greatly. Currently the Ethereum blockchain is a sequential chain of blocks where one is completed on top of another in a linear fashion. This leads to traffic jams and an overall inefficency in data processing. Sharding is a design where the Ethereum network is split into groups referred to a shards. Each shard has its own independant state. Transactions are delegated to different shards for processing, so rather than the entire network processing the same transaction, parallel computing increases efficiency by allowing the work to be split up and executed concurrently. Additional Benefits of Stateless Clients Mining new blocks will be moved from proof of work (PoW) to proof of stake (PoS). A user can become a miner by staking a minimum amount of Ethereum live on the blockchain. This allows a miner to vote on the next block to create. Consensus comes very quickly, within one block of the evaluated block, because lengthy hash cryptography is no longer used to create blocks. This greatly reduces electricity requirements, therefore cost of running a node. Additionally, the held stake is an economic incentive / punishement for any miner that performs nefarious activity. Disk I/O becomes less susceptable to DoS attacks, however still remains the best vector for a DoS attack. Even for state-storing clients, the account lists allow clients to pre-fetch storage data from disk, possibly in parallel, greatly reducing their vulnerability to DoS attacks. In a sharded blockchain, security is increased by reshuffling clients between shards frequently. In a state-storing client model, reshuffling involved clients download the full state of the new shard they are being reshuffled to. In a stateless client, this cost drops to zero, allowing clients to be reshuffled between every single block that they create. Transaction speed and scalablility will also improve. Security Considerations DoS attacks aimed at the disk I/O vector are still the greatest risk for DoS attacks. Casper is the proof of staking algorithm used in Ethereum 2.0. The following are a list of theoretical attacks that could be executed on Casper for further research on your own. * Casper Weaknesses * Casper Sybil Attack * Casper 51% Attack * Casper Bribe Attack * Casper Censorship Attack * Casper Liveness Denial Attack * Casper Long Range Attack Resources The 1.x Files: The State of Stateless Ethereum The Stateless Client Concept The shades of statefulness (in Ethereum nodes) Data from the Ethereum stateless prototype The Basics of State Channels Ethereum Sharding Explained Intro to Beam Sync Casper 51% Attack Ethereum Platform Review Opportunities and Challenges for Private and Consortium Blockchains How Does Ethereum Work Anyway? Early Eth1<->Eth2 Switch is official!","title":"Stateless Clients"},{"location":"ethereum-roadmap/ethereum-2.0/stateless-clients/#stateless-clients","text":"","title":"Stateless Clients"},{"location":"ethereum-roadmap/ethereum-2.0/stateless-clients/#introduction","text":"Ethereum is based on blockchain technology. A blockchain is defined as a \"cryptographically secure transactional singleton machine with shared-state.\" \"Cryptographically secure\" means that creation and movement of the digital currency is mathematically obscured by extremely complex algorithms nearly impossible to decode. \"Transaction singleton machine\" means a single canonical instance of the machine is being created in the system to handle transactions. This is a singular truth that all participants on the network believe in. \"With shared-state\" means that the state of the machine is stored and shared with everyone. This is an examination of the concept of state in a virtual machine which introduces the concept of a stateless client in Ethereum.","title":"Introduction"},{"location":"ethereum-roadmap/ethereum-2.0/stateless-clients/#what-does-state-mean","text":"State defines the values contained in a block at any given time. The state of the virtual machine changes after each set of transactions are processed.","title":"What does state mean?"},{"location":"ethereum-roadmap/ethereum-2.0/stateless-clients/#state-defining-objects","text":"","title":"State-defining Objects"},{"location":"ethereum-roadmap/ethereum-2.0/stateless-clients/#account-state","text":"The global \"shared-state\" is comprised of many objects called accounts. Two types of accounts exist, externally owned and contract accounts. Externally owned accounts are controlled by private keys and have no code associate with them. Contract accounts are controlled by their contract code and have code associated with them. Account state is further broken down into: nonce: For externally owned accounts this refers to number of transactions sent from the address. Contract accounts would store the number of contracts created by the account. balance: The amount of Ether stored on the account. storageRoot: A hash of the root node of a Merkle Patricia tree. This encodes a hash of storage contents on the account. codeHash: The hash of the EVM (Ethereum Virtual Machine) code of this account. Contract account code gets hashed and stored here. Externally owned accounts contain the hash of an empty string.","title":"Account State"},{"location":"ethereum-roadmap/ethereum-2.0/stateless-clients/#world-state","text":"World state is a mapping of account addresses between account states. This mapping is stored as a Merkle Patricia tree. This same structure is used to store transactions and receipts. This becomes a large amount of data which needs to be stored and processed if the entire state is stored and traversed when creating new blocks.","title":"World State"},{"location":"ethereum-roadmap/ethereum-2.0/stateless-clients/#ethereum-stateless-client","text":"The way a block is constructed on Ethereum offers a method to create a sort of stateless client. It is important to know that as Ethereum evolves, statelessness is ultimately going to be a spectrum. Some knowledge of data in surrounding nodes will be required in order to create valid hashes. Statelessness allows the creation of light nodes. A light node contains only the chain of headers without the execution of any transactions or associated states. When a node comes online it will be fully stateless since it will hold zero information regarding state. Over time it will soak up the state as transactions touch upon it, putting together a more complete state with every change of state presented. New nodes will be more stateless offering benefits of lower memory usage, disk, and I/O. Bandwidth usage will be the highest because peers need to send larger proofs to the new node as it develops its own state data. More stateful clients will have higher demands on memory, disk, and I/O while bandwidth requirements would decrease. Nodes can become more stateful until a certain tradeoff point is reached and then halted from further acquisition of state information to optimize the trade off in computing power and bandwidth.","title":"Ethereum Stateless Client"},{"location":"ethereum-roadmap/ethereum-2.0/stateless-clients/#applications-of-stateless-clients-in-ethereum","text":"Ethereum 1.X implements stateless clients but not stateless miners. Fast sync initializes as a stateless node. It creates what is called a launch-block and only records the input and output state of this block locally. The launch block is a predetermined block number that is a certain amount of time in the future. The future dated deadline is so that the node can work on constructing the launch-block. Witness data is called by the node to construct blocks. As long as the launch-block is created early or on time, the creation of blocks will continue and the node is active. Use of witness data and input/output states only make this a stateless client. Ethereum 2.0 implements stateless clients and stateless miners in Sharding. All nodes are stateless so that faster processing with less data increases scalability greatly. Currently the Ethereum blockchain is a sequential chain of blocks where one is completed on top of another in a linear fashion. This leads to traffic jams and an overall inefficency in data processing. Sharding is a design where the Ethereum network is split into groups referred to a shards. Each shard has its own independant state. Transactions are delegated to different shards for processing, so rather than the entire network processing the same transaction, parallel computing increases efficiency by allowing the work to be split up and executed concurrently.","title":"Applications of Stateless Clients in Ethereum"},{"location":"ethereum-roadmap/ethereum-2.0/stateless-clients/#additional-benefits-of-stateless-clients","text":"Mining new blocks will be moved from proof of work (PoW) to proof of stake (PoS). A user can become a miner by staking a minimum amount of Ethereum live on the blockchain. This allows a miner to vote on the next block to create. Consensus comes very quickly, within one block of the evaluated block, because lengthy hash cryptography is no longer used to create blocks. This greatly reduces electricity requirements, therefore cost of running a node. Additionally, the held stake is an economic incentive / punishement for any miner that performs nefarious activity. Disk I/O becomes less susceptable to DoS attacks, however still remains the best vector for a DoS attack. Even for state-storing clients, the account lists allow clients to pre-fetch storage data from disk, possibly in parallel, greatly reducing their vulnerability to DoS attacks. In a sharded blockchain, security is increased by reshuffling clients between shards frequently. In a state-storing client model, reshuffling involved clients download the full state of the new shard they are being reshuffled to. In a stateless client, this cost drops to zero, allowing clients to be reshuffled between every single block that they create. Transaction speed and scalablility will also improve.","title":"Additional Benefits of Stateless Clients"},{"location":"ethereum-roadmap/ethereum-2.0/stateless-clients/#security-considerations","text":"DoS attacks aimed at the disk I/O vector are still the greatest risk for DoS attacks. Casper is the proof of staking algorithm used in Ethereum 2.0. The following are a list of theoretical attacks that could be executed on Casper for further research on your own. * Casper Weaknesses * Casper Sybil Attack * Casper 51% Attack * Casper Bribe Attack * Casper Censorship Attack * Casper Liveness Denial Attack * Casper Long Range Attack","title":"Security Considerations"},{"location":"ethereum-roadmap/ethereum-2.0/stateless-clients/#resources","text":"The 1.x Files: The State of Stateless Ethereum The Stateless Client Concept The shades of statefulness (in Ethereum nodes) Data from the Ethereum stateless prototype The Basics of State Channels Ethereum Sharding Explained Intro to Beam Sync Casper 51% Attack Ethereum Platform Review Opportunities and Challenges for Private and Consortium Blockchains How Does Ethereum Work Anyway? Early Eth1<->Eth2 Switch is official!","title":"Resources"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/harmony/","text":"Harmony Background Harmony is ethereum\u2019s original Java client formerly maintained by a group of independent developers. Implementation Details Harmony is building an Ethereum 2.0 client written in the Java programming language and acts as an alternative to the enterprise-focused Pantheon client. Harmony operates under a General Public License (GPL) designed to ensure any implementations of the code remain \"free software and stay free software\". Resources: Github","title":"Harmony"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/harmony/#harmony","text":"","title":"Harmony"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/harmony/#background","text":"Harmony is ethereum\u2019s original Java client formerly maintained by a group of independent developers.","title":"Background"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/harmony/#implementation-details","text":"Harmony is building an Ethereum 2.0 client written in the Java programming language and acts as an alternative to the enterprise-focused Pantheon client. Harmony operates under a General Public License (GPL) designed to ensure any implementations of the code remain \"free software and stay free software\".","title":"Implementation Details"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/harmony/#resources","text":"Github","title":"Resources:"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/lighthouse/","text":"Sigma Background Founded in 2016, Sigma Prime is an information security and blockchain technology consulting company. Implementation Details Sigma Prime is building an Ethereum 2.0 client called Lighthouse written in the programming language Rust. Resources: Website Github Twitter Blog","title":"Lighthouse"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/lighthouse/#sigma","text":"","title":"Sigma"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/lighthouse/#background","text":"Founded in 2016, Sigma Prime is an information security and blockchain technology consulting company.","title":"Background"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/lighthouse/#implementation-details","text":"Sigma Prime is building an Ethereum 2.0 client called Lighthouse written in the programming language Rust.","title":"Implementation Details"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/lighthouse/#resources","text":"Website Github Twitter Blog","title":"Resources:"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/lodestar/","text":"ChainSafe Systems Background Based in Toronto, ChainSafe Systems is a blockchain research and development firm contributing to Ethereum 2.0, Filecoin, Cosmos, Polkadot and Ethereum Classic. Current and former ethereum-based projects including Aragon, Bunz, Polymath, York University, George Brown College, ETC Coop and ETC Labs. Implementation Details The team is currently building an Ethereum 2.0 client written in JavaScript/TypeScript called Lodestar. In addition to the beacon chain client, the team is also working on 22 packages and libraries. A complete list can be found here . Finally, the Lodestar team is leading the Eth2 space in light client research and development and has received funding from the EF and Moloch DAO for this purpose. Resources: Documents Website Github Discord Twitter","title":"Lodestar"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/lodestar/#chainsafe-systems","text":"","title":"ChainSafe Systems"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/lodestar/#background","text":"Based in Toronto, ChainSafe Systems is a blockchain research and development firm contributing to Ethereum 2.0, Filecoin, Cosmos, Polkadot and Ethereum Classic. Current and former ethereum-based projects including Aragon, Bunz, Polymath, York University, George Brown College, ETC Coop and ETC Labs.","title":"Background"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/lodestar/#implementation-details","text":"The team is currently building an Ethereum 2.0 client written in JavaScript/TypeScript called Lodestar. In addition to the beacon chain client, the team is also working on 22 packages and libraries. A complete list can be found here . Finally, the Lodestar team is leading the Eth2 space in light client research and development and has received funding from the EF and Moloch DAO for this purpose.","title":"Implementation Details"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/lodestar/#resources","text":"Documents Website Github Discord Twitter","title":"Resources:"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/nethermind/","text":"Cortex by Nethermind Background Founded in 2017 by a small team of technologists, Nethermind builds Ethereum solutions for developers and enterprises. Boosted by a grant from the Ethereum Foundation in August 2018, the team has worked to deliver the fastest Ethereum client in the market, optimised to the very last byte. In addition to the client, the team has built a peer-to-peer Data Marketplace, run multiple free Advanced EVM workshops to educate developers, and been actively involved with Ethereum Core development. Nethermind is based in London, UK. Implementation Details Cortex is an Ethereum 2.0 client written in the .NET programming language. Resources: Website Github Twitter","title":"Nethermind"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/nethermind/#cortex-by-nethermind","text":"","title":"Cortex by Nethermind"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/nethermind/#background","text":"Founded in 2017 by a small team of technologists, Nethermind builds Ethereum solutions for developers and enterprises. Boosted by a grant from the Ethereum Foundation in August 2018, the team has worked to deliver the fastest Ethereum client in the market, optimised to the very last byte. In addition to the client, the team has built a peer-to-peer Data Marketplace, run multiple free Advanced EVM workshops to educate developers, and been actively involved with Ethereum Core development. Nethermind is based in London, UK.","title":"Background"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/nethermind/#implementation-details","text":"Cortex is an Ethereum 2.0 client written in the .NET programming language.","title":"Implementation Details"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/nethermind/#resources","text":"Website Github Twitter","title":"Resources:"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/nimbus/","text":"Status Background Status is a company building various blockchain-based applications. Their most popular product is a messaging app called Status - an open source, Ethereum-based app that gives people the power to chat, transact, and access a revolutionary world of DApps from their mobile device. Implementation Details Status is building Nimbus - an Ethereum 2.0 client written in the programming language Nim. Nimbus is expected to be Ethereum's first mobile-native client. Resources: Website Github Twitter","title":"Nimbus"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/nimbus/#status","text":"","title":"Status"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/nimbus/#background","text":"Status is a company building various blockchain-based applications. Their most popular product is a messaging app called Status - an open source, Ethereum-based app that gives people the power to chat, transact, and access a revolutionary world of DApps from their mobile device.","title":"Background"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/nimbus/#implementation-details","text":"Status is building Nimbus - an Ethereum 2.0 client written in the programming language Nim. Nimbus is expected to be Ethereum's first mobile-native client.","title":"Implementation Details"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/nimbus/#resources","text":"Website Github Twitter","title":"Resources:"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/prysm/","text":"Prysmatic Labs Background Prysmatic Labs was founded in January of 2018 with the goal of helping the Ethereum blockchain reach scalability. Implementation Details Prysmatic Labs are developing Prysm - an Ethereum 2.0 client written in the programming language Go. The Prysm client will act as a counterpart to the already popular Go client, Geth. Resources: Website Github Twitter Blog","title":"Prysm"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/prysm/#prysmatic-labs","text":"","title":"Prysmatic Labs"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/prysm/#background","text":"Prysmatic Labs was founded in January of 2018 with the goal of helping the Ethereum blockchain reach scalability.","title":"Background"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/prysm/#implementation-details","text":"Prysmatic Labs are developing Prysm - an Ethereum 2.0 client written in the programming language Go. The Prysm client will act as a counterpart to the already popular Go client, Geth.","title":"Implementation Details"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/prysm/#resources","text":"Website Github Twitter Blog","title":"Resources:"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/shasper/","text":"Substrate Shasper Background Parity Technologies is a blockchain infrastructure company responsible for maintaining the popular Ethereum client, Parity Ethereum . Implementation Details Parity is developing Parity Ethereum - a legacy Ethereum 1.0 client written in the Rust programming language and built for mission-critical use. In addition, Parity is developing the Serenity client called Substrate Shasper . Resources: Website Github Twitter","title":"Shasper"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/shasper/#substrate-shasper","text":"","title":"Substrate Shasper"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/shasper/#background","text":"Parity Technologies is a blockchain infrastructure company responsible for maintaining the popular Ethereum client, Parity Ethereum .","title":"Background"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/shasper/#implementation-details","text":"Parity is developing Parity Ethereum - a legacy Ethereum 1.0 client written in the Rust programming language and built for mission-critical use. In addition, Parity is developing the Serenity client called Substrate Shasper .","title":"Implementation Details"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/shasper/#resources","text":"Website Github Twitter","title":"Resources:"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/teams-building-eth2.0/","text":"Teams Building Eth 2.0 There are currently nine independent development teams building Ethereum 2.0 clients: Team Client Language Funding Jurisdiction Prysmatic Labs Prysm Go $725k - EF ETH2 Grant $500k - EF Grant Wave 4 $200k - WXblockchain $100k - Grant Wave 1 $100k - Aragon Nest $100k - ECF grant $100k - Vitalik YOLO fund $50k - District0x $25k - SpankChain Funded by Gitcoin Grant Donation address USA ChainSafe Lodestar JavaScript $217k - EF ETH2 Grant $100k - Vitalik YOLO fund $10k for team member Mikerah from EF Funded by Gitcoin Grant USA Consensys Quorum Teku Java Funded by ConsenSys None Harmony Harmony Java $189k - EF ETH2 Grant $90k - EF Grant Wave 3 None Parity Technologies Substrate Shasper Rust $5mil - EF Special Grant Funded by Parity Technologies Germany Sigma Prime Lighthouse Rust $485k - EF Co-funded ETH2 Grant $150k - EF Grant Wave 4 $100k - Vitalik YOLO fund Funded by Sigma Prime Funded via Gitcoin grant Australia Status Nimbus Nim $650K - EF Co-funded ETH2 Grant $500k - EF Grant Wave 4 Switzerland Ethereum Foundation Trinity Python $80k - EF Funding None Nethermind Cortex .NET EF Grant United Kingdom Yeeth Yeeth (No longer in development) Swift Funded via Gitcoin Grant None","title":"Teams Building Eth 2.0"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/teams-building-eth2.0/#teams-building-eth-20","text":"There are currently nine independent development teams building Ethereum 2.0 clients: Team Client Language Funding Jurisdiction Prysmatic Labs Prysm Go $725k - EF ETH2 Grant $500k - EF Grant Wave 4 $200k - WXblockchain $100k - Grant Wave 1 $100k - Aragon Nest $100k - ECF grant $100k - Vitalik YOLO fund $50k - District0x $25k - SpankChain Funded by Gitcoin Grant Donation address USA ChainSafe Lodestar JavaScript $217k - EF ETH2 Grant $100k - Vitalik YOLO fund $10k for team member Mikerah from EF Funded by Gitcoin Grant USA Consensys Quorum Teku Java Funded by ConsenSys None Harmony Harmony Java $189k - EF ETH2 Grant $90k - EF Grant Wave 3 None Parity Technologies Substrate Shasper Rust $5mil - EF Special Grant Funded by Parity Technologies Germany Sigma Prime Lighthouse Rust $485k - EF Co-funded ETH2 Grant $150k - EF Grant Wave 4 $100k - Vitalik YOLO fund Funded by Sigma Prime Funded via Gitcoin grant Australia Status Nimbus Nim $650K - EF Co-funded ETH2 Grant $500k - EF Grant Wave 4 Switzerland Ethereum Foundation Trinity Python $80k - EF Funding None Nethermind Cortex .NET EF Grant United Kingdom Yeeth Yeeth (No longer in development) Swift Funded via Gitcoin Grant None","title":"Teams Building Eth 2.0"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/teku/","text":"Consensys Quorum Background Consensys Quorum is a 50-person team dedicated to enterprise grade blockchain at ConsenSys. Alongside supporting the public Ethereum Mainnet, the team works on privacy, permissioning, scalability, and other features to make Ethereum production-ready for enterprise adoption. Implementation Details The Consensys Quorum Ethereum 2.0 client is called Teku (formerly known as Artemis). It is being built alongside Besu, an Ethereum 1.0 and enterprise-grade client written in the Java programming language. Both Teku and Besu are Apache 2.0 licensed. Resources: Website Github Discord Twitter","title":"Teku"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/teku/#consensys-quorum","text":"","title":"Consensys Quorum"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/teku/#background","text":"Consensys Quorum is a 50-person team dedicated to enterprise grade blockchain at ConsenSys. Alongside supporting the public Ethereum Mainnet, the team works on privacy, permissioning, scalability, and other features to make Ethereum production-ready for enterprise adoption.","title":"Background"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/teku/#implementation-details","text":"The Consensys Quorum Ethereum 2.0 client is called Teku (formerly known as Artemis). It is being built alongside Besu, an Ethereum 1.0 and enterprise-grade client written in the Java programming language. Both Teku and Besu are Apache 2.0 licensed.","title":"Implementation Details"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/teku/#resources","text":"Website Github Discord Twitter","title":"Resources:"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/trinity/","text":"Trinity Background The Trinity team is comprised of six developers all except one of whom are contracted to work by the Ethereum Foundation. Implementation Details The team are building Trinity - an Ethereum 1.0 and 2.0 client written in the programming language Python. Resources: Website Github","title":"Trinity"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/trinity/#trinity","text":"","title":"Trinity"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/trinity/#background","text":"The Trinity team is comprised of six developers all except one of whom are contracted to work by the Ethereum Foundation.","title":"Background"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/trinity/#implementation-details","text":"The team are building Trinity - an Ethereum 1.0 and 2.0 client written in the programming language Python.","title":"Implementation Details"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/trinity/#resources","text":"Website Github","title":"Resources:"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/yeeth/","text":"Yeeth This project is no longer being actively worked on. Background Dean announced the Swift implementation on Twitter. Implementation Details Dean & Eric Tu were building an Ethereum 2.0 client written in the Swift programming language. Resources: Github Website","title":"Yeeth"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/yeeth/#yeeth","text":"This project is no longer being actively worked on.","title":"Yeeth"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/yeeth/#background","text":"Dean announced the Swift implementation on Twitter.","title":"Background"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/yeeth/#implementation-details","text":"Dean & Eric Tu were building an Ethereum 2.0 client written in the Swift programming language.","title":"Implementation Details"},{"location":"ethereum-roadmap/ethereum-2.0/eth2.0-teams/yeeth/#resources","text":"Github Website","title":"Resources:"},{"location":"ethereum-roadmap/layer-2-scaling/commit-chains/","text":"Commit-Chains What are commit-chains? Commit-chains are the generic term for what is also called 'Plasma' - a layer 2 scaling solution for Ethereum and other blockchains. Vitalik Buterin has jokingly said, \"Commit chains\" is more on-brand for bitcoin whereas \"plasma\" is more on-brand for ethereum. Commit-chains, also sometimes described as non-custodial side chains, don\u2019t introduce a new consensus mechanism like side chains - they rely on the parent-blockchains consensus which makes them as safe as the parent-blockchain itself. In commit-chains, untrusted and non-custodial operators facilitate the communication between transacting parties. The operator is expected to commit the state of user account balances by sending periodic updates to the parent-blockchain. How do commit-chains work? Unlike payment channels, commit-chains are on an always ongoing state once launched and don\u2019t rely on a three-state - opening, live, dispute/closure - model. After an operator launches a commit-chain, users can join and conduct transactions that are recorded on the commit-chain while keeping the freedom to withdraw or exit their assets to the parent-blockchain at any time. Periodic Checkpoint Commitments Commit-chain users may need to periodically observe on-chain checkpoint commitments, which can be instantiated as a Merkle tree root or Zero-Knowledge Proof (ZKP). While ZKPs enforce consistent state transitions on-chain, Merkle root commitments do not, requiring users to participate in challenge-response protocols to challenge operator misbehavior. Data Availability Requirement Users must retrieve and maintain data required to exit a commit-chain since data isn\u2019t broadcasted. Depending on the implementation, if the data is unavailable, you are either forced to exit (like in Plasma) or the operator can be challenged to provide the necessary data (like in NOCUST). On misbehavior, users are allowed to exit with their last confirmed balance. Centralized but Untrusted Intermediary The centralized operator never holds custody of funds so if the operator is not available the worst-case scenario is that users are just unable to make any further off-chain transactions, but they can exit and move to another commit-chain at any time. Transaction Finality Unlike payment channels, the commit-chain operator does not require on-chain collateral to securely route payments between users. Commit-chain transactions do not offer instant transaction finality like payment channels but offer eventual finality after an on-chain checkpoint. However, if an operator chooses to allocate collateral to each user, essentially implementing a payment channel on top of a commit-chain, instant transaction finality becomes possible. Reduced Routing Requirements A single commit-chain can potentially host millions of users, so a few statically connected commit-chains are envisioned to spawn stable networks with low routing complexity. Atomic cross commit-chain transactions have not been proposed yet. Commit-chain security properties The user-side security properties can be generalized as follows: Agreed transition A commit-chain transaction is agreed by at least the sender and the commit-chain operator. Balance security Honest users can always withdraw agreed balances from the commit-chain with an on-chain dispute. Balance security is provided for honest users even if the operator and all other commit-chain users collude since transactions are only considered final when the sender and operator agree to the payment and it\u2019s committed with the periodic on-chain checkpoint. State progression Users can, at any time, enforce an off-chain state transition on-chain. Commitment integrity Since there isn\u2019t a fixed 3-phase lifetime for a commit-chain, users of the commit-chain are able to verify the integrity of the operator\u2019s commitments at any point in time and force the operator to seize operation and rollback to the previous periodic commitment. NOCUST commit-chain Overview The concept of 'NOCUST commit-chains' was first introduced by the team at Liquidity Network and their peers in the form of an academic paper . NOCUST is an account-based commit-chain where an on-chain address is associated to a commit-chain account. The NOCUST on-chain contract expects to periodically receive a constant-sized commitment to the state of the commit-chain ledger from the operator containing each user\u2019s account in the collateral pool. Free establishment Users can deposit any amount of coins within the contract and perform commit-chain payment of any denomination towards other users and with free establishment, users can join the commit-chain without on-chain transaction by requesting an operator signature and immediately receive commit-chain transactions. Agreed transition A transaction within NOCUST is enacted with the signature of the sender and the operator to deter potential double-spend scenarios. Instant transaction finality State progression is only possible if the operator stakes collateral towards the recipient. NOCUST specifies a mechanism to allocate collateral towards all commit-chain users within a constant-size on-chain commitment, which enables instant transaction finality for specified amounts. Allocated collateral is reusable after each on-chain checkpoint and at this point, the transaction throughput is only limited by the operator\u2019s bandwidth and computational throughput - independent of checkpoint commitment interval. Commitment integrity Each user is only required to verify their own balance proof by requesting data from the operator and comparing it with their locally stored state at regular time intervals to observe integrity. In the case of misbehavior, a user can issue a challenge using the NOCUST smart contract. If the operator comes back with invalid information or does not respond, users have an accountable proof of misbehavior. NOCUST supports a provably consistent mode of operation through zkSNARKS. Layer two-state transitions will be validated by the underlying smart contract and the operator is unable to commit invalid state transition without being halted. Comparing commit-chains Comparing NOCUST commit-chain with Plasma Cash, which is the most comprehensive working draft of a Plasma implementation. Comparison data is based on the systemization of knowledge academic paper and sourced from discussions with Georgios Konstantopoulos . General properties Plasma Cash NOCUST Security Proofs \u2715 \u2713 Offline transaction reception \u2713 \u2713 Fungible payments \u2715 \u2713 Clients can remain offline \u2715 \u2715 (online each eon) Safe mass exit \u2713 \u2713 Instant transaction finality \u2715 \u2713 (with collateral) Token support \u2713 \u2713 Non-fungible tokens \u2713 \u2715 Provably consistent state (ZKP) \u2715 \u2713 Commit-chain swaps \u2715 \u2713 Plasma is a UTXO-based commit-chain while NOCUST is account-based. In Plasma Cash, a coin is minted with an on-chain deposit and cannot be merged or split with another coin on the commit-chain, hence it is useful for non-fungible tokens but not practical as a payment system. NOCUST uses ZKPs to enforce consistent state transitions on-chain, Plasma Cash uses Merkle root commitments, which do not and require users to participate in challenge-response protocols to challenge operator misbehavior. Resources Commit-Chains: Secure, Scalable Off-Chain Payments Academic Paper Systemization of Knowledge: Off The Chain Transactions Academic Paper Liquidity Network Research Papers","title":"Commit-Chains"},{"location":"ethereum-roadmap/layer-2-scaling/commit-chains/#commit-chains","text":"","title":"Commit-Chains"},{"location":"ethereum-roadmap/layer-2-scaling/commit-chains/#what-are-commit-chains","text":"Commit-chains are the generic term for what is also called 'Plasma' - a layer 2 scaling solution for Ethereum and other blockchains. Vitalik Buterin has jokingly said, \"Commit chains\" is more on-brand for bitcoin whereas \"plasma\" is more on-brand for ethereum. Commit-chains, also sometimes described as non-custodial side chains, don\u2019t introduce a new consensus mechanism like side chains - they rely on the parent-blockchains consensus which makes them as safe as the parent-blockchain itself. In commit-chains, untrusted and non-custodial operators facilitate the communication between transacting parties. The operator is expected to commit the state of user account balances by sending periodic updates to the parent-blockchain.","title":"What are commit-chains?"},{"location":"ethereum-roadmap/layer-2-scaling/commit-chains/#how-do-commit-chains-work","text":"Unlike payment channels, commit-chains are on an always ongoing state once launched and don\u2019t rely on a three-state - opening, live, dispute/closure - model. After an operator launches a commit-chain, users can join and conduct transactions that are recorded on the commit-chain while keeping the freedom to withdraw or exit their assets to the parent-blockchain at any time.","title":"How do commit-chains work?"},{"location":"ethereum-roadmap/layer-2-scaling/commit-chains/#periodic-checkpoint-commitments","text":"Commit-chain users may need to periodically observe on-chain checkpoint commitments, which can be instantiated as a Merkle tree root or Zero-Knowledge Proof (ZKP). While ZKPs enforce consistent state transitions on-chain, Merkle root commitments do not, requiring users to participate in challenge-response protocols to challenge operator misbehavior.","title":"Periodic Checkpoint Commitments"},{"location":"ethereum-roadmap/layer-2-scaling/commit-chains/#data-availability-requirement","text":"Users must retrieve and maintain data required to exit a commit-chain since data isn\u2019t broadcasted. Depending on the implementation, if the data is unavailable, you are either forced to exit (like in Plasma) or the operator can be challenged to provide the necessary data (like in NOCUST). On misbehavior, users are allowed to exit with their last confirmed balance.","title":"Data Availability Requirement"},{"location":"ethereum-roadmap/layer-2-scaling/commit-chains/#centralized-but-untrusted-intermediary","text":"The centralized operator never holds custody of funds so if the operator is not available the worst-case scenario is that users are just unable to make any further off-chain transactions, but they can exit and move to another commit-chain at any time.","title":"Centralized but Untrusted Intermediary"},{"location":"ethereum-roadmap/layer-2-scaling/commit-chains/#transaction-finality","text":"Unlike payment channels, the commit-chain operator does not require on-chain collateral to securely route payments between users. Commit-chain transactions do not offer instant transaction finality like payment channels but offer eventual finality after an on-chain checkpoint. However, if an operator chooses to allocate collateral to each user, essentially implementing a payment channel on top of a commit-chain, instant transaction finality becomes possible.","title":"Transaction Finality"},{"location":"ethereum-roadmap/layer-2-scaling/commit-chains/#reduced-routing-requirements","text":"A single commit-chain can potentially host millions of users, so a few statically connected commit-chains are envisioned to spawn stable networks with low routing complexity. Atomic cross commit-chain transactions have not been proposed yet.","title":"Reduced Routing Requirements"},{"location":"ethereum-roadmap/layer-2-scaling/commit-chains/#commit-chain-security-properties","text":"The user-side security properties can be generalized as follows:","title":"Commit-chain security properties"},{"location":"ethereum-roadmap/layer-2-scaling/commit-chains/#agreed-transition","text":"A commit-chain transaction is agreed by at least the sender and the commit-chain operator.","title":"Agreed transition"},{"location":"ethereum-roadmap/layer-2-scaling/commit-chains/#balance-security","text":"Honest users can always withdraw agreed balances from the commit-chain with an on-chain dispute. Balance security is provided for honest users even if the operator and all other commit-chain users collude since transactions are only considered final when the sender and operator agree to the payment and it\u2019s committed with the periodic on-chain checkpoint.","title":"Balance security"},{"location":"ethereum-roadmap/layer-2-scaling/commit-chains/#state-progression","text":"Users can, at any time, enforce an off-chain state transition on-chain.","title":"State progression"},{"location":"ethereum-roadmap/layer-2-scaling/commit-chains/#commitment-integrity","text":"Since there isn\u2019t a fixed 3-phase lifetime for a commit-chain, users of the commit-chain are able to verify the integrity of the operator\u2019s commitments at any point in time and force the operator to seize operation and rollback to the previous periodic commitment.","title":"Commitment integrity"},{"location":"ethereum-roadmap/layer-2-scaling/commit-chains/#nocust-commit-chain","text":"","title":"NOCUST commit-chain"},{"location":"ethereum-roadmap/layer-2-scaling/commit-chains/#overview","text":"The concept of 'NOCUST commit-chains' was first introduced by the team at Liquidity Network and their peers in the form of an academic paper . NOCUST is an account-based commit-chain where an on-chain address is associated to a commit-chain account. The NOCUST on-chain contract expects to periodically receive a constant-sized commitment to the state of the commit-chain ledger from the operator containing each user\u2019s account in the collateral pool.","title":"Overview"},{"location":"ethereum-roadmap/layer-2-scaling/commit-chains/#free-establishment","text":"Users can deposit any amount of coins within the contract and perform commit-chain payment of any denomination towards other users and with free establishment, users can join the commit-chain without on-chain transaction by requesting an operator signature and immediately receive commit-chain transactions.","title":"Free establishment"},{"location":"ethereum-roadmap/layer-2-scaling/commit-chains/#agreed-transition_1","text":"A transaction within NOCUST is enacted with the signature of the sender and the operator to deter potential double-spend scenarios.","title":"Agreed transition"},{"location":"ethereum-roadmap/layer-2-scaling/commit-chains/#instant-transaction-finality","text":"State progression is only possible if the operator stakes collateral towards the recipient. NOCUST specifies a mechanism to allocate collateral towards all commit-chain users within a constant-size on-chain commitment, which enables instant transaction finality for specified amounts. Allocated collateral is reusable after each on-chain checkpoint and at this point, the transaction throughput is only limited by the operator\u2019s bandwidth and computational throughput - independent of checkpoint commitment interval.","title":"Instant transaction finality"},{"location":"ethereum-roadmap/layer-2-scaling/commit-chains/#commitment-integrity_1","text":"Each user is only required to verify their own balance proof by requesting data from the operator and comparing it with their locally stored state at regular time intervals to observe integrity. In the case of misbehavior, a user can issue a challenge using the NOCUST smart contract. If the operator comes back with invalid information or does not respond, users have an accountable proof of misbehavior. NOCUST supports a provably consistent mode of operation through zkSNARKS. Layer two-state transitions will be validated by the underlying smart contract and the operator is unable to commit invalid state transition without being halted.","title":"Commitment integrity"},{"location":"ethereum-roadmap/layer-2-scaling/commit-chains/#comparing-commit-chains","text":"Comparing NOCUST commit-chain with Plasma Cash, which is the most comprehensive working draft of a Plasma implementation. Comparison data is based on the systemization of knowledge academic paper and sourced from discussions with Georgios Konstantopoulos . General properties Plasma Cash NOCUST Security Proofs \u2715 \u2713 Offline transaction reception \u2713 \u2713 Fungible payments \u2715 \u2713 Clients can remain offline \u2715 \u2715 (online each eon) Safe mass exit \u2713 \u2713 Instant transaction finality \u2715 \u2713 (with collateral) Token support \u2713 \u2713 Non-fungible tokens \u2713 \u2715 Provably consistent state (ZKP) \u2715 \u2713 Commit-chain swaps \u2715 \u2713 Plasma is a UTXO-based commit-chain while NOCUST is account-based. In Plasma Cash, a coin is minted with an on-chain deposit and cannot be merged or split with another coin on the commit-chain, hence it is useful for non-fungible tokens but not practical as a payment system. NOCUST uses ZKPs to enforce consistent state transitions on-chain, Plasma Cash uses Merkle root commitments, which do not and require users to participate in challenge-response protocols to challenge operator misbehavior.","title":"Comparing commit-chains"},{"location":"ethereum-roadmap/layer-2-scaling/commit-chains/#resources","text":"Commit-Chains: Secure, Scalable Off-Chain Payments Academic Paper Systemization of Knowledge: Off The Chain Transactions Academic Paper Liquidity Network Research Papers","title":"Resources"},{"location":"ethereum-roadmap/layer-2-scaling/optimistic_rollups/","text":"Optimistic Rollups Introduction Optimistic Rollups (ORs) are one type of layer 2 constructions that do not run on Ethereum's base layer but on top of it. This enables running smart contracts at scale while still being secured by Ethereum. These constructions resemble Plasma, but trade the almost infinite scalability of Plasma to run an EVM compatible Virtual Machine called OVM (Optimistic Virtual Machine) which enables ORs to run anything Ethereum can. The name Optimistic Rollups originates from how the solution works. 'Optimistic' is used because aggregators publish only the bare minimum information needed with no proofs, assuming the aggregators run without commiting frauds, and only providing proofs in case of fraud. 'Rollups' is used because transactions are commited to main chain in bundles (that is, they are rolled-up). A Simple Overview Much like most Layer-2 solutions, the funds transacted on Optimistic Rollups are stored in a smart-contract on Ethereum, where users deposit funds, aggregators sign up and fraud proofs are commited. The usual process one can interact with such solutions are as follows: A user sends a deploy transaction of a smart contract off-chain to an aggregator (a block producer in this construction) An aggregator locally deploys the transaction creating the new smart contract That aggregator computes the new state root (aka a merkle root) That aggregator creates an Ethereum transaction which contains that state root calculated in step 3 Any user that sees an aggregator deploying an invalid state root (a state root created by including invalid transactions) can challenge that aggregator by posting the valid state root along with the merkle proofs required to prove it, slashing (removing a portion of the bond) and the aggregator that commited such fraud and any that built blocks on top of the fraudulent one and claiming those rewards. After an invalid block has been commited and a fraud proof is finalized, the chain in layer 2 can be rolled back and resume from the previous non-fraudelent block. Note: Anyone can become an aggregator as long as they lock a bond in the smart contract. Note 2: The front-running problem associated with step 5 can be solved by numerous methods, such as by using submarine sends . User Experience Any user that uses a Dapp that is deployed to a layer 2 with an Optimistic Rollup construction can enjoy economic abstraction (eg: fee-free transactions, pay with ERC-20, etc.) and quasi-instant transactions (transactions in the ball-park of 200ms, don't blink or you'll miss it!). Pros/Cons Pros: Flexibility in generalized Computation (Turing-complete / EVM compatible) Increase in scalability (200 to 2000 transactions-per-second (tps) vs Ethereum layer 1's current 10 tps) All Data is available on-chain (no need to trust off-chain data providers) Better UX (as explained above) Cons: Limited Throughput when compared with some other Layer 2 solutions (Plasma, ZK Rollups, etc.) Some additional security issues are raised (discussed below) Demo A Uniswap-like exchange called Unipig was developed by both Uniswap and Plasma Group teams as a Proof of Concept application and demonstrated at Devcon5, which you can try for free at unipig.exchange . Security Overview For Optimistic Rollups to work, we must assume that there exists a honest majority of Ethereum validators (miners in Eth1, stakers in Eth2), and that there is at least one aggregator that is not censoring transactions. Resources Unipig Plasma group forum ZK Rollups vs Optimistic Rollups Optimistic vs. ZK Rollup: Deep Dive","title":"Optimistic Rollups"},{"location":"ethereum-roadmap/layer-2-scaling/optimistic_rollups/#optimistic-rollups","text":"","title":"Optimistic Rollups"},{"location":"ethereum-roadmap/layer-2-scaling/optimistic_rollups/#introduction","text":"Optimistic Rollups (ORs) are one type of layer 2 constructions that do not run on Ethereum's base layer but on top of it. This enables running smart contracts at scale while still being secured by Ethereum. These constructions resemble Plasma, but trade the almost infinite scalability of Plasma to run an EVM compatible Virtual Machine called OVM (Optimistic Virtual Machine) which enables ORs to run anything Ethereum can. The name Optimistic Rollups originates from how the solution works. 'Optimistic' is used because aggregators publish only the bare minimum information needed with no proofs, assuming the aggregators run without commiting frauds, and only providing proofs in case of fraud. 'Rollups' is used because transactions are commited to main chain in bundles (that is, they are rolled-up).","title":"Introduction"},{"location":"ethereum-roadmap/layer-2-scaling/optimistic_rollups/#a-simple-overview","text":"Much like most Layer-2 solutions, the funds transacted on Optimistic Rollups are stored in a smart-contract on Ethereum, where users deposit funds, aggregators sign up and fraud proofs are commited. The usual process one can interact with such solutions are as follows: A user sends a deploy transaction of a smart contract off-chain to an aggregator (a block producer in this construction) An aggregator locally deploys the transaction creating the new smart contract That aggregator computes the new state root (aka a merkle root) That aggregator creates an Ethereum transaction which contains that state root calculated in step 3 Any user that sees an aggregator deploying an invalid state root (a state root created by including invalid transactions) can challenge that aggregator by posting the valid state root along with the merkle proofs required to prove it, slashing (removing a portion of the bond) and the aggregator that commited such fraud and any that built blocks on top of the fraudulent one and claiming those rewards. After an invalid block has been commited and a fraud proof is finalized, the chain in layer 2 can be rolled back and resume from the previous non-fraudelent block. Note: Anyone can become an aggregator as long as they lock a bond in the smart contract. Note 2: The front-running problem associated with step 5 can be solved by numerous methods, such as by using submarine sends .","title":"A Simple Overview"},{"location":"ethereum-roadmap/layer-2-scaling/optimistic_rollups/#user-experience","text":"Any user that uses a Dapp that is deployed to a layer 2 with an Optimistic Rollup construction can enjoy economic abstraction (eg: fee-free transactions, pay with ERC-20, etc.) and quasi-instant transactions (transactions in the ball-park of 200ms, don't blink or you'll miss it!).","title":"User Experience"},{"location":"ethereum-roadmap/layer-2-scaling/optimistic_rollups/#proscons","text":"Pros: Flexibility in generalized Computation (Turing-complete / EVM compatible) Increase in scalability (200 to 2000 transactions-per-second (tps) vs Ethereum layer 1's current 10 tps) All Data is available on-chain (no need to trust off-chain data providers) Better UX (as explained above) Cons: Limited Throughput when compared with some other Layer 2 solutions (Plasma, ZK Rollups, etc.) Some additional security issues are raised (discussed below)","title":"Pros/Cons"},{"location":"ethereum-roadmap/layer-2-scaling/optimistic_rollups/#demo","text":"A Uniswap-like exchange called Unipig was developed by both Uniswap and Plasma Group teams as a Proof of Concept application and demonstrated at Devcon5, which you can try for free at unipig.exchange .","title":"Demo"},{"location":"ethereum-roadmap/layer-2-scaling/optimistic_rollups/#security-overview","text":"For Optimistic Rollups to work, we must assume that there exists a honest majority of Ethereum validators (miners in Eth1, stakers in Eth2), and that there is at least one aggregator that is not censoring transactions.","title":"Security Overview"},{"location":"ethereum-roadmap/layer-2-scaling/optimistic_rollups/#resources","text":"Unipig Plasma group forum ZK Rollups vs Optimistic Rollups Optimistic vs. ZK Rollup: Deep Dive","title":"Resources"},{"location":"ethereum-roadmap/layer-2-scaling/payment-channels/","text":"Payment Channels Summary Payment Channels are one implementation of State Channel technology. Payment channels allow for practically unlimited, bidirectional transfers between two participants, as long as the net sum of their transfers does not exceed the deposited tokens. These transfers can be performed instantaneously and without any involvement of the actual blockchain itself, except for an initial one-time on-chain creation and an eventual closing of the channel. Kchannels Kchannels is a new payment channel platform for Ethereum. It is non-custodial and trust-minimized, and its primary focus is on great UX. It's avaiable on Mainnet and a number of testnets as well as on the Xdai Chain. Kchannels uses a powerful channel design: * a channel can hold multiple assets (and transfer multiple assets in a transaction) * an unattended channel can receive transactions * fast and easy deposits/withdrawals at an open channel * most users only need a single channel--ever--for all their needs! Kchannels provides the standard payment channel features (fast transactions, low fees, and privacy), and it also has the following features: * minimal infrastructure requirements * immediate transaction finality (unique in the L2 space) * no special token * no network * no capital required to maintain channels * high scalability The Raiden Network The Raiden Network is an off-chain scaling solution for performing ERC20-compliant token transfers on the Ethereum blockchain. It is Ethereum's version of Bitcoin's Lightning Network, enabling near-instant, low-fee, scalable, and privacy-preserving payments. The Raiden Network allows secure transfers of tokens between participants without the need for global consensus. This is achieved using digitally signed and hash-locked transfers, called balance proofs, fully collateralized by previously setup on-chain deposits. This concept, illustrated below, is known as payment channel technology. The true strength of Raiden lies in its network protocol. Since opening and closing a payment channel between two peers still requires on-chain transactions, creating channels between all possible peers becomes infeasible. As it turns out, however, you do not need a direct payment channel between a payer and a payee if there exists at least one route through a network of channels that connects the two parties, as shown in figure 2. This network and its associated protocol for routing and interlocking channel transfers is called the Raiden Network. In addition, payment channel transfers, in contrast to on-chain transactions, do not require any fees. Intermediaries within the greater network, however, will want to charge fees on a low percentage basis for providing their own channels to the network, leading to complex routing and a competitive channel fee market. The Raiden protocol aims to facilitate this market by using both protocol-level features and optional auxiliary services. Resources Kchannels Raiden Network","title":"Payment Channels"},{"location":"ethereum-roadmap/layer-2-scaling/payment-channels/#payment-channels","text":"","title":"Payment Channels"},{"location":"ethereum-roadmap/layer-2-scaling/payment-channels/#summary","text":"Payment Channels are one implementation of State Channel technology. Payment channels allow for practically unlimited, bidirectional transfers between two participants, as long as the net sum of their transfers does not exceed the deposited tokens. These transfers can be performed instantaneously and without any involvement of the actual blockchain itself, except for an initial one-time on-chain creation and an eventual closing of the channel.","title":"Summary"},{"location":"ethereum-roadmap/layer-2-scaling/payment-channels/#kchannels","text":"Kchannels is a new payment channel platform for Ethereum. It is non-custodial and trust-minimized, and its primary focus is on great UX. It's avaiable on Mainnet and a number of testnets as well as on the Xdai Chain. Kchannels uses a powerful channel design: * a channel can hold multiple assets (and transfer multiple assets in a transaction) * an unattended channel can receive transactions * fast and easy deposits/withdrawals at an open channel * most users only need a single channel--ever--for all their needs! Kchannels provides the standard payment channel features (fast transactions, low fees, and privacy), and it also has the following features: * minimal infrastructure requirements * immediate transaction finality (unique in the L2 space) * no special token * no network * no capital required to maintain channels * high scalability","title":"Kchannels"},{"location":"ethereum-roadmap/layer-2-scaling/payment-channels/#the-raiden-network","text":"The Raiden Network is an off-chain scaling solution for performing ERC20-compliant token transfers on the Ethereum blockchain. It is Ethereum's version of Bitcoin's Lightning Network, enabling near-instant, low-fee, scalable, and privacy-preserving payments. The Raiden Network allows secure transfers of tokens between participants without the need for global consensus. This is achieved using digitally signed and hash-locked transfers, called balance proofs, fully collateralized by previously setup on-chain deposits. This concept, illustrated below, is known as payment channel technology. The true strength of Raiden lies in its network protocol. Since opening and closing a payment channel between two peers still requires on-chain transactions, creating channels between all possible peers becomes infeasible. As it turns out, however, you do not need a direct payment channel between a payer and a payee if there exists at least one route through a network of channels that connects the two parties, as shown in figure 2. This network and its associated protocol for routing and interlocking channel transfers is called the Raiden Network. In addition, payment channel transfers, in contrast to on-chain transactions, do not require any fees. Intermediaries within the greater network, however, will want to charge fees on a low percentage basis for providing their own channels to the network, leading to complex routing and a competitive channel fee market. The Raiden protocol aims to facilitate this market by using both protocol-level features and optional auxiliary services.","title":"The Raiden Network"},{"location":"ethereum-roadmap/layer-2-scaling/payment-channels/#resources","text":"Kchannels Raiden Network","title":"Resources"},{"location":"ethereum-roadmap/layer-2-scaling/plasma/","text":"Plasma What is Plasma? Plasma is a layer-2 scaling solution that was originally proposed by Joseph Poon and Vitalik Buterin in their paper Plasma: Scalable Autonomous Smart Contracts . It is a framework for building scalable applications. Plasma uses a combination of smart contracts and cryptographic verification. Together, these enable fast and cheap transactions by offloading these transactions from the main Ethereum blockchain into a \"side\" chain (sometimes referred as child or plasma chains). These side chains periodically report back to the main chain and use it to settle any disputes (almost like a higher court). Why it is needed According to Vitalik Buterin, it is a \"bad idea\" to build sophisticated features into the base layer of the blockchain, it would create a high level of governance overhead as the platform would have to continually discuss, implement and coordinate newly discovered technical improvements. The time intensive task to add a new feature into the base protocol might cause Ethereum to stagnate. We should not only be relying on changes to the base protocol to continue progressing Ethereum. I do think that as blockchains become more and more mature, layer 1 will necessarily stabilize, and layer 2 will take on more and more of the burden of ongoing innovation and change. How does Plasma work? The Plasma structure is built through the use of smart contracts and Merkle trees, enabling the creation of an unlimited number of child chains - which are, essentially, smaller copies of the parent Ethereum blockchain. Each chain is designed to work in a singular way, serving different needs by coexisting and operating independently. On top of each child chain, more chains can be created and this is what builds a tree-like structure. Deposits and withdrawals of Plasma chain funds with state transitions is enabled by fraud proofs. This ensures enforceable state and exchangeability. It also allows the processing of a greater number of transactions with less data loading on the basic platform. Any user can send funds to another, including those from a different set of participants. These fund transfers can be paid and withdrawn in the native platform coin. Fraud Proofs The communication between the child chains and the root chain is secured by fraud proofs. Each child chain has its own mechanisms for validating blocks and a particular fraud-proof implementation, which can be built on top of different consensus algorithms. The most common are Proof of Work, Proof of Stake, and Proof of Authority. The fraud proofs ensure that in case of malicious activity, users are able to report dishonest nodes, protect their funds and exit the transaction (which involves an interaction with the main chain). In other words, fraud proofs are used as a mechanism through which a Plasma child chain files a complaint to its parent chain or to the root chain. These proofs use an interactive funds-withdrawal protocol. In order to withdraw a certain amount of funds, an exit time is needed. The exiting party must confirm the outputs via UTXO model requesting a withdrawal. Network participants can then submit a bonded proof that has to be confirmed and tested if any funds have been spent. If the event appears to be wrong, it is treated as fraudulent, and the confirmation is cancelled. With time, another bonded round allows the withdrawal to happen, bonding to state before a committed timestamp. An incorrect Plasma chain can be quickly exited by participants. In case of attack, participants can quickly exit and save their costs, ensuring security within the system. Example If Alice keeps 1 ETH in a Plasma chain, for instance, it gets recorded into a block, whereas the consensus is met due to fraud proofs. Further commitments are enforced and submitted on the base chain, and her funds are held in its smart contract: Plasma: Pros and Cons Undoubtedly, plasma is a good solution for scalability issues but Plasma does have some drawbacks. Each new plasma iteration reveals a new research problem that needs to be addressed, leading to multiple Plasma variants that navigate deployment trade-offs in different ways. We will compare these different variants in detail below but let's first compare the pros and cons of plasma and it's variants. Pros Cons Plasma will help the Ethereum blockchain scale by taking operations off-chain Plasma requires a centralized component in order to operate as the off-chain component is managed by authorities Lower fees and faster operations also enables computationally intensive applications to run on a blockchain Long waiting periods(7-14 days) for users who wish to withdraw their funds Eliminating significant amount of unnecessary data in the main chain which also reduces the processing bandwidth of nodes Poor experience for users who don\u2019t have a large number of assets and don\u2019t want to wait weeks to access them It is compatible with various on-chain scaling solutions such as sharding, varying block sizes, etc. New security risks/challenges (primarly for exits) that would need to be addressed to maintain immutability. Many plasma variants have their own set of drawbacks such as: * Plasma MVP has time constraints, is a less than ideal user experience, and is vulnerable to network congestion. * Plasma Cash relies on non-fungible tokens (NFTs) to function which requires heavy transaction histories. You will have to keep track of the value and have to be constantly collecting proofs of non-inclusion, and so when you transfer ownership of the NFT you have to transfer its history as well. Exploring popular plasma flavours There isn\u2019t any single project called \"Plasma\". Instead, there are lots of different projects that use the tools provided by the Plasma framework/specification. Currently there are four main distinct versions of the protocol: Plasma Cash Plasma Cash is a Plasma design primarily built for storing and transferring non-fungible tokens. It is highly scalable because users only ever need to keep track of their own tokens. It uses Sparse Merkle Trees (SMT) for non inclusion proofs and hence can only be used for NFTs since SMTs uses indexing. Each block has a \u2018slot\u2019 for each coin (unique deposit). When a coin is spent, a transaction proof is recorded in that coin\u2019s respective slot in the block. Note: Coin defragmentation research to support FTs is going on currently Plasma Debit Plasma Debit is like Plasma Cash, except every token is a payment channel between the user and the chain operator. It\u2019s sort of like a big Lightning Network hub, but the channels can be transferred just like a Plasma Cash token. Transactions are super fast and you only need to keep track of your own channels. Plasma Prime Plasma Prime is a fancy new design that makes use of RSA accumulators to solve the problem of large history proofs in Plasma Cash. MVP (Minimum Viable Plasma) Plasma MVP is a design for an extremely simple UTXO-based Plasma chain. The basic Plasma MVP specification enables high-throughput payment transactions, but does not support more complicated constructions like scripts or smart contracts. Plasma MVP relies on confirmation signatures because withdrawals are processed in order based on the position of the output being withdrawn. Users need to sign a signature before making a transaction, wait to see the transaction included in a valid block, and then sign another signature. These second signatures must also be included within a plasma block, reducing block space available for more transactions! Note: Confirmation signatures make for pretty bad user experience. More Viable Plasma , also known as MoreVP , is an extension to Minimal Viable Plasma that removes the need for confirmation signatures. MoreVP modifies the process through which users can withdraw their funds. The ordering of each withdrawal becomes based on the position of the youngest input to the transaction that created an output. Comparing different models of plasma Plasma Design Component Plasma MVP Plasma Cash Plasma Debit Data Structure Binary Merkle tree Sparse Merkle Tree Sparse Merkle tree Consensus Any (PoW,PoA,PoS) Any (PoW,PoA,PoS) Single or few operators preferred over because of payment channel structure Deposits UTXOs representation, support for ETH, ERC20 Unique Coin ID for each deposit, NFTs only Accounts with unique coin IDs for each deposit, NFTs and FTs only Fees Plasma transaction fees to validators and gas fees when exiting/withdrawing to rootchain or other chains Same as MVP Users pay via operator-led payment channel instead of directly to other users Signatures Tx signature before block inclusion, confirmation signature post-inclusion Confirmation signatures to avoid griefing No confirmation signatures Exits/Withdrawals Proof of unspent UTXO required to exit, priority based on how old UTXO is Proof of coin\u2019s latest two transactions, proof of block inclusion, no priority Proof of coin\u2019s latest two transactions, proof that fraction of coin hasn\u2019t been previously spent, proof of block inclusion, no exit priority Let's compare pros, cons and use cases for each model now Type Plasma MVP Plasma Cash Plasma Debit Pros Scalable, all signatures sent to operator in PoA, High fungibility Very scalable, watchers or users themselves need to only keep track of their own coins not all coins on the chain Very scalable, watchers or users themselves need to only keep track of their own coins, Enables transactions with NFTs and FTs, Efficient balance updates don\u2019t need to be included in blocks as agreement can be made between operator and coinholder (similar to channels) Cons Watchers or users themselves are required to watch and challenge invalid exits, Potential for honest bond slashing if operator withholds blocks and user attempts to re-submit transaction Coin proofs can be massive, Coins are in fixed denomination, Watchers or users themselves are required to watch and challenge invalid txs with their own coins Heavy reliance on operator, can be hedged by creating a set of rotating operators, Coin proofs can be massive, Requires operator to lock up significant funds in advance to fund payment channels, Tx size constrained by initial coin deposit size, Enabling decentralized exchange on Debit is non-trivial Use Cases Low-trust use cases (PoA), Exchanges, securities, P2P payments, recurring/bill payments, gaming Collectibles, Asset management (real estate, art) Use cases with high-trust of operators, ewallet or service providers, Gaming, Asset Management, P2P payments Resources Plasma Group What is Ethereum Plasma The State of Plasma How Plasma Work Learn Plasma Comparing plasma models","title":"Plasma"},{"location":"ethereum-roadmap/layer-2-scaling/plasma/#plasma","text":"","title":"Plasma"},{"location":"ethereum-roadmap/layer-2-scaling/plasma/#what-is-plasma","text":"Plasma is a layer-2 scaling solution that was originally proposed by Joseph Poon and Vitalik Buterin in their paper Plasma: Scalable Autonomous Smart Contracts . It is a framework for building scalable applications. Plasma uses a combination of smart contracts and cryptographic verification. Together, these enable fast and cheap transactions by offloading these transactions from the main Ethereum blockchain into a \"side\" chain (sometimes referred as child or plasma chains). These side chains periodically report back to the main chain and use it to settle any disputes (almost like a higher court). Why it is needed According to Vitalik Buterin, it is a \"bad idea\" to build sophisticated features into the base layer of the blockchain, it would create a high level of governance overhead as the platform would have to continually discuss, implement and coordinate newly discovered technical improvements. The time intensive task to add a new feature into the base protocol might cause Ethereum to stagnate. We should not only be relying on changes to the base protocol to continue progressing Ethereum. I do think that as blockchains become more and more mature, layer 1 will necessarily stabilize, and layer 2 will take on more and more of the burden of ongoing innovation and change.","title":"What is Plasma?"},{"location":"ethereum-roadmap/layer-2-scaling/plasma/#how-does-plasma-work","text":"The Plasma structure is built through the use of smart contracts and Merkle trees, enabling the creation of an unlimited number of child chains - which are, essentially, smaller copies of the parent Ethereum blockchain. Each chain is designed to work in a singular way, serving different needs by coexisting and operating independently. On top of each child chain, more chains can be created and this is what builds a tree-like structure. Deposits and withdrawals of Plasma chain funds with state transitions is enabled by fraud proofs. This ensures enforceable state and exchangeability. It also allows the processing of a greater number of transactions with less data loading on the basic platform. Any user can send funds to another, including those from a different set of participants. These fund transfers can be paid and withdrawn in the native platform coin.","title":"How does Plasma work?"},{"location":"ethereum-roadmap/layer-2-scaling/plasma/#fraud-proofs","text":"The communication between the child chains and the root chain is secured by fraud proofs. Each child chain has its own mechanisms for validating blocks and a particular fraud-proof implementation, which can be built on top of different consensus algorithms. The most common are Proof of Work, Proof of Stake, and Proof of Authority. The fraud proofs ensure that in case of malicious activity, users are able to report dishonest nodes, protect their funds and exit the transaction (which involves an interaction with the main chain). In other words, fraud proofs are used as a mechanism through which a Plasma child chain files a complaint to its parent chain or to the root chain. These proofs use an interactive funds-withdrawal protocol. In order to withdraw a certain amount of funds, an exit time is needed. The exiting party must confirm the outputs via UTXO model requesting a withdrawal. Network participants can then submit a bonded proof that has to be confirmed and tested if any funds have been spent. If the event appears to be wrong, it is treated as fraudulent, and the confirmation is cancelled. With time, another bonded round allows the withdrawal to happen, bonding to state before a committed timestamp. An incorrect Plasma chain can be quickly exited by participants. In case of attack, participants can quickly exit and save their costs, ensuring security within the system. Example If Alice keeps 1 ETH in a Plasma chain, for instance, it gets recorded into a block, whereas the consensus is met due to fraud proofs. Further commitments are enforced and submitted on the base chain, and her funds are held in its smart contract:","title":"Fraud Proofs"},{"location":"ethereum-roadmap/layer-2-scaling/plasma/#plasma-pros-and-cons","text":"Undoubtedly, plasma is a good solution for scalability issues but Plasma does have some drawbacks. Each new plasma iteration reveals a new research problem that needs to be addressed, leading to multiple Plasma variants that navigate deployment trade-offs in different ways. We will compare these different variants in detail below but let's first compare the pros and cons of plasma and it's variants. Pros Cons Plasma will help the Ethereum blockchain scale by taking operations off-chain Plasma requires a centralized component in order to operate as the off-chain component is managed by authorities Lower fees and faster operations also enables computationally intensive applications to run on a blockchain Long waiting periods(7-14 days) for users who wish to withdraw their funds Eliminating significant amount of unnecessary data in the main chain which also reduces the processing bandwidth of nodes Poor experience for users who don\u2019t have a large number of assets and don\u2019t want to wait weeks to access them It is compatible with various on-chain scaling solutions such as sharding, varying block sizes, etc. New security risks/challenges (primarly for exits) that would need to be addressed to maintain immutability. Many plasma variants have their own set of drawbacks such as: * Plasma MVP has time constraints, is a less than ideal user experience, and is vulnerable to network congestion. * Plasma Cash relies on non-fungible tokens (NFTs) to function which requires heavy transaction histories. You will have to keep track of the value and have to be constantly collecting proofs of non-inclusion, and so when you transfer ownership of the NFT you have to transfer its history as well.","title":"Plasma: Pros and Cons"},{"location":"ethereum-roadmap/layer-2-scaling/plasma/#exploring-popular-plasma-flavours","text":"There isn\u2019t any single project called \"Plasma\". Instead, there are lots of different projects that use the tools provided by the Plasma framework/specification. Currently there are four main distinct versions of the protocol: Plasma Cash Plasma Cash is a Plasma design primarily built for storing and transferring non-fungible tokens. It is highly scalable because users only ever need to keep track of their own tokens. It uses Sparse Merkle Trees (SMT) for non inclusion proofs and hence can only be used for NFTs since SMTs uses indexing. Each block has a \u2018slot\u2019 for each coin (unique deposit). When a coin is spent, a transaction proof is recorded in that coin\u2019s respective slot in the block. Note: Coin defragmentation research to support FTs is going on currently Plasma Debit Plasma Debit is like Plasma Cash, except every token is a payment channel between the user and the chain operator. It\u2019s sort of like a big Lightning Network hub, but the channels can be transferred just like a Plasma Cash token. Transactions are super fast and you only need to keep track of your own channels. Plasma Prime Plasma Prime is a fancy new design that makes use of RSA accumulators to solve the problem of large history proofs in Plasma Cash. MVP (Minimum Viable Plasma) Plasma MVP is a design for an extremely simple UTXO-based Plasma chain. The basic Plasma MVP specification enables high-throughput payment transactions, but does not support more complicated constructions like scripts or smart contracts. Plasma MVP relies on confirmation signatures because withdrawals are processed in order based on the position of the output being withdrawn. Users need to sign a signature before making a transaction, wait to see the transaction included in a valid block, and then sign another signature. These second signatures must also be included within a plasma block, reducing block space available for more transactions! Note: Confirmation signatures make for pretty bad user experience. More Viable Plasma , also known as MoreVP , is an extension to Minimal Viable Plasma that removes the need for confirmation signatures. MoreVP modifies the process through which users can withdraw their funds. The ordering of each withdrawal becomes based on the position of the youngest input to the transaction that created an output.","title":"Exploring popular plasma flavours"},{"location":"ethereum-roadmap/layer-2-scaling/plasma/#comparing-different-models-of-plasma","text":"Plasma Design Component Plasma MVP Plasma Cash Plasma Debit Data Structure Binary Merkle tree Sparse Merkle Tree Sparse Merkle tree Consensus Any (PoW,PoA,PoS) Any (PoW,PoA,PoS) Single or few operators preferred over because of payment channel structure Deposits UTXOs representation, support for ETH, ERC20 Unique Coin ID for each deposit, NFTs only Accounts with unique coin IDs for each deposit, NFTs and FTs only Fees Plasma transaction fees to validators and gas fees when exiting/withdrawing to rootchain or other chains Same as MVP Users pay via operator-led payment channel instead of directly to other users Signatures Tx signature before block inclusion, confirmation signature post-inclusion Confirmation signatures to avoid griefing No confirmation signatures Exits/Withdrawals Proof of unspent UTXO required to exit, priority based on how old UTXO is Proof of coin\u2019s latest two transactions, proof of block inclusion, no priority Proof of coin\u2019s latest two transactions, proof that fraction of coin hasn\u2019t been previously spent, proof of block inclusion, no exit priority Let's compare pros, cons and use cases for each model now Type Plasma MVP Plasma Cash Plasma Debit Pros Scalable, all signatures sent to operator in PoA, High fungibility Very scalable, watchers or users themselves need to only keep track of their own coins not all coins on the chain Very scalable, watchers or users themselves need to only keep track of their own coins, Enables transactions with NFTs and FTs, Efficient balance updates don\u2019t need to be included in blocks as agreement can be made between operator and coinholder (similar to channels) Cons Watchers or users themselves are required to watch and challenge invalid exits, Potential for honest bond slashing if operator withholds blocks and user attempts to re-submit transaction Coin proofs can be massive, Coins are in fixed denomination, Watchers or users themselves are required to watch and challenge invalid txs with their own coins Heavy reliance on operator, can be hedged by creating a set of rotating operators, Coin proofs can be massive, Requires operator to lock up significant funds in advance to fund payment channels, Tx size constrained by initial coin deposit size, Enabling decentralized exchange on Debit is non-trivial Use Cases Low-trust use cases (PoA), Exchanges, securities, P2P payments, recurring/bill payments, gaming Collectibles, Asset management (real estate, art) Use cases with high-trust of operators, ewallet or service providers, Gaming, Asset Management, P2P payments","title":"Comparing different models of plasma"},{"location":"ethereum-roadmap/layer-2-scaling/plasma/#resources","text":"Plasma Group What is Ethereum Plasma The State of Plasma How Plasma Work Learn Plasma Comparing plasma models","title":"Resources"},{"location":"ethereum-roadmap/layer-2-scaling/sidechains/","text":"Sidechains Summary Sidechains are Ethereum-compatible, independent blockchains which employ their own consensus models and block parameters to efficiently process transactions. Public EVM Sidechains are designed for interoperability with Ethereum. Contracts are typically portable and assets and data may be transferred cross-chain. Public sidechains are useful in many different contexts including micro-transactions, stable transactions, and application-specific transactions (NFT-based art, DAO voting, community currencies, etc). How Do Sidechains work? Layer 2 sidechains are distributed ledgers which operate independently and in a parallel capacity to the Ethereum mainnet. Nodes within a sidechain network are responsible for confirming & processing transactions, writing transactions to blocks, and maintaining consensus across the network. Security is the responsibility of each sidechain; it is not directly inherited from Ethereum. Sidechains often incorporate alternate validator selection and consensus mechanisms to provide faster transaction times. Security & Consensus Sidechains are responsible for their own security and consensus processes. This allows for innovation and optimization, with the opportunity for increased transaction throughput and higher speed/lower cost transactions for users. Sidechains use a variety of validator selection methods to achieve these goals while maintaining security. Smaller validator sets are more susceptible to collusion-based attacks, so strong incentives must be in place to encourage honest validation and discourage malicious behavior. Examples include: Proof-of-Authority : Validators (network nodes responsible for signing transactions and maintaing a consistent ledger) are pre-selected for the protocol. An example is the POA Network . POA uses an Authority Round consensus where selected validators, in this case US Notary Publics with public reputations at stake, take turns signing transactions and sealing blocks. The POA model improves scalability (5 second block times, low transaction fees) while sacrificing a degree of decentralization (validators are pre-selected and the protocol has a limited validator set). Proof-of-Stake : A set of validators are selected based on the staking amount they commit to the protocol. Nodes which have placed more stake are more likely to be selected as validators. With delegated proof-of-stake, users can add additional staking amounts to a node, serving to increase that node's likelihood of becoming a validator. An example is the xDai chain , where nodes who commit a higher amount of STAKE (the xDai governance token, staked by both validator candidates and delegators) into the protocol have a higher probability of selection to a dynamic validator set. Once selected, staking incentives promote honest validation. Sidechains also rely on different Byzantine Fault Tolerant methods to ensure consensus. Examples include Peppermint BFT used by the Matic Network and Asynchronous Binary Byzantine Agreement by Skale . Ultimately, application-specific transactions may be better suited for sidechain adoption. Examples include DAO voting, small cash transfers, crypto art and NFTs, community currencies, small-cap exchanges, and many other use-cases which may not require the same security guarantees as high-value financial transactions. On a sidechain, transactions can be optimized for speed and cost. After they are processed, they can then be moved and stored on Ethereum through interoperability mechanisms. Interoperability The ability to move assets and data between chains is an important aspect of the sidechain environment. Applications use sidechains for fast & inexpensive transactions, but the results of these transactions should be easily transferrable cross-chain. This is sometimes referred to as a two-way peg. Since chains are independent of one another, resources are typically locked on one chain and minted(created) on another. When they are transferred back, they are burned(destroyed) and unlocked. The TokenBridge application exemplifies this architecture. Smart contracts deployed to both networks are connected by a bridge oracle where bridge validators confirm and sign cross-network transactions. Public Sidechain examples POA Network xDai Stable Chain SKALE Matic _Note on Private Sidechains: Sidechains may also be deployed in an enterprise capacity designed for private smart contracts and internal transactions. Resources Enabling Blockchain Innovations with Pegged Sidechains Sidechain technologies in blockchain networks: An examination and state-of-the-art review","title":"Sidechains"},{"location":"ethereum-roadmap/layer-2-scaling/sidechains/#sidechains","text":"","title":"Sidechains"},{"location":"ethereum-roadmap/layer-2-scaling/sidechains/#summary","text":"Sidechains are Ethereum-compatible, independent blockchains which employ their own consensus models and block parameters to efficiently process transactions. Public EVM Sidechains are designed for interoperability with Ethereum. Contracts are typically portable and assets and data may be transferred cross-chain. Public sidechains are useful in many different contexts including micro-transactions, stable transactions, and application-specific transactions (NFT-based art, DAO voting, community currencies, etc).","title":"Summary"},{"location":"ethereum-roadmap/layer-2-scaling/sidechains/#how-do-sidechains-work","text":"Layer 2 sidechains are distributed ledgers which operate independently and in a parallel capacity to the Ethereum mainnet. Nodes within a sidechain network are responsible for confirming & processing transactions, writing transactions to blocks, and maintaining consensus across the network. Security is the responsibility of each sidechain; it is not directly inherited from Ethereum. Sidechains often incorporate alternate validator selection and consensus mechanisms to provide faster transaction times.","title":"How Do Sidechains work?"},{"location":"ethereum-roadmap/layer-2-scaling/sidechains/#security-consensus","text":"Sidechains are responsible for their own security and consensus processes. This allows for innovation and optimization, with the opportunity for increased transaction throughput and higher speed/lower cost transactions for users. Sidechains use a variety of validator selection methods to achieve these goals while maintaining security. Smaller validator sets are more susceptible to collusion-based attacks, so strong incentives must be in place to encourage honest validation and discourage malicious behavior. Examples include: Proof-of-Authority : Validators (network nodes responsible for signing transactions and maintaing a consistent ledger) are pre-selected for the protocol. An example is the POA Network . POA uses an Authority Round consensus where selected validators, in this case US Notary Publics with public reputations at stake, take turns signing transactions and sealing blocks. The POA model improves scalability (5 second block times, low transaction fees) while sacrificing a degree of decentralization (validators are pre-selected and the protocol has a limited validator set). Proof-of-Stake : A set of validators are selected based on the staking amount they commit to the protocol. Nodes which have placed more stake are more likely to be selected as validators. With delegated proof-of-stake, users can add additional staking amounts to a node, serving to increase that node's likelihood of becoming a validator. An example is the xDai chain , where nodes who commit a higher amount of STAKE (the xDai governance token, staked by both validator candidates and delegators) into the protocol have a higher probability of selection to a dynamic validator set. Once selected, staking incentives promote honest validation. Sidechains also rely on different Byzantine Fault Tolerant methods to ensure consensus. Examples include Peppermint BFT used by the Matic Network and Asynchronous Binary Byzantine Agreement by Skale . Ultimately, application-specific transactions may be better suited for sidechain adoption. Examples include DAO voting, small cash transfers, crypto art and NFTs, community currencies, small-cap exchanges, and many other use-cases which may not require the same security guarantees as high-value financial transactions. On a sidechain, transactions can be optimized for speed and cost. After they are processed, they can then be moved and stored on Ethereum through interoperability mechanisms.","title":"Security &amp; Consensus"},{"location":"ethereum-roadmap/layer-2-scaling/sidechains/#interoperability","text":"The ability to move assets and data between chains is an important aspect of the sidechain environment. Applications use sidechains for fast & inexpensive transactions, but the results of these transactions should be easily transferrable cross-chain. This is sometimes referred to as a two-way peg. Since chains are independent of one another, resources are typically locked on one chain and minted(created) on another. When they are transferred back, they are burned(destroyed) and unlocked. The TokenBridge application exemplifies this architecture. Smart contracts deployed to both networks are connected by a bridge oracle where bridge validators confirm and sign cross-network transactions.","title":"Interoperability"},{"location":"ethereum-roadmap/layer-2-scaling/sidechains/#public-sidechain-examples","text":"POA Network xDai Stable Chain SKALE Matic _Note on Private Sidechains: Sidechains may also be deployed in an enterprise capacity designed for private smart contracts and internal transactions.","title":"Public Sidechain examples"},{"location":"ethereum-roadmap/layer-2-scaling/sidechains/#resources","text":"Enabling Blockchain Innovations with Pegged Sidechains Sidechain technologies in blockchain networks: An examination and state-of-the-art review","title":"Resources"},{"location":"ethereum-roadmap/layer-2-scaling/state-channels/","text":"State Channels What Are State Channels? State channels are a very broad and simple way to think about blockchain interactions which could occur on the blockchain, but instead get conducted off of the blockchain, without significantly increasing the risk of any participant. The most well known example of this strategy is the idea of payment channels in Bitcoin, which allow for instant fee-less payments to be sent directly between two parties. State channels are very similar to the concept of payment channels in Bitcoin\u2019s Lightning Network, but instead of only supporting payments, they also support general \u2018state updates.\u2019 For example, users could deposit funds into a contract and sign state updates representing moves conducted in a game of Chess. Later, only the final outcome of the game would be broadcasted to the Ethereum network once it's finished. This allows ethereum applications to \"move\" transactions off-chain, increasing the usefulness of the network as a whole. Who is working on State Channels? Teams currently working on State Channels are: * CelerX * Connext Network * State Channels * Perun How do State Channels work? State channels work by \u201clocking up\u201d some portion of blockchain state into a multisig contract, controlled by a defined set of participants. The state that is \u201clocked up\u201d is called a state deposit. For instance, this might be an amount of ether or an ERC20 token, but could also be a cryptokitty or an ENS domain name. After the state deposit is locked, channel participants use off-chain messaging to exchange and sign valid ethereum transactions without deploying them to chain. These are transactions that could be put on chain anytime, but are not. A basic breakdown: Part of the blockchain state is locked via multisignature or some sort of smart contract, so that a specific set of participants must completely agree with each other to update it. Participants update the state amongst themselves by constructing and signing transactions that could be submitted to the blockchain, but instead are merely held onto for now. Each new update \u201ctrumps\u201d previous updates. Finally, participants submit the state back to the blockchain, which closes the state channel and unlocks the state again (usually in a different configuration than it started with). Since all exchanged transactions are equally valid as far as the blockchain is concerned, state channels need a mechanism to ensure that the latest off-chain state (i.e., the latest move in our chess game) is the one that ultimately gets settled on the main chain. Thus, if a party attempts to unilaterally close a channel, other parties in the channel have a period of time \u2014 a \"dispute window\" \u2014 in which they have an opportunity to submit a more recent state, thereby proving that fraud was attempted. Once an infraction is proven, the contract handles the resolution process, which typically involves punishing the guilty party by slashing their deposited funds (though one could also simply update to the valid state and proceed accordingly). If the \u201cstate\u201d being updated between participants was a digital currency balance, then we would have a payment channel. Steps 1 and 3, which open and close the channel, involve blockchain operations. But in step 2 an unlimited number of updates can be rapidly made without the need to involve the blockchain at all \u2014 and this is where the power of state channels comes into play, because only steps 1 and 3 need to be published to the network, pay fees, or wait for confirmations. In fact, with careful planning and design, state channels can remain open almost indefinitely, and be used as part of larger hub and spoke systems to power an entire economy or ecosystem. Difference between State Channels and Sidechains State Channel pros State channels have strong privacy properties: This is because everything is happening \u201cinside\u201d a channel between participants, rather than broadcast publicly and recorded on-chain. Only the opening and closing transactions must be public. Whereas in sidechains every transaction is published on the sidechain which is received by every participant on the sidechain irrespective of the fact that you are not interacting with all of the participants on the sidechain. State channels have instant finality, meaning that as soon as both parties sign a state update, it can be considered final. Both parties have a very high guarantee that, if necessary, they can \u201cenforce\u201d that state on-chain. State Channel cons State Channels need 100% availability of all the participants involved: As we have discussed above that if anyone the participants goes unavailable, then this could prove costly to him. The participants can use a third party service to represent him if he goes unavailable (see, for instance, http://hackingdistributed.com/2018/05/22/pisa/ ), but the possibility of the representative getting attacked or bribed makes it a problem for state channels. Whereas in sidechains you don\u2019t have to be available all the time you are on the sidechain. State channels are best used for applications with a defined set of participants: This is because the state deposit contract(the contract used to lock the state) must always know the participants/entities (i.e. addresses) that are part of a given channel. We can add and remove people, but it requires a change to the contract each time. Whereas in sidechains there is no such limitation on the movement of the participants. State Channels are particularly useful where participants are going to be exchanging many state updates over a long period of time: This is because there is an initial cost to creating a channel in deploying the state deposit contract. But once it is deployed, the cost per state update inside that channel is extremely low. Sidechain pros Sidechains are permanent. You don\u2019t have create your own sidechain for specific purpose if there is one present: Sidechains are created and maintained once made. We don\u2019t close sidechains, rather we lock the assets on sidechain to move back to the mainchain. This can be helpful in the way that anyone who is doing a specific task off blockchain/mainchain (for eg. transacting in dogecoin) will come to the same sidechain. So, you don\u2019t have to create separate chains for every new participant. Whereas in state channels, an on-chain operation is required to add a participant to an existing channel. But projects such as Raiden network, and more generally the technique of meta-channels, offer a partial solution to this. They create a mesh of participants so you don\u2019t have to create a new channel for every new participant you interact with. You can interact with participants indirectly creating a channel between you and recipient through some other participant who is common to both: you and the recipient. Sidechains allow cryptocurrencies to interact with one another: They add flexibility and allow developers to experiment with Beta releases of Altcoins or software updates before pushing them on to the main chain. Traditional banking functions like issuing and tracking ownership of shares can be tested on sidechains before moving them onto main chains. Sidechain cons Sidechains do not benefit from the security of the main-chain. A user interacting on a side-chain must trust the security properties of that sidechain, because if it compromised or malevolent, a user has no guarantee of withdrawal to the main-chain. In contrast, participants in a state channel can always return to the main-chain so long as they follow the protocol. Sidechains need a lot of initial investment to start off: To create a sidechain we need to have enough miners so that the network is safe from attackers. Also, we have to make sure that they are up and running. Whereas there is no blockchain involved in state channels. So, no such requirement is needed. A Federation is needed for sidechains: This adds another layer between the mainchain and the sidechain. This could prove as another weak point for the attackers to attack by bribing or attacking the federation. Whereas in state channel we just need a smart contract to do this for us. Resources State Channels - an explanation Making Sense of Ethereum's Layer 2 Scaling Solutions (Josh Stark) State Channels Blog","title":"State Channels"},{"location":"ethereum-roadmap/layer-2-scaling/state-channels/#state-channels","text":"","title":"State Channels"},{"location":"ethereum-roadmap/layer-2-scaling/state-channels/#what-are-state-channels","text":"State channels are a very broad and simple way to think about blockchain interactions which could occur on the blockchain, but instead get conducted off of the blockchain, without significantly increasing the risk of any participant. The most well known example of this strategy is the idea of payment channels in Bitcoin, which allow for instant fee-less payments to be sent directly between two parties. State channels are very similar to the concept of payment channels in Bitcoin\u2019s Lightning Network, but instead of only supporting payments, they also support general \u2018state updates.\u2019 For example, users could deposit funds into a contract and sign state updates representing moves conducted in a game of Chess. Later, only the final outcome of the game would be broadcasted to the Ethereum network once it's finished. This allows ethereum applications to \"move\" transactions off-chain, increasing the usefulness of the network as a whole.","title":"What Are State Channels?"},{"location":"ethereum-roadmap/layer-2-scaling/state-channels/#who-is-working-on-state-channels","text":"Teams currently working on State Channels are: * CelerX * Connext Network * State Channels * Perun","title":"Who is working on State Channels?"},{"location":"ethereum-roadmap/layer-2-scaling/state-channels/#how-do-state-channels-work","text":"State channels work by \u201clocking up\u201d some portion of blockchain state into a multisig contract, controlled by a defined set of participants. The state that is \u201clocked up\u201d is called a state deposit. For instance, this might be an amount of ether or an ERC20 token, but could also be a cryptokitty or an ENS domain name. After the state deposit is locked, channel participants use off-chain messaging to exchange and sign valid ethereum transactions without deploying them to chain. These are transactions that could be put on chain anytime, but are not. A basic breakdown: Part of the blockchain state is locked via multisignature or some sort of smart contract, so that a specific set of participants must completely agree with each other to update it. Participants update the state amongst themselves by constructing and signing transactions that could be submitted to the blockchain, but instead are merely held onto for now. Each new update \u201ctrumps\u201d previous updates. Finally, participants submit the state back to the blockchain, which closes the state channel and unlocks the state again (usually in a different configuration than it started with). Since all exchanged transactions are equally valid as far as the blockchain is concerned, state channels need a mechanism to ensure that the latest off-chain state (i.e., the latest move in our chess game) is the one that ultimately gets settled on the main chain. Thus, if a party attempts to unilaterally close a channel, other parties in the channel have a period of time \u2014 a \"dispute window\" \u2014 in which they have an opportunity to submit a more recent state, thereby proving that fraud was attempted. Once an infraction is proven, the contract handles the resolution process, which typically involves punishing the guilty party by slashing their deposited funds (though one could also simply update to the valid state and proceed accordingly). If the \u201cstate\u201d being updated between participants was a digital currency balance, then we would have a payment channel. Steps 1 and 3, which open and close the channel, involve blockchain operations. But in step 2 an unlimited number of updates can be rapidly made without the need to involve the blockchain at all \u2014 and this is where the power of state channels comes into play, because only steps 1 and 3 need to be published to the network, pay fees, or wait for confirmations. In fact, with careful planning and design, state channels can remain open almost indefinitely, and be used as part of larger hub and spoke systems to power an entire economy or ecosystem.","title":"How do State Channels work?"},{"location":"ethereum-roadmap/layer-2-scaling/state-channels/#difference-between-state-channels-and-sidechains","text":"","title":"Difference between State Channels and Sidechains"},{"location":"ethereum-roadmap/layer-2-scaling/state-channels/#state-channel-pros","text":"State channels have strong privacy properties: This is because everything is happening \u201cinside\u201d a channel between participants, rather than broadcast publicly and recorded on-chain. Only the opening and closing transactions must be public. Whereas in sidechains every transaction is published on the sidechain which is received by every participant on the sidechain irrespective of the fact that you are not interacting with all of the participants on the sidechain. State channels have instant finality, meaning that as soon as both parties sign a state update, it can be considered final. Both parties have a very high guarantee that, if necessary, they can \u201cenforce\u201d that state on-chain.","title":"State Channel pros"},{"location":"ethereum-roadmap/layer-2-scaling/state-channels/#state-channel-cons","text":"State Channels need 100% availability of all the participants involved: As we have discussed above that if anyone the participants goes unavailable, then this could prove costly to him. The participants can use a third party service to represent him if he goes unavailable (see, for instance, http://hackingdistributed.com/2018/05/22/pisa/ ), but the possibility of the representative getting attacked or bribed makes it a problem for state channels. Whereas in sidechains you don\u2019t have to be available all the time you are on the sidechain. State channels are best used for applications with a defined set of participants: This is because the state deposit contract(the contract used to lock the state) must always know the participants/entities (i.e. addresses) that are part of a given channel. We can add and remove people, but it requires a change to the contract each time. Whereas in sidechains there is no such limitation on the movement of the participants. State Channels are particularly useful where participants are going to be exchanging many state updates over a long period of time: This is because there is an initial cost to creating a channel in deploying the state deposit contract. But once it is deployed, the cost per state update inside that channel is extremely low.","title":"State Channel cons"},{"location":"ethereum-roadmap/layer-2-scaling/state-channels/#sidechain-pros","text":"Sidechains are permanent. You don\u2019t have create your own sidechain for specific purpose if there is one present: Sidechains are created and maintained once made. We don\u2019t close sidechains, rather we lock the assets on sidechain to move back to the mainchain. This can be helpful in the way that anyone who is doing a specific task off blockchain/mainchain (for eg. transacting in dogecoin) will come to the same sidechain. So, you don\u2019t have to create separate chains for every new participant. Whereas in state channels, an on-chain operation is required to add a participant to an existing channel. But projects such as Raiden network, and more generally the technique of meta-channels, offer a partial solution to this. They create a mesh of participants so you don\u2019t have to create a new channel for every new participant you interact with. You can interact with participants indirectly creating a channel between you and recipient through some other participant who is common to both: you and the recipient. Sidechains allow cryptocurrencies to interact with one another: They add flexibility and allow developers to experiment with Beta releases of Altcoins or software updates before pushing them on to the main chain. Traditional banking functions like issuing and tracking ownership of shares can be tested on sidechains before moving them onto main chains.","title":"Sidechain pros"},{"location":"ethereum-roadmap/layer-2-scaling/state-channels/#sidechain-cons","text":"Sidechains do not benefit from the security of the main-chain. A user interacting on a side-chain must trust the security properties of that sidechain, because if it compromised or malevolent, a user has no guarantee of withdrawal to the main-chain. In contrast, participants in a state channel can always return to the main-chain so long as they follow the protocol. Sidechains need a lot of initial investment to start off: To create a sidechain we need to have enough miners so that the network is safe from attackers. Also, we have to make sure that they are up and running. Whereas there is no blockchain involved in state channels. So, no such requirement is needed. A Federation is needed for sidechains: This adds another layer between the mainchain and the sidechain. This could prove as another weak point for the attackers to attack by bribing or attacking the federation. Whereas in state channel we just need a smart contract to do this for us.","title":"Sidechain cons"},{"location":"ethereum-roadmap/layer-2-scaling/state-channels/#resources","text":"State Channels - an explanation Making Sense of Ethereum's Layer 2 Scaling Solutions (Josh Stark) State Channels Blog","title":"Resources"},{"location":"ethereum-roadmap/layer-2-scaling/zk-rollups/","text":"ZK-Rollups Background Plasma is the name given to the construction scalability method that places layer 2 blocks on top of the Ethereum blockchain in the form of a side chain. The implementation of Plasma gives the ability of hundreds of side chain transactions to be processed offline with only a single hash of the side chain block being added to the Ethereum blockchain. Fundamental flaws exist preventing further scalability. An exit game must be played for a user to withdraw from the side chain which requires side chain users to retain a high amount of data so that enough exists for validation. Also, a lengthy challenge period requires users to stay online or lose reward. Solutions that are more user friendly and less resource intensive are in development to improve layer 2 scalability. ZK-Rollups are one of the solutions in development to achieve this goal. Introduction ZK-Rollups are one of the options being developed for layer 2 construction that increases scalability through mass transfer processing rolled into a single transaction. Where Plasma creates one transaction per transfer, ZK-Rollups bundle hundreds of transfers into a single transaction. The smart contract will deconstruct and verify all of the transfers held in a single transaction. A \"zero knowledge proof\" approach is used to present and publicly record the validity of the block on the Ethereum blockchain. ZK reduces computing and storage resources for validating the block by reducing the amount of data held in a transaction; zero knowledge of the entire data is needed. Simple Overview The ZK-Rollup scheme consists of two types of users: transactors and relayers. Transactors create their transfer and broadcast the transfer to the network. The transfer data consists of an indexed \"to\" and \"from\" address, a value to transact, the network fee, and nonce. A shortened 3 byte indexed version of the addresses reduces processing resource needs. The value of the transaction being greater than or less than zero creates a deposit or withdrawal respectively. The smart contract records the data in two Merkle Trees; addresses in one Merkle Tree and transfer amounts in another. Relayers collect a large amount of transfers to create a rollup. It is the relayers job to generate the SNARK proof. The SNARK proof is a hash that represents the delta of the blockchain state. State refers to \"state of being.\" SNARK proof compares a snapshot of the blockchain before the transfers to a snapshot of the blockchain after the transfers (i.e. wallet values) and reports only the changes in a verifiable hash to the mainnet. It is worth noting that anyone can become a relayer so long as they have staked the required bond in the smart contract. This incentivises the relayer not to tamper with or withhold a rollup. User Experience Users on a dapp running the ZK-Rollup scheme will pay less in transaction fees. Creating zero knowledge proofs requires a large amount of computing power. The implementation is proposed to be a \"commit-verify\" approach. The latency to block confirmation will increase because the SNARK proof will be delayed by a number of blocks. How this will affect users will not be known until implementation. Pros/Cons Pros: Reduced fees per user transfer Faster than Optimistic Rollup and Plasma Blocks will be computed in a parallel computing model which encourages decentralization Less data contained in each transaction increases throughput and scalability of layer 2 Does not require a fraud game verification like Optimistic Rollup, which can delay withdrawals by up to two weeks Cons: The difficulty in computing zero knowledge proof will require data optimization to get maximum throughput The initial set up of ZK-Rollups promotes a centralized scheme (see Security Considerations) The security scheme assumes a level of unverifiable trust Quantum computing poses a threat to hacking the blockchain Example zkSync is a ZK-Rollup live on Ethereum mainnet. Security Considerations The initial setup of ZK-Rollups is assumed to be a trusted state, when this trust cannot be proven. A small group of developers will be subject matter experts on the initial trusted state. This undermines decentralization and opens the risk of social engineering hacking attacks by convincing a developer to manipulate code or provide vulnerability information. Quantum computing poses a threat to the ability of being able to crack ZK-Rollups due to the fact that a higher probability exists in being able to \"guess\" the correct SNARK proof hash than the current encryption protocol. Resources Zero Knowledge Proof - Video Overview zkSNARKs in a nutshell On-chain scaling to potentially ~500tx/sec through mass tx validation ZK Rollup & Optimistic Rollup (En) On-chain scaling with full data availability. Moving verification of chains off-chain? Moving verification of chains off-chain?","title":"ZK-Rollups"},{"location":"ethereum-roadmap/layer-2-scaling/zk-rollups/#zk-rollups","text":"","title":"ZK-Rollups"},{"location":"ethereum-roadmap/layer-2-scaling/zk-rollups/#background","text":"Plasma is the name given to the construction scalability method that places layer 2 blocks on top of the Ethereum blockchain in the form of a side chain. The implementation of Plasma gives the ability of hundreds of side chain transactions to be processed offline with only a single hash of the side chain block being added to the Ethereum blockchain. Fundamental flaws exist preventing further scalability. An exit game must be played for a user to withdraw from the side chain which requires side chain users to retain a high amount of data so that enough exists for validation. Also, a lengthy challenge period requires users to stay online or lose reward. Solutions that are more user friendly and less resource intensive are in development to improve layer 2 scalability. ZK-Rollups are one of the solutions in development to achieve this goal.","title":"Background"},{"location":"ethereum-roadmap/layer-2-scaling/zk-rollups/#introduction","text":"ZK-Rollups are one of the options being developed for layer 2 construction that increases scalability through mass transfer processing rolled into a single transaction. Where Plasma creates one transaction per transfer, ZK-Rollups bundle hundreds of transfers into a single transaction. The smart contract will deconstruct and verify all of the transfers held in a single transaction. A \"zero knowledge proof\" approach is used to present and publicly record the validity of the block on the Ethereum blockchain. ZK reduces computing and storage resources for validating the block by reducing the amount of data held in a transaction; zero knowledge of the entire data is needed.","title":"Introduction"},{"location":"ethereum-roadmap/layer-2-scaling/zk-rollups/#simple-overview","text":"The ZK-Rollup scheme consists of two types of users: transactors and relayers. Transactors create their transfer and broadcast the transfer to the network. The transfer data consists of an indexed \"to\" and \"from\" address, a value to transact, the network fee, and nonce. A shortened 3 byte indexed version of the addresses reduces processing resource needs. The value of the transaction being greater than or less than zero creates a deposit or withdrawal respectively. The smart contract records the data in two Merkle Trees; addresses in one Merkle Tree and transfer amounts in another. Relayers collect a large amount of transfers to create a rollup. It is the relayers job to generate the SNARK proof. The SNARK proof is a hash that represents the delta of the blockchain state. State refers to \"state of being.\" SNARK proof compares a snapshot of the blockchain before the transfers to a snapshot of the blockchain after the transfers (i.e. wallet values) and reports only the changes in a verifiable hash to the mainnet. It is worth noting that anyone can become a relayer so long as they have staked the required bond in the smart contract. This incentivises the relayer not to tamper with or withhold a rollup.","title":"Simple Overview"},{"location":"ethereum-roadmap/layer-2-scaling/zk-rollups/#user-experience","text":"Users on a dapp running the ZK-Rollup scheme will pay less in transaction fees. Creating zero knowledge proofs requires a large amount of computing power. The implementation is proposed to be a \"commit-verify\" approach. The latency to block confirmation will increase because the SNARK proof will be delayed by a number of blocks. How this will affect users will not be known until implementation.","title":"User Experience"},{"location":"ethereum-roadmap/layer-2-scaling/zk-rollups/#proscons","text":"Pros: Reduced fees per user transfer Faster than Optimistic Rollup and Plasma Blocks will be computed in a parallel computing model which encourages decentralization Less data contained in each transaction increases throughput and scalability of layer 2 Does not require a fraud game verification like Optimistic Rollup, which can delay withdrawals by up to two weeks Cons: The difficulty in computing zero knowledge proof will require data optimization to get maximum throughput The initial set up of ZK-Rollups promotes a centralized scheme (see Security Considerations) The security scheme assumes a level of unverifiable trust Quantum computing poses a threat to hacking the blockchain","title":"Pros/Cons"},{"location":"ethereum-roadmap/layer-2-scaling/zk-rollups/#example","text":"zkSync is a ZK-Rollup live on Ethereum mainnet.","title":"Example"},{"location":"ethereum-roadmap/layer-2-scaling/zk-rollups/#security-considerations","text":"The initial setup of ZK-Rollups is assumed to be a trusted state, when this trust cannot be proven. A small group of developers will be subject matter experts on the initial trusted state. This undermines decentralization and opens the risk of social engineering hacking attacks by convincing a developer to manipulate code or provide vulnerability information. Quantum computing poses a threat to the ability of being able to crack ZK-Rollups due to the fact that a higher probability exists in being able to \"guess\" the correct SNARK proof hash than the current encryption protocol.","title":"Security Considerations"},{"location":"ethereum-roadmap/layer-2-scaling/zk-rollups/#resources","text":"Zero Knowledge Proof - Video Overview zkSNARKs in a nutshell On-chain scaling to potentially ~500tx/sec through mass tx validation ZK Rollup & Optimistic Rollup (En) On-chain scaling with full data availability. Moving verification of chains off-chain? Moving verification of chains off-chain?","title":"Resources"},{"location":"ethereum-roadmap/layer-2-scaling/zk-starks/","text":"ZK-STARKs Summary ZK-STARKs (Zero-Knowledge Scalable Transparent ARguments of Knowledge) are a type of cryptographic proof technology that enables users to share validated data or perform computations with a third party without the data or computation being revealed to the third-party, also known as a zero-knowledge proof, in a way that is publicly verifiable. In simpler terms, a zero-knowledge proof can prove something is true without having to reveal what exactly it is proving. For example, ZK-STARKs would allow Alice to verify Bob's banking information using a zero-knowledge cryptographic proof instead of revealing the confidential information to Alice. Prior to the creation of ZK-STARKs, ZK-SNARKs were used to create ZK proof systems, but required a trusted party or parties to initially setup the ZK proof system which introduced the vulnerability of those trusted parties compromising the privacy of the entire system. ZK-STARKs improve upon this technology by removing the need for a trusted setup. Scaling benefits of using STARKs STARKs improve two of the problems of permissionless blockchains: scalability and privacy. The pioneer in STARK technology StarkWare Industries' current ZK-STARK research is focusing on scalability first and then privacy later on. STARKs improve scalability by allowing developers to move computations and storage off-chain. Off-chain services will be able to generate STARK proofs that attest the integrity of off-chain computations. These proofs are then placed back on chain for any interested party to validate the computation. Moving the bulk of computational work off-chain using STARKs allows existing blockchain infrastructure to scale exponentially while trustlessly maintaining computational integrity. Differences between ZK-SNARKs and ZK-STARKs ZK-SNARKs require a trusted setup phase whereas ZK-STARKs use publicly verifiable randomness to create trustlessly verifiable computation systems. ZK-STARKs are more scalable in terms of computational speed and size when compared to ZK-SNARKs. ZK-SNARKs are vulnerable to attacks from quantum computers due to the cryptography they use. ZK-STARKs are currently quantum-resistant. Resources ZK-STARKs Whitepaper libSTARK - a C++ library for ZK-STARK systems StarkWare Industries site - The leading researchers pioneering ZK-STARKs StarkWare Industries blog Vitalik's series on ZK-STARKs - Part 1 , Part 2 , Part 3 STARKs presentation at Web3 Summit 2018 - Eli Ben-Sasson and Avihu Levy present Stark vs. Snark & Bulletproofs Adam Luciano on ZK-STARKS - A simple breakdown of the STARK whitepaper and differences from SNARKs Zero Knowledge FM - a podcast made for developers and people looking to learn about ZK tech","title":"ZK-STARKs"},{"location":"ethereum-roadmap/layer-2-scaling/zk-starks/#zk-starks","text":"","title":"ZK-STARKs"},{"location":"ethereum-roadmap/layer-2-scaling/zk-starks/#summary","text":"ZK-STARKs (Zero-Knowledge Scalable Transparent ARguments of Knowledge) are a type of cryptographic proof technology that enables users to share validated data or perform computations with a third party without the data or computation being revealed to the third-party, also known as a zero-knowledge proof, in a way that is publicly verifiable. In simpler terms, a zero-knowledge proof can prove something is true without having to reveal what exactly it is proving. For example, ZK-STARKs would allow Alice to verify Bob's banking information using a zero-knowledge cryptographic proof instead of revealing the confidential information to Alice. Prior to the creation of ZK-STARKs, ZK-SNARKs were used to create ZK proof systems, but required a trusted party or parties to initially setup the ZK proof system which introduced the vulnerability of those trusted parties compromising the privacy of the entire system. ZK-STARKs improve upon this technology by removing the need for a trusted setup.","title":"Summary"},{"location":"ethereum-roadmap/layer-2-scaling/zk-starks/#scaling-benefits-of-using-starks","text":"STARKs improve two of the problems of permissionless blockchains: scalability and privacy. The pioneer in STARK technology StarkWare Industries' current ZK-STARK research is focusing on scalability first and then privacy later on. STARKs improve scalability by allowing developers to move computations and storage off-chain. Off-chain services will be able to generate STARK proofs that attest the integrity of off-chain computations. These proofs are then placed back on chain for any interested party to validate the computation. Moving the bulk of computational work off-chain using STARKs allows existing blockchain infrastructure to scale exponentially while trustlessly maintaining computational integrity.","title":"Scaling benefits of using STARKs"},{"location":"ethereum-roadmap/layer-2-scaling/zk-starks/#differences-between-zk-snarks-and-zk-starks","text":"ZK-SNARKs require a trusted setup phase whereas ZK-STARKs use publicly verifiable randomness to create trustlessly verifiable computation systems. ZK-STARKs are more scalable in terms of computational speed and size when compared to ZK-SNARKs. ZK-SNARKs are vulnerable to attacks from quantum computers due to the cryptography they use. ZK-STARKs are currently quantum-resistant.","title":"Differences between ZK-SNARKs and ZK-STARKs"},{"location":"ethereum-roadmap/layer-2-scaling/zk-starks/#resources","text":"ZK-STARKs Whitepaper libSTARK - a C++ library for ZK-STARK systems StarkWare Industries site - The leading researchers pioneering ZK-STARKs StarkWare Industries blog Vitalik's series on ZK-STARKs - Part 1 , Part 2 , Part 3 STARKs presentation at Web3 Summit 2018 - Eli Ben-Sasson and Avihu Levy present Stark vs. Snark & Bulletproofs Adam Luciano on ZK-STARKS - A simple breakdown of the STARK whitepaper and differences from SNARKs Zero Knowledge FM - a podcast made for developers and people looking to learn about ZK tech","title":"Resources"},{"location":"glossary/crypto-acronyms/","text":"Crypto Acronyms Consensus/Sybil-control PoW - Proof of Work PoS - Proof of Stake PoA - Proof of Authority DPoS - Delegated Proof of Stake LPoS - Liquid Proof of Stake NPoS - Nominated Proof of Stake BFT - Byzantine Fault Tolerance dBFT - Delegated Byzantine Fault Tolerance pBFT - Practical Byzantine Fault Tolerance iBFT - Istanbul Byzantine Fault Tolerance Ethereum-related DeFi - Decentralized Finance DAPP - Decentralized Application ERC - Ethereum Request for Comments EIP - Ethereum Improvement Proposal EIPIP - EIP Improvement Proposal DAO - Decentralized Autonomous Organization EVM - Ethereum Virtual Machine WASM - Web Assembly VDF - Verifiable Delay Function SC - Smart Contract NFT - Non-Fungible Token Bitcoin-related BIP - Bitcoin Improvement Proposal SegWit - Segregated Witness SPV - Simple Payment Verification UTXO - Unspent Transaction Output LN - Lightning Network RSK - RootStock SC Platform MW - MimbleWimble RBF - Replace By Fee UAHF - User Activated Hard Fork UASF - User Activated Soft Fork Money-related SoV - Store of Value MoE - Medium of Exchange UoA - Unit of Account FIAT - Government-issued currency Trading ETF - Exchange Traded Fund TA - Technical Analysis FA - Fundamental Analysis DCA - Dollar Cost Averaging OTC - Over the Counter CEX - Centralized Exchange DEX - Decentralized Exchange PnD - Pump and Dump ICO - Initial Coin Offering STO - Security Token Offering SAFT - Simple Agreement for Future Tokens ROI - Return on Investment SATS - Satoshis ATH/L - All Time High ATL - All Time Low MCAP - Market Capilization BB - Bollinger Bands MACD - Moving Average Convergence Divergence RSI - Relative Strength Index SMA - Simply Moving Average EMA - Exponential Moving Average Mining CPU - Central Processing Unit GPU - Graphics Processing Unit ASIC - Application-Specific Integrated Circuit FPGA - Field Programmable Gate Array HPS - Hashes Per Second Memes HODL - A spelling error FOMO - Fear of Missing Out BTFD - Buy The Fucking Dip DYOR - Do Your Own Research FUD - Fear, Uncertainty and Doubt SFYL - Sorry For Your Loss BUIDL - A spelling error U.S Regulatory-related SEC - Securities & Exchange Commission FTC - Federal Trade Commision CFTC - Commodity Futures Trading Commission FDIC - Federal Deposit Insurance Corporation DOJ - Department of Justice FinCEN - Financial Crimes Enforcement Network FINRA - Financial Industry Regulatory Authority KYC - Know Your Customer AML - Anti-money Laundering MT - Money Transmitter Misc BP - Block Producer TXID - Transaction ID TPS - Transactions Per Second ZK - Zero Knowledge P2P - Peer to Peer ALT - Alternative Cryptocurrency HF - Hard Fork SF - Soft Fork WP - Whitepaper 2FA - Two Factor Authentication DoS - Denial of Service DDoS - Distributed Denial of Service IPFS - Interplanetary File System PKI - Public Key Infrastructure CT - Crypto Twitter NONCE - Number Only Once HW - Hardware Wallet MCD - Multi-collateral Dai CDP - Collateralized Debt Position EEA - Enterprise Ethereum Alliance HTLC - Hashed Timelock Contract VRF - Verfiable Random Function DAG - Directed Acyclic Graph Security and Privacy SNARKs - Succinct Non-Interactive ARguments of Knowledge STARKs - Scalable Transparent ARguments of Knowledge MPC - Multi-Party Computation Resources A Glossary of Common Terms in the Ethereum / Crypto Space","title":"Acronyms"},{"location":"glossary/crypto-acronyms/#crypto-acronyms","text":"","title":"Crypto Acronyms"},{"location":"glossary/crypto-acronyms/#consensussybil-control","text":"PoW - Proof of Work PoS - Proof of Stake PoA - Proof of Authority DPoS - Delegated Proof of Stake LPoS - Liquid Proof of Stake NPoS - Nominated Proof of Stake BFT - Byzantine Fault Tolerance dBFT - Delegated Byzantine Fault Tolerance pBFT - Practical Byzantine Fault Tolerance iBFT - Istanbul Byzantine Fault Tolerance","title":"Consensus/Sybil-control"},{"location":"glossary/crypto-acronyms/#ethereum-related","text":"DeFi - Decentralized Finance DAPP - Decentralized Application ERC - Ethereum Request for Comments EIP - Ethereum Improvement Proposal EIPIP - EIP Improvement Proposal DAO - Decentralized Autonomous Organization EVM - Ethereum Virtual Machine WASM - Web Assembly VDF - Verifiable Delay Function SC - Smart Contract NFT - Non-Fungible Token","title":"Ethereum-related"},{"location":"glossary/crypto-acronyms/#bitcoin-related","text":"BIP - Bitcoin Improvement Proposal SegWit - Segregated Witness SPV - Simple Payment Verification UTXO - Unspent Transaction Output LN - Lightning Network RSK - RootStock SC Platform MW - MimbleWimble RBF - Replace By Fee UAHF - User Activated Hard Fork UASF - User Activated Soft Fork","title":"Bitcoin-related"},{"location":"glossary/crypto-acronyms/#money-related","text":"SoV - Store of Value MoE - Medium of Exchange UoA - Unit of Account FIAT - Government-issued currency","title":"Money-related"},{"location":"glossary/crypto-acronyms/#trading","text":"ETF - Exchange Traded Fund TA - Technical Analysis FA - Fundamental Analysis DCA - Dollar Cost Averaging OTC - Over the Counter CEX - Centralized Exchange DEX - Decentralized Exchange PnD - Pump and Dump ICO - Initial Coin Offering STO - Security Token Offering SAFT - Simple Agreement for Future Tokens ROI - Return on Investment SATS - Satoshis ATH/L - All Time High ATL - All Time Low MCAP - Market Capilization BB - Bollinger Bands MACD - Moving Average Convergence Divergence RSI - Relative Strength Index SMA - Simply Moving Average EMA - Exponential Moving Average","title":"Trading"},{"location":"glossary/crypto-acronyms/#mining","text":"CPU - Central Processing Unit GPU - Graphics Processing Unit ASIC - Application-Specific Integrated Circuit FPGA - Field Programmable Gate Array HPS - Hashes Per Second","title":"Mining"},{"location":"glossary/crypto-acronyms/#memes","text":"HODL - A spelling error FOMO - Fear of Missing Out BTFD - Buy The Fucking Dip DYOR - Do Your Own Research FUD - Fear, Uncertainty and Doubt SFYL - Sorry For Your Loss BUIDL - A spelling error","title":"Memes"},{"location":"glossary/crypto-acronyms/#us-regulatory-related","text":"SEC - Securities & Exchange Commission FTC - Federal Trade Commision CFTC - Commodity Futures Trading Commission FDIC - Federal Deposit Insurance Corporation DOJ - Department of Justice FinCEN - Financial Crimes Enforcement Network FINRA - Financial Industry Regulatory Authority KYC - Know Your Customer AML - Anti-money Laundering MT - Money Transmitter","title":"U.S Regulatory-related"},{"location":"glossary/crypto-acronyms/#misc","text":"BP - Block Producer TXID - Transaction ID TPS - Transactions Per Second ZK - Zero Knowledge P2P - Peer to Peer ALT - Alternative Cryptocurrency HF - Hard Fork SF - Soft Fork WP - Whitepaper 2FA - Two Factor Authentication DoS - Denial of Service DDoS - Distributed Denial of Service IPFS - Interplanetary File System PKI - Public Key Infrastructure CT - Crypto Twitter NONCE - Number Only Once HW - Hardware Wallet MCD - Multi-collateral Dai CDP - Collateralized Debt Position EEA - Enterprise Ethereum Alliance HTLC - Hashed Timelock Contract VRF - Verfiable Random Function DAG - Directed Acyclic Graph","title":"Misc"},{"location":"glossary/crypto-acronyms/#security-and-privacy","text":"SNARKs - Succinct Non-Interactive ARguments of Knowledge STARKs - Scalable Transparent ARguments of Knowledge MPC - Multi-Party Computation","title":"Security and Privacy"},{"location":"glossary/crypto-acronyms/#resources","text":"A Glossary of Common Terms in the Ethereum / Crypto Space","title":"Resources"},{"location":"glossary/ens-domains/","text":"ENS Domain directory","title":"ENS Domain Directory"},{"location":"glossary/ens-domains/#ens-domain-directory","text":"","title":"ENS Domain directory"},{"location":"glossary/sideways-dictionary/2FA/","text":"2FA Two-Form Authentication (2FA) is like... a time-based code that only the bank manager knows and is used to open the bank vault. that scene in spy movies where only the real spy would know the secret phrase and response.","title":"2FA"},{"location":"glossary/sideways-dictionary/2FA/#2fa","text":"","title":"2FA"},{"location":"glossary/sideways-dictionary/2FA/#two-form-authentication-2fa-is-like","text":"a time-based code that only the bank manager knows and is used to open the bank vault. that scene in spy movies where only the real spy would know the secret phrase and response.","title":"Two-Form Authentication (2FA) is like..."},{"location":"glossary/sideways-dictionary/blockchain/","text":"Blockchain Blockchain is like... a poker game where everyone writes down every bet made. By comparing their records at the end of each round, the players can make sure no one is cheating.","title":"Blockchain"},{"location":"glossary/sideways-dictionary/blockchain/#blockchain","text":"","title":"Blockchain"},{"location":"glossary/sideways-dictionary/blockchain/#blockchain-is-like","text":"a poker game where everyone writes down every bet made. By comparing their records at the end of each round, the players can make sure no one is cheating.","title":"Blockchain is like..."},{"location":"glossary/sideways-dictionary/cold-storage/","text":"Cold storage Cold storage is like... when a bank puts their gold in a vault underground to make it impossible for a petty bankrobber to steal it. when a cashier takes the excess money from their cash register drawer gives it to their manager to deposit into the safe.","title":"Cold Storage"},{"location":"glossary/sideways-dictionary/cold-storage/#cold-storage","text":"","title":"Cold storage"},{"location":"glossary/sideways-dictionary/cold-storage/#cold-storage-is-like","text":"when a bank puts their gold in a vault underground to make it impossible for a petty bankrobber to steal it. when a cashier takes the excess money from their cash register drawer gives it to their manager to deposit into the safe.","title":"Cold storage is like..."},{"location":"glossary/sideways-dictionary/cryptojacking/","text":"Cryptojacking Cryptojacking is like... in the movie Office Space where a group alters the code of a bank's computer to steal pennies from every bank transaction plugging in an extension cord to your neighbor's house to earn/save money by stealing their energy","title":"Cryptojacking"},{"location":"glossary/sideways-dictionary/cryptojacking/#cryptojacking","text":"","title":"Cryptojacking"},{"location":"glossary/sideways-dictionary/cryptojacking/#cryptojacking-is-like","text":"in the movie Office Space where a group alters the code of a bank's computer to steal pennies from every bank transaction plugging in an extension cord to your neighbor's house to earn/save money by stealing their energy","title":"Cryptojacking is like..."},{"location":"glossary/sideways-dictionary/ddos/","text":"Distributed Denial of Service (DDoS) Attack A Distributed Denial of Service (DDoS) Attack is like... if a large flash mob tried enter a restaurant at the same time. The restaurant quickly is overwhelmed and no new customers are able to be served until the mob is dealt with or goes away.","title":"DDOS"},{"location":"glossary/sideways-dictionary/ddos/#distributed-denial-of-service-ddos-attack","text":"","title":"Distributed Denial of Service (DDoS) Attack"},{"location":"glossary/sideways-dictionary/ddos/#a-distributed-denial-of-service-ddos-attack-is-like","text":"if a large flash mob tried enter a restaurant at the same time. The restaurant quickly is overwhelmed and no new customers are able to be served until the mob is dealt with or goes away.","title":"A Distributed Denial of Service (DDoS) Attack is like..."},{"location":"glossary/sideways-dictionary/difficulty/","text":"Difficulty Difficulty is like... the odds you have to winning the the lottery a taskmaster who checks to see if every a block is shipped out on time.","title":"Difficulty"},{"location":"glossary/sideways-dictionary/difficulty/#difficulty","text":"","title":"Difficulty"},{"location":"glossary/sideways-dictionary/difficulty/#difficulty-is-like","text":"the odds you have to winning the the lottery a taskmaster who checks to see if every a block is shipped out on time.","title":"Difficulty is like..."},{"location":"glossary/sideways-dictionary/double-spend/","text":"Double Spend A double spend is like... when someone's check bounces but they've already left the store with the product and so the store is out the money","title":"Double Spend"},{"location":"glossary/sideways-dictionary/double-spend/#double-spend","text":"","title":"Double Spend"},{"location":"glossary/sideways-dictionary/double-spend/#a-double-spend-is-like","text":"when someone's check bounces but they've already left the store with the product and so the store is out the money","title":"A double spend is like..."},{"location":"glossary/sideways-dictionary/forks/","text":"Forks A fork is like... in a time-travel movie where an action taken by the main character splits the timeline and creates and alternate timeline.","title":"Forks"},{"location":"glossary/sideways-dictionary/forks/#forks","text":"","title":"Forks"},{"location":"glossary/sideways-dictionary/forks/#a-fork-is-like","text":"in a time-travel movie where an action taken by the main character splits the timeline and creates and alternate timeline.","title":"A fork is like..."},{"location":"glossary/sideways-dictionary/multi-sig/","text":"Multi-signature wallets A multi-signature wallet is like... a joint savings account that requires more than one account holder to sign checks. a bank vault that requires each bank manager's password to open. a planning committee where every expense needs to be signed off on by each member of the committee. in a video game lobby where each player needs to approve of each action like readying up to start the game, kicking a teammate, etc. No one player alone can perform these actions.","title":"Multi-Sig"},{"location":"glossary/sideways-dictionary/multi-sig/#multi-signature-wallets","text":"","title":"Multi-signature wallets"},{"location":"glossary/sideways-dictionary/multi-sig/#a-multi-signature-wallet-is-like","text":"a joint savings account that requires more than one account holder to sign checks. a bank vault that requires each bank manager's password to open. a planning committee where every expense needs to be signed off on by each member of the committee. in a video game lobby where each player needs to approve of each action like readying up to start the game, kicking a teammate, etc. No one player alone can perform these actions.","title":"A multi-signature wallet is like..."},{"location":"glossary/sideways-dictionary/smart-contract/","text":"Smart Contract A smart contract is like... a vending machine. You can trust that if you give it your money that it is programmed to accept your money and dispense the drink you selected.","title":"Smart Contract"},{"location":"glossary/sideways-dictionary/smart-contract/#smart-contract","text":"","title":"Smart Contract"},{"location":"glossary/sideways-dictionary/smart-contract/#a-smart-contract-is-like","text":"a vending machine. You can trust that if you give it your money that it is programmed to accept your money and dispense the drink you selected.","title":"A smart contract is like..."},{"location":"glossary/sideways-dictionary/state-rent/","text":"State Rent State rent is like... the yearly fee your bank charges you to keep your account open the rent that a store pays the owner of its building","title":"State Rent"},{"location":"glossary/sideways-dictionary/state-rent/#state-rent","text":"","title":"State Rent"},{"location":"glossary/sideways-dictionary/state-rent/#state-rent-is-like","text":"the yearly fee your bank charges you to keep your account open the rent that a store pays the owner of its building","title":"State rent is like..."},{"location":"glossary/sideways-dictionary/stateless-clients/","text":"Stateless clients A stateless client is like... hiring an accountant who does your all your bookkeeping but charges fees for every piece of info they must look up for every transaction you make","title":"Stateless Clients"},{"location":"glossary/sideways-dictionary/stateless-clients/#stateless-clients","text":"","title":"Stateless clients"},{"location":"glossary/sideways-dictionary/stateless-clients/#a-stateless-client-is-like","text":"hiring an accountant who does your all your bookkeeping but charges fees for every piece of info they must look up for every transaction you make","title":"A stateless client is like..."},{"location":"glossary/sideways-dictionary/uncle-blocks/","text":"Uncle Blocks Uncle Blocks are like... the smaller prizes that you receive if you don't win the big prize in a promotional giveaway.","title":"Uncle Blocks"},{"location":"glossary/sideways-dictionary/uncle-blocks/#uncle-blocks","text":"","title":"Uncle Blocks"},{"location":"glossary/sideways-dictionary/uncle-blocks/#uncle-blocks-are-like","text":"the smaller prizes that you receive if you don't win the big prize in a promotional giveaway.","title":"Uncle Blocks are like..."},{"location":"glossary/sideways-dictionary/wei/","text":"Wei Wei is like... a penny to the USD, the smallest unit","title":"Wei"},{"location":"glossary/sideways-dictionary/wei/#wei","text":"","title":"Wei"},{"location":"glossary/sideways-dictionary/wei/#wei-is-like","text":"a penny to the USD, the smallest unit","title":"Wei is like..."},{"location":"glossary/sideways-dictionary/what-is-the-sideways-dictionary/","text":"Sideways Dictionary Taking a page from The Sideways Dictionary , this sideways dictionary provides analogies instead of definitions for key terms and concepts of the Ethereum ecosystem. This section of EthHub is intended to be a resource for anyone who is still struggling with grasping a concept. Sometimes a definition doesn't quite click in your head. We hope this collection of analogies and explanations can be used as a shared resource for all members of the Ethereum community, newcomers and oldtimers alike. Resources Original Sideways Dictionary","title":"What is the sideways dictionary?"},{"location":"glossary/sideways-dictionary/what-is-the-sideways-dictionary/#sideways-dictionary","text":"Taking a page from The Sideways Dictionary , this sideways dictionary provides analogies instead of definitions for key terms and concepts of the Ethereum ecosystem. This section of EthHub is intended to be a resource for anyone who is still struggling with grasping a concept. Sometimes a definition doesn't quite click in your head. We hope this collection of analogies and explanations can be used as a shared resource for all members of the Ethereum community, newcomers and oldtimers alike.","title":"Sideways Dictionary"},{"location":"glossary/sideways-dictionary/what-is-the-sideways-dictionary/#resources","text":"Original Sideways Dictionary","title":"Resources"},{"location":"guides/a-straightforward-guide-erc20-tokens/","text":"A Straightforward Guide to ERC20 Tokens Summary A token can be defined as something that serves as a visible or tangible representation of something else. An example of this could be arcade tokens, these pieces of metal are the physical representation of the amount of games that a person is able to play. However, unlike arcade tokens, tokens built on top of Ethereum are entirely virtual, but can still have representational value assigned to them in the same way. ERC20 tokens are by far the most used token on Ethereum and this guide will break down the ERC20 standard as well as what it means for something to be an ERC20 token. The Importance of Standards When a large group of people are trying to come together to build something, it is important that there be a community standard so that all builders are able to format their work. For example, every country has a standard for which side of the road cars are supposed to drive on. As a result, car manufacturers must build cars that have steering wheels that are compatible with local standards. In the same way with Ethereum tokens, a standard was needed to simplify the experience of creating and working with tokens. If no one followed a standard and each team had their own way of building tokens with different functionality then every wallet, exchange, and smart contract would need to write code specifically for every token. The ERC20 standard is a specification that makes it easy to add ERC20 compliant tokens to a service or smart contract. Fungibility and Divisibility of ERC20s ERC20 tokens are fungible in nature, meaning that there isn\u2019t a distinction between individual tokens. For example, if I have 100 metal marbles in my hand that are all the same size and color, it doesn\u2019t matter which one I give you. In the same way, if I have 100 of the same ERC20 token, it doesn\u2019t matter which one I give you. This contrasts with ERC721 tokens which are non-fungible tokens (NFTs) such as CryptoKitties. In addition, ERC20s can be thought of as the most simple unit of account and can be used for a wide range of things including currency, rewards points, debt slips, interest accruing bonds, and much more. They are also highly divisible and can be sent in extremely small increments. The ERC20 Standard The standard is made up of six required functions, two required events, and three optional properties. To begin with, it is important to note that the token contract is in charge of maintaining a list of addresses and associated balances as well as allowances. Allowances are used to allow different addresses to spend the tokens from your balance on your behalf. Let\u2019s use the token contract below as an example of a standard ERC20 token contract that implements all the requirements as well as the optional properties. We can currently see that there is a total supply of 100 tokens and are all owned by a single address. In addition, there haven\u2019t been any allowances set. Optional Properties Even though they are optional, most ERC20 tokens implement these properties to give their token more descriptive attributes. * name * symbol * decimals - The number of decimals determines how divisible the token is. The most common is 18 decimals which means that for every one token the smallest divisible amount is 1x10^-18. Required Functions totalSupply - The totalSupply function returns the current supply of tokens for the contract. In this case the total supply is 100 tokens. balanceOf - If someone calls the balanceOf function with a specific address, it will return the token balance for that address. In this example, balanceOf is being called with 0x58c... and returns 100 tokens. transfer - The transfer function requires a recipient address as well as an amount to send. The function will only work if the amount specified is less than or equal to the sender's balance. We can see in the example below that the transfer simply decreases the sender\u2019s balance by 10 and increases the recipient's balance by 10. Once complete, the function returns a true value to show that the transfer was successful. approve - If an address has a balance, then it can use the approve function to allow a specific amount of it\u2019s balance to be spent by another address. Below, address 0x123... is allowing 0x58c... to spend 10 of its tokens. Similar to transfer, the function returns a true value to show that the approval was successful. Note that this function doesn\u2019t affect the balances directly, only the allowances. allowance - The allowance function is used to see how much an address is allowed to spend from another address. We can confirm that since the approve function has already been called and updated the allowance, that the current allowance for 0x58c... to spend from 0x123... is 10 tokens. transferFrom - The transferFrom function is used when an address with an allowance wants to transfer the balance from one address to another. So 0x58c... can now move its allotted 10 tokens to 0xa3b... by specifying the address that they want to transfer from, the recipient address, and the amount. Since 0x58c\u2026 has a valid allowance of 10 tokens from 0x123... the transaction is valid and the 10 tokens are sent to 0xa3b.... Required Events Events in Ethereum are usually triggered when a transaction changes a contract\u2019s state. They are important because they are able to provide information to things that are external to the Ethereum blockchain, which can then trigger other external things to happen. In ERC20 token contracts, an event is fired when either the Balances or Allowances are updated. Transfer - The Transfer event is fired when someone either successfully uses the transfer or transferFrom functions. It will give you the address of both the recipient and the sender as well as the amount of tokens that was sent in the transaction. Approval - The Approval event is fired when the approve function is successfully called and will return the owner, spender, and the approved amount. Additional Features for ERC20 Tokens In addition to the required functions, there are other features that ERC20 token contracts can add. The two primary ones are mintable and burnable tokens. Mintable tokens have a minting function that allows for the creation of additional tokens, meaning that the total supply is not fixed. The minting functions are usually only allowed to be called by a specific set of privileged addresses. While burnable tokens are the opposite in that they can be burned and the supply can be reduced when called by authorized addresses. It is also possible to have a contract that includes both minting and burning functionality. Resources EIP20 ETH Github A Guide to Events and Logs in Ethereum Smart Contracts","title":"A Straightforward Guide to ERC20 Tokens"},{"location":"guides/a-straightforward-guide-erc20-tokens/#a-straightforward-guide-to-erc20-tokens","text":"","title":"A Straightforward Guide to ERC20 Tokens"},{"location":"guides/a-straightforward-guide-erc20-tokens/#summary","text":"A token can be defined as something that serves as a visible or tangible representation of something else. An example of this could be arcade tokens, these pieces of metal are the physical representation of the amount of games that a person is able to play. However, unlike arcade tokens, tokens built on top of Ethereum are entirely virtual, but can still have representational value assigned to them in the same way. ERC20 tokens are by far the most used token on Ethereum and this guide will break down the ERC20 standard as well as what it means for something to be an ERC20 token.","title":"Summary"},{"location":"guides/a-straightforward-guide-erc20-tokens/#the-importance-of-standards","text":"When a large group of people are trying to come together to build something, it is important that there be a community standard so that all builders are able to format their work. For example, every country has a standard for which side of the road cars are supposed to drive on. As a result, car manufacturers must build cars that have steering wheels that are compatible with local standards. In the same way with Ethereum tokens, a standard was needed to simplify the experience of creating and working with tokens. If no one followed a standard and each team had their own way of building tokens with different functionality then every wallet, exchange, and smart contract would need to write code specifically for every token. The ERC20 standard is a specification that makes it easy to add ERC20 compliant tokens to a service or smart contract.","title":"The Importance of Standards"},{"location":"guides/a-straightforward-guide-erc20-tokens/#fungibility-and-divisibility-of-erc20s","text":"ERC20 tokens are fungible in nature, meaning that there isn\u2019t a distinction between individual tokens. For example, if I have 100 metal marbles in my hand that are all the same size and color, it doesn\u2019t matter which one I give you. In the same way, if I have 100 of the same ERC20 token, it doesn\u2019t matter which one I give you. This contrasts with ERC721 tokens which are non-fungible tokens (NFTs) such as CryptoKitties. In addition, ERC20s can be thought of as the most simple unit of account and can be used for a wide range of things including currency, rewards points, debt slips, interest accruing bonds, and much more. They are also highly divisible and can be sent in extremely small increments.","title":"Fungibility and Divisibility of ERC20s"},{"location":"guides/a-straightforward-guide-erc20-tokens/#the-erc20-standard","text":"The standard is made up of six required functions, two required events, and three optional properties. To begin with, it is important to note that the token contract is in charge of maintaining a list of addresses and associated balances as well as allowances. Allowances are used to allow different addresses to spend the tokens from your balance on your behalf. Let\u2019s use the token contract below as an example of a standard ERC20 token contract that implements all the requirements as well as the optional properties. We can currently see that there is a total supply of 100 tokens and are all owned by a single address. In addition, there haven\u2019t been any allowances set.","title":"The ERC20 Standard"},{"location":"guides/a-straightforward-guide-erc20-tokens/#optional-properties","text":"Even though they are optional, most ERC20 tokens implement these properties to give their token more descriptive attributes. * name * symbol * decimals - The number of decimals determines how divisible the token is. The most common is 18 decimals which means that for every one token the smallest divisible amount is 1x10^-18.","title":"Optional Properties"},{"location":"guides/a-straightforward-guide-erc20-tokens/#required-functions","text":"totalSupply - The totalSupply function returns the current supply of tokens for the contract. In this case the total supply is 100 tokens. balanceOf - If someone calls the balanceOf function with a specific address, it will return the token balance for that address. In this example, balanceOf is being called with 0x58c... and returns 100 tokens. transfer - The transfer function requires a recipient address as well as an amount to send. The function will only work if the amount specified is less than or equal to the sender's balance. We can see in the example below that the transfer simply decreases the sender\u2019s balance by 10 and increases the recipient's balance by 10. Once complete, the function returns a true value to show that the transfer was successful. approve - If an address has a balance, then it can use the approve function to allow a specific amount of it\u2019s balance to be spent by another address. Below, address 0x123... is allowing 0x58c... to spend 10 of its tokens. Similar to transfer, the function returns a true value to show that the approval was successful. Note that this function doesn\u2019t affect the balances directly, only the allowances. allowance - The allowance function is used to see how much an address is allowed to spend from another address. We can confirm that since the approve function has already been called and updated the allowance, that the current allowance for 0x58c... to spend from 0x123... is 10 tokens. transferFrom - The transferFrom function is used when an address with an allowance wants to transfer the balance from one address to another. So 0x58c... can now move its allotted 10 tokens to 0xa3b... by specifying the address that they want to transfer from, the recipient address, and the amount. Since 0x58c\u2026 has a valid allowance of 10 tokens from 0x123... the transaction is valid and the 10 tokens are sent to 0xa3b....","title":"Required Functions"},{"location":"guides/a-straightforward-guide-erc20-tokens/#required-events","text":"Events in Ethereum are usually triggered when a transaction changes a contract\u2019s state. They are important because they are able to provide information to things that are external to the Ethereum blockchain, which can then trigger other external things to happen. In ERC20 token contracts, an event is fired when either the Balances or Allowances are updated. Transfer - The Transfer event is fired when someone either successfully uses the transfer or transferFrom functions. It will give you the address of both the recipient and the sender as well as the amount of tokens that was sent in the transaction. Approval - The Approval event is fired when the approve function is successfully called and will return the owner, spender, and the approved amount.","title":"Required Events"},{"location":"guides/a-straightforward-guide-erc20-tokens/#additional-features-for-erc20-tokens","text":"In addition to the required functions, there are other features that ERC20 token contracts can add. The two primary ones are mintable and burnable tokens. Mintable tokens have a minting function that allows for the creation of additional tokens, meaning that the total supply is not fixed. The minting functions are usually only allowed to be called by a specific set of privileged addresses. While burnable tokens are the opposite in that they can be burned and the supply can be reduced when called by authorized addresses. It is also possible to have a contract that includes both minting and burning functionality.","title":"Additional Features for ERC20 Tokens"},{"location":"guides/a-straightforward-guide-erc20-tokens/#resources","text":"EIP20 ETH Github A Guide to Events and Logs in Ethereum Smart Contracts","title":"Resources"},{"location":"guides/deciphering-a-transaction-on-etherscan/","text":"Deciphering a Transaction on Etherscan Summary If you have started to dip your toe into the Ethereum world, chances are you have seen or been redirected to Etherscan. Etherscan is a block explorer, which allows users to view information about transactions that have been submitted to the blockchain, verify contract code, and visualize network data. This guide will focus on explaining the information that is displayed for different types of transactions on Etherscan. Components of an Ethereum Transaction on Etherscan Transaction Hash: A unique identifier that can be used to locate a specific transaction. Status: The current state of a transaction (Success, Failed, or Pending). Block: The block number that the transaction was included in. Timestamp: The time that the block was mined in UTC. From: The account that originally sent the transaction. To: The account that the transaction is addressed to. Value: The amount of Ether included in the transaction. Transaction Fee: The amount of Ether paid to the miner for processing the transaction, which is calculated by multiplying the amount of gas used by the gas price. Gas Limit: The upper limit of how much computational work and storage the sender is willing to expend on the transaction. Gas Used by Transaction: The amount of computational work and storage used in the transaction. Gas Price: The amount of Ether per unit of gas the user is willing to pay for the transaction, commonly denoted in a subunit of Ether known as Gwei. 1 Gwei = 1x10^-9 Ether. Nonce: The count of transactions sent out of the account. The number is initialized at 0 and is incremented by 1 for each transaction sent. Input Data: Information that is passed to a smart contract when a transaction is sent to its address. However, if the transaction is creating a contract, the contract\u2019s bytecode is placed in the input data field. I recommend checking out this article if you are not very familiar with how gas is used in Ethereum. Gas and Ethereum Transactions Reading data from the blockchain has no cost, however, when you want to change data recorded in the chain you are required to submit a transaction. In short, gas is a way of measuring the amount of computation and storage required to execute a change. Transactions in Bitcoin are rather straightforward, you have an amount of BTC and you create a transaction that sends it to another address. With the complexity of smart contracts, Ethereum transactions can have a large range of effects. In order to make sure that a user appropriately pays for the complexity of their transaction, gas is used to measure how much computational work and storage is needed in order to execute it. When submitting a transaction, a user will specify a gas limit, which is the highest amount of gas the transaction is allowed to expend. The transaction will fail if it exceeds the limit. The gas price is the amount of Ether the user is willing to pay per unit of gas (most commonly expressed in Gwei. 1 Gwei = 1x10^-9 Ether). For transactions where not all of the gas is used, the remaining Ether is refunded back to the account that created the transaction. \u201cOut of Gas\u201d Error Message There are a number of reasons why an Ethereum transaction might fail. The most common issue is that the transaction ran out of gas when the miner attempted to execute it. This will be apparent when you see a message that says \u201cWarning! Error encountered during contract execution [Out of gas]\u201d on Etherscan. This means that the transaction surpassed the gas limit that was specified when the transaction was created. Please use caution when setting the gas limit for a transaction that will be sent to a contract. If the limit is set too high the transaction might burn up all the Ether in your account. When a transaction runs out of gas, the proposed transaction fails, but the Ether that was dedicated to paying for gas is still given to the miner. Externally Owned Accounts (EOA) vs Contract Accounts There are two different types of accounts in Ethereum. The first are externally owned accounts (EOA), which are derived from a private key and able to generate transactions to poke the Ethereum network to do something. The second kind are contract accounts, which are able to store and execute code only when prompted by a transaction from an EOA. There are three different types of transactions between these accounts: an EOA sending Ether to another EOA, an EOA creating a contract, or an EOA sending a transaction to a contract. Transferring Ether Between Two Externally Owned Accounts (EOA) In the random transaction below, we can see that one externally owned account (EOA) is sending Ether to another EOA. We know this because the data input is empty, the To address isn\u2019t labeled as a contract address, and the value field is filled out. When moving Ether, we are telling the Ethereum network please decrease my balance x amount and increase the other account\u2019s balance by that amount. If the transaction is valid, then the global state of Ethereum updates the balances. In terms of gas considerations, a standard transfer of Ether from one EOA to another EOA costs 21,000 gas, which we can see is the amount used. Transferring ERC20 Tokens One of the biggest differences between transferring ERC20 tokens versus transferring Ether is that the transaction is addressed to the Token\u2019s contract address rather than the account we want to send the tokens to. In the random transaction below, the input data field includes the function we would like to call (in this case transfer). In addition, the inputs for the function, which includes the recipient's address along with the amount of tokens we want to send formatted in hexadecimal . Etherscan marks the To account as the DAI contract address and added a field called Tokens Transferred to display the input data in a more human readable format. Typically, the value field is left empty for token transfers because we only need to update to the contract\u2019s balances. Lastly, the gas cost for transferring ERC20 tokens can vary depending on how to contract was implemented. An Externally Owned Account (EOA) Creating a Contract Below is the transaction that created the Ethhub contract wallet. The most notable difference for contract creation transactions is that the input data contains the bytecode for the contract\u2019s logic. We can see that the contract\u2019s address is displayed in the To field with \u201cCreated\u201d next to it. Transferring Ether from an Externally Owned Account (EOA) to a Contract Account If you are sending Ether to a contract address, the gas cost can vary from the standard 21,000 gas. Viewing the transaction above we can see that someone made an Ether deposit to the Ethhub contract wallet, which required 22,511 gas. This is because the contract wallet also emits a Deposit event when receiving Ether, which bumps the gas cost over 21,000. That is why it is important to know what kind of account you are sending to before you assume that the gas cost will be 21,000 gas or else the transaction might run out of gas. In addition, there can be harmful side effects to sending a transaction to a contract that you aren\u2019t familiar with because contracts are able to forward messages to other contracts. Meaning that calling a function or simply depositing Ether to a malicious contract could execute code that might yield a negative result. Please always make sure that you trust the contract that you are about to submit a transaction to and set a reasonable gas limit. Resources Etherscan What is Ethereum Gas? Transactions in Ethereum","title":"Deciphering a Transaction on Etherscan"},{"location":"guides/deciphering-a-transaction-on-etherscan/#deciphering-a-transaction-on-etherscan","text":"","title":"Deciphering a Transaction on Etherscan"},{"location":"guides/deciphering-a-transaction-on-etherscan/#summary","text":"If you have started to dip your toe into the Ethereum world, chances are you have seen or been redirected to Etherscan. Etherscan is a block explorer, which allows users to view information about transactions that have been submitted to the blockchain, verify contract code, and visualize network data. This guide will focus on explaining the information that is displayed for different types of transactions on Etherscan.","title":"Summary"},{"location":"guides/deciphering-a-transaction-on-etherscan/#components-of-an-ethereum-transaction-on-etherscan","text":"Transaction Hash: A unique identifier that can be used to locate a specific transaction. Status: The current state of a transaction (Success, Failed, or Pending). Block: The block number that the transaction was included in. Timestamp: The time that the block was mined in UTC. From: The account that originally sent the transaction. To: The account that the transaction is addressed to. Value: The amount of Ether included in the transaction. Transaction Fee: The amount of Ether paid to the miner for processing the transaction, which is calculated by multiplying the amount of gas used by the gas price. Gas Limit: The upper limit of how much computational work and storage the sender is willing to expend on the transaction. Gas Used by Transaction: The amount of computational work and storage used in the transaction. Gas Price: The amount of Ether per unit of gas the user is willing to pay for the transaction, commonly denoted in a subunit of Ether known as Gwei. 1 Gwei = 1x10^-9 Ether. Nonce: The count of transactions sent out of the account. The number is initialized at 0 and is incremented by 1 for each transaction sent. Input Data: Information that is passed to a smart contract when a transaction is sent to its address. However, if the transaction is creating a contract, the contract\u2019s bytecode is placed in the input data field. I recommend checking out this article if you are not very familiar with how gas is used in Ethereum.","title":"Components of an Ethereum Transaction on Etherscan"},{"location":"guides/deciphering-a-transaction-on-etherscan/#gas-and-ethereum-transactions","text":"Reading data from the blockchain has no cost, however, when you want to change data recorded in the chain you are required to submit a transaction. In short, gas is a way of measuring the amount of computation and storage required to execute a change. Transactions in Bitcoin are rather straightforward, you have an amount of BTC and you create a transaction that sends it to another address. With the complexity of smart contracts, Ethereum transactions can have a large range of effects. In order to make sure that a user appropriately pays for the complexity of their transaction, gas is used to measure how much computational work and storage is needed in order to execute it. When submitting a transaction, a user will specify a gas limit, which is the highest amount of gas the transaction is allowed to expend. The transaction will fail if it exceeds the limit. The gas price is the amount of Ether the user is willing to pay per unit of gas (most commonly expressed in Gwei. 1 Gwei = 1x10^-9 Ether). For transactions where not all of the gas is used, the remaining Ether is refunded back to the account that created the transaction.","title":"Gas and Ethereum Transactions"},{"location":"guides/deciphering-a-transaction-on-etherscan/#out-of-gas-error-message","text":"There are a number of reasons why an Ethereum transaction might fail. The most common issue is that the transaction ran out of gas when the miner attempted to execute it. This will be apparent when you see a message that says \u201cWarning! Error encountered during contract execution [Out of gas]\u201d on Etherscan. This means that the transaction surpassed the gas limit that was specified when the transaction was created. Please use caution when setting the gas limit for a transaction that will be sent to a contract. If the limit is set too high the transaction might burn up all the Ether in your account. When a transaction runs out of gas, the proposed transaction fails, but the Ether that was dedicated to paying for gas is still given to the miner.","title":"\u201cOut of Gas\u201d Error Message"},{"location":"guides/deciphering-a-transaction-on-etherscan/#externally-owned-accounts-eoa-vs-contract-accounts","text":"There are two different types of accounts in Ethereum. The first are externally owned accounts (EOA), which are derived from a private key and able to generate transactions to poke the Ethereum network to do something. The second kind are contract accounts, which are able to store and execute code only when prompted by a transaction from an EOA. There are three different types of transactions between these accounts: an EOA sending Ether to another EOA, an EOA creating a contract, or an EOA sending a transaction to a contract.","title":"Externally Owned Accounts (EOA) vs Contract Accounts"},{"location":"guides/deciphering-a-transaction-on-etherscan/#transferring-ether-between-two-externally-owned-accounts-eoa","text":"In the random transaction below, we can see that one externally owned account (EOA) is sending Ether to another EOA. We know this because the data input is empty, the To address isn\u2019t labeled as a contract address, and the value field is filled out. When moving Ether, we are telling the Ethereum network please decrease my balance x amount and increase the other account\u2019s balance by that amount. If the transaction is valid, then the global state of Ethereum updates the balances. In terms of gas considerations, a standard transfer of Ether from one EOA to another EOA costs 21,000 gas, which we can see is the amount used.","title":"Transferring Ether Between Two Externally Owned Accounts (EOA)"},{"location":"guides/deciphering-a-transaction-on-etherscan/#transferring-erc20-tokens","text":"One of the biggest differences between transferring ERC20 tokens versus transferring Ether is that the transaction is addressed to the Token\u2019s contract address rather than the account we want to send the tokens to. In the random transaction below, the input data field includes the function we would like to call (in this case transfer). In addition, the inputs for the function, which includes the recipient's address along with the amount of tokens we want to send formatted in hexadecimal . Etherscan marks the To account as the DAI contract address and added a field called Tokens Transferred to display the input data in a more human readable format. Typically, the value field is left empty for token transfers because we only need to update to the contract\u2019s balances. Lastly, the gas cost for transferring ERC20 tokens can vary depending on how to contract was implemented.","title":"Transferring ERC20 Tokens"},{"location":"guides/deciphering-a-transaction-on-etherscan/#an-externally-owned-account-eoa-creating-a-contract","text":"Below is the transaction that created the Ethhub contract wallet. The most notable difference for contract creation transactions is that the input data contains the bytecode for the contract\u2019s logic. We can see that the contract\u2019s address is displayed in the To field with \u201cCreated\u201d next to it.","title":"An Externally Owned Account (EOA) Creating a Contract"},{"location":"guides/deciphering-a-transaction-on-etherscan/#transferring-ether-from-an-externally-owned-account-eoa-to-a-contract-account","text":"If you are sending Ether to a contract address, the gas cost can vary from the standard 21,000 gas. Viewing the transaction above we can see that someone made an Ether deposit to the Ethhub contract wallet, which required 22,511 gas. This is because the contract wallet also emits a Deposit event when receiving Ether, which bumps the gas cost over 21,000. That is why it is important to know what kind of account you are sending to before you assume that the gas cost will be 21,000 gas or else the transaction might run out of gas. In addition, there can be harmful side effects to sending a transaction to a contract that you aren\u2019t familiar with because contracts are able to forward messages to other contracts. Meaning that calling a function or simply depositing Ether to a malicious contract could execute code that might yield a negative result. Please always make sure that you trust the contract that you are about to submit a transaction to and set a reasonable gas limit.","title":"Transferring Ether from an Externally Owned Account (EOA) to a Contract Account"},{"location":"guides/deciphering-a-transaction-on-etherscan/#resources","text":"Etherscan What is Ethereum Gas? Transactions in Ethereum","title":"Resources"},{"location":"guides/ethereum-high-yield-savings-account/","text":"How to Get a High-Yield Savings Account on Ethereum The world of decentralized finance opens up unique financial opportunities on the Ethereum network. Historically, the interest rates earned on stablecoin lending in Ethereum have had a large spread to what can be earned in the traditional finance sector, presenting a nice opportunity to earn extra yield on cash. This guide will show you how to earn high-yield interest on USD using the Ethereum blockchain. If you are brand new to Ethereum, we suggest first reading our new user guide . 1. Acquire Stablecoins The key to this guide is understanding the concept of stablecoins . These are 1:1 representations of USD on the Ethereum network, essentially digitalizing your dollar. In order to earn yield using decentralized finance, you will need to acquire a stablecoin. We suggest either Dai or USDC, both of which can be acquired on Coinbase . Coinbase offers a feeless onramp for USDC, however Dai is the more trustless option and usually offers a higher yield. If you'd like to go with Dai, the feeless route is to go fiat > USDC via Coinbase and then trade USDC > Dai on dYdX . 2. Pick a Lending Protocol Now that you have stablecoins, you need to find borrowers that are willing to pay you yield in order to borrow your coins. There are many of these protocols built on Ethereum and you can easily find what rates are being offered on the stablecoin of your choice. Please note that some protocols have a longer history and better security standards than others, which should factor into your decision as well. For this guide, we will use Maker's Dai Savings Rate . If you picked USDC, we suggest using Compound . 3. Start Earning Interest At this point you're ready to start earning interest on your stablecoin. The website to interact with the Maker protocol is called Oasis. Navigate to the save section and you will be presented with the current APR%. Follow the guide to deposit your Dai and your savings account will then be open: Below is an image from Maker on how the mechanism functions: Now you can watch your interest earned count up in real time and withdraw at any point. 4. Insurance There is always the possibility that smart contracts have bugs. If you are worried about this, it's possible to insurance your savings account using Nexus Mutual . This gives you coverage on the smart contract you picked to lend on for a small fee. 5. Rate Movements Most lending rates on Ethereum are variable, meaning they can move up and down at any time, much like traditional savings accounts. Different protocols handle rate movements in different ways but all are derived on the function of supply and demand. If there is more demand than supply, rates will go up, and vice versa. DISCLAIMER: EthHub is a completely independent and open-source initiative founded by Ethereum community members. Nothing contained in this Github repository should be considered financial or investment advice - it is for informational purposes only.","title":"How to Get a High-Yield Savings Account on Ethereum"},{"location":"guides/ethereum-high-yield-savings-account/#how-to-get-a-high-yield-savings-account-on-ethereum","text":"The world of decentralized finance opens up unique financial opportunities on the Ethereum network. Historically, the interest rates earned on stablecoin lending in Ethereum have had a large spread to what can be earned in the traditional finance sector, presenting a nice opportunity to earn extra yield on cash. This guide will show you how to earn high-yield interest on USD using the Ethereum blockchain. If you are brand new to Ethereum, we suggest first reading our new user guide .","title":"How to Get a High-Yield Savings Account on Ethereum"},{"location":"guides/ethereum-high-yield-savings-account/#1-acquire-stablecoins","text":"The key to this guide is understanding the concept of stablecoins . These are 1:1 representations of USD on the Ethereum network, essentially digitalizing your dollar. In order to earn yield using decentralized finance, you will need to acquire a stablecoin. We suggest either Dai or USDC, both of which can be acquired on Coinbase . Coinbase offers a feeless onramp for USDC, however Dai is the more trustless option and usually offers a higher yield. If you'd like to go with Dai, the feeless route is to go fiat > USDC via Coinbase and then trade USDC > Dai on dYdX .","title":"1. Acquire Stablecoins"},{"location":"guides/ethereum-high-yield-savings-account/#2-pick-a-lending-protocol","text":"Now that you have stablecoins, you need to find borrowers that are willing to pay you yield in order to borrow your coins. There are many of these protocols built on Ethereum and you can easily find what rates are being offered on the stablecoin of your choice. Please note that some protocols have a longer history and better security standards than others, which should factor into your decision as well. For this guide, we will use Maker's Dai Savings Rate . If you picked USDC, we suggest using Compound .","title":"2. Pick a Lending Protocol"},{"location":"guides/ethereum-high-yield-savings-account/#3-start-earning-interest","text":"At this point you're ready to start earning interest on your stablecoin. The website to interact with the Maker protocol is called Oasis. Navigate to the save section and you will be presented with the current APR%. Follow the guide to deposit your Dai and your savings account will then be open: Below is an image from Maker on how the mechanism functions: Now you can watch your interest earned count up in real time and withdraw at any point.","title":"3. Start Earning Interest"},{"location":"guides/ethereum-high-yield-savings-account/#4-insurance","text":"There is always the possibility that smart contracts have bugs. If you are worried about this, it's possible to insurance your savings account using Nexus Mutual . This gives you coverage on the smart contract you picked to lend on for a small fee.","title":"4. Insurance"},{"location":"guides/ethereum-high-yield-savings-account/#5-rate-movements","text":"Most lending rates on Ethereum are variable, meaning they can move up and down at any time, much like traditional savings accounts. Different protocols handle rate movements in different ways but all are derived on the function of supply and demand. If there is more demand than supply, rates will go up, and vice versa. DISCLAIMER: EthHub is a completely independent and open-source initiative founded by Ethereum community members. Nothing contained in this Github repository should be considered financial or investment advice - it is for informational purposes only.","title":"5. Rate Movements"},{"location":"guides/graphical-guide-for-understanding-uniswap/","text":"A Graphical Guide for Understanding Uniswap Summary Uniswap is an exchange protocol that allows users to trustlessly swap ERC20 tokens. Rather using the traditional order book model, Uniswap pools tokens into smart contracts and users trade against these liquidity pools. Anyone can swap tokens, add tokens to a pool to earn fees, or list a token on Uniswap. This guide is meant to help beginners understand how Uniswap works under the hood. While the interface may appear simple, there is a lot going on behind the scenes. I recommend this resource if you are interested in understanding how to use the Uniswap specifically. ERC20 Token Primer ERC20 tokens are the most common type of token built on top of Ethereum. They are fungible in nature, meaning that there isn\u2019t a distinction between individual tokens. For example, if I have 100 metal marbles in my hand that are all the same size and color, it doesn\u2019t matter which one I give you. In the same way, if I have 100 of the same ERC20 token, it doesn\u2019t matter which one I give you. This contrasts with ERC721 tokens which are non-fungible tokens (NFTs) such as cryptokitties. ERC20s can be thought of as the most simple unit of account for a wide range of use cases including currency, rewards points, debt slips, interest accruing bonds, and much more. They are also highly divisible and can be sent in small increments. Since this type of token is so pervasive, it is important to develop a simple way of swapping between them. Please view the link here for more information on ERC20s. Overview of Uniswap\u2019s Contracts When viewing Uniswap\u2019s website, it is important to keep in mind that it is much more than just the interface. Uniswap standardizes how ERC20s are exchanged with a set of smart contracts. Anyone can build an interface that connects to these contracts and instantly be able to start exchanging with everyone else that is using Uniswap. There are two different types of contracts that make up Uniswap. The first is known as an Exchange contract. Exchange contracts hold a pool of a specific token and Ether that users can swap against. The second kind of contract is the Factory contract which is in charge of creating new Exchange contracts and registering the ERC20 token address to its Exchange contract address. There are no listing fees to add a token on Uniswap, instead anyone can call a function on the Factory contract to register a new token. The graphic below is an example of when DAI was added to Uniswap. Someone first called the createExchange function in the Factory contract with DAI\u2019s contract address. Then the Factory contract checks it\u2019s registry to see if an Exchange contract has been created for that token address. If no Exchange address is listed, the factory contract deploys an Exchange contract and records the Exchange address in its registry. Liquidity Pools Uniswap is unique in that it doesn\u2019t use an order book to derive the price of an asset. In a centralized exchange, such as Coinbase Pro, the price of an asset listed on the exchange is determined by where the highest price someone is willing to pay and the lowest price someone is willing to sell meet. We can see in the image below, that the highest bid price for BTC on Coinbase Pro at that point was $9301.36 and the lowest asking price was $9301.37. Instead Uniswap uses the Exchange contracts to pool both Ether and a specific ERC20. When trading Ether for a token, Ether is sent to the contract\u2019s pool and the token is given back to the user. As a result, the user doesn\u2019t need to wait for a counterparty in order to exchange or worry about specifying a price. Since anyone can list a token and users don't need to worry about matching with someone else, it is very easy to avoid any bootstrapping issue when first launching a token. The amount that is returned from swapping is based on an automated market maker formula. The graph below helps illustrate how the formula works. Essentially, the amount that is returned to you is based on the ratio of Ether to token in the pool. No matter the size of a swap, the user is guaranteed to have their trade execute because the more of an asset that you add to one side of the pool, the further along the curve it pushes you for the other asset. Meaning the larger the order relative to the pool, the worst rate you will receive as the ratio moves along the curve. You can learn more about the formula here . But if users are only just sending cryptocurrency, how does the ratio of Ether to token remain priced correctly relative to external markets? The answer is the pools maintain a ratio relative to the price of the rest of the market through people arbitraging the pool. Imagine that the DAI:ETH pool is expressed in terms of a scale and when the scale is balanced the pool is appropriately priced relative to the market price of a centralized exchange. Let\u2019s say that the current price for ETH in USD on a centralized exchange is $150 and the ratio in the Uniswap DAI:ETH pool returns 150 DAI for 1 ETH. As a result, our scale is balanced because the pool matches the current market price on the centralized exchange. Now let\u2019s assume that there is a movement in the market that pushes the price of ETH to $100 on the centralized exchange. Due to the price movement, we can now see that our scale is off balance relative to the market price because people can now swap 1 ETH for 150 DAI on Uniswap when the market price on a centralized exchange is $100 for 1 ETH. In response, someone can now put ETH into the pool, draw out DAI, then sell the DAI back for ETH on the centralized exchange for profit, and then repeat. They can do this until the pool has balanced out and reflects the current market price on a different exchange. As a result, third party arbitrages play a large role in maintaining the correct ratio of token to Ether in Uniswap pools. Swapping ERC20 \u21c4 ERC20 When interacting with a single Exchange contract, a user is able to swap between Ether and a specific ERC20 token. However, Uniswap does allow users to directly swap an ERC20 to another ERC20 in a single transaction. In the example below, the user has DAI and would like to receive MKR. As a result, the user calls the tokenToTokenSwap function which adds DAI to the DAI pool and kicks ETH to the MKR pool and returns MKR to the address that initially sent the transaction. Liquidity Providers When an Exchange contract is first created for a token, both the token and Ether pools are empty. The first person that deposits into the contract is the one that determines the ratio between the token and Ether. If they deposit a ratio that is different from what the current market rate is, then an arbitrage opportunity is available. When liquidity providers are adding to an established pool, they should add a proportional amount of token and Ether to the pool. If they don\u2019t, the liquidity they added is at risk of being arbitraged as well. In addition, larger liquidity pools are beneficial to users because they allow for larger swaps to happen without skewing the token to ETH ratio too far along the curve. Uniswap incentivises users to add liquidity to pools by rewarding liquidity providers with fees that are collected by the protocol. A 0.3% fee is taken for swapping between Ether and a token and roughly 0.6% is token for token to tokens swaps. Lastly, special ERC20 tokens known as liquidity tokens are minted to the provider\u2019s address in proportion to how much liquidity they contributed to the pool. The tokens are burned when the user wants to receive the liquidity they contributed plus the fees that we accumulated while their liquidity was locked. I recommend reading this article if you are curious about the advantages and risks of being a liquidity provider. Resources Uniswap Whitepaper Uniswap \u2014 A Unique Exchange Improving front running resistance of x*y=k market makers","title":"Graphical Guide to Understanding Uniswap"},{"location":"guides/graphical-guide-for-understanding-uniswap/#a-graphical-guide-for-understanding-uniswap","text":"","title":"A Graphical Guide for Understanding Uniswap"},{"location":"guides/graphical-guide-for-understanding-uniswap/#summary","text":"Uniswap is an exchange protocol that allows users to trustlessly swap ERC20 tokens. Rather using the traditional order book model, Uniswap pools tokens into smart contracts and users trade against these liquidity pools. Anyone can swap tokens, add tokens to a pool to earn fees, or list a token on Uniswap. This guide is meant to help beginners understand how Uniswap works under the hood. While the interface may appear simple, there is a lot going on behind the scenes. I recommend this resource if you are interested in understanding how to use the Uniswap specifically.","title":"Summary"},{"location":"guides/graphical-guide-for-understanding-uniswap/#erc20-token-primer","text":"ERC20 tokens are the most common type of token built on top of Ethereum. They are fungible in nature, meaning that there isn\u2019t a distinction between individual tokens. For example, if I have 100 metal marbles in my hand that are all the same size and color, it doesn\u2019t matter which one I give you. In the same way, if I have 100 of the same ERC20 token, it doesn\u2019t matter which one I give you. This contrasts with ERC721 tokens which are non-fungible tokens (NFTs) such as cryptokitties. ERC20s can be thought of as the most simple unit of account for a wide range of use cases including currency, rewards points, debt slips, interest accruing bonds, and much more. They are also highly divisible and can be sent in small increments. Since this type of token is so pervasive, it is important to develop a simple way of swapping between them. Please view the link here for more information on ERC20s.","title":"ERC20 Token Primer"},{"location":"guides/graphical-guide-for-understanding-uniswap/#overview-of-uniswaps-contracts","text":"When viewing Uniswap\u2019s website, it is important to keep in mind that it is much more than just the interface. Uniswap standardizes how ERC20s are exchanged with a set of smart contracts. Anyone can build an interface that connects to these contracts and instantly be able to start exchanging with everyone else that is using Uniswap. There are two different types of contracts that make up Uniswap. The first is known as an Exchange contract. Exchange contracts hold a pool of a specific token and Ether that users can swap against. The second kind of contract is the Factory contract which is in charge of creating new Exchange contracts and registering the ERC20 token address to its Exchange contract address. There are no listing fees to add a token on Uniswap, instead anyone can call a function on the Factory contract to register a new token. The graphic below is an example of when DAI was added to Uniswap. Someone first called the createExchange function in the Factory contract with DAI\u2019s contract address. Then the Factory contract checks it\u2019s registry to see if an Exchange contract has been created for that token address. If no Exchange address is listed, the factory contract deploys an Exchange contract and records the Exchange address in its registry.","title":"Overview of Uniswap\u2019s Contracts"},{"location":"guides/graphical-guide-for-understanding-uniswap/#liquidity-pools","text":"Uniswap is unique in that it doesn\u2019t use an order book to derive the price of an asset. In a centralized exchange, such as Coinbase Pro, the price of an asset listed on the exchange is determined by where the highest price someone is willing to pay and the lowest price someone is willing to sell meet. We can see in the image below, that the highest bid price for BTC on Coinbase Pro at that point was $9301.36 and the lowest asking price was $9301.37. Instead Uniswap uses the Exchange contracts to pool both Ether and a specific ERC20. When trading Ether for a token, Ether is sent to the contract\u2019s pool and the token is given back to the user. As a result, the user doesn\u2019t need to wait for a counterparty in order to exchange or worry about specifying a price. Since anyone can list a token and users don't need to worry about matching with someone else, it is very easy to avoid any bootstrapping issue when first launching a token. The amount that is returned from swapping is based on an automated market maker formula. The graph below helps illustrate how the formula works. Essentially, the amount that is returned to you is based on the ratio of Ether to token in the pool. No matter the size of a swap, the user is guaranteed to have their trade execute because the more of an asset that you add to one side of the pool, the further along the curve it pushes you for the other asset. Meaning the larger the order relative to the pool, the worst rate you will receive as the ratio moves along the curve. You can learn more about the formula here . But if users are only just sending cryptocurrency, how does the ratio of Ether to token remain priced correctly relative to external markets? The answer is the pools maintain a ratio relative to the price of the rest of the market through people arbitraging the pool. Imagine that the DAI:ETH pool is expressed in terms of a scale and when the scale is balanced the pool is appropriately priced relative to the market price of a centralized exchange. Let\u2019s say that the current price for ETH in USD on a centralized exchange is $150 and the ratio in the Uniswap DAI:ETH pool returns 150 DAI for 1 ETH. As a result, our scale is balanced because the pool matches the current market price on the centralized exchange. Now let\u2019s assume that there is a movement in the market that pushes the price of ETH to $100 on the centralized exchange. Due to the price movement, we can now see that our scale is off balance relative to the market price because people can now swap 1 ETH for 150 DAI on Uniswap when the market price on a centralized exchange is $100 for 1 ETH. In response, someone can now put ETH into the pool, draw out DAI, then sell the DAI back for ETH on the centralized exchange for profit, and then repeat. They can do this until the pool has balanced out and reflects the current market price on a different exchange. As a result, third party arbitrages play a large role in maintaining the correct ratio of token to Ether in Uniswap pools.","title":"Liquidity Pools"},{"location":"guides/graphical-guide-for-understanding-uniswap/#swapping-erc20-erc20","text":"When interacting with a single Exchange contract, a user is able to swap between Ether and a specific ERC20 token. However, Uniswap does allow users to directly swap an ERC20 to another ERC20 in a single transaction. In the example below, the user has DAI and would like to receive MKR. As a result, the user calls the tokenToTokenSwap function which adds DAI to the DAI pool and kicks ETH to the MKR pool and returns MKR to the address that initially sent the transaction.","title":"Swapping ERC20 \u21c4 ERC20"},{"location":"guides/graphical-guide-for-understanding-uniswap/#liquidity-providers","text":"When an Exchange contract is first created for a token, both the token and Ether pools are empty. The first person that deposits into the contract is the one that determines the ratio between the token and Ether. If they deposit a ratio that is different from what the current market rate is, then an arbitrage opportunity is available. When liquidity providers are adding to an established pool, they should add a proportional amount of token and Ether to the pool. If they don\u2019t, the liquidity they added is at risk of being arbitraged as well. In addition, larger liquidity pools are beneficial to users because they allow for larger swaps to happen without skewing the token to ETH ratio too far along the curve. Uniswap incentivises users to add liquidity to pools by rewarding liquidity providers with fees that are collected by the protocol. A 0.3% fee is taken for swapping between Ether and a token and roughly 0.6% is token for token to tokens swaps. Lastly, special ERC20 tokens known as liquidity tokens are minted to the provider\u2019s address in proportion to how much liquidity they contributed to the pool. The tokens are burned when the user wants to receive the liquidity they contributed plus the fees that we accumulated while their liquidity was locked. I recommend reading this article if you are curious about the advantages and risks of being a liquidity provider.","title":"Liquidity Providers"},{"location":"guides/graphical-guide-for-understanding-uniswap/#resources","text":"Uniswap Whitepaper Uniswap \u2014 A Unique Exchange Improving front running resistance of x*y=k market makers","title":"Resources"},{"location":"guides/graphical-guide-to-compound/","text":"A Graphical Guide to Compound Summary The Compound protocol is a series of smart contracts that allows users to earn interest on their Ethereum assets. What makes the protocol unique is that there isn\u2019t a direct counterparty that you have to negotiate with, instead a user only needs to supply their assets and they will immediately begin earning interest. There is no hassle of having to discuss a rate or a period of time your assets are required to be locked up for. Users can also borrow different assets from the protocol against the ones that they have supplied. The supply and borrow rates for each asset are dynamically calculated based on the supply and borrow demand of the protocol. In addition, the list of assets that can be supplied and borrowed on Compound can be found here . Lastly, this guide is meant to give a basic understanding of what the Compound protocol is. I recommend this article if you are interested in how to use Compound website specifically. Supplying Assets and Receiving cTokens When anyone supplies an asset to the Compound protocol they are then given the corresponding cToken for their deposit. For example if someone locks up Dai they will receive an amount of cDai in return. cTokens are a deposit split that shows that you have added liquidity to the protocol and can be used to reclaim the underlying asset that was supplied plus the accrued interest, which is accrued for each block that is mined while the asset is locked in the protocol. It is important to note that the amount of cTokens a user receives isn\u2019t a 1 to 1 ratio to the token that was added. For example, if you supplied 100 Dai to the protocol you wouldn\u2019t receive 100 cDai. The reason for this is that the cDai has an ever improving redemption rate based on the interest rate set by the protocol. Let\u2019s say that for every 1 Dai you supply the protocol gives you 9 cDai. As time passes your Dai is earning interest, but your wallet will still only hold 9 cDai. However, when you go to redeem your cDai for Dai the rate will have improved, let\u2019s say to 8 cDai for 1 Dai based on the interest accrued. As a result, your interest is paid to you in an ever improving exchange rate between the cToken and the underlying asset. If you would like a more detailed example, the one below is from Compound\u2019s website . Let\u2019s say you supply 1,000 DAI to the Compound protocol, when the exchange rate is 0.020070; you would receive 49,825.61 cDAI (1,000/0.020070). A few months later, you decide it\u2019s time to withdraw your DAI from the protocol; the exchange rate is now 0.021591: Your 49,825.61 cDAI is now equal to 1,075.78 DAI (49,825.61 * 0.021591) You could withdraw 1,075.78 DAI, which would redeem all 49,825.61 cDAI Or, you could withdraw a portion, such as your original 1,000 DAI, which would redeem 46,315.59 cDAI (keeping 3,510.01 cDAI in your wallet) The Utility of cTokens cTokens makes it easier for both users and developers to interact with the Compound protocol. cTokens are ERC20 tokens , which is the defacto token standard on Ethereum. Almost all developers are already familiar with the ERC20 standard and most users have wallets that support ERC20 tokens. Having Compound\u2019s balances tokenized allows for a greater amount of compossibility. Since these tokens can be easily transferred like any other token, they can be created with one address, sent to a cold storage address that has never been touched, and securely earn interest. They can also be sold on an exchange or even potentially used as collateral for a loan on a different platform. In addition, cTokens can also be incorporated into other financial products. One of the most interesting integrations is the ETH 20 MA Crossover Yield Set II from TokenSets. This set rebalances between cUSDC and Eth based on the 20 Day simple moving average of Ether\u2019s price. Therefore, by using cUSDC, when the set rebalances away from Eth not only has it moved to a stable position, it will also be earning interest for you until the next rebalance. Borrowing Assets Once users have locked up assets and hold cTokens, they are then able to borrow different assets from the protocol. For example a user that has locked Dai to create cDai, can then use that cDai as collateral to borrow BAT. Borrowing in most cases allows users to be able to either short or long an asset. It is important to note that there are certain collateral ratios for each asset based on the quality of the collateral. If the price of the asset you borrowed versus the one that you supplied diverges too far, then you have the possibility of having a portion of your collateral liquidated. Another thing to point out is that the rate to borrow an asset from the protocol is usually higher than the rate for supplying an asset. The reason behind this is that since the protocol pools liquidity not all the funds that have been supplied will be borrowed, yet all funds added earn interest. As a result the borrow rate must be higher than the supply rate to make sure that all users that are supplying assets are given a rate even if their assets aren\u2019t currently being borrowed. Governance with Comp Tokens Previously, the upgradability of the protocol\u2019s smart contracts was solely controlled by Compound Labs. However, with their recent upgrade and release of their governance token Comp, the upgrades are now controlled by a governance contract that makes changes based on votes from Comp token holders. This governance upgrade can be thought of as if a single key controlled the protocol, but that key was broken into small pieces and distributed to different people across the internet. Now if a change is to be made, then enough Comp token holders need to come together and \u201creforge\u201d the key to push the change. In addition, in order to counteract voter apathy, Comp token holders are able to delegate their voting power to another address which can vote on their behalf. Specific details on how voting works from the Compound FAQ . Any address with more than 100,000 COMP delegated to it may propose governance actions, which are executable code. When a proposal is created, the community can submit their votes during a 3 day voting period. If a majority, and at least 400,000 votes are cast for the proposal, it is queued in a Timelock contract, and can be implemented after a 2 day waiting period. Liquidity Mining In the past, the main method of governance token distribution was by having an ICO. Recently however, many defi projects have been shifting to a new method called liquidity mining. Liquidity mining is a process where users lock up assets into a protocol and over time are rewarded with governance tokens. Users can now lock up liquidity into Compound and based on the amount that they have either supplied or borrowed are given a certain amount of Comp tokens. The main idea behind this is that it rewards people that are using the protocol, rather than having an ICO which rewards speculators. Currently, the distribution of Comp through liquidity mining is going to last a little over 4 years. Additional details can be found here 4,229,949 COMP will be placed into a Reservoir contract, which transfers 0.50 COMP per Ethereum block (~2,880 per day) into the protocol for distribution. Conclusion The Compound protocol creates a simple way for users to earn interest on their assets without having to negotiate with a counterparty. Future users won\u2019t even know that they are using the protocol, they will simply add funds and the apps they are interacting with will then pass them onto Compound. With no counterparty to negotiate with and no hard time lock requirements, Compound makes it seamless to earn interest on your Ethereum assets. Resources Compound Docs Compound FAQ Compound cTokens Expanding Compound Governance","title":"A Graphical Guide to Compound"},{"location":"guides/graphical-guide-to-compound/#a-graphical-guide-to-compound","text":"","title":"A Graphical Guide to Compound"},{"location":"guides/graphical-guide-to-compound/#summary","text":"The Compound protocol is a series of smart contracts that allows users to earn interest on their Ethereum assets. What makes the protocol unique is that there isn\u2019t a direct counterparty that you have to negotiate with, instead a user only needs to supply their assets and they will immediately begin earning interest. There is no hassle of having to discuss a rate or a period of time your assets are required to be locked up for. Users can also borrow different assets from the protocol against the ones that they have supplied. The supply and borrow rates for each asset are dynamically calculated based on the supply and borrow demand of the protocol. In addition, the list of assets that can be supplied and borrowed on Compound can be found here . Lastly, this guide is meant to give a basic understanding of what the Compound protocol is. I recommend this article if you are interested in how to use Compound website specifically.","title":"Summary"},{"location":"guides/graphical-guide-to-compound/#supplying-assets-and-receiving-ctokens","text":"When anyone supplies an asset to the Compound protocol they are then given the corresponding cToken for their deposit. For example if someone locks up Dai they will receive an amount of cDai in return. cTokens are a deposit split that shows that you have added liquidity to the protocol and can be used to reclaim the underlying asset that was supplied plus the accrued interest, which is accrued for each block that is mined while the asset is locked in the protocol. It is important to note that the amount of cTokens a user receives isn\u2019t a 1 to 1 ratio to the token that was added. For example, if you supplied 100 Dai to the protocol you wouldn\u2019t receive 100 cDai. The reason for this is that the cDai has an ever improving redemption rate based on the interest rate set by the protocol. Let\u2019s say that for every 1 Dai you supply the protocol gives you 9 cDai. As time passes your Dai is earning interest, but your wallet will still only hold 9 cDai. However, when you go to redeem your cDai for Dai the rate will have improved, let\u2019s say to 8 cDai for 1 Dai based on the interest accrued. As a result, your interest is paid to you in an ever improving exchange rate between the cToken and the underlying asset. If you would like a more detailed example, the one below is from Compound\u2019s website . Let\u2019s say you supply 1,000 DAI to the Compound protocol, when the exchange rate is 0.020070; you would receive 49,825.61 cDAI (1,000/0.020070). A few months later, you decide it\u2019s time to withdraw your DAI from the protocol; the exchange rate is now 0.021591: Your 49,825.61 cDAI is now equal to 1,075.78 DAI (49,825.61 * 0.021591) You could withdraw 1,075.78 DAI, which would redeem all 49,825.61 cDAI Or, you could withdraw a portion, such as your original 1,000 DAI, which would redeem 46,315.59 cDAI (keeping 3,510.01 cDAI in your wallet)","title":"Supplying Assets and Receiving cTokens"},{"location":"guides/graphical-guide-to-compound/#the-utility-of-ctokens","text":"cTokens makes it easier for both users and developers to interact with the Compound protocol. cTokens are ERC20 tokens , which is the defacto token standard on Ethereum. Almost all developers are already familiar with the ERC20 standard and most users have wallets that support ERC20 tokens. Having Compound\u2019s balances tokenized allows for a greater amount of compossibility. Since these tokens can be easily transferred like any other token, they can be created with one address, sent to a cold storage address that has never been touched, and securely earn interest. They can also be sold on an exchange or even potentially used as collateral for a loan on a different platform. In addition, cTokens can also be incorporated into other financial products. One of the most interesting integrations is the ETH 20 MA Crossover Yield Set II from TokenSets. This set rebalances between cUSDC and Eth based on the 20 Day simple moving average of Ether\u2019s price. Therefore, by using cUSDC, when the set rebalances away from Eth not only has it moved to a stable position, it will also be earning interest for you until the next rebalance.","title":"The Utility of cTokens"},{"location":"guides/graphical-guide-to-compound/#borrowing-assets","text":"Once users have locked up assets and hold cTokens, they are then able to borrow different assets from the protocol. For example a user that has locked Dai to create cDai, can then use that cDai as collateral to borrow BAT. Borrowing in most cases allows users to be able to either short or long an asset. It is important to note that there are certain collateral ratios for each asset based on the quality of the collateral. If the price of the asset you borrowed versus the one that you supplied diverges too far, then you have the possibility of having a portion of your collateral liquidated. Another thing to point out is that the rate to borrow an asset from the protocol is usually higher than the rate for supplying an asset. The reason behind this is that since the protocol pools liquidity not all the funds that have been supplied will be borrowed, yet all funds added earn interest. As a result the borrow rate must be higher than the supply rate to make sure that all users that are supplying assets are given a rate even if their assets aren\u2019t currently being borrowed.","title":"Borrowing Assets"},{"location":"guides/graphical-guide-to-compound/#governance-with-comp-tokens","text":"Previously, the upgradability of the protocol\u2019s smart contracts was solely controlled by Compound Labs. However, with their recent upgrade and release of their governance token Comp, the upgrades are now controlled by a governance contract that makes changes based on votes from Comp token holders. This governance upgrade can be thought of as if a single key controlled the protocol, but that key was broken into small pieces and distributed to different people across the internet. Now if a change is to be made, then enough Comp token holders need to come together and \u201creforge\u201d the key to push the change. In addition, in order to counteract voter apathy, Comp token holders are able to delegate their voting power to another address which can vote on their behalf. Specific details on how voting works from the Compound FAQ . Any address with more than 100,000 COMP delegated to it may propose governance actions, which are executable code. When a proposal is created, the community can submit their votes during a 3 day voting period. If a majority, and at least 400,000 votes are cast for the proposal, it is queued in a Timelock contract, and can be implemented after a 2 day waiting period.","title":"Governance with Comp Tokens"},{"location":"guides/graphical-guide-to-compound/#liquidity-mining","text":"In the past, the main method of governance token distribution was by having an ICO. Recently however, many defi projects have been shifting to a new method called liquidity mining. Liquidity mining is a process where users lock up assets into a protocol and over time are rewarded with governance tokens. Users can now lock up liquidity into Compound and based on the amount that they have either supplied or borrowed are given a certain amount of Comp tokens. The main idea behind this is that it rewards people that are using the protocol, rather than having an ICO which rewards speculators. Currently, the distribution of Comp through liquidity mining is going to last a little over 4 years. Additional details can be found here 4,229,949 COMP will be placed into a Reservoir contract, which transfers 0.50 COMP per Ethereum block (~2,880 per day) into the protocol for distribution.","title":"Liquidity Mining"},{"location":"guides/graphical-guide-to-compound/#conclusion","text":"The Compound protocol creates a simple way for users to earn interest on their assets without having to negotiate with a counterparty. Future users won\u2019t even know that they are using the protocol, they will simply add funds and the apps they are interacting with will then pass them onto Compound. With no counterparty to negotiate with and no hard time lock requirements, Compound makes it seamless to earn interest on your Ethereum assets.","title":"Conclusion"},{"location":"guides/graphical-guide-to-compound/#resources","text":"Compound Docs Compound FAQ Compound cTokens Expanding Compound Governance","title":"Resources"},{"location":"guides/guide-to-ens/","text":"The Ultimate Guide to ENS Names This article initially appeared as a Medium post authored by Eric Conner . The Ethereum Name Service is one of the most popular projects on Ethereum right now and for good reason. As the website states , \"ENS offers a secure & decentralized way to address resources both on and off the blockchain using simple, human-readable names.\" In short, you are able to give your Ethereum (or favorite chain ) address a name. This is much like how the traditional web works with DNS. All websites are hosted at an IP address but no one actually puts that in their browser, instead we use names such as amazon.com, not 205.251.242.103 (try it, it works!). The ENS has many great features but I'm going to focus this guide specifically on registering and managing .eth names and their subdomains. Registering .eth Domain Names The core functionality of the ENS is registering .eth domains. There are a few important rules to keep in mind when it comes to registering domains on the ENS: Minimum domain length is 3 characters. Annual renewal fees. 3 characters: $640/year, 4 characters: $160/year, 5+ characters $5/year. Emojis are valid. \ud83d\udc4d\ud83c\udffc Creating and Managing Domains Registering a domain is extremely easy using the ENS app . First search for the ENS name that you'd like. If it is not taken (if it is, head over to OpenSea and search for it), you will be presented with this screen. Once here you can click request to register which will trigger a transaction, wait 1 minute and then you can register the name. It's now yours. Now that you own a .eth domain, you want to enable all the cool features that it offers. This starts on the domain management screen. There is a lot going on so let's put all of the pieces together: Registrant: can set the controller address, and transfer the registration to someone else. This is the ultimate owner. Controller: essentially handles the \"day to day operations\" of the domain. Expiration Date: when your renewal fee is due and you can pay it here as well. Resolver: handles resolving (translating) the records put below such as what Ethereum address is tied to this domain. Should be set the public resolver which will be the default option when clicking the Set button. Records: this is where you can add the cool stuff to your domain. Put an address here so that when you put your domain name in a wallet, it points to this address. You can also put an IPFS content hash which when going to your domain in a web browser will pull up your website. Once you set an Ethereum address in the address field, it will resolve in wallets such as MetaMask. And if you point it to an IPFS hash, you can pull up the domain at ethhub.eth/ or ethhub.eth.link for browsers that don't resolve ENS names. Subdomains Subdomains offer great flexibility for building on top of .eth domains. If you are a company such as Maker and want to issue all your employees maker.eth subdomains, this is very easy to do. This section will cover both creating subdomains on a domain you own and unique ways of allowing others to buy subdomains on a domain you own. Creating and Managing Subdomains If you own a .eth domain and simply want to create subdomains for your own use, the easiest way to do this is through the ENS app by clicking on the Subdomains button. This is where you can add new subdomains. Once subdomains are setup, they act very similar to domains in that the owner can control them and setup records. That means something like eric.ethhub.eth can also resolve to an address and an IPFS website. Allowing Anyone to Claim Subdomains on your .eth Domain All of the above is being done by the registrant of the .eth domain. They are the one setting up the subdomains and have ultimate control over them, including being able to revoke them. This is fine for a company or someone that wants full control over the subdomains but what if you want anyone in the world to be able to claim a subdomain on your domain? You obviously don't want to have to coordinate with them and they won't want you to be able to revoke access. The good news is there is a solution that easily allows you to open up registration of subdomains on your domain. You can even set a price at which you'd like to sell them. Doing this starts with turning control of your domain over to the ENS Subdomain Registrar contract . This means that the contract is able to distribute out subdomains to people but you no longer can revoke access to those subdomains. The steps at the moment are fairly manual but also easy. Nick Johnson lays out the steps well in this ENSNow domains post so I'm going to just put them here: Warning: By doing this, you are permanently giving up use of your domain! You will be able to collect registration fees, change prices, and transfer control to another user\u200a-\u200abut you will never be able to use your domain for anything else! Load up the .eth registrar contract . If you are using Etherscan, you will need to click \"Connect with Metamask\" and authorize the subsequent dialog box from Metamask. Find the 'approve' function. In the address field, enter '0xc32659651d137a18b79925449722855aa327231d' In the tokenId field, enter the labelhash of your name. You can look this up by searching for your name on etherscan (look for 'Label hash [foo]:'). Submit the transaction. Load up the new subdomain registrar contract . Find the 'configureDomain' function. In the name field, enter the name you want to list, without '.eth' (Eg, 'gimmethe', not 'gimmethe.eth'). In the price field, enter the price to charge for a new domain, in wei. 1 ether is 1,000,000,000,000,000,000 wei, so for instance to charge 0.01 ether per domain, you should enter 10000000000000000. A convertor can be found here . In the referralFeePPM field, enter the amount you want to give to any website that finds a new user for you. For instance, to keep the entire amount yourself, enter 0; to give it all to the site, enter 1000000. Submit the transaction. Your domain has now been handed over to the subdomain registrar contract. If you've set up a fee, anytime someone registers a subdomain, the funds will be directed to the original owner address. This has now opened up a lot of possibilities! Listing Your Subdomains on ENSNow The ENS team has setup a website which allows for claiming of subdomains. If you'd like your subdomains listed here the process is quite easy. Once again Nick has a blog post about the steps and I'm going to put them below: Go to this page and click 'fork' in the top right corner. Navigate to app -> js -> domains.json Click on the pencil icon in the top right corner of the file. Find the appropriate place to insert your entry (entries are listed alphabetically). Add a new line with your entry. If using the default registrar for steps 2 and 3, this should look like {\"name\": \"yourdomain\", \"version\": \"1.0\"}, . Commit your changes by clicking 'Commit changes' down the bottom of the page. Click on 'Pull requests', then 'New pull request'. Click on 'Create pull request'. Hosting Your Own Subdomain Sale Site ENSNow is great and easy, but the list of domains supported there is rather long and you cannot specifically brand your own domain. So, if you'd like to setup a site that only lists your domain and allows you to customize it, that is possible as well. A good example of this is a site I'm running called Ethmojis . The best place to start is on the Subdomain Registrar GitHub page . They have a \"getting started\" section which tells you how to run it but I'll try to summarize the steps up as best as I can below Install node.js and NPM Install Truffle on your computer using npm install -g truffle Download and install Ganache Clone the subdomain-registrar repo to your computer. In terminal, navigate to the folder you cloned it to and run npm install Find the /app/js/domains.json file and edit the whitelist to only include your domain. Mine looks like: [{\"name\": \"ethmojis\", \"version\": \"1.0\"}] Edit the index.html file however you'd like for your site. In terminal, change directory to where you cloned the subdomain registrar. Run: ganache-cli & truffle deploy npm run dev If everything looks goo, run npm run build A build folder should be created and files output here. This is your final site that you can upload to a web server or IPFS. To host on IPFS , upload the entire build folder and get your content hash. You can then put this content hash in the \"records\" section of any ENS domain or subdomain! Here's an example of how it will look: Congrats, you are now an expert on the Ethereum Name Service!","title":"The Ultimate Guide to the ENS"},{"location":"guides/guide-to-ens/#the-ultimate-guide-to-ens-names","text":"This article initially appeared as a Medium post authored by Eric Conner . The Ethereum Name Service is one of the most popular projects on Ethereum right now and for good reason. As the website states , \"ENS offers a secure & decentralized way to address resources both on and off the blockchain using simple, human-readable names.\" In short, you are able to give your Ethereum (or favorite chain ) address a name. This is much like how the traditional web works with DNS. All websites are hosted at an IP address but no one actually puts that in their browser, instead we use names such as amazon.com, not 205.251.242.103 (try it, it works!). The ENS has many great features but I'm going to focus this guide specifically on registering and managing .eth names and their subdomains.","title":"The Ultimate Guide to ENS\u00a0Names"},{"location":"guides/guide-to-ens/#registering-eth-domain-names","text":"The core functionality of the ENS is registering .eth domains. There are a few important rules to keep in mind when it comes to registering domains on the ENS: Minimum domain length is 3 characters. Annual renewal fees. 3 characters: $640/year, 4 characters: $160/year, 5+ characters $5/year. Emojis are valid. \ud83d\udc4d\ud83c\udffc","title":"Registering\u00a0.eth Domain\u00a0Names"},{"location":"guides/guide-to-ens/#creating-and-managing-domains","text":"Registering a domain is extremely easy using the ENS app . First search for the ENS name that you'd like. If it is not taken (if it is, head over to OpenSea and search for it), you will be presented with this screen. Once here you can click request to register which will trigger a transaction, wait 1 minute and then you can register the name. It's now yours. Now that you own a .eth domain, you want to enable all the cool features that it offers. This starts on the domain management screen. There is a lot going on so let's put all of the pieces together: Registrant: can set the controller address, and transfer the registration to someone else. This is the ultimate owner. Controller: essentially handles the \"day to day operations\" of the domain. Expiration Date: when your renewal fee is due and you can pay it here as well. Resolver: handles resolving (translating) the records put below such as what Ethereum address is tied to this domain. Should be set the public resolver which will be the default option when clicking the Set button. Records: this is where you can add the cool stuff to your domain. Put an address here so that when you put your domain name in a wallet, it points to this address. You can also put an IPFS content hash which when going to your domain in a web browser will pull up your website. Once you set an Ethereum address in the address field, it will resolve in wallets such as MetaMask. And if you point it to an IPFS hash, you can pull up the domain at ethhub.eth/ or ethhub.eth.link for browsers that don't resolve ENS names.","title":"Creating and Managing\u00a0Domains"},{"location":"guides/guide-to-ens/#subdomains","text":"Subdomains offer great flexibility for building on top of .eth domains. If you are a company such as Maker and want to issue all your employees maker.eth subdomains, this is very easy to do. This section will cover both creating subdomains on a domain you own and unique ways of allowing others to buy subdomains on a domain you own.","title":"Subdomains"},{"location":"guides/guide-to-ens/#creating-and-managing-subdomains","text":"If you own a .eth domain and simply want to create subdomains for your own use, the easiest way to do this is through the ENS app by clicking on the Subdomains button. This is where you can add new subdomains. Once subdomains are setup, they act very similar to domains in that the owner can control them and setup records. That means something like eric.ethhub.eth can also resolve to an address and an IPFS website.","title":"Creating and Managing Subdomains"},{"location":"guides/guide-to-ens/#allowing-anyone-to-claim-subdomains-on-your-eth-domain","text":"All of the above is being done by the registrant of the .eth domain. They are the one setting up the subdomains and have ultimate control over them, including being able to revoke them. This is fine for a company or someone that wants full control over the subdomains but what if you want anyone in the world to be able to claim a subdomain on your domain? You obviously don't want to have to coordinate with them and they won't want you to be able to revoke access. The good news is there is a solution that easily allows you to open up registration of subdomains on your domain. You can even set a price at which you'd like to sell them. Doing this starts with turning control of your domain over to the ENS Subdomain Registrar contract . This means that the contract is able to distribute out subdomains to people but you no longer can revoke access to those subdomains. The steps at the moment are fairly manual but also easy. Nick Johnson lays out the steps well in this ENSNow domains post so I'm going to just put them here: Warning: By doing this, you are permanently giving up use of your domain! You will be able to collect registration fees, change prices, and transfer control to another user\u200a-\u200abut you will never be able to use your domain for anything else! Load up the .eth registrar contract . If you are using Etherscan, you will need to click \"Connect with Metamask\" and authorize the subsequent dialog box from Metamask. Find the 'approve' function. In the address field, enter '0xc32659651d137a18b79925449722855aa327231d' In the tokenId field, enter the labelhash of your name. You can look this up by searching for your name on etherscan (look for 'Label hash [foo]:'). Submit the transaction. Load up the new subdomain registrar contract . Find the 'configureDomain' function. In the name field, enter the name you want to list, without '.eth' (Eg, 'gimmethe', not 'gimmethe.eth'). In the price field, enter the price to charge for a new domain, in wei. 1 ether is 1,000,000,000,000,000,000 wei, so for instance to charge 0.01 ether per domain, you should enter 10000000000000000. A convertor can be found here . In the referralFeePPM field, enter the amount you want to give to any website that finds a new user for you. For instance, to keep the entire amount yourself, enter 0; to give it all to the site, enter 1000000. Submit the transaction. Your domain has now been handed over to the subdomain registrar contract. If you've set up a fee, anytime someone registers a subdomain, the funds will be directed to the original owner address. This has now opened up a lot of possibilities!","title":"Allowing Anyone to Claim Subdomains on your\u00a0.eth\u00a0Domain"},{"location":"guides/guide-to-ens/#listing-your-subdomains-on-ensnow","text":"The ENS team has setup a website which allows for claiming of subdomains. If you'd like your subdomains listed here the process is quite easy. Once again Nick has a blog post about the steps and I'm going to put them below: Go to this page and click 'fork' in the top right corner. Navigate to app -> js -> domains.json Click on the pencil icon in the top right corner of the file. Find the appropriate place to insert your entry (entries are listed alphabetically). Add a new line with your entry. If using the default registrar for steps 2 and 3, this should look like {\"name\": \"yourdomain\", \"version\": \"1.0\"}, . Commit your changes by clicking 'Commit changes' down the bottom of the page. Click on 'Pull requests', then 'New pull request'. Click on 'Create pull request'.","title":"Listing Your Subdomains on\u00a0ENSNow"},{"location":"guides/guide-to-ens/#hosting-your-own-subdomain-sale-site","text":"ENSNow is great and easy, but the list of domains supported there is rather long and you cannot specifically brand your own domain. So, if you'd like to setup a site that only lists your domain and allows you to customize it, that is possible as well. A good example of this is a site I'm running called Ethmojis . The best place to start is on the Subdomain Registrar GitHub page . They have a \"getting started\" section which tells you how to run it but I'll try to summarize the steps up as best as I can below Install node.js and NPM Install Truffle on your computer using npm install -g truffle Download and install Ganache Clone the subdomain-registrar repo to your computer. In terminal, navigate to the folder you cloned it to and run npm install Find the /app/js/domains.json file and edit the whitelist to only include your domain. Mine looks like: [{\"name\": \"ethmojis\", \"version\": \"1.0\"}] Edit the index.html file however you'd like for your site. In terminal, change directory to where you cloned the subdomain registrar. Run: ganache-cli & truffle deploy npm run dev If everything looks goo, run npm run build A build folder should be created and files output here. This is your final site that you can upload to a web server or IPFS. To host on IPFS , upload the entire build folder and get your content hash. You can then put this content hash in the \"records\" section of any ENS domain or subdomain! Here's an example of how it will look: Congrats, you are now an expert on the Ethereum Name Service!","title":"Hosting Your Own Subdomain Sale\u00a0Site"},{"location":"languages/translations/","text":"EthHub Translations EthHub Docs are available in the following languages: Chinese","title":"Translations"},{"location":"languages/translations/#ethhub-translations","text":"EthHub Docs are available in the following languages: Chinese","title":"EthHub Translations"},{"location":"other/EF-COI-disclosures/","text":"Conflict of Interest (COI) Disclosures from Ethereum Foundation members The following disclosures were voluntarily provided by EF members in an AMA about Ethereum Leadership and Accountability shortly after the departure of Afri Schoedon from the Ethereum community. Vitalik Buterin Non-ethereum-ecosystem tokens: BCH, BTC, DOGE, ZEC; total value < 10% the value of my ETH Non-ETH ethereum ecosystem tokens: KNC, MKR, OMG, REP, total value <10% the value of my ETH Significant corporate shareholdings: Clearmatics, Starkware [edit, forgot to put this in before] Revenue in the last 12 months other than ethereum foundation salary: a few advisor tokens (included in above) Non-financial interests: friends in the ecosystems represented by the above projects, as well as some non-token ethereum ecosystem orgs (eg. L4, Plasma Group, EthGlobal, EDCON) and non-token non-ethereum orgs (mainly professional cryptography and economics circles) Source Justin Drake 99% of token value in ETH (was given minor airdrops for free) Paid by the EF in ETH Leverage long ETH using ETH as collateral (MakerDAO) Close to zero fiat Not associated with any blockchain project other than Ethereum Zero speaking fees, zero grants Source Martin Swende 95-99% of crypto holdings in ETH, rest is ZEC, BTC, SIA + some eth-tokens Salary/income last 12 months: all via EF (in euro) \"I previously also sometimes did consultancy audits, haven't done any in a long time\" Advisor in zero projects, zero speaking fees, zero grants received, etc. Source","title":"Ethereum Foundation COI Disclosures"},{"location":"other/EF-COI-disclosures/#conflict-of-interest-coi-disclosures-from-ethereum-foundation-members","text":"The following disclosures were voluntarily provided by EF members in an AMA about Ethereum Leadership and Accountability shortly after the departure of Afri Schoedon from the Ethereum community.","title":"Conflict of Interest (COI) Disclosures from Ethereum Foundation members"},{"location":"other/EF-COI-disclosures/#vitalik-buterin","text":"Non-ethereum-ecosystem tokens: BCH, BTC, DOGE, ZEC; total value < 10% the value of my ETH Non-ETH ethereum ecosystem tokens: KNC, MKR, OMG, REP, total value <10% the value of my ETH Significant corporate shareholdings: Clearmatics, Starkware [edit, forgot to put this in before] Revenue in the last 12 months other than ethereum foundation salary: a few advisor tokens (included in above) Non-financial interests: friends in the ecosystems represented by the above projects, as well as some non-token ethereum ecosystem orgs (eg. L4, Plasma Group, EthGlobal, EDCON) and non-token non-ethereum orgs (mainly professional cryptography and economics circles) Source","title":"Vitalik Buterin"},{"location":"other/EF-COI-disclosures/#justin-drake","text":"99% of token value in ETH (was given minor airdrops for free) Paid by the EF in ETH Leverage long ETH using ETH as collateral (MakerDAO) Close to zero fiat Not associated with any blockchain project other than Ethereum Zero speaking fees, zero grants Source","title":"Justin Drake"},{"location":"other/EF-COI-disclosures/#martin-swende","text":"95-99% of crypto holdings in ETH, rest is ZEC, BTC, SIA + some eth-tokens Salary/income last 12 months: all via EF (in euro) \"I previously also sometimes did consultancy audits, haven't done any in a long time\" Advisor in zero projects, zero speaking fees, zero grants received, etc. Source","title":"Martin Swende"},{"location":"other/ethereum-2.0-ama/","text":"Ethereum 2.0 Reddit AMA Part 1 Q: When, as in period of time, do you think Ethereum will be able to solve scalability issues? A: In phase 1 (about 2020 by my estimate) we will have shard data. Those shards, even without an EVM, can be used as the data availability layer for TrueBit (and other alternative execution engines). Phase 2 (about 2021) is when we will have scalable L1 execution. [Justin Drake] Follow up Q: ELI5 execution engines Follow up A: An execution engine is a way to compute state assuming consensus on data. The execution engine for the EVM is \"naive re-execution\". There are more fancy execution engines such as TrueBit and SNARK/STARK-based validity proofs. [Justin Drake] Q: Are economists being consulted to help decide the issuance rate of a full POS system? Stated more broadly, who is helping/advising the ETH 2.0 team on the effects certain issuance decisions will have on the network and community (both in the short and long term)? A: Personally at this point the feedback I'm most interested in is actually feedback from potential stakers. The main question basically being, are there any other tweaks we can make to the economics that, given a fixed level of reward, will (i) encourage more people to validate, and (ii) encourage many small solo validators or smaller pools, as opposed to a few large pools. [Vitalik Buterin] Q: Considering that Yoichi is not working anymore in the Foundation, what are your plans on formal verification of ETH 2.0 specs? A: I'd say that formal verification of the spec will make sense when the spec is more mature and stable, maybe mid 2019. Anyone interested in doing formal verification of the ETH 2.0 specs in a few months, please send a grant proposal. [Justin Drake] Q: What is the best response to a developer who is hesitant about building on ethereum today, given that it will be \"replaced\" by ETH 2.0 over the next few years? A: I expect that once the state and execution model for Serenity solidifies (see https://ethresear.ch/t/a-minimal-state-execution-proposal/4445 for one minimal proposal) we'll start working with the developer community on modifications to high-level languages (Solidity, Vyper, etc) and best practices. Hopefully at that point it will become clearer how to build applications in such a way that they could be redeployed as-is on the 2.0 chain. At least that's my hope. [Vitalik Buterin] A2: Building on Ethereum 1.0 today is great for learning and prototyping. It's also great for assembling a culturally-aligned team consistent with the philosophy of the Ethereum community (which may be different than the philosophy of the Bitcoin, Ripple, Bitcoin Cash, EOS, Tether, etc. communities). [Justin Drake] Q: Can we run multiple validator clients on a single machine assuming we've got multiple 32 Eth deposits? A: Yep! There's nothing preventing you from using one machine to run multiple validators. The only hard limit you'll face is that the number of shards you are assigned to validate increases linearly with the number of validator slots you have, so if you have thousands of ETH a laptop will not suffice and you'll need something more powerful. [Vitalik Buterin] A2: Short answer: Yes. Long answer: You will need to register a validator for every 32 ETH. In phase 0 (just the beacon chain, no shards) you can likely handle thousands of validators on a single machine. After phase 1 the number of validators that can be operated on a single machine depends on how resourceful your machine is. A mainstream laptop should comfortably handle one validator, and likely handle 2-10 validators at max capacity. The computational resources scales linearly with the number of validators until you reach ~1,000 validators. At that point there are scalability advantages in being a super-node, i.e. a full node for every shard. [Justin Drake] Follow up Q: How much importance are the devs placing on being able to run setups at home wrt keeping Ethereum decentralised and being able to move ETH in and out of staking pools? Follow up A: It's definitely a goal I care about. The alternative to staking at home is staking on AWS or staking through a pool, and both are risks for decentralization. Concrete ways we try to be friendly to staking at home: Relatively forgiving penalties for being offline, so you earn a net profit as long as you're online more than ~50-67% of the time Keeping the cost of validating the beacon chain low The anti-correlation penalty scheme, which more heavily penalizes validators that misbehave at the same time as many other validators (which is more likely if you're on the same pool or VPS or whatever). [Vitalik Buterin] Q: How can I help / get involved? I fell in love with Ethereum not too long ago. I\u2019ve been reading Zcash\u2019s BLS12-381 Elliptic Curves and for the past few days these are all thats been on my mind. I love this project now and just found ethresear.ch. I really wanna help in any way possible! Thanks again for all your hard work. I can\u2019t stop reading these posts. A: For researchers a good way to contribute and gain visibility is to post quality content on ethresear.ch. If you are a developer consider joining one of the numerous ETH2.0 implementation teams. [Justin Drake] A2: Hi! The best way to get involved is to find something that captures your interest and to dig in. Because Ethereum is a radically open platform, the research and development is also generally very open and very accessible. Keep reading. Follow your interests down all the little paths and begin to build a mental model of the ecosystem. https://ethresear.ch/ is a great place to follow and begin to contribute to research discussions. https://gitter.im/ethereum/sharding is where a lot of the day to day conversation about Serenity is happening (developers chatting from various projects) https://github.com/ethereum/eth2.0-specs Read the spec! but not only read it, be an active reader. If you find an error, typo, bug, etc, submit a PR. Also check out the issues and PRs in the spec repo. We are constantly discussing changes, fixes, updates and anyone can contribute. If you are a dev, open up one of the eth2.0 client projects and pick a \"good first issue\". These allow you to touch the codebase, contribute a bit, get the lay of the land, and provide the foundation to tackle bigger issues from there. ^ Those are Serenity specific suggestions, but beyond that, just find projects you are interested in and begin contributing. There is so much to do and project leads are always excited to have helping hands. This stuff doesn't build itself :) [Danny Ryan] A3: If you're interested in Cryptography especially, you can also check out another BLS - Boneh\u2013Lynn\u2013Shacham signature spec for Serenity and help to review it: https://github.com/ethereum/eth2.0-specs/blob/master/specs/bls_signature.md :) For research, as Justin and Danny said, ethresear.ch is the sanctuary. And first, you can take a look the various topics on Ethereum Sharding Research Compendium to see which area you're most interested in. For implementation, there are multiple topics: Consensus layer - implement the spec! P2P layer design and implementation - see https://github.com/ethresearch/p2p [Hsiao-Wei Wang] Q: From my limited understanding of Eth 2.0 specs, I gather that shards will be mostly independent, with cross-shard communication being slow and requiring multiple steps. As a consequence, smart contracts will only be able to interact lively with assets from within their deployed shard, and will have to go through slow cross-shard communication to interact with assets outside. Given this topology, are we not aiming to improve scalability at the cost of sacrificing user experience (slow response of smart contracts in non-obvious ways)? For instance if I want to play cryptokitties, I will need to make sure to interact with the contract that is deployed on the shard where my eth address resides, and not with any of the other contracts that reside on other shards. Then, if I want to interact with the kitties of someone else who resides on a different shard, my experience will be much slower and cumbersome than if that person would reside in my shard (or at least this is how I understand the system will work, please correct me if I am wrong). Given that the end goal is to scale to a very large number of shards, then the likelihood to have to go cross-shard increases exponentially with time, and thus the user experience gets progressively worse and worse. A: Cross-shard communication will definitely be slow at base layer, however there are higher-level mechanisms that can be used to implement fast cross-shard communication on top of a base layer that allows any cross-shard communication at all even if slow. See https://ethresear.ch/t/a-layer-2-computing-model-using-optimistic-state-roots/4481 for an example of how this could be done. In general, I expect a lot of the long-run innovation in improving the smart contract development experience to happen at higher levels in this way; I write about why this is a good idea at length here: https://vitalik.ca/general/2018/08/26/layer_1.html [Vitalik Buterin] Q: What happens to all the contracts currently running? A: It is somewhat speculative at this point. My best guess is that Ethereum 1.0 contracts will stay running as-is for a long time (say, 10+ years) without any migration to Ethereum 2.0. This can be made sustainable by doing two things: Lower the inflation (e.g. reduce it by 20x, bringing the PoW security to a blockchain such as Ethereum Classic). Completely removing inflation\u2014relying on transaction fees only\u2014would also be possible (see below for security argument). Use Ethereum 2.0 to regularly finalise Ethereum 1.0, counter-balancing the reduced security and preventing long-range 51% attacks. This requires Ethereum 1.0 nodes to be beacon chain light clients, which should take years to happen. If the community gets tired of Ethereum 1.0 a bomb mechanism (e.g. difficulty bomb, issuance bomb, gas bomb, etc.) can gracefully kill it. Another possibility is for Ethereum 1.0 to become a contract on Ethereum 2.0. I don't see this as a practical solution, but I'm open to being convinced otherwise :) [Justin Drake] A follow up: I'll add that if any specific user wants to migrate their application to the 2.0 chain, then they should be able to just take their existing high-level code (Solidity or Vyper), make relatively few changes and redeploy. The main difference between the eth1 and eth2 systems that users will need to worry about is likely to be rent (or equivalents like gas-payment-extended bounded TTLs). [Vitalik Buterin] Q: Is there a worry that shards will become \u201cgentrified\u201d until full shard interoperability? Basically, will one shard capture all the defi apps because they can't directly communicate with each other on separate shards? A: I would say if that happens, that will create a large incentive for someone to create a defi dapp that can interact with the other defi dapps through asynchronous cross-shard transactions and launch it on a cheaper shard. [Vitalik Buterin] A2: At the start in times of low usage, the economic load-balancing might result in over and under utilized shards. Overtime as usage increases, I expect the economic benefits of deploying and interacting on particular shards will become more tangible and result in a more economically rational distribution across shards. Observing the emergent behavior is going to be super fascinating :) [Danny Ryan] Q: Can we run the same validator on multiple machines - in order to avoid penalties if one machine was compromised ? If yes - what happens when we run a validator on 3 machines, one goes temporary offline, one is compromised, one is OK? A: For small amounts of ETH I'd recommend just running on one machine; unless many other validators get penalized at the same time as you, the penalties are not too large. If you do want to decentralize your validator, then we have recently made progress toward validation being more multi-party-computation friendly, which would allow you to run a validator as a 2-of-3. In that case, as long as two of the three sub-nodes are functioning correctly you'll be fine. [Vitalik Buterin] A2: Yes! Ethereum 2.0 is friendly to n-of-m schemes thanks to BLS signatures. For example, with a 2-of-3 scheme you have can three computers, each with a share of the validator private key, such that two need to be online at any given time. This improves security as well, because an attacker now needs to compromise two of the BLS key shares. [Justin Drake] Q: Is there tech from any competitors such as Dfinity (or any others) that is worth adopting into Ethereum 2.0, or is the work all other dapp/smart contract platforms doing not relevant/good enough for ETH 2.0? A: Part of the job of the research team is to absorb good ideas from research papers and other blockchain projects. I keep a keen eye on technically interesting projects such as Dfinity, Coda, Zcash, etc. Competitors definitely also have good ideas, and learning from each other is part of the game :) [Justin Drake] Q: Do we need to run a full node to also earn from network fees or would the validator client handle this? A: Depends what you mean by \"full node\". The design of the sharding system is such that no one needs to run a node that verifies all of the data of all of the shards. A validator client validates the beacon chain and the specific shards that you get assigned to validate, and that is sufficient to earn network fees. [Vitalik Buterin] A2: The validator client should abstract the necessary tasks to get revenue from the different revenue streams. (This includes being a full node for the beacon chain and one shard at any given time, but that's a technicality you don't have to worry about.) [Justin Drake] Q: Very interested to hear about the efforts currently underway at the EF and strategic partners/OEMs to design and manufacture the VDF hardware. It's also the thing that scares me the most about the proposed design;i can see how they would really increase the security of the random sample selection process in addition to RANDAO but manufacturing hw is a costly, difficult endeavor often subject to unforeseen issues and delays. On that note is an economic incentive structure for running a VDF node being considered? A: Very interested to hear about the efforts currently underway at the EF and strategic partners/OEMs to design and manufacture the VDF hardware. We're working our way with various partners, including Synopsys, AWS, TSMC, GUC, etc. VDF announcements to come in February :) manufacturing hw is a costly, difficult endeavor often subject to unforeseen issues and delays. Right. The good news is that Ethereum 2.0 can launch just fine without VDFs, so we're not betting Ethereum 2.0 on the success of VDFs. The current plan is to have VDF hardware ready in 2020, but 2021 would also be acceptable. From a financial perspective, we may share the total costs (estimated at $15m) with Filecoin and other projects interested in VDFs. We are already sharing costs with Filecoin on viability studies. On that note is an economic incentive structure for running a VDF node being considered? Short answer: yes, of course :) Long answer: the ethresear.ch post provides a bit of clarity on that. highly specialized hw always connected providing a crucial function to the network it would be a prime target for potential adversaries to disrupt or compromise Right. The good news is that we only need one VDF evaluator to be online for normal operation, and even if everyone goes down it's not a huge deal. The main negative consequence is that dApps relying on unbiasable randomness will have to wait longer than expected for the random numbers to arrive. [Justin Drake] Q: zk-STARKs are powerful and I have been reading Eli\u2019s and the others paper on it. Are recursive zk-STARKs ever doable? I know Coda is planning on using Recursive zk-SNARKs to shrink chains but the lack of transparency is worrying. A: I don't see what fundamentally prevents them from happening. Recursive [any zero knowledge proof schemme] just means using the ZKP mechanism to make a ZKP of the ZKP's own verification procedure. The main challenge in practice is just that these verification procedures themselves have a high cost (eg. there's 50-500 kB worth of hashes in a STARK to verify), and this cost multiplied by the ZKP's overhead is quite a big number. ZK SNARK verification is in contrast much more \"concise\". [Vitalik Buterin] A2: Are recursive zk-STARKs ever doable? In theory yes, but as I understand recursive zk-STARKs won't make sense from a performance standpoint for most applications, at least in the medium term. [Justin Drake] Q: What\u2019s the final scalability limit of Ethereum post Serenity? Gas limits per block? Blocks per second? A: The current design has a fixed number of shards, at most one block per 6-second slot, and fixed block sizes. This means that the data bandwidth is capped. The gas limit on the other hand will likely be floating, just like Ethereum 1.0. [Justin Drake] A follow up: Though in the current phase 1 spec that's sitting around in draft mode the block size is so far fixed to 16 kB, as keeping it fixed makes the code for proofs of custody, data availability proofs, etc much simpler. If we want to bump up capacity later increasing the shard count may well be the simpler way to do it. [Vitalik Buterin] Q: Why should anyone move to the Beacon Chain? How exactly do you envision the move to happen? A: Why should anyone move to the beacon chain. Specifically, only validator balances exist in the Beacon Chain. User balances and state exist in the shard chains. Validators will move to the beacon chain to seek profit by providing security and resources to network. Note there is a new proposal to have the beacon chain finalize the PoW chain during the transition period so the validators would be able to provide security both to the new shards and the existing chain. Users will move to the shard chains to participate in the new scalable, sharded landscape. We envision economic activity to begin to move over as the system stabilizes and begins to show clear economic benefits to the users. It is important to note that a user could choose to not move until the eth1.0 state is rolled into a shard. How exactly do you envision the move to happen? At first, this will just be a single directional deposit for validators only to begin validation. Once the state execution layer is in the new 1024 shards, users will be able to transfer eth directly to the shards from the PoW chain. In the long term, the plan is to roll the PoW state into one of the shards. The current most favorable strategy from our perspective is to fork the PoW state root into a contract along with an EVM interpreter. Users could then execute txs on the existing eth1.0 state by call the contract along with the merkle witnesses of the state they need to access. This option is nice because it allows us to cleanly deprecate eth1.0 support in the long term. [Danny Ryan] A2: Moving to the beacon chain is done by sending ETH to a so-called \"deposit contract\" on Ethereum 1.0. People would send ETH to the beacon chain to become an Ethereum 2.0 validator and gain financial rewards. [Justin Drake] Q: How much funds does Ethereum foundation have and are these enough for finishing Eth 2.0? A: The EF has tens of millions of dollars in fiat, and a bunch of ETH. More than enough to finish ETH 2.0 :) [Justin Drake] Q: How is the status of a possibly fixed eth supply at some point in the future? Do you think it's likely? A: I don't know about fixed ETH supply, but we may get to a point of decreasing ETH supply. Indeed, we are looking into transaction fee schemes that burn ETH, and burnt ETH may outweigh minted ETH. [Justin Drake] Q: Have you looked into hyraxZK. They are zk-SNARKs that do not require a trusted setup. Any thoughts on them being used in the future as the sizes are still very small. The only thing is they wouldnt be Quantum-Resistant but the proof size won\u2019t be similar to a zk-STARK. I wonder what they can be used for offchain as well, especially in networking by producing a zk proof of incoming packets that acts as Natural DDOS Protection. Just some thoughts. A: Have not looked into Hyrax specifically, but I am totally not surprised that things like it exist. I'm definitely very happy with the progress the general-purpose ZKP space has accomplished in the last few years; the very concept of general-purpose ZKP is pretty godlike compared to what I imagined was possible with cryptography as a child. Our general instinct is to find ways to make it possible to get the benefits of many different ZKP schemes with different tradeoffs in ethereum. The simplest way to do this would be to encourage the development of such tech as application-layer or network-layer addons so that it we do not need an agreement at consensus layer about a single ZKP scheme that everyone uses. [Vitalik Buterin] Q: V said that there are no fundamental problems left to solve. Is this true for only phase 0? If so, how confident are you about the other phases? A: Personally I am confident in all of the current fundamental technologies for all the phases outlined so far (Casper FFG and CBC, sharding, erasure coded data availability proofs, proofs of custody, receipt-based async transactions, layer 2 for acceleration, abstraction, rent, \"stateless client\" verification). There is definitely still a lot of room around the edges for optimization though. [Vitalik Buterin] Q: Why was Hybrid Casper ditched when it looks like the Beacon Chain kind of has nothing to do with the PoW chain? or Why not re-instate Hybrid Casper considering its testing is/was finalized? A: Honestly hybrid Casper is a bit of a dead end. Actually implementing/testing it across all the clients would require setting up a lot of infrastructure that we would then need to throw away. The design was highly inefficient because of its \"implemented-in-EVM\" nature, and it turned out that we could not really benefit from the ease-of-implementability of being done in EVM because we would need to write a lot of special-purpose code to make verification of signatures parallelizable. So we chose the route that would be somewhat more painful in the short term, but significantly lower headache to actually get to a stable sharded system overall. [Vitalik Buterin] A2: I wrote up some notes on the deprecation of EIP 1011 here https://notes.ethereum.org/s/rJDrKoBOQ [Danny Ryan] Q: 1. Since it is a one way transfer to the beacon chain, my understanding is that there will be two tokens: ETH1.0 and ETH2.0. Right? Will The beacon chain allow tokens to be send. I.e. will exchanges be able to list the token before phase 2? My feeling is that from a risk/reward perspective, stakers will expect returns more in the area of emerging market debt (+20%) esp. in the beginning. But all discussion I saw was ~2%. Any comments on this? Gutfeeling: how much \"unsolved computer science problems\" for phase 1, 2 and 3 roughly? I understood for phase zero it has arrived at 0. Will we consider some kind of tax baked into the system to ensure sustainability of core developments and infrastructure? A: Will The beacon chain allow tokens to be send. I.e. will exchanges be able to list the token before phase 2? ETH in the beacon chain would not be transferable (anywhere!) until phase 2. That will make exchanges harder, although we may see a futures' market. My guess is that we will see 1 ETH ~ 1 BETH at pretty much all times :) [Justin Drake] My feeling is that from a risk/reward perspective, stakers will expect returns more in the area of emerging market debt (+20%) esp. in the beginning. But all discussion I saw was ~2%. Any comments on this? The reward/penalty constants are certainly not yet finalized and could use more community debate and input. That said, the rate does scale depending on the number of validators participating. If the fair market rate is really 20%, then a lower number of validators will show up. If the fair rate is 2%, then a ton of validators will show up. The economics of staking will find the natural equilibrium. That said the main risk here is if we set the target rate too low and the equilibrium lands at a low participation rate (and thus low security of the network). Although ~2% (@ 10M eth validating) is not set in stone, the idea for a low rate is that a huge amount of ETH is already being held as a speculative asset. Any marginal rate of return on top of this already intended long-term hodling is a gain for the hodler. [Danny Ryan] Q: How would you (and or service providers) ensure the eth on the Beacon Chain is the same as that on the PoW chain and vice versa? A: Arbitrage is always possible in one direction by buying 1 BETH for 1 ETH. A key design goal of Ethereum 2.0 is full fungibility for ETH tokens between the Ethereum 1.0 chain, the beacon chain, and the shards. Two-way transfers between the beacon chain and the shards, as well as between shards, should come in phase 2. [Justin Drake] Follow up point: If you wait until phase 2 for two-way flow, you privilege the very few stakers able and willing to wait an undetermined number of years for access to their money. This will be great for those few (probably north of 25% interest rates!) but not very great for security. Follow up A: y ou privilege the very few stakers able and willing to wait an undetermined number of years for access to their money The ultimate loyalty test :) probably north of 25% interest rates!) but not very great for security. We do have a minimum amount at stake to launch phase 0, around 214 * 32 ETH = 524,288 ETH. So we're effectively capping the interest rate (will be less than 25%) and setting a minimum security level. [Justin Drake] Q: For how long is the 32eth locked up when running a validator client? What happens if the machine I'm using gets destroyed or stolen during the lock up period? Can you switch machines? A: For how long is the 32eth locked up when running a validator client? At least as long as you are a validator. Withdrawal times should be a few days/weeks/months depending on how many other validators are trying to withdraw. What happens if the machine I'm using gets destroyed or stolen during the lock up period? Can you switch machines? You can switch machines. You need a copy of your private keys in case your machine gets destroyed or stolen. Another thing is the withdrawal key used for withdrawals only. Keep that one in cold storage ideally. [Justin Drake] Q: Contributing to Ethereum 2.0? Are there any projects which are some sort of \"under water\", like only few people working on it. A: I feel at this point there are enough implementation teams, at least compared to some of the other issues that are underaddressed. Off the top of my head: Solidity being compile-able to E-WASM Vyper being compile-able to E-WASM Thinking about research problems related to phase 2, particularly around account abstraction, asynchronous contract programming models, etc Privacy, eg. see https://ethereum-magicians.org/t/meta-we-should-value-privacy-more/2475 Improving the state of decentralized messaging and file storage [Vitalik Buterin] Follow up A: A few more things good to work on: liibp2p implementations in various languages Doing security reviews of the spec prototyping account and state execution in eWASM a lot of work in cross client testing coming up in the next couple of months [Danny Ryan] Q: We have experienced consecutive delays with Constantinople due to bugs found late in the process on a comparatively low risk / simple upgrade. What work is being done to mitigate this on Phase 0 and 1 given how much more complex these implementations will be? (I.e. What testing, third party audits, other considerations are being taken to ensure seamless implementation/integration? A: As the phase 0 spec is moving into a more stable place, we are beginning to look into explicitly bringing in third party audits, academics, and formal analysis. In addition to this, we are currently laying down the foundations of cross client testing and fuzzing akin to eth1.0. You're correct in that the consensus/system layer of eth2.0 is much more complex than the single PoW chain so we are constantly trying to reduce complexity and simplify. This is a major engineering effort that will require many parties other than our research team to plan, build, test, execute, and maintain. I think it is a major strength that so many independent teams with a diverse set of expertise have stepped up to contribute. Note, one of the design goals in the spec readme -- \"to minimize complexity, even at the cost of some losses in efficiency\" We're excited to see new efforts like the \"Ethereum Cat Herders\" and scheduled release cycles emerging in 1.0 and plan to incorporate any best practices and efforts into the 2.0 process. DePM (decentralized project management) is hard, but we continue to learn and continue to get better. [Danny Ryan] Q: How difficult will it be for 1.0 contracts to work on Serenity? Should developers expect to rewrite their contracts to account for state rent and cross-shard communication? A: Solidity can already compile to WASM and I believe it is in Vyper's roadmap to do so as well. These naive compilations might be inefficient (e.g. keeping 256 bit types in the 64bit wasm machine) so some amount of rewrite or utilization of optimizers might be called for. Beyond that, there are some unknowns that might change the approach to certain contract programming modesl. For example, storage fees might call for a new ERC20 contract design in which user balances are stored in separate child contracts so that users become responsible for managing their own storage fees related to their coins. [Danny Ryan] Q: What is the latest view on how the \"upgrade\" to Ethereum 2.0 will happen? Can you take us through the different phases/hardforks that will in the end enable the full PoS/sharded/WASM blockchain, and what each will enable? A: Eth2.0 is broadly divided into three phases -- Phase 0, 1, and 2. Phase 0 - The Beacon Chain This phase is the launch of the core system level functionality of the new PoS chain (the beacon chain). Validators can submit deposits, join the validator set, and build/finalize the core chain. At this point the chain will have Casper finality, an RNG, shuffling into the various validator roles, and simulate crosslinking in the (currently) non-existent shard chains. Phase 1 - Shard Chains (data) This phase is the launch of the shard chains, but only as a blockchain of data. (Execution and state comes in phase 2). At this point, validators will additionally build these data chains and finalize the each shard back into the beacon chain via \"crosslinks\" and attest the availability of the data. These crosslinks were already being created in Phase 0, but had a stub for the shard hash being finalized. In this phase, that hash becomes \"unstubbed\". Shard data chains begin to have some utility for applications that need a high availability data store. Phase 2 - Shard Chains (state and execution) This phase is the launch of state and execution of state (eWASM) on the shard chains. This is when users and applications will begin to migrate to Serenity and use it to it's full potential. Cross shard txs will be available at this point, and users can begin developing any number of \"layer 2\" execution engines on top. The above (especially phase 2) might be divided into sub-forks, and there will be a fork during/after phase 2 to bring in the eth1.0 state/evm into a contract. [Danny Ryan] Q: I'm quoting James' article: \"This means there will be little reason to migrate smart contract code or users until Phase 4 is released, potentially in the mid-2020s\". Does this mean, ETH2.0 wont be usable before 2025? \"ETH2.0 designers do not know what the cross-shard communication system will look like.\" If you're so unsure about the features of ETH2.0, why is it being developed at all? What will be the advantages in daily use compared to EHT1.X? Why should anyone wait till \"the mid-2020s\" to use ETH2.0? A: 2025 sounds... unlikely! I publicly made the prediction (since July 2018) that phases 0, 1, 2 will come in 2019, 2020, 2021 respectively. Scaling from shards will come in phase 1 and phase 2. On the topic of timelines, for phase 0 specifically, ideally the spec should be close to final in Q1, cross-client testnets in Q2, security audits in Q3, mainnet launch in Q4. As a rule of thumb, launching in December is hard because of the holiday season. So November 2019 and January 2020 would be my two best guesses for phase 0. [Justin Drake] A2: I answered a related question here https://www.reddit.com/r/ethereum/comments/ajc9ip/ama_we_are_the_eth_20_research_team/eeufhqb [Danny Ryan] Q: https://hackernoon.com/what-to-expect-when-eths-expecting-80cb4951afcd From the article above, this is what I understand as the timeline of Ethereum 2.0: Phase 0 will be available in year 2020 Phase 1 will be available in 2022 Phase 2 will be available in 2023/24 Given the above timeline, is it fair to say that DAPP's have to wait at least 4 years before they can run their smart contracts on top of Ethereum 2.0? A: Hi! That article is written by an independent engineer that has been following development so it is not necessarily our 1-to-1 opinion. That said, I'm only seeing the following in the article -- \"Which is to say, while ETH2.0 may launch this year, don\u2019t expect ETH2.0 to support asset transfer or smart contracts until at least 2020.\" I agree that assets and smart contracts won't be available in eth2.0 in 2019. At the latest, I expect phase 2 to launch in 2021, but we are building a complex system and can't say for sure what unexpected challenges might arise between now and then. Waiting until 2023/24 is entirely out of the question for phase 2 imo. [Danny Ryan] Q: With eWASM will we be able to write contracts in Rust and/or any language that compiles to WASM in addition to Solidity? Where can one find out more about that and/or potentially help out? Thanks :) A: Yes you will be able to write contracts in any language that compiles to WASM :) I expect specific toolkits/frameworks to spring up in the languages people are particularly interested in (e.g. Rust, go, typescript, etc) to aid in writing contracts in these languages. https://github.com/ewasm/design is a great place to get started. The eWASM team has compiled a ton of info here to understand the project from a high level. https://gitter.im/ewasm/Lobby The eWASM team and broader community congregate in this gitter room and I'm sure would be willing to provide more guidance and answer any questions you have. [Danny Ryan] Q: Hi guys, Would you like to implement an optional decentralized identity layer in the future? like an option to use DID's or something. so the user can use zero knowledge proofs for Dapps that requires some proof of credentials of the user. Greetz A: Decentralized identity systems are definitely very interesting, but imo out-of-scope for blockchain base layers. The good news is that it's a Turing-complete platform, so anyone can build one on top of ethereum (1.0 or 2.0), and yes that are teams working on different approaches to it already. [Vitalik Buterin] Q: What is the one thing on eth 2.0 dev that keeps you up at night? A: In my mind the Ethereum 2.0 abstract design is a remarkably elegant/slick/simple design. I worry that we botch the spec with poor taste in some of the implementation details, or bugs that we miss. [Justin Drake] Q: How will the Eth1.0/PoW chain eventually be migrated over? A: See the bottom of this post https://www.reddit.com/r/ethereum/comments/ajc9ip/ama_we_are_the_eth_20_research_team/eeucd4f tldr, fork into a stateless contract on a shard [Danny Ryan] A2: See https://www.reddit.com/r/ethereum/comments/ajc9ip/ama_we_are_the_eth_20_research_team/eeub9sp/ [Justin Drake] Q: What are the current incentives for a person to run their own beacon node? A: It is a similar set of incentives as why you would run an eth1.0 node -- mining, run applications (block explorer, wallet services, dapp portal, etc), hobbyists wanting direct connection to the network, etc. If you are a validator, you will receive rewards for operating a node and signing consensus messages. If you run some sort of application, it can be beneficial to run a beacon chain to directly sync the shards you need. You also might serve light clients and applications as a business. I fully expect some some entities to experiment with this model. If you are a hobbyist, you might just like running the protocol directly for self-sovereignty :) [Danny Ryan] A2: Financial rewards through ETH inflation. I think Eric Conner has a spreadsheet somewhere. See https://twitter.com/econoar/status/1070713152864583682 for example here\u2014numbers presented here likely on the low side. [Justin Drake] Q: How do the researchers and developers feel about the complexity of ETH 2.0? A: We're definitely trying hard to bring the complexity down! Examples of complexity decreases that we've made in the last ~3 months include: Switching FFG from the \"per-block finalization\" model to a simpler epoch-based model Moving shard committee calculation outside the state Replacing the RANDAO hash onion construction with a simpler BLS construction (and same with the hash onion for proofs of custody) Storing validator state change slots in the validator record, making each validator's state transition process much more understandable Making shard blocks fixed size rather than variable size (which allows removing a lot of boilerplate for handling transitions) That said we recognize that there's still a way to go, and many features of eth2 don't feel neat and clean the way eg. Nakamoto PoW does. I personally hope a medium-term switch to Casper CBC (see https://vitalik.ca/general/2018/12/05/cbc_casper.html ) can mitigate some of that. [Vitalik Buterin] Q: Is there any work being done on reducing the size of the blockchain as it grows? A: You mean the current chain or the 2.0 chain? Since this AMA is primarily about on the 2.0 chain I'll focus on that. The beacon chain state size is bounded, and there are no objects that hang around forever; even validator records disappear once either their balance drops too low or the validators exit voluntarily and then the withdrawal and exit waiting periods pass. On the shard chains, we're looking at ongoing storage maintenance fees for every byte of storage, \"hibernating\" accounts that do not pay up (at which point their users are responsible for storing and maintaining the data needed to revive those accounts if they need them). [Vitalik Buterin] A2: If you are talking about the Ethereum 1.0 chain size there are a number of workgroups in place and some of them deal with decreasing the chain state or slowing down chain state growth. See: https://ethereum-magicians.org/t/meta-ring-to-discuss-and-coordinate-all-ethereum-1x-efforts/2048 https://ethereum-magicians.org/t/ethereum-1-dot-x-a-half-baked-roadmap-for-mainnet-improvements/1995 https://ethereum-magicians.org/t/state-rent-proposal-version-2-rushed/2494 [Hudson Jameson] Q: Inter-shard transactions - how do downstream shards protect themselves against kiting exploits (A->B B->C C->D where the transfer A->B is later challenged)?? I can imagine kiting tumblers that might make this a computationally intractable challenge. A: There isn't really a concept of \"challenging transfers\" in the current spec, and if you mean plain old fraud proofs then the answer is that if a block that was confirmed into a history turns out to be invalid then the entire history from that point on is invalid and should get discarded. [Vitalik Buterin] Q: If I deploy a contract in ETH 2.0 will it randomly be assigned to a shard? A: No. You specify the shard you want. You'll chose based on proximity to contracts of interest, and gas prices. (Each shard will have a separate gas market.) [Justin Drake] A follow-up: Though initial choice is not necessarily irreversible; contracts could be designed to be yanked ( https://ethresear.ch/t/cross-shard-contract-yanking/1450 ) from one shard to another, and I expect a lot of applications will take advantage of this feature. Q: Will there be a software implementation of VDF for those who are unable to obtain the ASIC? Also, will participants in the RANDAO/VDF mix earn rewards in a similar fashion to validators (if at all)? A: Will there be a software implementation of VDF for those who are unable to obtain the ASIC? A software implementation of the VDF would likely be useless for production. The current estimate is that a CPU implementation would be 1,000 to 10,000 times slower than the ASIC. A software implementation would be useful for testing though. will participants in the RANDAO/VDF mix earn rewards in a similar fashion to validators (if at all)? There will be a small incentive for validators to also be VDF evaluators. Other than that we're mostly drawing from external incentives (e.g. as a large ETH holder you have an incentive that Ethereum stays healthy). The good news is that we only need one VDF evaluator to do its job. There will be thousands of VDF rigs given for free to the community. [Justin Drake] Q: Do Quantum Computers pose a permanent threat to ownerless legacy addresses with significant funds and can they cause collisions with old contracts? A: One of the features of Ethereum 2.0 is \"abstraction\", which means that users can specify whatever signature scheme they want. I expect quantum-secure signature schemes to gradually become more popular. Burn addresses can easily be made quantum-secure. Do Quantum Computers pose a permanent threat to ownerless legacy addresses with significant funds Yes, definitely a threat. Ownerless legacy address could be a systemic risk for blockchains such as Ethereum and Bitcoin. Would be interesting to guestimate how much ETH is at risk. Q: ERC20/721 standards' design sucks. Is there any idea or plan to convert current tokens to ERC-1155 like, efficient format? (Code isn't Law. Seriously.) A: I'm hoping that Ethereum 2.0 standards (such as token standards) can learn from the mistakes of Ethereum 1.0 and evolve. Starting from scratch is a unique opportunity in Ethereum's lifetime. [Justin Drake] A follow-up: Agree! There's a lot from ERC20 that I dislike, the main two things being: It being a pull system vs a push system, requiring the whole approve/transferFrom mess to use tokens to pay for things in smart contracts Handling of ETH being so different from handling of tokens Definitely would like to see both issues resolved in 2.0. The other big things I want to \"get right this time\" is (i) multisig wallets and (ii) not having the \"ether used to pay for gas to withdraw funds from a mixer contract being a deanonymization vector\" issue that makes privacy hard at the moment. Q: How soon will staking pools be live when Ethereum staking goes live? A: At the consensus layer we are trying hard to be friendly to decentralised staking pools. Hopefully we will see those soon after the launch of phase 0. The research and implementation work that Dfinity is doing regarding BLS Distributed Key Generation (DKG) will likely help decentralised pools. Centralised staking pools\u2014unlike centralised mining pools\u2014are somewhat awkward because you have to trust the operator to behave properly with your funds. [Justin Drake] Q: If we want to bring our smart contracts to a new chain, could we pre-determine the corresponding starting/ending hex values for the old smart contracts? Kind of reminds me of CREATE2... A: Yes, Eth2.0 will have a CREATE2 equivalent for deploying contracts. As for existing contracts, the entire eth1.0 state will be rolled into a contract on a shard and these existing contracts will be callable via calling into this 1.0 contract targeting the existing contract address. [Danny Ryan] Q: Are there any courses or subjects in uni that one should take to help in becoming a researcher? A: I'd say you need to be a good self-learner. Math, cryptography, computer science, programming, economics, networking are all relevant. [Justin Drake] Q: Of proposed ways to tackle state rent problem, which one is your favorite? What do you think about resulting complexity from user point of view? A: As far as base protocol goes, either option here: https://ethresear.ch/t/a-minimal-state-execution-proposal/4445 The complexity is actually not so much in the rent itself, it's in how it changes the developer experience. The general approach is that application storage will need to be more \"modular\" and explicitly broken down into chunks associated with specific users, possibly with a fixed amount of \"global\" storage, plus some short-term storage not assigned to any user that goes away after some fixed amount of time, eg. 6 months. [Vitalik Buterin] Q: Question for Justin Drake and other VDF researchers: Would using Chainlink and TEEs (Intel SGX) be a viable method of generating secure randomness for the VDF function of Eth 2.0? Could this be used in lieu of specialized hardware? If so, I imagine this could be a substantial time and cost saving measure in the quest for Serenity. A: TEEs can be used to generate randomness using delay. Unfortunately TEEs is trusted hardware. We need a trustless solution :) [Justin Drake] A follow-up: Though I would add that trusted hardware could be a great thing for individual validators to use to increase their security. [Vitalik Buterin] Q: What computer science problems still need to be solved prior to the release of Phase 1? A: For phase 0 we need locally-computable shuffles. For phase 1 we want a custody scheme that is friendly to decentralised pools. Please message me if that sounds like your cup of tea :) [Justin Drake] Q: What happens to the beacon chain in the event of a controversial hardfork on the Eth 1.0 chain? Will two beacon chains form? If not, what mechanism will the beacon chain use to determine which Eth 1.0 chain is the main chain? How will this affect the transition of the Eth 1.0 chain onto a Eth 2.0 shard? What safeguards are in place to ensure that malicious participants do not create unnecessary volatility between ETH & BETH during the year long transition from phase 0 to phase 2? It is my view that this trading pair must remain stable for a successful transition to take place. A: If not, what mechanism will the beacon chain use to determine which Eth 1.0 chain is the main chain? By default the beacon chain validators will just use the voting mechanism that's specified in the spec, and whichever chain a majority of the validators support is the chain that the beacon chain will go with. That said, if we want to facilitate a peaceful split, there is a fork versioning feature built in to the beacon chain to make replay protection very easy... [Vitalik Buterin] Q: Why are you not doing \"proper\" research and submit publications to conferences? A: Not really an answer to your question, but Ethresear.ch ( https://scholar.google.co.uk/scholar?hl=en&as_sdt=0%2C5&q=\"ethresear.ch\"&btnG=&oq=\"et ) does get cited :) [Justin Drake] A follow-up: As does the Casper FFG paper! [Vitalik Buterin] Q: Let's say that I have some ethereum locked on a time locked contract, will be available after the 2.0 transition? This question can be expanded to all 1.0 contract functionality after the POS transition A: The Ethereum 1.0 will live on, even after Ethereum 2.0 is fully deployed. See https://old.reddit.com/r/ethereum/comments/ajc9ip/ama_we_are_the_eth_20_research_team/eeub9sp/ . [Justin Drake] Q: Thoughts on this tweet? https://twitter.com/zaoyang/status/1088001513459511296?s=21 A: Eth 2.0 is not really trying to maintain backwards compatibility; almost every part of the design is significantly altered, and old contracts will have to explicitly migrate over to the new system and in some cases rewrite eg. to adapt to rent. [Vitalik Buterin] Q: What's your vision for Eth 3.0? A: STARKs, STARKs and lots of STARKs. Hopefully some nice way to achieve 2 second average block times. Extremely effective cross-shard communication, either at base layer or through a variety of easy-to-use layer 2 systems. [Vitalik Buterin] A2: See https://twitter.com/drakefjustin/status/1072593728253104128 [Justin Drake] Q: In the future how will a really popular DAPP operate? Will it be possible for a single DAPP to operate across multiple shards? If not how will it operate properly with the TX/sec limits on a single shard? Will L2 solutions be the only option? A: A dApp would have to get really big to consume all the resources in a given shard to justify spreading itself over multiple shards. For example, Uber does less than 20 rides per second. A similarly popular decentralised equivalent would likely fit on a single shard, especially when fancy L2 infrastructure is involved (e.g. state channels, plasma, SNARKs/STARKs). [Justin Drake] Q: What is your take on the current state of finding consensus on randomness, in particular the current VDF construction. While certainly clever, I wouldn't say it is very elegant. Do you think this is due to theoretical constraints or do do you see potential for a 'nicer' way? More general, are there any theoretical problems in this space, relevant to Ethereum 2.0 or not, that are just interesting to think about? (starting my PhD soon and looking for inspiration if it wasn't obvious) A: I wouldn't say it is very elegant I'd say VDFs are a super elegant thin layer on top of RANDAO :) Is it the hardware you don't like? If so, would you agree that proof-of-work is an elegant solution? Then think of VDFs as being \"proof-of-work 2.0\": much better randomness at much lower cost. It's a paradigm shift from massively-parallel work to inherently-sequential work. Do you think this is due to theoretical constraints or do do you see potential for a 'nicer' way? I'm not aware of any unbiasable randomness schemes that only have strong liveness, other than VDFs :) are there any theoretical problems in this space, relevant to Ethereum 2.0 or not, that are just interesting to think about? (starting my PhD soon and looking for inspiration if it wasn't obvious) We will have an academic \"VDF day\" at Stanford on Feb 3 to work on open problems. Will you be nearby? [Justin Drake] Q: Shouldn't the smart contract stated in (4) have the ability of sending just 16 ETH for something as RocketPool v2 work (while some consider this to be \"centralization\" I think it will help a lot the average user and mitigate the risk of the average user)? A: You can send between 1 ETH and 32 ETH to the Ethereum 1.0 deposit contract at any time. A minimum balance of 32 ETH on the beacon chain is required for activation as a validator. [Justin Drake] Q: I see a lot of people talking about nodes running in cloud. Shouldn't ETH find a way to actually discourage this? If everybody is running nodes in cloud that means we have possible single point of failure, which is against what I think we are trying to achieve and what enterprise customers are looking to eliminate. A: \"Partial slashing\" and the quadratic leak during times of no-finality actually financially encourage diverse validator setups. Your potential losses are much smaller when your slashable message or validator down-time are discorrelated. Diversity in setup includes -- node software, validation software, local server vs cloud provider (and which cloud if using cloud), geographic region, etc. If a ton of validators all run on AWS and AWS goes down, these validators will suffer large penalty leaks. To guard against this, I should setup my validation node locally or on a less used cloud provider. [Danny Ryan] A2: We do have a way! It's called \"partial slashing\" and the idea is that, if something goes wrong, the more people did something wrong the more everyone gets penalised. So there is an incentive to avoid correlation with other validators, and hence avoid centralisation. [Justin Drake] Q: Can you foresee ever having to move Eth 1.0 to Eth 2.0 in order to avoid losing it forever? A: The current plan is to incorporate the eth1.0 state into a contract on a shard in eth2.0. Note that this will just be a state root and an EVM interpreter along with eth balances. Users will be able to call into this contract by providing merkle witnesses of the required state. [Danny Ryan] Q: I'm a new developer looking into Ethereum, where would you officially recommend I look to develop with an eye toward future proofing? A: A key consideration to future proof your contract code for Ethereum 2.0 is sustainable storage. It's known as \"storage rent\" and \"storage maintenance fees\". [Justin Drake] Q: What do you guys think of the Avalanche consensus mechanism and could it play a role in the ETH roadmap further into the future? A: Avalanche is interesting to me because it's a fresh approach. Looking forward to seeing how it plays out with Bitcoin Cash. Successes there can be ported to Ethereum via L2 infrastructure. [Justin Drake] Q: Is sharding smart contracts theoretically possible? How would one go about that? A: Here's a trivial example: the Ethereum Name Service (ENS) can be sharded across n shards according to the first log_2(n) bits in the domain name hash. [Justin Drake] Q: How does eth 2.0 balance security across shards holding different amounts of notional value in them? For example if there is a decentralized finance shard holding a very high % of eth + other tokens, would the stakers/validators responsible for that shard have incentives to behave badly? A: The key security guarantee of sharding comes from frequently shuffling validators into randomly-sampled committees (known as \"crosslink committees\"). The hope is that this fast shuffling resists bribing attacks, in both the \"honest majority\" and the \"slowly-adaptive rational majority\" security models. [Justin Drake] Follow-up Q: It still seems like an inefficiency where you'd be over-securing shards with low notional value + under-securing shards with high notional value. Am I thinking about this wrong? A: Every shard gets security with the same notional value. Value (validator collateral) gets spread evenly across shards. [Justin Drake] Follow-up Q: Ah think we are speaking past each other a bit, let me try to clarify my concern --> It seems likely you will have wildly varying ratios of (value sitting atop a particular shard / validator collateral securing that shard). So for example a defi shard with 90% of value in eth economy sitting in it only gets 1/1024th of the validator collateral securing it. And an empty or unused shard would get same 1/1024th of total validator collateral securing it. This seems inefficient to me. Depending on how the distribution of value shakes out across shards, potentially materially inefficient? A: This seems inefficient to me. Depending on how the distribution of value shakes out across shards, potentially materially inefficient? Oh I see! Interesting point. We consider every shard equal, and provide high security for all shards. The breakdown of even a single shard (namely, an unavailable or invalid crosslink) would likely be catastrophic for the whole system. [Justin Drake] Q: Will the Beacon Chain require its own nodes? Is this basically a brand new chain that has only one connection to ethereum: Proof of Burn? A: The beacon chain is a new system level chain that houses the validators and manages their responsibilities and rewards/penalties. In many ways this is akin to the FFG contract and sharding contract proposals that were previously deprecated but the organization breaks clean from the EVM to allow for a radically new design and increased efficiency. A node in the future can run the PoW chain and/or the beacon chain. If they run the beacon chain, they can then sync whatever shard chains they want. The connection at first is just an economic connection -- use the existing economics and community to seed validation in the beacon chain. Beyond that, we expect the beacon chain to be used to finalize the pow chain in the short to medium term. In the end, there are a number of proposals to either fork the eth1.0 state into eth2.0. [Danny Ryan] Q: How does Eth 2.0 account for DDOS attacks? If people run nodes at home on consumer hardware with a normal internet connection they can be taken offline easily with DDOS attacks or am I interpreting this wrong? A: It is the responsibility of a validator to remain online to fulfill their responsibilities and gain rewards. A validator can remain profitable if they generally remain online greater than 50-67% of the time. A validator's inactivity penalties are also minimized if their being offline is dis-correlated from other validators. This incentivizes to utilize different node and validation software from the majority so that in the case of a ddos attack vector against a particular node implementation, your offline losses are minimized. The validator's protocol level identity and it's node's network identity are completely decoupled. This allows for a validator to create any type of obfuscated network setup that serves their purposes. I expect many tools and best practices to arise for home validators in the coming months. [Danny Ryan] Q: What are your thoughts on formal verification of smart contracts? Will this be possible with Ethereum 2.0? A: Formal verification of smart contracts is awesome and super valuable IMO. Formal verification will be possible in eth2.0. I believe the WASM semantics are already available in K which will provide some good opportunities for contract verification. Opening up more languages by using WASM will also allow for utilization of more restricted languages that are more amenable to FV. [Danny Ryan] Q: What are some good cypherpunk books that you would recommend to people getting interested in this space? (Or just good book recommendations in general) A: I don't read many books nowadays. I mostly consume academic papers, whitepapers, podcasts, videos, blog posts, Reddit, Twitter, etc. I did enjoy \"Zero to One\" by Peter Thiel when I was an entrepreneur. [Justin Drake] **Q: How do you prevent single shard corruption attacks? Basically will there be resharding? If so, how is resharding done? How are you solving the fast state syncing problem if nodes need to be reshuffled around shards? A: How do you prevent single shard corruption attacks? By randomly shuffling validators across shards. Basically will there be resharding? If so, how is resharding done? Right now crosslink committees are shuffled every epoch (6.4 minutes) and shard proposer committees are shuffled every ~9 days. Crosslink committees are critical, hence why there are shuffled fast. See this answer also. [Justin Drake] Q: You said in a comment some days ago that there are basically no unsolved problems of Serenity Phase 0 left. Which problems of Phase 1 and 2 are still left to be solved? A: The short answer is there are no big fundamental problems for phases 0, 1, 2. The more detailed answer is that for phase 0 we need locally-computable shuffles. For phase 1 we want a custody scheme that is friendly to decentralised pools. For phase 2 we need to figure out sustainable storage. [Justin Drake] Q: Before Eth 2.0 Enhancements come in, what is the best recommended approach for storing private data on Ehereum? A: Storing data on Ethereum is expensive per byte. Infrastructure like Filecoin may prove to be a good trustless storage solution. For privacy, just encrypt the data. [Justin Drake] Q: Will there be any zk-snarks related enhancements coming with Eth 2.0? A: We are hoping to have a SNARK- and STARK-friendly hash function in Ethereum 2.0 at some point. Unfortunately those likely won't be ready for phase 0. At the application layer, WASM will ideally mean that SNARK-specific precompiles won't be necessary. [Justin Drake] Q: Is there some kind of roadmap for the migration from ETH 1.0 to ETH 2.0 in layman's terms? For true decentralization it is required to get more people on board that understand the full process. A: I described the three phases here https://www.reddit.com/r/ethereum/comments/ajc9ip/ama_we_are_the_eth_20_research_team/eeueuzc EthHub also does a great job at simply describing the path https://docs.ethhub.io/ethereum-roadmap/ethereum-2.0/eth-2.0-phases/ [Danny Ryan] Q: ETH token will not be transferable back after migration to ETH2.0 What will be the token ticker for the ETH2.0 chain native token? A: ETH\u2014at least when Ethereum 2.0 is fully deployed. Fungibility is a key design goal. [Justin Drake] Q: Where does new client software take lists of peers with their ip addresses and ports? Is there is centralized server? A: This is an implementation detail. Some clients may have a hardcoded list of \"bootstrap node\" IPs and ports. [Justin Drake] **Q: Do you have any final plans in mind about the current ETH inflation? A: Nothing final. Ultimately the community will have to make a tradeoff between low inflation and high security. See https://github.com/ethereum/eth2.0-specs/issues/251 . [Justin Drake] Q: What are the odds that a fully sharded chain including state transitions is feasible? A: Very high. No fundamental problems unsolved. The tricky part is getting everything to fit together cleanly. [Danny Ryan] Q: Can I use a raspberry Pi to stake when staking is possible? And what do I do with it in the mean time? A: Nimbus ( https://github.com/status-im/nimbus ) is targeting resource-constrained validators :) [Justin Drake] Q: What's your opinion of EOS (or TRON, STEEM) in terms of dapp platform? A: I tend to be critical of that class of systems. See https://vitalik.ca/general/2017/12/17/voting.html and https://vitalik.ca/general/2018/03/28/plutocracy.html for reasons why. [Vitalik Buterin] Q: Any updates as far as overall inflation rate per year or per milestone/HF? Any updates as far as TPS per year or per milestone/HF? A: See https://github.com/ethereum/eth2.0-specs/issues/251 [Justin Drake] Q: Can I make a Zcash coin on ETH 2.0 for example with all or most of the advantages of Zcash? A: Yes, there are already a number of experiments in eth1.0 to demonstrate usage of ZKSNARKs for both privacy and scalability. Check out miximus for privacy and roll up for scalability (both by barry whitehat!). Usage of ZKSNARKs will be supported in eWASM state execution so I expect more privacy solutions akin to Zcash to continue to be built on eth2.0. [Danny Ryan] Q: Why is ETH 2.0 Phase 0 even needed as a \"main\" chain, and need Bether transform from real ether (hence risk losing some value), instead of doing a testnet only, because after all this is what phase 0 is, based on TestnetBEther? A: ETH 2.0 needs a main chain as a single point of truth for all the shards. The reason we have phases 0, 1, 2 is to break things down conceptually, and in terms of incremental releases to limit risk. [Justin Drake] Q: What work is being done to make the research behind ETH 2.0 more geographically decentralized? Are there any efforts to translate research specifications into other languages? A: Are there any efforts to translate research specifications into other languages? Once the spec is more mature I expect the community to pick this up, somewhat similar to how Andreas's books get translated. English seems to be the a lingua franca for research and development. [Justin Drake] Q: After PoS, if a node gets hacked, can the hacker make the node to lose its stake by confirming false transactions? A: When your validator gets penalised it is automatically deregistered to prevent further damage. We have a mechanism called \"partial slashing\". The idea is that, if something goes wrong with your validator it only gets penalised a bit if not many other validators also mess up around that time. So in the optimistic case of a lone hack you should recover most of your funds with your withdrawal key (kept secure, e.g. in cold storage). [Justin Drake] Q: Will contracts be able to pay for gas in Eth 2.0? A: That will likely be unlocked with abstraction (which includes gas abstraction). [Justin Drake] Q: Assuming the number of network nodes remains the same and the network graduates to full PoS... what is your expected maximum theoretical transaction throughout? A: Rough ballpark figures. 1024 shards * 10 transactions per second per shard ~= 10k transactions per second. [Justin Drake] Q: What is the most updated timeline for rolling out PoS? Since Vitalik already said 'research is done', what are developers' incentives to push things forward? Are there any specific measures taken to ensure a smooth transition? A: I expect the beacon chain (the core PoS chain) to launch late 2019. Ideally the spec should be close to final in Q1, cross-client testnets in Q2, security audits in Q3, mainnet launch in Q4. As a rule of thumb, launching in December is hard because of the holiday season. So November 2019 and January 2020 would be my two best guesses. Having the Ethereum 2.0 chain finalise the Ethereum 1.0 chain will take more time. [Justin Drake] Q: Will it be possible with sharding to have shards with different rules and/or technology independent from the other shards/beacon chain, but still using the same base tech in terms of transacting and security? For example: private eth network run in a shard connected to main eth network from which it takes just security from validators. Private transaction with ZKsnarks shard(s). Encrypted data shards. Erc20 like coin launched on ETH 2.0, but with it's own rules and maybe own shards somehow controlled by the smart contract of that erc20. A: Every shard has the same data availability layer, and the option to use EVM2.0 as an execution engine. That's common base-layer infrastructure. At the application layer contracts can be powered by non-EVM2.0 execution engines (so-called alternative execution engines). There's also a huge L2 design around state channels, plasma, cross-shard communication, etc. So at the application layer I expect lots of non-homogeneity across shards, as well as a lots of homogeneity thanks to standardisation. [Justin Drake] Q: Today, running full nodes isn\u2019t that hard, but the resource requirements are slowly increasing. How much thinking is being devoted to the greater infrastructure requirements of Eth 2.0 and how they will impact node participation and decentralization? A: Ethereum 2.0 validation should be sustainable from a resource perspective: Bandwidth: fixed cost (thanks for fixes shard block sizes) Storage: if not fixed then sustainable (thanks to ideas such as storage maintenance fees). Note that storing shard blocks since genesis is not required. CPU, memory I/O: similar situation to Ethereum 1.0 (gas limit that can be voted up or down). [Justin Drake] Q: How ETH 2.0 differs from ETH, and why POS instead of POW. A: PoS enables goodies such as economic finality and sharding. It is also much cheaper (in terms of inflation cost for hodlers, as well as ecologically) than PoW. [Justin Drake] Part 2 Q: What do you feel is the biggest unsolved challenge left in Eth 2.0 research which must be addressed before Phase 1 or Phase 2 could be implemented in the future? A: I really honestly think that there are no unsolved research challenges at this point. It's mostly \"how do we make this thing more elegant and take up fewer lines of code and have fewer edge cases\" on the research side. [Vitalik] Better understanding the incentives and various actors that might arise in a stateless and highly abstracted execution model. There is really great work being led by both the EF eWASM team and the Consensys Quilt team to better understand the design space and active build prototypes to vet ideas. [Danny] Q: Previously, a release date of January 2020 for Phase 0 was informally articulated. Do you feel this date is realistic and achievable? A: Thanks for noting its informality. :) Launching early next year is my personal target, but there is a lot that needs to be done before then! We need: long-running test nets (however that is defined), formal verification of the deposit contract, and clients to be ready for prime time, but right now it looks like everything will come together in time. We also don't want to rush clients into developing buggy software just to be ready by an arbitrary date. If anything, I think BLS standardisation efforts are the most likely to slow us down. We (as a greater blockchain community) are trying very hard to have a standardised signature scheme for better interoperability between all the chains. There is a high degree of consensus on this already, but establishing a new standard is always a slow process. [Carl] The client teams are doing a great job and continuing to push the envelope. I expect exciting progress to be made in the coming months, but I also expect that the last mile might be long. Early 2020 is realistic and still the target. [Danny] Q: Are the researchers happy with the current state of the economics of Ethereum 2.0? A: I don't think it's productive for us to worry about the absolute numbers at this point; the network will launch, and either the rewards will prove sufficient or they won't. The other thing worth worrying about is centralization incentives, but that's difficult to work out \"in theory land\"; much of the result in practice has to do with how lazy people are. [Vitalik] Q: My biggest worry about ETH 2.0 is that it will kill composability. Won't most dapps end up trying to build on the same shard as say MakerDAO so they can use Dai? A: Composability between shards is definitely unchartered territory but there are reasons to be optimistic: The shards are designed for homogeneity (unlike, say, Polkadot or Cosmos) to facilitate cross-shard communication. There are design patterns which abstract away the boundaries between shards. For example, one could consider shards 0 and 1 as a combined data availability substrate for an execution engine which requires more bandwidth. These design patterns will be more easily exploitable in the context of programmable execution engines. The shards are designed to be friendly to \"fast optimistic finality\" thanks to shard attestations which are somewhat analogous to block confirmations in the context of Eth1. What this means that is, in practice, the shards may act as one logical blockchain thanks to quick probabilistic finality of individual shards. The UI layer is also an opportunity to abstract away the boundary between shards. [Justin] Q: When can we expect the Beacon Chain to be finalizing/checkpointing the Eth1.x chain? A: My best guess is early 2021. See here . [Justin] Q: Under the specs there is a \" block.eth1_data \" property; based on that I thought that somehow we were going to have an hybrid validation starting Jan 2020 (if all goes well) from both PoW and PoS. As stakers, what are we going to validate except the validators, staking rewards & penalties if all the traffic will still be on eth 1.0 and we're not taking part? A: In order for Eth2 to finalise Eth1, 2 things are needed, Eth2 must vote on Eth1 (as is implemented as you point out) and Eth1 must change its fork rule to follow the finalised blocks on Eth1. The latter requirement requires an Eth1 hardfork. It is therefore easier to just have validator finalise the things you mention for now and later on add in Eth1 finalisation. Additionally, it is safer to launch without Eth1 finalisation in case of a Eth2 black-swan event in the early days. [Carl] Q: Rebuttals to the criticism that Eth 2.0 is extremely complex? A: It got considerably simpler over the last year. If you do a word count on the spec, it seems to be considerably smaller than the yellow paper at this point. There's a lot of things in eth2 that are much simpler than eth1. But there's definitely lingering complexity and I deeply care about minimizing it. [Vitalik] While the research path has been somewhat tortuous and hard to follow, the end product is arguably simple and clean. Expect more educational material highlighting the simplicity of the current design. Phase 0 is about 1024 lines of code to specify (assuming SHA256 and BLS12-381 as primitives). I expect phases 1 and 2 to be 1024 lines of code combined (assuming WASM as primitive). That's just the phase 0 consensus (deposit contract, beacon chain state transition function, and beacon chain fork choice rule). [Justin] Q: Why are there so many teams building eth2.0 clients? I understand the point of client diversity but don't you think 6 clients seem to be pushing it? Supporting so many clients would also divide the resources in terms of funding. Which clients do you see as the geth and parity of eth2.0? A: A few notes on client diversity: There's more than 6 clients being developed\u2014it's closer to 8. I expect consolidation\u2014a bunch of clients may not survive 2020. I expect specialisation\u2014one can focus on the browser (e.g. Lodestar), resource-constrained devices (e.g. Nimbus), the enterprise (e.g. Artemis), prototyping (e.g. Trinity), etc. A minimum of two production-ready clients are necessary for launch. I expect the first-mover advantage to be strong. All the above have, to an extent, historically happened on Eth1. [Carl] We definitely don't want a duopoly! For me personally, the ideal would be to have no single client exceed 1/3 of the network, so any software bug in any single client would not stop the network. Though having no single client exceed 1/2 is ok too and gets us most of the same benefit (if a major client has a bug, having no finality for a while while things are being figured out may even be an improvement...) I expect a power law distribution, and it's definitely likely that some of the clients will not survive to see significant usage on mainnet. [Vitalik] My guess on why so many clients showed up to do the hard work is that eth2.0 is both exciting as a purely technical challenge as well as a chance to make a mark on Ethereum and the crypto space in general. I'm pleased that there are so many great teams doing the hard work, but recently, I've been more focused on finding contributors to do value-add work outside of the core client implementation. Formal verification, academic analysis of protocols, testing, light clients, web3 interfaces and developer tooling, validator clients with great UX that plug into any underlying node, etc, etc. [Danny] Q: Are the Ethereum 2.0 clients eventually going to replace the 1.0 counterparts? For example, will Prism ever get merged to Geth? A: I expect the Eth1 clients to live a long and prosperous life :) On Prism: \"Likely not. Other than the language (Go), Prysm and Geth have very little in common.\" [Justin] Q: what happens when I stake 32 eth, and get slashed once? now that my stake is below 32 eth do i get kicked out of the validator set? A: Validators get kicked out when they get slashed. There is another ejection mechanism if your balance goes below 16 ETH from accumulating (non-slashing) penalties. [Justin] You also lose some amount of ETH. The minimum being set to 1 ETH currently. There is an additional penalty related to the number of other slashable offenses that have occurred in the recent time period. If more validators have been slashed recently, you lose more ETH. The maximum penalty occurs if ~1/3 of validators have been slashed recently, at which point you lose all ETH. This highlights the importance of having a discorrelated validator setup from other nodes and potentially having some fault tolerance setup with yourself before you sign things. [Danny] Q: What are the non-slashing offences? A: There are micro-penalties for not voting to finalise the same blocks as other validators and the inactivity penalty (for offline validators) for when the chain is not finalising for an extended period of time. [Carl] We have a bunch of micro-penalties for not optimally crafting attestations and penalties for being offline (search for get_attestation_deltasand get_crosslink_deltas here ). [Justin] Q: i hear a lot of hype around staking rewards, but what are the penalties for getting slashed? does the network have different punishments for different misbehavior (offline vs. double-signing)? is the \"up to 60.8% slash in 18 days\" still correct? A: I think you are conflating two thigs here, slashing and the inactivity leak. Inactivity leak If your validator node goes offline for 18 days, and the beacon chain is not finalizing, then your balance will be reduced by \"up to 60.8% slash in 18 days\". Slashing If a validator behaves provably maliciously, then they are slashed by having their balance reduced. Assuming client software is written well, this should be basically impossible to happen to you. Minimum penalty is 1 ETH, but it goes up linearly in the number of people slashed at the same time as you. See here for more [Carl] Important to note that if you are offline, but the chain is still finalizing you only stand to lose approximately the same as you would have gained. The quick reduction in balance over a ~2 week period only occurs when not finalizing. Another reason to have a discorrelated setup from the rest of the network! [Danny] Q:What is currently the most exciting new research development in Ethereum 2.0? A: The execution engine abstraction in phase 2 is quite exciting, taking account abstraction to the next level. It allows for the consensus part of execution to be an ultra thin layer of abstraction on top of data availability. Assuming WASM as a black box, it may be on the order of 256 lines of code to specify. There's an initial proposal from Vitalik here . The idea is that even the notion of a \"transaction\" is an application-layer detail which can be specified as WASM code. Compare this to Eth1 which \"enshrines\" an opinionated notion of replay protection (nonces), signatures (ECDSA), contracts, accounts (vs UTXOs), gas, storage, etc. [Justin] I'm lately most excited about this . The OVM work by Karl Floersch and co is along similar lines and also very interesting. [Vitalik] Q: Theres been some debate over the necessity of ASICs in Eth 2.0. I understand theres an effort to spread the cost out among various communities, but I think many people feel this might just end up being an expensive science project where the rewards dont justify the costs and if you itemised Eth 2.0, it seems like it might be the most expensive part. Are there alternatives besides relying on just Randao/Randao + ASICs (VDF)? What are the ELI5 upsides + downsides of the alternatives? I appreciate that the researchers are a tackling a difficult problem with randomness for a blockchain. A: It's important to stress that the VDF mechanism's safety is not critical to the safety of the Eth2 consensus; if the VDF scheme gets broken or someone makes an ASIC fast enough to predict all the outputs, all that happens is that the percentage of validators they need to corrupt a single committee drops by a few percentage points (think, from ~50% to ~33-40% plus a lot of computing power). I actually think the main value of the VDF is that it provides global trustable secure randomness to applications that need it. [Vitalik] +1 on consensus-layer security and/or performance gains, and value-add at the application-layer. The other \"promise\" of VDFs is that they are a new cryptographic building block with the rather unique notion of time. They can used for proofs of space, proofs of replication, proofs of history, anti-frontrunning, expiring zk-proofs, and hopefully further applications which are hard to predict today. [Justin] Q: I'd like to know more about the data availability layer of Ethereum 2.0 - particularly the economic costs of long-term data storage. Part of my political platform includes integrating blockchain technology with government operations. For example, I'd like to see all of America's public records stored on a public, open source, sufficiently decentralized blockchain. Would it make sense to build something like this on top of Ethereum 2.0? Why or why not? A: Realistically you would want an incentivized data storage platform like Swarm, with hashes of the documents stored on the ethereum blockchain. But I'd recommend thinking harder and trying to figure out how to answer the deeper question \"how could we use blockchains as a tool to minimize opportunities for misbehavior in government?\" Places to start I can think of include: Things like https://opencerts.io/ for all government-issued records Using https://ethresear.ch/t/minimal-anti-collusion-infrastructure/5413/ to do online votes, starting in low-security contexts (I think petitions would be a good place to start and underexplored) An internal-use stablecoin where only government agencies can hold balances but transactions are visible to and auditable by the public Some kind of zero-knowledge privacy-preserving sales tax collection thing Blockchain-based solutions for esoteric government things like spectrum auctions Get your country (I'm speaking generically to all readers here :D) to make an Estonian-style E-ID system that lets people make digital signatures that can be verified by anyone publicly. This is not technically a blockchain application, but it would be a tool useful in many blockchain applications [Vitalik] Q: I recall /u/bobthesponge once saying that almost his entire Net worth is in Ether (even his salary from the EF). Are there any other researchers on the research team that are as convinced of Ethereum's future, besides Vitalik and Justin of course? No need to call someone out. Just percentages, ie. \"Over 50% of the research team is heavily (over 30% of net worth) invested in Ether financially\", would be sufficient. A: Somewhat ingrained in our culture, the research team doesn't talk much about net worths. Having said that, the research team has a lot of fresh blood (e.g. Dankrad, Proto, Carl) which I don't expect to be crazy invested in ETH.[Justin] I am not an eth whale, but I get paid in eth and have high exposure. [Danny] The aforementioned Carl here, let's put it this way: financially, emotionally, and intellectually, I am heavily exposed to ETH. [Carl] Q: How many Eth2.0 client teams have to have a finished client for the Beacon chain to go live? A: I asked the same question a few days ago. At this moment, it is still an open question and will likely be until much loser to the time. Obviously having more clients is better, but that should be played off against the launch date. I am currently torn between 2 and 3. (Having > 2 would be great because otherwise there is a client guaranteed to have a majority of the validator-base.) At the end of the day, it will come down to who is ready and when. [Carl] Two at minimum, ideally three. [Justin] Q: I understand that about 10 million eth is expected to provide good enough security for the network. In a hypothetical scenario, what happens in the situation where a large organization manage to secure more than 50% of the total eth staked and use it to maliciously attack the network? As i understand, the side with less total eth staked will be slashed, so won't this malicious actor be able to effectively kill the network? A: If a large actor were to aquire a large enough stake to take over the network they would need to buy >2/3 of the total staking supply which would drive the price up, so it's not a cheap attack in the first place. Secondly, you are not slashed if you vote for a minority chain, only if you behave provably maliciously in the eyes of 2/3 of the validators. One of the beautiful things about PoS is that these attacks can be handled with grace. We, as a community, can go in and hard-fork out the malicious actors so they have no more voting power. The malicious actors just burnt a lot of money to temporally halt a network. In PoW, by contrast, if someone buys ASICS with 51% hash power, there is no way to remove them from the system. [Carl] Q:Do the client teams feel their implementations will be sufficiently robust enough, stable enough, and easy enough to use that normal nerds (like myself) can safely run their node software, stake 32 ETH on it, and not be slashed or lose ETH due to client bugs? My biggest concern is losing ETH while being a well intentioned actor. I've ran Geth, Parity, Trinity, and EthereumJ (Harmony) nodes for multiple years now and those clients have been around a lot longer than any of the ETH 2.0 clients have, but they still have issues, still have bugs, still sometimes crash. A: I hope so! One key component in the incentive design is that penalties (for going offline and for being slashed) are only high if many other validators go offline at the same time. So any bug that doesn't hit every node at the same time should only cost you a minimal amount. [Vitalik] Q:suppose ethereum reaches 1 mllion tps, ledger size will grow 1 terabyte everyday, any solution to this? what is your projections in terms of ledger size growh and what is your solution to this A: The sharded eth2.0 is expected to handle ~10MB/s of data availability. This is data that is come to consensus upon in shard chains and guaranteed to be available in at least the ~2 week time frame. This is not necessarily state size. The current approach to state and state execution is to take a \"state-less\" approach in which blocks must contain the merkle witnesses of the relevant state to perform the tx executions. This is reduces the amount of state any consensus node must store, but does bring up other issues about state size, who stores it, how users get it, etc. In fact, the entirety of state execution is being abstracted away such that we can experiment with multiple schemes to deal with this problem (state rent, users/dapps storing their own data, etc). Much of the state rent research that @ledgerwatch has driven in the past year or so will likely come into play. [Danny] Q: Lets assume you are a guy with very little cryptotech-knowledge, but you do have >32 ETHER. Question #1: Would staking be made easy-to-do, so \"ordinary\" people can earn interest on their holdings? Question #2: Does staking pose any risks of losing ETH by accident? Trying to understand if you can stake without any risks unless you \"intentionally\" try to harm the network (eg. if your validator node goes offline, because your internet provider has an issue and likewise) A: Would staking be made easy-to-do, s\u00e5 \"ordinary\" people can earn interest on their holdings? I expect a cottage industry will be setup around accessibility. Infrastructure to be built includes staking pools (centralised\u2014think Coinbase\u2014as well as decentralised one) as well as plug-and-play \"validator in a box\" solutions. Trying to understand if you can stake without any risks unless you \"intentionally\" try to harm the network That's definitely the goal. eg. if your validator node goes offline, because your internet provider has an issue and likewise Penalties should be marginal for validator nodes that go offline for short periods of time every once in a while. [Justin] Q: What is the current thinking around the Eth1>Eth2 migration plan? A: The current approach is to fold eth1 into eth2 as an execution environment. In practice, this will mean that we would need to have a hard fork on the eth1 side to rebalance some gas costs (opcodes that read storage or read accounts would see their gas costs increased to 2000-10000), and after that at some point there will be a \"flag block height\" from which the eth1 state root will be moved into the eth2 system (or possibly some one-time processing will be run on the eth1 state to make some optimizations, eg. replacing the patricia hex trie with a binary tree) and after that eth1 will be part of eth2, with applications being able to run as before. I do think the likely gas cost increase of storage/account reading opcodes (basically the same opcodes whose gas costs were already increased in Tangerine Whistle; those costs will need to go up at least another order of magnitude) is something that contract devs should be aware and plan for. The reason that change will be necessary is that those opcodes greatly increase the size of a Merkle proof needed to statelessly verify a block, so currently Merkle proofs for a worst-case block are >100 MB; with those gas repricings plus trie optimization plus charging per byte of any contract being read, we could get it down to acceptable levels. [Vitalik] Q: Regarding Proof-of-Stake and wealth distribution (and issuance reduction), by the looks of it the majority of ETH will be held by the minority of entities, does that cause any concern since a single entity can run multiple validator nodes (and earn more rewards)? It's a question from inequality perspective not security; if ETH were to take a significant role in the global economy, wouldn't this widen the gap between rich and poor by orders of magnitude (MUCH worse than the current economic system)? Basically, economic inequality on steroids. A: I definitely think income inequality issues from crypto are an issue! It's a big part of why I am not a single-cryptocurrency maximalist. But I still think that PoW is not better than PoS from an inequality point of view, because although PoW does distribute coins into \"fresh hands\", you need so much capital to become a PoW miner that PoW itself is a big rich-get-richer mechanic in practice. [Vitalik] Q: I know its still early but are there some rough estimates of when we might see Spec freezes for Phase 1 and 2? A: Phase 2 is a bit too far out to say, but my hope for phase 1 is Q3/4 of this year. [Carl] That said, the current minimal execution design with EEs for phase 2 (once better researched and prototyped) is a super simple addition on top of phase 1 [Danny] Q: Please ELI5 (\"explain like I'm five\") why the need for a second chain instead keeping on evolving the first one? A: Building Eth2 on Eth1 would be a bad design decision for a few reasons: We would be constrained by the Eth1 gas limit, which would severely affect performance (e.g. 1024 shards and 32 ETH to validate would not be possible). We would be mixing the consensus and application layers. This means the consensus layer is subject to the application-layer DoS vectors (e.g. high gas prices). It would also mean \"enshrining\" application-layer contracts, which is far from ideal from a governance standpoint which should be as neutral as possible with regards to deployed contracts (i.e. The DAO interventions should be the exception, not the norm). We would be constrained by the EVM, which is notoriously hard to safely program complex contracts in. Eth1 does not have support for BLS12-381. We would be subject to the Eth1 block time Poisson distribution (as opposed to the regular\u2014and shorter\u2014slots durations in Eth2). The list goes on :) [Justin] Q: I am considering to stake during phase 0, but i am a bit concerned about the inactivity leak. I want to know how to stop/pause being a validator if I change my mind? I am asking this as there may be certain situations in which I think I will be offline for a while, and I do not want my balance to slowly leak out due to that. A: You will only suffer large penalties if you are offline at the same time that >1/3 of other validators are offline. Otherwise the penalties for being offline will be tiny, to the point where you will be net-profitable (not including computer costs etc) as long as you are online more than ~50-67% of the time. The incentives are deliberately designed to be forgiving to avoid discouraging amateur setups to promote decentralization. [Vitalik] The closest to a \"pause\" button is to first exit (which can take as little as half an hour, but may take days/weeks since there's a queuing mechanism) and later re-activate. [Justin] Q: 1024 shards, 131,000+ validator slots... what happens if there aren't enough validator slots filled by the time sharding goes live? A: With 1024 shards, and 128 validators in a committee, a minimum of 131,072 validators are needed to crosslink every shard every slot. If there are fewer validators than this, then shards are skipped to ensure the 128/committee validator number. [Carl] The system can naturally handle as low as ~64 validators. In this case, security is obviously insanely degraded, but the protocol can technically move forward. [Danny] Technically the system can \"move forward\" with one validator :D But yes, below the 131,072 validator (4.1M ETH) level the properties of the system progressively degrade as the number of validators goes lower and lower. [Vitalik] Q: if i understand finalization correctly, the more validators you have the longer it takes to finalize. how is eth2 addressing this issue without pounding the network with tons of messages being sent between all the validators? A: Correct. I wrote an article about this fundamental tradeoff here: https://medium.com/@VitalikButerin/parametrizing-casper-the-decentralization-finality-time-overhead-tradeoff-3f2011672735 We managed to get a couple orders of magnitude more favorable tradeoff curve than other projects through BLS signature aggregation, which reduces the marginal cost of a signature to 1 bit of data and 1 ECADD (~0.001 traditional signature verifications) of computation. [Vitalik] In Eth2, more validators should not lead to (significantly) longer finalization times. By making use of BLS signature aggregation and by grouping the validators into committees, we're able to support hundreds of thousands (and hopefully into the millions) of validators. [Carl] Q: Has the EF given any thought to maybe issuing \"official\" NFTs (i.e. collectibles) to initial stakers upon the launch of Beacon Chain as an \"extra incentive\"? What's your opinion on this? I'd say this would be the remit of the community, not the EF. Note that the Eth2 designers avoided giving early validators a special reward (e.g. giving the first 16,384 validators a 1 ETH bounty) to avoid distorting the economic experiment. We want to learn whether or not the basic incentivises are sufficient to incentivise participation. [Justin] I actually like the idea of an NFT. The deposit contract is readable in such a way that proofs can be made to a separate contract to generate NFTs. Been talking to Austin Griffith about this. He/burner-wallet might take the charge. I don't think an NFT would hinder our ability to understand the pure incentivizes here. It's at best a trophy and of little economic value imo. [Danny] Q: How is the work on evaluating the feasibility of producing dedicated VDF hardware coming along? A: At this point there's reasonably high confidence that VDFs (including building hardware) are viable. A few updates: A team of 3 ex-Intel people (Simon, Sean, Kelly from Supranational) is dedicated to the hardware aspects. The Rivest timelock challenge (open for 20 years, designed to last 35 years) was cracked in a few months using an FPGA (see here, and here). There's also code on Github. Work by Erdinc Ozturk has improved the state-of-the-art circuit depth for the modular exponentiation in VDFs. The ePrint paper was submitted a few days ago and should be published soon. A prominent complexity theorist (Ryan Williams from MIT) is working on circuit depth lower bounds for modular multiplication. Significant progress was made by Ligero on the RSA ceremony. We are planning for a ceremony with unprecedented scale (1024 participants) in 2020. New research papers keep flowing in\u2014see http://vdfresearch.org The $100K FPGA competition is starting in a few weeks. We have relevant corporate sponsors for the FPGA and ASIC competitions. In addition to the Ethereum Foundation and Protocol Labs (i.e. Filecoin), a new blockchain project (to be announced with the FPGA competition) is helping with funding. $900K was raised in the latest round of funding. [Justin] Q: Is there a chance for obligatory anonymity of future validator withdrawals? Force every withdrawal to go to a shielded pool - like zcash does with mining rewards. I fear without the obligatory anonymity here just using a mixer/etc is going to be treated as extremely suspicious - forcing stakers would add plausible deniability. A: I definitely support moving toward more and more privacy being a default over time! I'd say validator deposits are more important to mix than withdrawals, as that way it becomes harder to locate the nodes of specific validators which seems like it would increase security and censorship resistance. [Vitalik] Q: What are the main incentives to run a beacon node for validators if they can just connect to high-up time beacon nodes?If there are beacon node providers with high up-time - how is this going to be decentralized? A: There is an anti-centralisation incentive mechanism baked in. Basically, validators get punished for going offline the more other validators are offline at the same time. So \"uncorrelated downtime\" should be optimised in addition to \"high uptime\". [Justin] Q: If, as a validator, I know that I'm going to be offline for a period of time, is is possible to 'pause' validating without suffering an inactivity leak? A: The closest to a \"pause\" button is to first exit (which can take as little as half an hour, but may take days/weeks since there's a queuing mechanism) and later re-activate. [Justin] Clarification: there's a minimum ~1 day period before you can withdraw after you exit. It's safe to be offline during that time, but it does prevent you from re-entering. If we want to, in some future version we could add a \"re-enter\" feature that allows immediate re-depositing without waiting to withdraw first.... there's no theoretical reason why such a thing would not be possible. [Vitalik] Q: Do we have clarity yet on whether currently locked-down smart contracts (eg metronomes 4 contracts by Jeff garzik) will continue to work seamless in ETH2.0 or whether these contracts will be deprecated with all ETH in them lost? And how can storage costs be added to locked-down contracts in ETH 1.x ? In other words can we all assume immutable contracts on ETH1.0 will continue to work forever (provided enough people want them to)? Thx A: The current plan is that eth1 will be folded into eth2 as an execution environment via the stateless client approach, in which case, yes, contracts will keep working as expected. [Vitalik] Q: According to this paper, it may be possible for Quantum Computers to hijack and re-sign transactions DURING BLOCKTIME by (as early as) 2027. In other words, ownership of ANY wallet that has not upgraded to a quantum secure signature scheme BEFORE THEN can no longer be trusted AT ALL (even WITHOUT previous outgoing transactions). SO THE QUESTION IS THIS: Is anyone who fails to manually upgrade their wallets before a deadline (in order to become quantum secure) guaranteed to lose their funds after the advent of Quantum Computers? For example, if someone stores a PAPER WALLET for let's say 20 years, are they going to lose their funds by that time? Can QCs just monitor the entire blockchain and automatically attempt to hijack any transaction with insecure signature scheme during one blocktime, even if the sender has no previous outgoing transactions? A: Even if a quantum computer gets announced as immediately usable tomorrow, it is possible to do an emergency procedure to secure the funds of everyone who has not yet publicly released their public key or a signature (ie. every standard account holder that has not signed a transaction). You do this by doing a soft fork to disallow standard transactions, and replace them with a special transaction type that uses a STARK to prove that you own the private key k such that the given address A equals to hash(G * k)[12:] , and then moves the funds over into a new address type that uses a quantum-secure signature scheme, eg. Winternitz signatures. If we get more warning, then we can get people to update to Winternitz on an orderly schedule. TLDR: we're fine. [Vitalik] Q: how do/will the performance bottlenecks compare between 1.x and 2.0 A: 2.0 removes the disk I/O bottleneck for consensus participants by heavily leaning towards stateless clients. Finality greatly mitigates the sync latency bottleneck, and the requirement for consensus participants to store historical blocks. [Justin] I'd also add that I expect light clients to be massively more viable in eth2 than in eth1. About the same order of magnitude load as a bitcoin light client to stay synced (as opposed to eth1, where light clients are not light enough in practice to run on phones...) [Vitalik] Q: As an ETH miner, my main concern is how to prep for ETH 2.0. Any wiki, tips, or advice on how to proceed contributing (and profiting) for Ethereum? A: Eth2 has no mining. You may be able to put those GPUs to good use at the application layer with protocols like Golem, or maybe protocols that incentivise GPU-accelerated SNARK proofs. [Justin] Q: Approximately when is ETH issuance supposed to drop dramatically? (I believe the figure I've come accross is 10x reduction in issuance, is this correct also?) A: When the PoW chain starts piggybacking on the PoS chain for security (this could happen during phase 1 or phase 2), it becomes safe to lower the PoW chain reward by maybe ~4x. Further reductions would happen when the PoW chain stops entirely. [Vitalik] Q: During Phase 0, will ETH 2.0 be transferrable between wallets? 2.0 to 2.0? If so, are there concerns exchanges will list ETH 2.0? A: Transfers will probably only go live in Phase 1 at which point exchanges will list ETH2.0. Having exchanges to so will help maintain price-parity between ETH and ETH2.0. [Carl] Q: if block reward is X eth, and it is enough to secure the block, why do we pay X+gas to miners? Will this change? A: In Eth2 the economic security is not a direct function of the block rewards. Instead, it is a function of the total amount at stake. Will this change? Eth2 should have a partial fee burning mechanism (see EIP1559). [Justin] Q: As ETH 2.0 currently stands what are the odds of a uni-directional vs bi-directional 1.x to 2.0 bridge? A: The uni-directional Eth1 -> Eth2 bridge comes with the beacon chain. I'd say it's likely there will be a bi-directional bridge eventually (though unlikely to happen in 2020). Even better than a bi-directional bridge (based on light clients, which comes with non-negligible latency) is native integration of Eth1 into Eth2 (see here). [Justin] Q: Will the issuance rate be enough to incentivize validators given the competition from say DeFi products and will it be changed in the future if needed? A: Compound rates for ETH are ~0.02% AFAIK, so very easy to compete with. The \"do you take 3% interest staking or 6% lending DAI on Compound\" framing is highly misleading, because that 6% is on USD, which is very different to having 3% on ETH. But over time I do expect interest rates on ETH to slide up as more forms of staking become available (eg. channels, Plasma, Truebit, other security deposit games...). [Vitalik] Q: What are the research team's thoughts / plans on if there is extreme price differences between ETH 1.0 and ETH 2.0? I would think arbitrage would solve the issue but haven't thought too deeply on the subject myself. In paticular, if ETH 1.0 coins are worth significantly more causing people to not want to redeem their ETH 2.0 coins because they will instantly take a price hit versus just selling. A: I'm not too worried: Transfers and exchanges can be used to redeploy \"cheap\" Eth2 coins for validation. Large holders (e.g. the EF) can be arbitragers. The greater the price delta, the greater the incentive to deliver a two-way bridge ASAP. [Justin] Q: Is it still the plan that the frequently rotated notaries perform stateless validation of the blocks? If yes, are there any insights into how much extra network overhead will sending blocks with merkle proofs incur? If no, is there any other mechanism to prevent adversaries that can corrupt a shard quickly from applying an invalid state transition? A: Is it still the plan that the frequently rotated notaries perform stateless validation of the blocks? Yep! If yes, are there any insights into how much extra network overhead will sending blocks with merkle proofs incur? Looks like ~10x data (though very low computation, and we expect data to be cheaper than computation). But with techniques like https://ethresear.ch/t/layer-2-state-schemes/5691, even that could potentially be unnecessary. [Vitalik] Is it still the plan that the frequently rotated notaries perform stateless validation of the blocks? Yes. are there any insights into how much extra network overhead will sending blocks with merkle proofs incur? Now that execution engines are application layer, the answer is technically 0 :) For execution engines that use large Merkle trees (e.g. Eth1) the rough estimate at one point was 8x. I'm personally excited for execution engines that do Merkle path \"witness compression\" using SNARKs (proof creation accelerated by GPUs, FPGAs, or even ASICs). [Justin] Q: What is the current design to move Ether tokens on eth1 to eth2? A: That depends on what you mean by \"Ether tokens\". Validators can send a deposit of 32 ETH to the deposit contract which is then transferred to the beacon chain where they can begin validation. For people who wish to transfer their ETH from Eth1->2, that is not something that has been decided upon yet, but there will (probably) exist a dedicated bridge for this purpose (otherwise they can go through the deposit contract). It is still too early to know about ERC20/721 tokens. If Eth2 has an Eth1 execution engine, then it could be pretty painless, but even if not, an ERC20 token could just be transferred by copying over its state root. [Carl] Q: Sorry in advance if my questions are dumb but I didn't follow closely Ethereum 2.0 for couple months. Is there an approximative release date? Concerning staking, how much is needed and do we know for now the rewards? What is the main point in eth2.0 you are the most proud of? Do you feel that the Binance Chain is an enemy to Ethereum? A: Is there an approximative release date? January 3, 2020 at the earliest for phase 0. I'd say Q1 2020 is likely. Concerning staking, how much is needed and do we know for now the rewards? 32 ETH. Rewards depend on the total number of validators, individual validator performance, and the gas markets. I wouldn't be surprised if the typical validator has an annual return around 10%. What is the main point in eth2.0 you are the most proud of? I'm proud to have been able to make a contribution in a beautiful piece of infrastructure I believe will radically change the world in a positive way :) Do you feel that the Binance Chain is an enemy to Ethereum? No. [Justin] Q: When sharding is released, will there just suddenly be 1024 shards in existence, or will there be a small but growing number of shards as usage goes up? Starting with such a high number will leave a lot of unused space/capacity A: All 1024 shards will be launched at once. Growing the number of shards is (probably) unneeded complexity. Shards with lots of unused capacity will have lower gas prices attracting more users. Q: How can the average person help with eth2.0? Donations? Documentation? Are there any organized efforts underway? A: Educating yourself enough to feel comfortable to participate as a validator would be fantastic :) [Justin] Q: After the scaling issues are solved will this be an economical platform to host backend logic on? How will this compare to running your own server or going through a cloud hosting company in terms of cost and ease of use for light or heavy workloads? Personally, my highest anticipated use case is hosting multiplayer matchmaking and signaling, though I haven\u2019t built such a system yet out of concern for difficulty and cost. A: It's unlikely that Eth2 on its will be used as a backend for heavy workloads, the data throughput is likely just too high. That said, it works really well as a dispute resolution layer so a centralised service can run the backend optimistically and if someone disagrees with the execution, they can contest and have it resolved on Eth2. For lighter use-cases it probably can, but this is more in the context of a dapp. [Carl] Q: I was under the assumption that ETH would just update to the new ETH 2.0 chain, no need to swap coins or anything but will this transition from ETH1 to ETH2 cause a fork in the community similar to ETC Ethereum classic and ETH chain? Does the circulating supply of ETH 2.0 depend on how many people 'evolve' their ETH1 tokens to ETH2 tokens? A: ETH would just update to the new ETH 2.0 chain Unfortunately, it is not quite that simple. Eth2 is such a big upgrade over Eth1 that it is easier to implement as an entirely new chain than to upgrade. See Justin's ELI5 here for more . Does the circulating supply of ETH 2.0 depend on how many people 'evolve' their ETH1 tokens to ETH2 tokens? The large majority of it, yes. Rewards are also issued on the Eth2 chain so that increases the supply there too. Ultimately, the expectation is that all Eth1 ETH will be transferred to Eth2. Q: Do you think its worth laying 6 month/1 year/2 year 'ground rules' for Eth 2.0 chain assuming something unexpectedly goes wrong? A: My concern with doing something like this is its inflexibility. It is basically impossible to cover all the possible cases and even if we could, I'd argue that such an approach is too inflexible to handle the intricacies of exactly how something has failed. Handling it on a case-by-case basis seems like a better solution to me. [Carl] Q: Are there any plans to have the ETH 2.0 chain finalize blocks of the ETH 1.0 chain during Phase 0? For example like proposed with Casper, every 100th block will be validated by PoS. A: The integration between Eth1 and Eth2 is a roadmap orthogonal to phases 1, 2, 3 of Eth2. Are there any plans to have the ETH 2.0 chain finalize blocks of the ETH 1.0 chain during Phase 0? My best guess is this will happen in 2021. See here . [Justin] Q: What happens if you send more ETH to the deposit contract? Like 32.1 or 40? A: Nothing is stopping you from sending >32 Eth to the deposit contract, but you'll only receive rewards on the first 32 Eth, so it's not something I'd really recommend. [Carl] That's fine. Your balance will reflect the deposit, and the balance in excess of 32 ETH can be transferred to another validator (phase 1) or to a shard (phase 2). [Justin] Q: What's the easiest set up to stake let's say 320 ETH? A: A laptop should be capable of handling around 10 validators so you should be able to send 10*32 Eth to the deposit contract and start validating on your 1 machine. [Carl] A laptop should be sufficient. We'll know more in a few months when the numbers for block sizes and gas limits of shard blocks get finalized. [Vitalik] Q: What's your opinion on Harmony one's approach to a high scalability smart contract platform using PoS? I read you're involved in discussions with them, have you helped each other in developing code? A: I read you're involved in discussions with them I've had brief VDF discussions with Harmony. have you helped each other in developing code? Don't think so, at least not yet. What's your opinion on Harmony one's approach to a high scalability smart contract platform using PoS? I had a brief look at their whitepaper which seems to be inspired by Ethereum. So I guess my opinion is that their approach to scalability is great :) [Justin] Q: If Eth 2.0 introduces PoS, are there legal hurdles to be clarified upon? Could the token be considered a security token? A: I'm not aware of any jurisdiction that considers ETH on Eth1 a security, and since ETH on Eth2 is basically the same as ETH on Eth1 (other than the temporary technicality of two separate tokens) then ETH on Eth2 should not be a security. [Justin] Q: I'm planning to run a beacon node + N validators. Do you think this will will be able to be managed by a Raspberry Pi 4? I'm aware that it is being worked out to have ARM64 binaries ready soon, the question is if it seems realistic not to have a computer running at home and instead running something smaller and cleaner environmentally speaking like a Pi4. A: That depends on \"N\". I (personally) fully expect a RPi3 to be able to run at least one validator node, but we'll only know this when clients are closer to delivery. [Carl] Q: What are some smaller things that you guys would like an average r/ethtrader community member could help with? A: Educating yourself enough to feel comfortable to participate as a validator would be fantastic :) [Justin] Q: Is there any clarity on the transition process regarding basic aspects like whether Beacon eth can be sold on exchanges for example, and whether the PoW chain knows of the Beacon eth? Better asked, how do you ensure there is one network when there are two chains? A: whether Beacon eth can be sold on exchanges for example Beacon eth will be sellable on exchanges when transfers are enabled in phase 1. whether the PoW chain knows of the Beacon eth? That will come later, see here . how do you ensure there is one network when there are two chains? The long term plan is to natively integrate Eth1 into Eth2. See here . [Justin] Q: Can you explain somewhat precisely how cross sharding communication would work. As in how does shard node A talk to shard node B without going through some sort of intermediary? If they can do this talking, why can't it be used for eth to talk to say bitcoin. A: The intermediary is the beacon chain, or infrastructure optimistically predicting what will eventually get finalised in the beacon chain. [Justin] Q: How would you objectively judge the level of technological advancement of current eth and current bitcoin as far as the very limited function of sending coins from A to B is concerned? A: Eth1 and Bitcoin are comparable for on-chain payments. [Justin] Q: Presuming you agree price drives security, and presuming you agree all cryptos reside in a very competitive environment, are there any plans to address the increased issuance that the Beacon chain would bring? In addition, are there any plans to meet or maybe even surpass bitcoin's coded reduction of new supply to 2% next year. And related, what would you say to the criticisms that have already been expressed whereby if you can reduce issuance by say 10x, you can increase it too. Or asked in a more open question manner, what do you think of this process through which increases or decreases of issuance are made? A: It's possible Eth2 will cause net-negative issuance. The reason is that ETH gets burned via transaction fees. Pushing code to the beacon chain will also burn ETH. Finality, the penalties also burns ETH. [Justin] Q: Will phase 0 contain any scalability improvements? How many transactions per second will Ethereum be able to handle with Sharding? A: Phase 0 will allow for a light client that can give you hashes of the eth1 chain in a fairly lightweight way (but not too lightweight, you'll need ~200kb per 6 minutes to keep up with the committees, this will go down to 200kb per a few days with phase 1). This could be used to allow eg. light clients inside of browsers to work efficiently. That's a kind of scalability improvement, and an underdiscussed one imo. [Vitalik] Phase 0's purpose is tracking validators' states and producing randomness, asking about its scalability is not really meaningful. Regarding Tx/s, the answer is not really known. As a basic calculation, if each shard has the same throughput as Eth1.x, then we'll have 16 * 1024 = 16,384 Tx/s (assuming no inter-shard Txs). That said, the above numbers are kinda meaningless as Eth2 is designed to be used along with L2 scaling solutions like Rollups and OVM which could yield insanely high throughputs. [Carl] Q: Can you address points 2 - 4 in this tweet ? A: The default idea for clocks in eth2 is https://ethresear.ch/t/network-adjusted-timestamps/4187. There has not been that much work done on writing \"policeman\" software that would detect slashable violations by validators and penalize them, but I am not worried about this. Reasons: Even if no one writes the code, that just means the security model degrades to honest majority, which is not the worst One client implementing the code correctly is sufficient If a client implements the code badly, there's no consensus risk, they could just ship with badly written code that only works half the time and it would catch half the slashable violations. I'll defer to Danny on wire protocol stuff. [Vitalik] Point 2: \"Wire protocol\" => This is an implementation detail that I'm sure the implementers will agree upon soon enough :) The high-level recommendation from the research team is to use libp2p as the networking stack (dicv5 for discovery) and SSZ for serialisation. But this cannot enforced at the consensus layer, and we've already seen alternatives (e.g. clients using Whiteblock for networking, and Prysm is using protobufs in some places). Point 3: \"Clients to slash surround votes\" => Not sure what this means. The spec clearly defines the slashing mechanism for surround votes. See is_slashable_attestation_data. Point 4: \"Decentralized network time protocol\" => Just like Eth1, clocking is an implementation detail. It is to an extent decentralised (e.g. there are alternatives to NTP such as GPS, one can choose his/her NTP servers, one can use local clocks, etc.). It would be nice to have something even more robust but this is research territory\u2014not required for launch of Eth2. [Justin] Q: Why aren't Beacon nodes rewarded? Wouldn't this allow the network to be more decentralized? A: Validators are rewarded. Beacon nodes that are not validators are not rewarded in protocol because the protocol can't tell who's a beacon node vs just pretending to be one (eg. via 100 fake nodes pointing to the same real node). Though non-validator nodes may be able to earn money in eth2 through incentivized light client protocols. Q: In regards to the recent proposal of vitalik to use the bcash chain as a short-term scaling solution until eth 2.0 launches: is eth 2.0 still on track? is there a concrete demand for an interim solution? A: The main motivation for proposing an interim solution (if you don't like bitcoin cash for political reasons, I also recommended ethereum classic, I think it's also a good choice) is to make it easier for the work on building these layer 2s to be able to get off the ground in parallel with finalizing the work on the eth2 layer 1 itself. In general, the ethereum community is large, so doing things in parallel is its advantage. [Vitalik] Q: You do not plan to work on the creation of parachain (eth 2.0.) On Polkadot? I don't think EF will have to drive this. Web3/Parity are on it and I believe consider it to be a top priority. The Shasper (Parity) client is written in substrate to help facilitate this happening. [Danny] Q: Pretty basic but what's a realistic estimate of throughput after every is put together? A: Somewhere between 5000 and 500000 TPS depending on what execution environment and transaction type you're using. [Vitalik] Q: Could you say anything about the adoption of Ethereum Blockchain? Are there plans to create something like a B2B team actively approaching \"qualified\" companys? A: I'd say the Ethereum Foundation's primary focus is the consensus layer (research, development, education, maintenance, etc.), more so than the application layer. [Justin] Data Questions with Justin Drake Q: How much data will there be in Eth2? JD: As the spec currently stands, on average 2.8MB/s across all shards with a \"burst mode\" which is 4x that (i.e. 11.3MB/s). Q: What does this translate into for state size? JD: At the consensus layer block size and state size are basically orthogonal considerations. Consensus-layer state size will always remain very small since we lean heavily on stateless clients. In theory application-layer state (\"L2 state\") can grow up to 2.8MB/s. For execution engines without state rent, you can expect state to grow roughly as fast as Eth1 state grows today. Multiply that by 1024 shards and the situation is possibly not long-term sustainable. This is a significant reason why I personally believe we should progressively launch execution engines (as opposed to allowing anyone to deploy EEs at launch), starting with an EE that has state rent. Q: What role do nodes play (versus validators)? JD: At the consensus layer non-validator nodes don't play any role. At the networking layer they can act as lubricants to relay message. They may also help create blocks for block proposers, i.e. be \"relayers\". Q: Who will run these nodes? JD: Nodes can be run by anyone who wants \"direct\" access to Eth2 (e.g. service providers such as exchanges, etherscan, power users). Relayer nodes may be run by specialised businesses. Q:For someone that needs to run a node (EtherScan), what will the resourcing look like? JD: They will get their data by being nodes and listening on the gossip networks. The bad news is that bandwidth should grow by roughly 1024x to keep track of all shards. But then again, that's not terrible news because a good internet connection (especially server-class) can handle 4 11.2MB/s (the 4 is, say, the gossiping overhead). The good news is that consensus state is minimal (again, stateless clients), which means zero consensus-layer I/O which is currently an Eth1 bottleneck. They can then choose withever EEs and/or dApps it wants to support, i.e. it's opt-in. Q:How do we assume all data is stored and available? JD: For recent blocks we have quite sophisticated infrastructure, including proofs of custody in phase 1 and data availability proofs (possibly phase 2). For historical blocks we rely on the ecosystem to keep them around. Q:What will \"historical blocks\" be needed for. As in, if they were lost forever, what would be messed up? JD: Historical blocks are required to recompute application-layer state, and may also contain application-layer receipts. If they were lost forever (which I don't expect would ever happen) then applications without at least one synced full node may lose user state. Q:Will people congregate on a few shards? JD: Hard to tell. Naive dApp design would suggest that dApps would aggregate into clusters within shard boundaries. We are exploring dApp designs that are somewhat shard-agnostic, i.e. consume data availability from shards as a fungible resource. Q:Quick explanation of cross shard communication and where research is? JD: Cross shard communication is a huge design space, just like \"plasma\" or \"state channels\". At the consensus layer we don't provide much infrastructure beyond crosslinks. I'm expecting significant experimentation in the early days followed by standardisation, somewhat similar to the token transfer design space and the ERC20 standard. One big idea is the concept of \"optimistic crosslink\" which are shared between shards in advance of the real crosslinks, and which with high probability will match the actual crosslinks that get finalised. dApps can use optimistic crosslinks to get super-low cross-shard latency. Q:Why 1024 shards? JD: Because 2048 shards would be stressing the beacon chain and 512 shards would be under-utilising the beacon chain. Resources: Part 1 Part 2","title":"Ethereum 2.0 AMA"},{"location":"other/ethereum-2.0-ama/#ethereum-20-reddit-ama","text":"","title":"Ethereum 2.0 Reddit AMA"},{"location":"other/ethereum-2.0-ama/#part-1","text":"Q: When, as in period of time, do you think Ethereum will be able to solve scalability issues? A: In phase 1 (about 2020 by my estimate) we will have shard data. Those shards, even without an EVM, can be used as the data availability layer for TrueBit (and other alternative execution engines). Phase 2 (about 2021) is when we will have scalable L1 execution. [Justin Drake] Follow up Q: ELI5 execution engines Follow up A: An execution engine is a way to compute state assuming consensus on data. The execution engine for the EVM is \"naive re-execution\". There are more fancy execution engines such as TrueBit and SNARK/STARK-based validity proofs. [Justin Drake] Q: Are economists being consulted to help decide the issuance rate of a full POS system? Stated more broadly, who is helping/advising the ETH 2.0 team on the effects certain issuance decisions will have on the network and community (both in the short and long term)? A: Personally at this point the feedback I'm most interested in is actually feedback from potential stakers. The main question basically being, are there any other tweaks we can make to the economics that, given a fixed level of reward, will (i) encourage more people to validate, and (ii) encourage many small solo validators or smaller pools, as opposed to a few large pools. [Vitalik Buterin] Q: Considering that Yoichi is not working anymore in the Foundation, what are your plans on formal verification of ETH 2.0 specs? A: I'd say that formal verification of the spec will make sense when the spec is more mature and stable, maybe mid 2019. Anyone interested in doing formal verification of the ETH 2.0 specs in a few months, please send a grant proposal. [Justin Drake] Q: What is the best response to a developer who is hesitant about building on ethereum today, given that it will be \"replaced\" by ETH 2.0 over the next few years? A: I expect that once the state and execution model for Serenity solidifies (see https://ethresear.ch/t/a-minimal-state-execution-proposal/4445 for one minimal proposal) we'll start working with the developer community on modifications to high-level languages (Solidity, Vyper, etc) and best practices. Hopefully at that point it will become clearer how to build applications in such a way that they could be redeployed as-is on the 2.0 chain. At least that's my hope. [Vitalik Buterin] A2: Building on Ethereum 1.0 today is great for learning and prototyping. It's also great for assembling a culturally-aligned team consistent with the philosophy of the Ethereum community (which may be different than the philosophy of the Bitcoin, Ripple, Bitcoin Cash, EOS, Tether, etc. communities). [Justin Drake] Q: Can we run multiple validator clients on a single machine assuming we've got multiple 32 Eth deposits? A: Yep! There's nothing preventing you from using one machine to run multiple validators. The only hard limit you'll face is that the number of shards you are assigned to validate increases linearly with the number of validator slots you have, so if you have thousands of ETH a laptop will not suffice and you'll need something more powerful. [Vitalik Buterin] A2: Short answer: Yes. Long answer: You will need to register a validator for every 32 ETH. In phase 0 (just the beacon chain, no shards) you can likely handle thousands of validators on a single machine. After phase 1 the number of validators that can be operated on a single machine depends on how resourceful your machine is. A mainstream laptop should comfortably handle one validator, and likely handle 2-10 validators at max capacity. The computational resources scales linearly with the number of validators until you reach ~1,000 validators. At that point there are scalability advantages in being a super-node, i.e. a full node for every shard. [Justin Drake] Follow up Q: How much importance are the devs placing on being able to run setups at home wrt keeping Ethereum decentralised and being able to move ETH in and out of staking pools? Follow up A: It's definitely a goal I care about. The alternative to staking at home is staking on AWS or staking through a pool, and both are risks for decentralization. Concrete ways we try to be friendly to staking at home: Relatively forgiving penalties for being offline, so you earn a net profit as long as you're online more than ~50-67% of the time Keeping the cost of validating the beacon chain low The anti-correlation penalty scheme, which more heavily penalizes validators that misbehave at the same time as many other validators (which is more likely if you're on the same pool or VPS or whatever). [Vitalik Buterin] Q: How can I help / get involved? I fell in love with Ethereum not too long ago. I\u2019ve been reading Zcash\u2019s BLS12-381 Elliptic Curves and for the past few days these are all thats been on my mind. I love this project now and just found ethresear.ch. I really wanna help in any way possible! Thanks again for all your hard work. I can\u2019t stop reading these posts. A: For researchers a good way to contribute and gain visibility is to post quality content on ethresear.ch. If you are a developer consider joining one of the numerous ETH2.0 implementation teams. [Justin Drake] A2: Hi! The best way to get involved is to find something that captures your interest and to dig in. Because Ethereum is a radically open platform, the research and development is also generally very open and very accessible. Keep reading. Follow your interests down all the little paths and begin to build a mental model of the ecosystem. https://ethresear.ch/ is a great place to follow and begin to contribute to research discussions. https://gitter.im/ethereum/sharding is where a lot of the day to day conversation about Serenity is happening (developers chatting from various projects) https://github.com/ethereum/eth2.0-specs Read the spec! but not only read it, be an active reader. If you find an error, typo, bug, etc, submit a PR. Also check out the issues and PRs in the spec repo. We are constantly discussing changes, fixes, updates and anyone can contribute. If you are a dev, open up one of the eth2.0 client projects and pick a \"good first issue\". These allow you to touch the codebase, contribute a bit, get the lay of the land, and provide the foundation to tackle bigger issues from there. ^ Those are Serenity specific suggestions, but beyond that, just find projects you are interested in and begin contributing. There is so much to do and project leads are always excited to have helping hands. This stuff doesn't build itself :) [Danny Ryan] A3: If you're interested in Cryptography especially, you can also check out another BLS - Boneh\u2013Lynn\u2013Shacham signature spec for Serenity and help to review it: https://github.com/ethereum/eth2.0-specs/blob/master/specs/bls_signature.md :) For research, as Justin and Danny said, ethresear.ch is the sanctuary. And first, you can take a look the various topics on Ethereum Sharding Research Compendium to see which area you're most interested in. For implementation, there are multiple topics: Consensus layer - implement the spec! P2P layer design and implementation - see https://github.com/ethresearch/p2p [Hsiao-Wei Wang] Q: From my limited understanding of Eth 2.0 specs, I gather that shards will be mostly independent, with cross-shard communication being slow and requiring multiple steps. As a consequence, smart contracts will only be able to interact lively with assets from within their deployed shard, and will have to go through slow cross-shard communication to interact with assets outside. Given this topology, are we not aiming to improve scalability at the cost of sacrificing user experience (slow response of smart contracts in non-obvious ways)? For instance if I want to play cryptokitties, I will need to make sure to interact with the contract that is deployed on the shard where my eth address resides, and not with any of the other contracts that reside on other shards. Then, if I want to interact with the kitties of someone else who resides on a different shard, my experience will be much slower and cumbersome than if that person would reside in my shard (or at least this is how I understand the system will work, please correct me if I am wrong). Given that the end goal is to scale to a very large number of shards, then the likelihood to have to go cross-shard increases exponentially with time, and thus the user experience gets progressively worse and worse. A: Cross-shard communication will definitely be slow at base layer, however there are higher-level mechanisms that can be used to implement fast cross-shard communication on top of a base layer that allows any cross-shard communication at all even if slow. See https://ethresear.ch/t/a-layer-2-computing-model-using-optimistic-state-roots/4481 for an example of how this could be done. In general, I expect a lot of the long-run innovation in improving the smart contract development experience to happen at higher levels in this way; I write about why this is a good idea at length here: https://vitalik.ca/general/2018/08/26/layer_1.html [Vitalik Buterin] Q: What happens to all the contracts currently running? A: It is somewhat speculative at this point. My best guess is that Ethereum 1.0 contracts will stay running as-is for a long time (say, 10+ years) without any migration to Ethereum 2.0. This can be made sustainable by doing two things: Lower the inflation (e.g. reduce it by 20x, bringing the PoW security to a blockchain such as Ethereum Classic). Completely removing inflation\u2014relying on transaction fees only\u2014would also be possible (see below for security argument). Use Ethereum 2.0 to regularly finalise Ethereum 1.0, counter-balancing the reduced security and preventing long-range 51% attacks. This requires Ethereum 1.0 nodes to be beacon chain light clients, which should take years to happen. If the community gets tired of Ethereum 1.0 a bomb mechanism (e.g. difficulty bomb, issuance bomb, gas bomb, etc.) can gracefully kill it. Another possibility is for Ethereum 1.0 to become a contract on Ethereum 2.0. I don't see this as a practical solution, but I'm open to being convinced otherwise :) [Justin Drake] A follow up: I'll add that if any specific user wants to migrate their application to the 2.0 chain, then they should be able to just take their existing high-level code (Solidity or Vyper), make relatively few changes and redeploy. The main difference between the eth1 and eth2 systems that users will need to worry about is likely to be rent (or equivalents like gas-payment-extended bounded TTLs). [Vitalik Buterin] Q: Is there a worry that shards will become \u201cgentrified\u201d until full shard interoperability? Basically, will one shard capture all the defi apps because they can't directly communicate with each other on separate shards? A: I would say if that happens, that will create a large incentive for someone to create a defi dapp that can interact with the other defi dapps through asynchronous cross-shard transactions and launch it on a cheaper shard. [Vitalik Buterin] A2: At the start in times of low usage, the economic load-balancing might result in over and under utilized shards. Overtime as usage increases, I expect the economic benefits of deploying and interacting on particular shards will become more tangible and result in a more economically rational distribution across shards. Observing the emergent behavior is going to be super fascinating :) [Danny Ryan] Q: Can we run the same validator on multiple machines - in order to avoid penalties if one machine was compromised ? If yes - what happens when we run a validator on 3 machines, one goes temporary offline, one is compromised, one is OK? A: For small amounts of ETH I'd recommend just running on one machine; unless many other validators get penalized at the same time as you, the penalties are not too large. If you do want to decentralize your validator, then we have recently made progress toward validation being more multi-party-computation friendly, which would allow you to run a validator as a 2-of-3. In that case, as long as two of the three sub-nodes are functioning correctly you'll be fine. [Vitalik Buterin] A2: Yes! Ethereum 2.0 is friendly to n-of-m schemes thanks to BLS signatures. For example, with a 2-of-3 scheme you have can three computers, each with a share of the validator private key, such that two need to be online at any given time. This improves security as well, because an attacker now needs to compromise two of the BLS key shares. [Justin Drake] Q: Is there tech from any competitors such as Dfinity (or any others) that is worth adopting into Ethereum 2.0, or is the work all other dapp/smart contract platforms doing not relevant/good enough for ETH 2.0? A: Part of the job of the research team is to absorb good ideas from research papers and other blockchain projects. I keep a keen eye on technically interesting projects such as Dfinity, Coda, Zcash, etc. Competitors definitely also have good ideas, and learning from each other is part of the game :) [Justin Drake] Q: Do we need to run a full node to also earn from network fees or would the validator client handle this? A: Depends what you mean by \"full node\". The design of the sharding system is such that no one needs to run a node that verifies all of the data of all of the shards. A validator client validates the beacon chain and the specific shards that you get assigned to validate, and that is sufficient to earn network fees. [Vitalik Buterin] A2: The validator client should abstract the necessary tasks to get revenue from the different revenue streams. (This includes being a full node for the beacon chain and one shard at any given time, but that's a technicality you don't have to worry about.) [Justin Drake] Q: Very interested to hear about the efforts currently underway at the EF and strategic partners/OEMs to design and manufacture the VDF hardware. It's also the thing that scares me the most about the proposed design;i can see how they would really increase the security of the random sample selection process in addition to RANDAO but manufacturing hw is a costly, difficult endeavor often subject to unforeseen issues and delays. On that note is an economic incentive structure for running a VDF node being considered? A: Very interested to hear about the efforts currently underway at the EF and strategic partners/OEMs to design and manufacture the VDF hardware. We're working our way with various partners, including Synopsys, AWS, TSMC, GUC, etc. VDF announcements to come in February :) manufacturing hw is a costly, difficult endeavor often subject to unforeseen issues and delays. Right. The good news is that Ethereum 2.0 can launch just fine without VDFs, so we're not betting Ethereum 2.0 on the success of VDFs. The current plan is to have VDF hardware ready in 2020, but 2021 would also be acceptable. From a financial perspective, we may share the total costs (estimated at $15m) with Filecoin and other projects interested in VDFs. We are already sharing costs with Filecoin on viability studies. On that note is an economic incentive structure for running a VDF node being considered? Short answer: yes, of course :) Long answer: the ethresear.ch post provides a bit of clarity on that. highly specialized hw always connected providing a crucial function to the network it would be a prime target for potential adversaries to disrupt or compromise Right. The good news is that we only need one VDF evaluator to be online for normal operation, and even if everyone goes down it's not a huge deal. The main negative consequence is that dApps relying on unbiasable randomness will have to wait longer than expected for the random numbers to arrive. [Justin Drake] Q: zk-STARKs are powerful and I have been reading Eli\u2019s and the others paper on it. Are recursive zk-STARKs ever doable? I know Coda is planning on using Recursive zk-SNARKs to shrink chains but the lack of transparency is worrying. A: I don't see what fundamentally prevents them from happening. Recursive [any zero knowledge proof schemme] just means using the ZKP mechanism to make a ZKP of the ZKP's own verification procedure. The main challenge in practice is just that these verification procedures themselves have a high cost (eg. there's 50-500 kB worth of hashes in a STARK to verify), and this cost multiplied by the ZKP's overhead is quite a big number. ZK SNARK verification is in contrast much more \"concise\". [Vitalik Buterin] A2: Are recursive zk-STARKs ever doable? In theory yes, but as I understand recursive zk-STARKs won't make sense from a performance standpoint for most applications, at least in the medium term. [Justin Drake] Q: What\u2019s the final scalability limit of Ethereum post Serenity? Gas limits per block? Blocks per second? A: The current design has a fixed number of shards, at most one block per 6-second slot, and fixed block sizes. This means that the data bandwidth is capped. The gas limit on the other hand will likely be floating, just like Ethereum 1.0. [Justin Drake] A follow up: Though in the current phase 1 spec that's sitting around in draft mode the block size is so far fixed to 16 kB, as keeping it fixed makes the code for proofs of custody, data availability proofs, etc much simpler. If we want to bump up capacity later increasing the shard count may well be the simpler way to do it. [Vitalik Buterin] Q: Why should anyone move to the Beacon Chain? How exactly do you envision the move to happen? A: Why should anyone move to the beacon chain. Specifically, only validator balances exist in the Beacon Chain. User balances and state exist in the shard chains. Validators will move to the beacon chain to seek profit by providing security and resources to network. Note there is a new proposal to have the beacon chain finalize the PoW chain during the transition period so the validators would be able to provide security both to the new shards and the existing chain. Users will move to the shard chains to participate in the new scalable, sharded landscape. We envision economic activity to begin to move over as the system stabilizes and begins to show clear economic benefits to the users. It is important to note that a user could choose to not move until the eth1.0 state is rolled into a shard. How exactly do you envision the move to happen? At first, this will just be a single directional deposit for validators only to begin validation. Once the state execution layer is in the new 1024 shards, users will be able to transfer eth directly to the shards from the PoW chain. In the long term, the plan is to roll the PoW state into one of the shards. The current most favorable strategy from our perspective is to fork the PoW state root into a contract along with an EVM interpreter. Users could then execute txs on the existing eth1.0 state by call the contract along with the merkle witnesses of the state they need to access. This option is nice because it allows us to cleanly deprecate eth1.0 support in the long term. [Danny Ryan] A2: Moving to the beacon chain is done by sending ETH to a so-called \"deposit contract\" on Ethereum 1.0. People would send ETH to the beacon chain to become an Ethereum 2.0 validator and gain financial rewards. [Justin Drake] Q: How much funds does Ethereum foundation have and are these enough for finishing Eth 2.0? A: The EF has tens of millions of dollars in fiat, and a bunch of ETH. More than enough to finish ETH 2.0 :) [Justin Drake] Q: How is the status of a possibly fixed eth supply at some point in the future? Do you think it's likely? A: I don't know about fixed ETH supply, but we may get to a point of decreasing ETH supply. Indeed, we are looking into transaction fee schemes that burn ETH, and burnt ETH may outweigh minted ETH. [Justin Drake] Q: Have you looked into hyraxZK. They are zk-SNARKs that do not require a trusted setup. Any thoughts on them being used in the future as the sizes are still very small. The only thing is they wouldnt be Quantum-Resistant but the proof size won\u2019t be similar to a zk-STARK. I wonder what they can be used for offchain as well, especially in networking by producing a zk proof of incoming packets that acts as Natural DDOS Protection. Just some thoughts. A: Have not looked into Hyrax specifically, but I am totally not surprised that things like it exist. I'm definitely very happy with the progress the general-purpose ZKP space has accomplished in the last few years; the very concept of general-purpose ZKP is pretty godlike compared to what I imagined was possible with cryptography as a child. Our general instinct is to find ways to make it possible to get the benefits of many different ZKP schemes with different tradeoffs in ethereum. The simplest way to do this would be to encourage the development of such tech as application-layer or network-layer addons so that it we do not need an agreement at consensus layer about a single ZKP scheme that everyone uses. [Vitalik Buterin] Q: V said that there are no fundamental problems left to solve. Is this true for only phase 0? If so, how confident are you about the other phases? A: Personally I am confident in all of the current fundamental technologies for all the phases outlined so far (Casper FFG and CBC, sharding, erasure coded data availability proofs, proofs of custody, receipt-based async transactions, layer 2 for acceleration, abstraction, rent, \"stateless client\" verification). There is definitely still a lot of room around the edges for optimization though. [Vitalik Buterin] Q: Why was Hybrid Casper ditched when it looks like the Beacon Chain kind of has nothing to do with the PoW chain? or Why not re-instate Hybrid Casper considering its testing is/was finalized? A: Honestly hybrid Casper is a bit of a dead end. Actually implementing/testing it across all the clients would require setting up a lot of infrastructure that we would then need to throw away. The design was highly inefficient because of its \"implemented-in-EVM\" nature, and it turned out that we could not really benefit from the ease-of-implementability of being done in EVM because we would need to write a lot of special-purpose code to make verification of signatures parallelizable. So we chose the route that would be somewhat more painful in the short term, but significantly lower headache to actually get to a stable sharded system overall. [Vitalik Buterin] A2: I wrote up some notes on the deprecation of EIP 1011 here https://notes.ethereum.org/s/rJDrKoBOQ [Danny Ryan] Q: 1. Since it is a one way transfer to the beacon chain, my understanding is that there will be two tokens: ETH1.0 and ETH2.0. Right? Will The beacon chain allow tokens to be send. I.e. will exchanges be able to list the token before phase 2? My feeling is that from a risk/reward perspective, stakers will expect returns more in the area of emerging market debt (+20%) esp. in the beginning. But all discussion I saw was ~2%. Any comments on this? Gutfeeling: how much \"unsolved computer science problems\" for phase 1, 2 and 3 roughly? I understood for phase zero it has arrived at 0. Will we consider some kind of tax baked into the system to ensure sustainability of core developments and infrastructure? A: Will The beacon chain allow tokens to be send. I.e. will exchanges be able to list the token before phase 2? ETH in the beacon chain would not be transferable (anywhere!) until phase 2. That will make exchanges harder, although we may see a futures' market. My guess is that we will see 1 ETH ~ 1 BETH at pretty much all times :) [Justin Drake] My feeling is that from a risk/reward perspective, stakers will expect returns more in the area of emerging market debt (+20%) esp. in the beginning. But all discussion I saw was ~2%. Any comments on this? The reward/penalty constants are certainly not yet finalized and could use more community debate and input. That said, the rate does scale depending on the number of validators participating. If the fair market rate is really 20%, then a lower number of validators will show up. If the fair rate is 2%, then a ton of validators will show up. The economics of staking will find the natural equilibrium. That said the main risk here is if we set the target rate too low and the equilibrium lands at a low participation rate (and thus low security of the network). Although ~2% (@ 10M eth validating) is not set in stone, the idea for a low rate is that a huge amount of ETH is already being held as a speculative asset. Any marginal rate of return on top of this already intended long-term hodling is a gain for the hodler. [Danny Ryan] Q: How would you (and or service providers) ensure the eth on the Beacon Chain is the same as that on the PoW chain and vice versa? A: Arbitrage is always possible in one direction by buying 1 BETH for 1 ETH. A key design goal of Ethereum 2.0 is full fungibility for ETH tokens between the Ethereum 1.0 chain, the beacon chain, and the shards. Two-way transfers between the beacon chain and the shards, as well as between shards, should come in phase 2. [Justin Drake] Follow up point: If you wait until phase 2 for two-way flow, you privilege the very few stakers able and willing to wait an undetermined number of years for access to their money. This will be great for those few (probably north of 25% interest rates!) but not very great for security. Follow up A: y ou privilege the very few stakers able and willing to wait an undetermined number of years for access to their money The ultimate loyalty test :) probably north of 25% interest rates!) but not very great for security. We do have a minimum amount at stake to launch phase 0, around 214 * 32 ETH = 524,288 ETH. So we're effectively capping the interest rate (will be less than 25%) and setting a minimum security level. [Justin Drake] Q: For how long is the 32eth locked up when running a validator client? What happens if the machine I'm using gets destroyed or stolen during the lock up period? Can you switch machines? A: For how long is the 32eth locked up when running a validator client? At least as long as you are a validator. Withdrawal times should be a few days/weeks/months depending on how many other validators are trying to withdraw. What happens if the machine I'm using gets destroyed or stolen during the lock up period? Can you switch machines? You can switch machines. You need a copy of your private keys in case your machine gets destroyed or stolen. Another thing is the withdrawal key used for withdrawals only. Keep that one in cold storage ideally. [Justin Drake] Q: Contributing to Ethereum 2.0? Are there any projects which are some sort of \"under water\", like only few people working on it. A: I feel at this point there are enough implementation teams, at least compared to some of the other issues that are underaddressed. Off the top of my head: Solidity being compile-able to E-WASM Vyper being compile-able to E-WASM Thinking about research problems related to phase 2, particularly around account abstraction, asynchronous contract programming models, etc Privacy, eg. see https://ethereum-magicians.org/t/meta-we-should-value-privacy-more/2475 Improving the state of decentralized messaging and file storage [Vitalik Buterin] Follow up A: A few more things good to work on: liibp2p implementations in various languages Doing security reviews of the spec prototyping account and state execution in eWASM a lot of work in cross client testing coming up in the next couple of months [Danny Ryan] Q: We have experienced consecutive delays with Constantinople due to bugs found late in the process on a comparatively low risk / simple upgrade. What work is being done to mitigate this on Phase 0 and 1 given how much more complex these implementations will be? (I.e. What testing, third party audits, other considerations are being taken to ensure seamless implementation/integration? A: As the phase 0 spec is moving into a more stable place, we are beginning to look into explicitly bringing in third party audits, academics, and formal analysis. In addition to this, we are currently laying down the foundations of cross client testing and fuzzing akin to eth1.0. You're correct in that the consensus/system layer of eth2.0 is much more complex than the single PoW chain so we are constantly trying to reduce complexity and simplify. This is a major engineering effort that will require many parties other than our research team to plan, build, test, execute, and maintain. I think it is a major strength that so many independent teams with a diverse set of expertise have stepped up to contribute. Note, one of the design goals in the spec readme -- \"to minimize complexity, even at the cost of some losses in efficiency\" We're excited to see new efforts like the \"Ethereum Cat Herders\" and scheduled release cycles emerging in 1.0 and plan to incorporate any best practices and efforts into the 2.0 process. DePM (decentralized project management) is hard, but we continue to learn and continue to get better. [Danny Ryan] Q: How difficult will it be for 1.0 contracts to work on Serenity? Should developers expect to rewrite their contracts to account for state rent and cross-shard communication? A: Solidity can already compile to WASM and I believe it is in Vyper's roadmap to do so as well. These naive compilations might be inefficient (e.g. keeping 256 bit types in the 64bit wasm machine) so some amount of rewrite or utilization of optimizers might be called for. Beyond that, there are some unknowns that might change the approach to certain contract programming modesl. For example, storage fees might call for a new ERC20 contract design in which user balances are stored in separate child contracts so that users become responsible for managing their own storage fees related to their coins. [Danny Ryan] Q: What is the latest view on how the \"upgrade\" to Ethereum 2.0 will happen? Can you take us through the different phases/hardforks that will in the end enable the full PoS/sharded/WASM blockchain, and what each will enable? A: Eth2.0 is broadly divided into three phases -- Phase 0, 1, and 2. Phase 0 - The Beacon Chain This phase is the launch of the core system level functionality of the new PoS chain (the beacon chain). Validators can submit deposits, join the validator set, and build/finalize the core chain. At this point the chain will have Casper finality, an RNG, shuffling into the various validator roles, and simulate crosslinking in the (currently) non-existent shard chains. Phase 1 - Shard Chains (data) This phase is the launch of the shard chains, but only as a blockchain of data. (Execution and state comes in phase 2). At this point, validators will additionally build these data chains and finalize the each shard back into the beacon chain via \"crosslinks\" and attest the availability of the data. These crosslinks were already being created in Phase 0, but had a stub for the shard hash being finalized. In this phase, that hash becomes \"unstubbed\". Shard data chains begin to have some utility for applications that need a high availability data store. Phase 2 - Shard Chains (state and execution) This phase is the launch of state and execution of state (eWASM) on the shard chains. This is when users and applications will begin to migrate to Serenity and use it to it's full potential. Cross shard txs will be available at this point, and users can begin developing any number of \"layer 2\" execution engines on top. The above (especially phase 2) might be divided into sub-forks, and there will be a fork during/after phase 2 to bring in the eth1.0 state/evm into a contract. [Danny Ryan] Q: I'm quoting James' article: \"This means there will be little reason to migrate smart contract code or users until Phase 4 is released, potentially in the mid-2020s\". Does this mean, ETH2.0 wont be usable before 2025? \"ETH2.0 designers do not know what the cross-shard communication system will look like.\" If you're so unsure about the features of ETH2.0, why is it being developed at all? What will be the advantages in daily use compared to EHT1.X? Why should anyone wait till \"the mid-2020s\" to use ETH2.0? A: 2025 sounds... unlikely! I publicly made the prediction (since July 2018) that phases 0, 1, 2 will come in 2019, 2020, 2021 respectively. Scaling from shards will come in phase 1 and phase 2. On the topic of timelines, for phase 0 specifically, ideally the spec should be close to final in Q1, cross-client testnets in Q2, security audits in Q3, mainnet launch in Q4. As a rule of thumb, launching in December is hard because of the holiday season. So November 2019 and January 2020 would be my two best guesses for phase 0. [Justin Drake] A2: I answered a related question here https://www.reddit.com/r/ethereum/comments/ajc9ip/ama_we_are_the_eth_20_research_team/eeufhqb [Danny Ryan] Q: https://hackernoon.com/what-to-expect-when-eths-expecting-80cb4951afcd From the article above, this is what I understand as the timeline of Ethereum 2.0: Phase 0 will be available in year 2020 Phase 1 will be available in 2022 Phase 2 will be available in 2023/24 Given the above timeline, is it fair to say that DAPP's have to wait at least 4 years before they can run their smart contracts on top of Ethereum 2.0? A: Hi! That article is written by an independent engineer that has been following development so it is not necessarily our 1-to-1 opinion. That said, I'm only seeing the following in the article -- \"Which is to say, while ETH2.0 may launch this year, don\u2019t expect ETH2.0 to support asset transfer or smart contracts until at least 2020.\" I agree that assets and smart contracts won't be available in eth2.0 in 2019. At the latest, I expect phase 2 to launch in 2021, but we are building a complex system and can't say for sure what unexpected challenges might arise between now and then. Waiting until 2023/24 is entirely out of the question for phase 2 imo. [Danny Ryan] Q: With eWASM will we be able to write contracts in Rust and/or any language that compiles to WASM in addition to Solidity? Where can one find out more about that and/or potentially help out? Thanks :) A: Yes you will be able to write contracts in any language that compiles to WASM :) I expect specific toolkits/frameworks to spring up in the languages people are particularly interested in (e.g. Rust, go, typescript, etc) to aid in writing contracts in these languages. https://github.com/ewasm/design is a great place to get started. The eWASM team has compiled a ton of info here to understand the project from a high level. https://gitter.im/ewasm/Lobby The eWASM team and broader community congregate in this gitter room and I'm sure would be willing to provide more guidance and answer any questions you have. [Danny Ryan] Q: Hi guys, Would you like to implement an optional decentralized identity layer in the future? like an option to use DID's or something. so the user can use zero knowledge proofs for Dapps that requires some proof of credentials of the user. Greetz A: Decentralized identity systems are definitely very interesting, but imo out-of-scope for blockchain base layers. The good news is that it's a Turing-complete platform, so anyone can build one on top of ethereum (1.0 or 2.0), and yes that are teams working on different approaches to it already. [Vitalik Buterin] Q: What is the one thing on eth 2.0 dev that keeps you up at night? A: In my mind the Ethereum 2.0 abstract design is a remarkably elegant/slick/simple design. I worry that we botch the spec with poor taste in some of the implementation details, or bugs that we miss. [Justin Drake] Q: How will the Eth1.0/PoW chain eventually be migrated over? A: See the bottom of this post https://www.reddit.com/r/ethereum/comments/ajc9ip/ama_we_are_the_eth_20_research_team/eeucd4f tldr, fork into a stateless contract on a shard [Danny Ryan] A2: See https://www.reddit.com/r/ethereum/comments/ajc9ip/ama_we_are_the_eth_20_research_team/eeub9sp/ [Justin Drake] Q: What are the current incentives for a person to run their own beacon node? A: It is a similar set of incentives as why you would run an eth1.0 node -- mining, run applications (block explorer, wallet services, dapp portal, etc), hobbyists wanting direct connection to the network, etc. If you are a validator, you will receive rewards for operating a node and signing consensus messages. If you run some sort of application, it can be beneficial to run a beacon chain to directly sync the shards you need. You also might serve light clients and applications as a business. I fully expect some some entities to experiment with this model. If you are a hobbyist, you might just like running the protocol directly for self-sovereignty :) [Danny Ryan] A2: Financial rewards through ETH inflation. I think Eric Conner has a spreadsheet somewhere. See https://twitter.com/econoar/status/1070713152864583682 for example here\u2014numbers presented here likely on the low side. [Justin Drake] Q: How do the researchers and developers feel about the complexity of ETH 2.0? A: We're definitely trying hard to bring the complexity down! Examples of complexity decreases that we've made in the last ~3 months include: Switching FFG from the \"per-block finalization\" model to a simpler epoch-based model Moving shard committee calculation outside the state Replacing the RANDAO hash onion construction with a simpler BLS construction (and same with the hash onion for proofs of custody) Storing validator state change slots in the validator record, making each validator's state transition process much more understandable Making shard blocks fixed size rather than variable size (which allows removing a lot of boilerplate for handling transitions) That said we recognize that there's still a way to go, and many features of eth2 don't feel neat and clean the way eg. Nakamoto PoW does. I personally hope a medium-term switch to Casper CBC (see https://vitalik.ca/general/2018/12/05/cbc_casper.html ) can mitigate some of that. [Vitalik Buterin] Q: Is there any work being done on reducing the size of the blockchain as it grows? A: You mean the current chain or the 2.0 chain? Since this AMA is primarily about on the 2.0 chain I'll focus on that. The beacon chain state size is bounded, and there are no objects that hang around forever; even validator records disappear once either their balance drops too low or the validators exit voluntarily and then the withdrawal and exit waiting periods pass. On the shard chains, we're looking at ongoing storage maintenance fees for every byte of storage, \"hibernating\" accounts that do not pay up (at which point their users are responsible for storing and maintaining the data needed to revive those accounts if they need them). [Vitalik Buterin] A2: If you are talking about the Ethereum 1.0 chain size there are a number of workgroups in place and some of them deal with decreasing the chain state or slowing down chain state growth. See: https://ethereum-magicians.org/t/meta-ring-to-discuss-and-coordinate-all-ethereum-1x-efforts/2048 https://ethereum-magicians.org/t/ethereum-1-dot-x-a-half-baked-roadmap-for-mainnet-improvements/1995 https://ethereum-magicians.org/t/state-rent-proposal-version-2-rushed/2494 [Hudson Jameson] Q: Inter-shard transactions - how do downstream shards protect themselves against kiting exploits (A->B B->C C->D where the transfer A->B is later challenged)?? I can imagine kiting tumblers that might make this a computationally intractable challenge. A: There isn't really a concept of \"challenging transfers\" in the current spec, and if you mean plain old fraud proofs then the answer is that if a block that was confirmed into a history turns out to be invalid then the entire history from that point on is invalid and should get discarded. [Vitalik Buterin] Q: If I deploy a contract in ETH 2.0 will it randomly be assigned to a shard? A: No. You specify the shard you want. You'll chose based on proximity to contracts of interest, and gas prices. (Each shard will have a separate gas market.) [Justin Drake] A follow-up: Though initial choice is not necessarily irreversible; contracts could be designed to be yanked ( https://ethresear.ch/t/cross-shard-contract-yanking/1450 ) from one shard to another, and I expect a lot of applications will take advantage of this feature. Q: Will there be a software implementation of VDF for those who are unable to obtain the ASIC? Also, will participants in the RANDAO/VDF mix earn rewards in a similar fashion to validators (if at all)? A: Will there be a software implementation of VDF for those who are unable to obtain the ASIC? A software implementation of the VDF would likely be useless for production. The current estimate is that a CPU implementation would be 1,000 to 10,000 times slower than the ASIC. A software implementation would be useful for testing though. will participants in the RANDAO/VDF mix earn rewards in a similar fashion to validators (if at all)? There will be a small incentive for validators to also be VDF evaluators. Other than that we're mostly drawing from external incentives (e.g. as a large ETH holder you have an incentive that Ethereum stays healthy). The good news is that we only need one VDF evaluator to do its job. There will be thousands of VDF rigs given for free to the community. [Justin Drake] Q: Do Quantum Computers pose a permanent threat to ownerless legacy addresses with significant funds and can they cause collisions with old contracts? A: One of the features of Ethereum 2.0 is \"abstraction\", which means that users can specify whatever signature scheme they want. I expect quantum-secure signature schemes to gradually become more popular. Burn addresses can easily be made quantum-secure. Do Quantum Computers pose a permanent threat to ownerless legacy addresses with significant funds Yes, definitely a threat. Ownerless legacy address could be a systemic risk for blockchains such as Ethereum and Bitcoin. Would be interesting to guestimate how much ETH is at risk. Q: ERC20/721 standards' design sucks. Is there any idea or plan to convert current tokens to ERC-1155 like, efficient format? (Code isn't Law. Seriously.) A: I'm hoping that Ethereum 2.0 standards (such as token standards) can learn from the mistakes of Ethereum 1.0 and evolve. Starting from scratch is a unique opportunity in Ethereum's lifetime. [Justin Drake] A follow-up: Agree! There's a lot from ERC20 that I dislike, the main two things being: It being a pull system vs a push system, requiring the whole approve/transferFrom mess to use tokens to pay for things in smart contracts Handling of ETH being so different from handling of tokens Definitely would like to see both issues resolved in 2.0. The other big things I want to \"get right this time\" is (i) multisig wallets and (ii) not having the \"ether used to pay for gas to withdraw funds from a mixer contract being a deanonymization vector\" issue that makes privacy hard at the moment. Q: How soon will staking pools be live when Ethereum staking goes live? A: At the consensus layer we are trying hard to be friendly to decentralised staking pools. Hopefully we will see those soon after the launch of phase 0. The research and implementation work that Dfinity is doing regarding BLS Distributed Key Generation (DKG) will likely help decentralised pools. Centralised staking pools\u2014unlike centralised mining pools\u2014are somewhat awkward because you have to trust the operator to behave properly with your funds. [Justin Drake] Q: If we want to bring our smart contracts to a new chain, could we pre-determine the corresponding starting/ending hex values for the old smart contracts? Kind of reminds me of CREATE2... A: Yes, Eth2.0 will have a CREATE2 equivalent for deploying contracts. As for existing contracts, the entire eth1.0 state will be rolled into a contract on a shard and these existing contracts will be callable via calling into this 1.0 contract targeting the existing contract address. [Danny Ryan] Q: Are there any courses or subjects in uni that one should take to help in becoming a researcher? A: I'd say you need to be a good self-learner. Math, cryptography, computer science, programming, economics, networking are all relevant. [Justin Drake] Q: Of proposed ways to tackle state rent problem, which one is your favorite? What do you think about resulting complexity from user point of view? A: As far as base protocol goes, either option here: https://ethresear.ch/t/a-minimal-state-execution-proposal/4445 The complexity is actually not so much in the rent itself, it's in how it changes the developer experience. The general approach is that application storage will need to be more \"modular\" and explicitly broken down into chunks associated with specific users, possibly with a fixed amount of \"global\" storage, plus some short-term storage not assigned to any user that goes away after some fixed amount of time, eg. 6 months. [Vitalik Buterin] Q: Question for Justin Drake and other VDF researchers: Would using Chainlink and TEEs (Intel SGX) be a viable method of generating secure randomness for the VDF function of Eth 2.0? Could this be used in lieu of specialized hardware? If so, I imagine this could be a substantial time and cost saving measure in the quest for Serenity. A: TEEs can be used to generate randomness using delay. Unfortunately TEEs is trusted hardware. We need a trustless solution :) [Justin Drake] A follow-up: Though I would add that trusted hardware could be a great thing for individual validators to use to increase their security. [Vitalik Buterin] Q: What computer science problems still need to be solved prior to the release of Phase 1? A: For phase 0 we need locally-computable shuffles. For phase 1 we want a custody scheme that is friendly to decentralised pools. Please message me if that sounds like your cup of tea :) [Justin Drake] Q: What happens to the beacon chain in the event of a controversial hardfork on the Eth 1.0 chain? Will two beacon chains form? If not, what mechanism will the beacon chain use to determine which Eth 1.0 chain is the main chain? How will this affect the transition of the Eth 1.0 chain onto a Eth 2.0 shard? What safeguards are in place to ensure that malicious participants do not create unnecessary volatility between ETH & BETH during the year long transition from phase 0 to phase 2? It is my view that this trading pair must remain stable for a successful transition to take place. A: If not, what mechanism will the beacon chain use to determine which Eth 1.0 chain is the main chain? By default the beacon chain validators will just use the voting mechanism that's specified in the spec, and whichever chain a majority of the validators support is the chain that the beacon chain will go with. That said, if we want to facilitate a peaceful split, there is a fork versioning feature built in to the beacon chain to make replay protection very easy... [Vitalik Buterin] Q: Why are you not doing \"proper\" research and submit publications to conferences? A: Not really an answer to your question, but Ethresear.ch ( https://scholar.google.co.uk/scholar?hl=en&as_sdt=0%2C5&q=\"ethresear.ch\"&btnG=&oq=\"et ) does get cited :) [Justin Drake] A follow-up: As does the Casper FFG paper! [Vitalik Buterin] Q: Let's say that I have some ethereum locked on a time locked contract, will be available after the 2.0 transition? This question can be expanded to all 1.0 contract functionality after the POS transition A: The Ethereum 1.0 will live on, even after Ethereum 2.0 is fully deployed. See https://old.reddit.com/r/ethereum/comments/ajc9ip/ama_we_are_the_eth_20_research_team/eeub9sp/ . [Justin Drake] Q: Thoughts on this tweet? https://twitter.com/zaoyang/status/1088001513459511296?s=21 A: Eth 2.0 is not really trying to maintain backwards compatibility; almost every part of the design is significantly altered, and old contracts will have to explicitly migrate over to the new system and in some cases rewrite eg. to adapt to rent. [Vitalik Buterin] Q: What's your vision for Eth 3.0? A: STARKs, STARKs and lots of STARKs. Hopefully some nice way to achieve 2 second average block times. Extremely effective cross-shard communication, either at base layer or through a variety of easy-to-use layer 2 systems. [Vitalik Buterin] A2: See https://twitter.com/drakefjustin/status/1072593728253104128 [Justin Drake] Q: In the future how will a really popular DAPP operate? Will it be possible for a single DAPP to operate across multiple shards? If not how will it operate properly with the TX/sec limits on a single shard? Will L2 solutions be the only option? A: A dApp would have to get really big to consume all the resources in a given shard to justify spreading itself over multiple shards. For example, Uber does less than 20 rides per second. A similarly popular decentralised equivalent would likely fit on a single shard, especially when fancy L2 infrastructure is involved (e.g. state channels, plasma, SNARKs/STARKs). [Justin Drake] Q: What is your take on the current state of finding consensus on randomness, in particular the current VDF construction. While certainly clever, I wouldn't say it is very elegant. Do you think this is due to theoretical constraints or do do you see potential for a 'nicer' way? More general, are there any theoretical problems in this space, relevant to Ethereum 2.0 or not, that are just interesting to think about? (starting my PhD soon and looking for inspiration if it wasn't obvious) A: I wouldn't say it is very elegant I'd say VDFs are a super elegant thin layer on top of RANDAO :) Is it the hardware you don't like? If so, would you agree that proof-of-work is an elegant solution? Then think of VDFs as being \"proof-of-work 2.0\": much better randomness at much lower cost. It's a paradigm shift from massively-parallel work to inherently-sequential work. Do you think this is due to theoretical constraints or do do you see potential for a 'nicer' way? I'm not aware of any unbiasable randomness schemes that only have strong liveness, other than VDFs :) are there any theoretical problems in this space, relevant to Ethereum 2.0 or not, that are just interesting to think about? (starting my PhD soon and looking for inspiration if it wasn't obvious) We will have an academic \"VDF day\" at Stanford on Feb 3 to work on open problems. Will you be nearby? [Justin Drake] Q: Shouldn't the smart contract stated in (4) have the ability of sending just 16 ETH for something as RocketPool v2 work (while some consider this to be \"centralization\" I think it will help a lot the average user and mitigate the risk of the average user)? A: You can send between 1 ETH and 32 ETH to the Ethereum 1.0 deposit contract at any time. A minimum balance of 32 ETH on the beacon chain is required for activation as a validator. [Justin Drake] Q: I see a lot of people talking about nodes running in cloud. Shouldn't ETH find a way to actually discourage this? If everybody is running nodes in cloud that means we have possible single point of failure, which is against what I think we are trying to achieve and what enterprise customers are looking to eliminate. A: \"Partial slashing\" and the quadratic leak during times of no-finality actually financially encourage diverse validator setups. Your potential losses are much smaller when your slashable message or validator down-time are discorrelated. Diversity in setup includes -- node software, validation software, local server vs cloud provider (and which cloud if using cloud), geographic region, etc. If a ton of validators all run on AWS and AWS goes down, these validators will suffer large penalty leaks. To guard against this, I should setup my validation node locally or on a less used cloud provider. [Danny Ryan] A2: We do have a way! It's called \"partial slashing\" and the idea is that, if something goes wrong, the more people did something wrong the more everyone gets penalised. So there is an incentive to avoid correlation with other validators, and hence avoid centralisation. [Justin Drake] Q: Can you foresee ever having to move Eth 1.0 to Eth 2.0 in order to avoid losing it forever? A: The current plan is to incorporate the eth1.0 state into a contract on a shard in eth2.0. Note that this will just be a state root and an EVM interpreter along with eth balances. Users will be able to call into this contract by providing merkle witnesses of the required state. [Danny Ryan] Q: I'm a new developer looking into Ethereum, where would you officially recommend I look to develop with an eye toward future proofing? A: A key consideration to future proof your contract code for Ethereum 2.0 is sustainable storage. It's known as \"storage rent\" and \"storage maintenance fees\". [Justin Drake] Q: What do you guys think of the Avalanche consensus mechanism and could it play a role in the ETH roadmap further into the future? A: Avalanche is interesting to me because it's a fresh approach. Looking forward to seeing how it plays out with Bitcoin Cash. Successes there can be ported to Ethereum via L2 infrastructure. [Justin Drake] Q: Is sharding smart contracts theoretically possible? How would one go about that? A: Here's a trivial example: the Ethereum Name Service (ENS) can be sharded across n shards according to the first log_2(n) bits in the domain name hash. [Justin Drake] Q: How does eth 2.0 balance security across shards holding different amounts of notional value in them? For example if there is a decentralized finance shard holding a very high % of eth + other tokens, would the stakers/validators responsible for that shard have incentives to behave badly? A: The key security guarantee of sharding comes from frequently shuffling validators into randomly-sampled committees (known as \"crosslink committees\"). The hope is that this fast shuffling resists bribing attacks, in both the \"honest majority\" and the \"slowly-adaptive rational majority\" security models. [Justin Drake] Follow-up Q: It still seems like an inefficiency where you'd be over-securing shards with low notional value + under-securing shards with high notional value. Am I thinking about this wrong? A: Every shard gets security with the same notional value. Value (validator collateral) gets spread evenly across shards. [Justin Drake] Follow-up Q: Ah think we are speaking past each other a bit, let me try to clarify my concern --> It seems likely you will have wildly varying ratios of (value sitting atop a particular shard / validator collateral securing that shard). So for example a defi shard with 90% of value in eth economy sitting in it only gets 1/1024th of the validator collateral securing it. And an empty or unused shard would get same 1/1024th of total validator collateral securing it. This seems inefficient to me. Depending on how the distribution of value shakes out across shards, potentially materially inefficient? A: This seems inefficient to me. Depending on how the distribution of value shakes out across shards, potentially materially inefficient? Oh I see! Interesting point. We consider every shard equal, and provide high security for all shards. The breakdown of even a single shard (namely, an unavailable or invalid crosslink) would likely be catastrophic for the whole system. [Justin Drake] Q: Will the Beacon Chain require its own nodes? Is this basically a brand new chain that has only one connection to ethereum: Proof of Burn? A: The beacon chain is a new system level chain that houses the validators and manages their responsibilities and rewards/penalties. In many ways this is akin to the FFG contract and sharding contract proposals that were previously deprecated but the organization breaks clean from the EVM to allow for a radically new design and increased efficiency. A node in the future can run the PoW chain and/or the beacon chain. If they run the beacon chain, they can then sync whatever shard chains they want. The connection at first is just an economic connection -- use the existing economics and community to seed validation in the beacon chain. Beyond that, we expect the beacon chain to be used to finalize the pow chain in the short to medium term. In the end, there are a number of proposals to either fork the eth1.0 state into eth2.0. [Danny Ryan] Q: How does Eth 2.0 account for DDOS attacks? If people run nodes at home on consumer hardware with a normal internet connection they can be taken offline easily with DDOS attacks or am I interpreting this wrong? A: It is the responsibility of a validator to remain online to fulfill their responsibilities and gain rewards. A validator can remain profitable if they generally remain online greater than 50-67% of the time. A validator's inactivity penalties are also minimized if their being offline is dis-correlated from other validators. This incentivizes to utilize different node and validation software from the majority so that in the case of a ddos attack vector against a particular node implementation, your offline losses are minimized. The validator's protocol level identity and it's node's network identity are completely decoupled. This allows for a validator to create any type of obfuscated network setup that serves their purposes. I expect many tools and best practices to arise for home validators in the coming months. [Danny Ryan] Q: What are your thoughts on formal verification of smart contracts? Will this be possible with Ethereum 2.0? A: Formal verification of smart contracts is awesome and super valuable IMO. Formal verification will be possible in eth2.0. I believe the WASM semantics are already available in K which will provide some good opportunities for contract verification. Opening up more languages by using WASM will also allow for utilization of more restricted languages that are more amenable to FV. [Danny Ryan] Q: What are some good cypherpunk books that you would recommend to people getting interested in this space? (Or just good book recommendations in general) A: I don't read many books nowadays. I mostly consume academic papers, whitepapers, podcasts, videos, blog posts, Reddit, Twitter, etc. I did enjoy \"Zero to One\" by Peter Thiel when I was an entrepreneur. [Justin Drake] **Q: How do you prevent single shard corruption attacks? Basically will there be resharding? If so, how is resharding done? How are you solving the fast state syncing problem if nodes need to be reshuffled around shards? A: How do you prevent single shard corruption attacks? By randomly shuffling validators across shards. Basically will there be resharding? If so, how is resharding done? Right now crosslink committees are shuffled every epoch (6.4 minutes) and shard proposer committees are shuffled every ~9 days. Crosslink committees are critical, hence why there are shuffled fast. See this answer also. [Justin Drake] Q: You said in a comment some days ago that there are basically no unsolved problems of Serenity Phase 0 left. Which problems of Phase 1 and 2 are still left to be solved? A: The short answer is there are no big fundamental problems for phases 0, 1, 2. The more detailed answer is that for phase 0 we need locally-computable shuffles. For phase 1 we want a custody scheme that is friendly to decentralised pools. For phase 2 we need to figure out sustainable storage. [Justin Drake] Q: Before Eth 2.0 Enhancements come in, what is the best recommended approach for storing private data on Ehereum? A: Storing data on Ethereum is expensive per byte. Infrastructure like Filecoin may prove to be a good trustless storage solution. For privacy, just encrypt the data. [Justin Drake] Q: Will there be any zk-snarks related enhancements coming with Eth 2.0? A: We are hoping to have a SNARK- and STARK-friendly hash function in Ethereum 2.0 at some point. Unfortunately those likely won't be ready for phase 0. At the application layer, WASM will ideally mean that SNARK-specific precompiles won't be necessary. [Justin Drake] Q: Is there some kind of roadmap for the migration from ETH 1.0 to ETH 2.0 in layman's terms? For true decentralization it is required to get more people on board that understand the full process. A: I described the three phases here https://www.reddit.com/r/ethereum/comments/ajc9ip/ama_we_are_the_eth_20_research_team/eeueuzc EthHub also does a great job at simply describing the path https://docs.ethhub.io/ethereum-roadmap/ethereum-2.0/eth-2.0-phases/ [Danny Ryan] Q: ETH token will not be transferable back after migration to ETH2.0 What will be the token ticker for the ETH2.0 chain native token? A: ETH\u2014at least when Ethereum 2.0 is fully deployed. Fungibility is a key design goal. [Justin Drake] Q: Where does new client software take lists of peers with their ip addresses and ports? Is there is centralized server? A: This is an implementation detail. Some clients may have a hardcoded list of \"bootstrap node\" IPs and ports. [Justin Drake] **Q: Do you have any final plans in mind about the current ETH inflation? A: Nothing final. Ultimately the community will have to make a tradeoff between low inflation and high security. See https://github.com/ethereum/eth2.0-specs/issues/251 . [Justin Drake] Q: What are the odds that a fully sharded chain including state transitions is feasible? A: Very high. No fundamental problems unsolved. The tricky part is getting everything to fit together cleanly. [Danny Ryan] Q: Can I use a raspberry Pi to stake when staking is possible? And what do I do with it in the mean time? A: Nimbus ( https://github.com/status-im/nimbus ) is targeting resource-constrained validators :) [Justin Drake] Q: What's your opinion of EOS (or TRON, STEEM) in terms of dapp platform? A: I tend to be critical of that class of systems. See https://vitalik.ca/general/2017/12/17/voting.html and https://vitalik.ca/general/2018/03/28/plutocracy.html for reasons why. [Vitalik Buterin] Q: Any updates as far as overall inflation rate per year or per milestone/HF? Any updates as far as TPS per year or per milestone/HF? A: See https://github.com/ethereum/eth2.0-specs/issues/251 [Justin Drake] Q: Can I make a Zcash coin on ETH 2.0 for example with all or most of the advantages of Zcash? A: Yes, there are already a number of experiments in eth1.0 to demonstrate usage of ZKSNARKs for both privacy and scalability. Check out miximus for privacy and roll up for scalability (both by barry whitehat!). Usage of ZKSNARKs will be supported in eWASM state execution so I expect more privacy solutions akin to Zcash to continue to be built on eth2.0. [Danny Ryan] Q: Why is ETH 2.0 Phase 0 even needed as a \"main\" chain, and need Bether transform from real ether (hence risk losing some value), instead of doing a testnet only, because after all this is what phase 0 is, based on TestnetBEther? A: ETH 2.0 needs a main chain as a single point of truth for all the shards. The reason we have phases 0, 1, 2 is to break things down conceptually, and in terms of incremental releases to limit risk. [Justin Drake] Q: What work is being done to make the research behind ETH 2.0 more geographically decentralized? Are there any efforts to translate research specifications into other languages? A: Are there any efforts to translate research specifications into other languages? Once the spec is more mature I expect the community to pick this up, somewhat similar to how Andreas's books get translated. English seems to be the a lingua franca for research and development. [Justin Drake] Q: After PoS, if a node gets hacked, can the hacker make the node to lose its stake by confirming false transactions? A: When your validator gets penalised it is automatically deregistered to prevent further damage. We have a mechanism called \"partial slashing\". The idea is that, if something goes wrong with your validator it only gets penalised a bit if not many other validators also mess up around that time. So in the optimistic case of a lone hack you should recover most of your funds with your withdrawal key (kept secure, e.g. in cold storage). [Justin Drake] Q: Will contracts be able to pay for gas in Eth 2.0? A: That will likely be unlocked with abstraction (which includes gas abstraction). [Justin Drake] Q: Assuming the number of network nodes remains the same and the network graduates to full PoS... what is your expected maximum theoretical transaction throughout? A: Rough ballpark figures. 1024 shards * 10 transactions per second per shard ~= 10k transactions per second. [Justin Drake] Q: What is the most updated timeline for rolling out PoS? Since Vitalik already said 'research is done', what are developers' incentives to push things forward? Are there any specific measures taken to ensure a smooth transition? A: I expect the beacon chain (the core PoS chain) to launch late 2019. Ideally the spec should be close to final in Q1, cross-client testnets in Q2, security audits in Q3, mainnet launch in Q4. As a rule of thumb, launching in December is hard because of the holiday season. So November 2019 and January 2020 would be my two best guesses. Having the Ethereum 2.0 chain finalise the Ethereum 1.0 chain will take more time. [Justin Drake] Q: Will it be possible with sharding to have shards with different rules and/or technology independent from the other shards/beacon chain, but still using the same base tech in terms of transacting and security? For example: private eth network run in a shard connected to main eth network from which it takes just security from validators. Private transaction with ZKsnarks shard(s). Encrypted data shards. Erc20 like coin launched on ETH 2.0, but with it's own rules and maybe own shards somehow controlled by the smart contract of that erc20. A: Every shard has the same data availability layer, and the option to use EVM2.0 as an execution engine. That's common base-layer infrastructure. At the application layer contracts can be powered by non-EVM2.0 execution engines (so-called alternative execution engines). There's also a huge L2 design around state channels, plasma, cross-shard communication, etc. So at the application layer I expect lots of non-homogeneity across shards, as well as a lots of homogeneity thanks to standardisation. [Justin Drake] Q: Today, running full nodes isn\u2019t that hard, but the resource requirements are slowly increasing. How much thinking is being devoted to the greater infrastructure requirements of Eth 2.0 and how they will impact node participation and decentralization? A: Ethereum 2.0 validation should be sustainable from a resource perspective: Bandwidth: fixed cost (thanks for fixes shard block sizes) Storage: if not fixed then sustainable (thanks to ideas such as storage maintenance fees). Note that storing shard blocks since genesis is not required. CPU, memory I/O: similar situation to Ethereum 1.0 (gas limit that can be voted up or down). [Justin Drake] Q: How ETH 2.0 differs from ETH, and why POS instead of POW. A: PoS enables goodies such as economic finality and sharding. It is also much cheaper (in terms of inflation cost for hodlers, as well as ecologically) than PoW. [Justin Drake]","title":"Part 1"},{"location":"other/ethereum-2.0-ama/#part-2","text":"Q: What do you feel is the biggest unsolved challenge left in Eth 2.0 research which must be addressed before Phase 1 or Phase 2 could be implemented in the future? A: I really honestly think that there are no unsolved research challenges at this point. It's mostly \"how do we make this thing more elegant and take up fewer lines of code and have fewer edge cases\" on the research side. [Vitalik] Better understanding the incentives and various actors that might arise in a stateless and highly abstracted execution model. There is really great work being led by both the EF eWASM team and the Consensys Quilt team to better understand the design space and active build prototypes to vet ideas. [Danny] Q: Previously, a release date of January 2020 for Phase 0 was informally articulated. Do you feel this date is realistic and achievable? A: Thanks for noting its informality. :) Launching early next year is my personal target, but there is a lot that needs to be done before then! We need: long-running test nets (however that is defined), formal verification of the deposit contract, and clients to be ready for prime time, but right now it looks like everything will come together in time. We also don't want to rush clients into developing buggy software just to be ready by an arbitrary date. If anything, I think BLS standardisation efforts are the most likely to slow us down. We (as a greater blockchain community) are trying very hard to have a standardised signature scheme for better interoperability between all the chains. There is a high degree of consensus on this already, but establishing a new standard is always a slow process. [Carl] The client teams are doing a great job and continuing to push the envelope. I expect exciting progress to be made in the coming months, but I also expect that the last mile might be long. Early 2020 is realistic and still the target. [Danny] Q: Are the researchers happy with the current state of the economics of Ethereum 2.0? A: I don't think it's productive for us to worry about the absolute numbers at this point; the network will launch, and either the rewards will prove sufficient or they won't. The other thing worth worrying about is centralization incentives, but that's difficult to work out \"in theory land\"; much of the result in practice has to do with how lazy people are. [Vitalik] Q: My biggest worry about ETH 2.0 is that it will kill composability. Won't most dapps end up trying to build on the same shard as say MakerDAO so they can use Dai? A: Composability between shards is definitely unchartered territory but there are reasons to be optimistic: The shards are designed for homogeneity (unlike, say, Polkadot or Cosmos) to facilitate cross-shard communication. There are design patterns which abstract away the boundaries between shards. For example, one could consider shards 0 and 1 as a combined data availability substrate for an execution engine which requires more bandwidth. These design patterns will be more easily exploitable in the context of programmable execution engines. The shards are designed to be friendly to \"fast optimistic finality\" thanks to shard attestations which are somewhat analogous to block confirmations in the context of Eth1. What this means that is, in practice, the shards may act as one logical blockchain thanks to quick probabilistic finality of individual shards. The UI layer is also an opportunity to abstract away the boundary between shards. [Justin] Q: When can we expect the Beacon Chain to be finalizing/checkpointing the Eth1.x chain? A: My best guess is early 2021. See here . [Justin] Q: Under the specs there is a \" block.eth1_data \" property; based on that I thought that somehow we were going to have an hybrid validation starting Jan 2020 (if all goes well) from both PoW and PoS. As stakers, what are we going to validate except the validators, staking rewards & penalties if all the traffic will still be on eth 1.0 and we're not taking part? A: In order for Eth2 to finalise Eth1, 2 things are needed, Eth2 must vote on Eth1 (as is implemented as you point out) and Eth1 must change its fork rule to follow the finalised blocks on Eth1. The latter requirement requires an Eth1 hardfork. It is therefore easier to just have validator finalise the things you mention for now and later on add in Eth1 finalisation. Additionally, it is safer to launch without Eth1 finalisation in case of a Eth2 black-swan event in the early days. [Carl] Q: Rebuttals to the criticism that Eth 2.0 is extremely complex? A: It got considerably simpler over the last year. If you do a word count on the spec, it seems to be considerably smaller than the yellow paper at this point. There's a lot of things in eth2 that are much simpler than eth1. But there's definitely lingering complexity and I deeply care about minimizing it. [Vitalik] While the research path has been somewhat tortuous and hard to follow, the end product is arguably simple and clean. Expect more educational material highlighting the simplicity of the current design. Phase 0 is about 1024 lines of code to specify (assuming SHA256 and BLS12-381 as primitives). I expect phases 1 and 2 to be 1024 lines of code combined (assuming WASM as primitive). That's just the phase 0 consensus (deposit contract, beacon chain state transition function, and beacon chain fork choice rule). [Justin] Q: Why are there so many teams building eth2.0 clients? I understand the point of client diversity but don't you think 6 clients seem to be pushing it? Supporting so many clients would also divide the resources in terms of funding. Which clients do you see as the geth and parity of eth2.0? A: A few notes on client diversity: There's more than 6 clients being developed\u2014it's closer to 8. I expect consolidation\u2014a bunch of clients may not survive 2020. I expect specialisation\u2014one can focus on the browser (e.g. Lodestar), resource-constrained devices (e.g. Nimbus), the enterprise (e.g. Artemis), prototyping (e.g. Trinity), etc. A minimum of two production-ready clients are necessary for launch. I expect the first-mover advantage to be strong. All the above have, to an extent, historically happened on Eth1. [Carl] We definitely don't want a duopoly! For me personally, the ideal would be to have no single client exceed 1/3 of the network, so any software bug in any single client would not stop the network. Though having no single client exceed 1/2 is ok too and gets us most of the same benefit (if a major client has a bug, having no finality for a while while things are being figured out may even be an improvement...) I expect a power law distribution, and it's definitely likely that some of the clients will not survive to see significant usage on mainnet. [Vitalik] My guess on why so many clients showed up to do the hard work is that eth2.0 is both exciting as a purely technical challenge as well as a chance to make a mark on Ethereum and the crypto space in general. I'm pleased that there are so many great teams doing the hard work, but recently, I've been more focused on finding contributors to do value-add work outside of the core client implementation. Formal verification, academic analysis of protocols, testing, light clients, web3 interfaces and developer tooling, validator clients with great UX that plug into any underlying node, etc, etc. [Danny] Q: Are the Ethereum 2.0 clients eventually going to replace the 1.0 counterparts? For example, will Prism ever get merged to Geth? A: I expect the Eth1 clients to live a long and prosperous life :) On Prism: \"Likely not. Other than the language (Go), Prysm and Geth have very little in common.\" [Justin] Q: what happens when I stake 32 eth, and get slashed once? now that my stake is below 32 eth do i get kicked out of the validator set? A: Validators get kicked out when they get slashed. There is another ejection mechanism if your balance goes below 16 ETH from accumulating (non-slashing) penalties. [Justin] You also lose some amount of ETH. The minimum being set to 1 ETH currently. There is an additional penalty related to the number of other slashable offenses that have occurred in the recent time period. If more validators have been slashed recently, you lose more ETH. The maximum penalty occurs if ~1/3 of validators have been slashed recently, at which point you lose all ETH. This highlights the importance of having a discorrelated validator setup from other nodes and potentially having some fault tolerance setup with yourself before you sign things. [Danny] Q: What are the non-slashing offences? A: There are micro-penalties for not voting to finalise the same blocks as other validators and the inactivity penalty (for offline validators) for when the chain is not finalising for an extended period of time. [Carl] We have a bunch of micro-penalties for not optimally crafting attestations and penalties for being offline (search for get_attestation_deltasand get_crosslink_deltas here ). [Justin] Q: i hear a lot of hype around staking rewards, but what are the penalties for getting slashed? does the network have different punishments for different misbehavior (offline vs. double-signing)? is the \"up to 60.8% slash in 18 days\" still correct? A: I think you are conflating two thigs here, slashing and the inactivity leak. Inactivity leak If your validator node goes offline for 18 days, and the beacon chain is not finalizing, then your balance will be reduced by \"up to 60.8% slash in 18 days\". Slashing If a validator behaves provably maliciously, then they are slashed by having their balance reduced. Assuming client software is written well, this should be basically impossible to happen to you. Minimum penalty is 1 ETH, but it goes up linearly in the number of people slashed at the same time as you. See here for more [Carl] Important to note that if you are offline, but the chain is still finalizing you only stand to lose approximately the same as you would have gained. The quick reduction in balance over a ~2 week period only occurs when not finalizing. Another reason to have a discorrelated setup from the rest of the network! [Danny] Q:What is currently the most exciting new research development in Ethereum 2.0? A: The execution engine abstraction in phase 2 is quite exciting, taking account abstraction to the next level. It allows for the consensus part of execution to be an ultra thin layer of abstraction on top of data availability. Assuming WASM as a black box, it may be on the order of 256 lines of code to specify. There's an initial proposal from Vitalik here . The idea is that even the notion of a \"transaction\" is an application-layer detail which can be specified as WASM code. Compare this to Eth1 which \"enshrines\" an opinionated notion of replay protection (nonces), signatures (ECDSA), contracts, accounts (vs UTXOs), gas, storage, etc. [Justin] I'm lately most excited about this . The OVM work by Karl Floersch and co is along similar lines and also very interesting. [Vitalik] Q: Theres been some debate over the necessity of ASICs in Eth 2.0. I understand theres an effort to spread the cost out among various communities, but I think many people feel this might just end up being an expensive science project where the rewards dont justify the costs and if you itemised Eth 2.0, it seems like it might be the most expensive part. Are there alternatives besides relying on just Randao/Randao + ASICs (VDF)? What are the ELI5 upsides + downsides of the alternatives? I appreciate that the researchers are a tackling a difficult problem with randomness for a blockchain. A: It's important to stress that the VDF mechanism's safety is not critical to the safety of the Eth2 consensus; if the VDF scheme gets broken or someone makes an ASIC fast enough to predict all the outputs, all that happens is that the percentage of validators they need to corrupt a single committee drops by a few percentage points (think, from ~50% to ~33-40% plus a lot of computing power). I actually think the main value of the VDF is that it provides global trustable secure randomness to applications that need it. [Vitalik] +1 on consensus-layer security and/or performance gains, and value-add at the application-layer. The other \"promise\" of VDFs is that they are a new cryptographic building block with the rather unique notion of time. They can used for proofs of space, proofs of replication, proofs of history, anti-frontrunning, expiring zk-proofs, and hopefully further applications which are hard to predict today. [Justin] Q: I'd like to know more about the data availability layer of Ethereum 2.0 - particularly the economic costs of long-term data storage. Part of my political platform includes integrating blockchain technology with government operations. For example, I'd like to see all of America's public records stored on a public, open source, sufficiently decentralized blockchain. Would it make sense to build something like this on top of Ethereum 2.0? Why or why not? A: Realistically you would want an incentivized data storage platform like Swarm, with hashes of the documents stored on the ethereum blockchain. But I'd recommend thinking harder and trying to figure out how to answer the deeper question \"how could we use blockchains as a tool to minimize opportunities for misbehavior in government?\" Places to start I can think of include: Things like https://opencerts.io/ for all government-issued records Using https://ethresear.ch/t/minimal-anti-collusion-infrastructure/5413/ to do online votes, starting in low-security contexts (I think petitions would be a good place to start and underexplored) An internal-use stablecoin where only government agencies can hold balances but transactions are visible to and auditable by the public Some kind of zero-knowledge privacy-preserving sales tax collection thing Blockchain-based solutions for esoteric government things like spectrum auctions Get your country (I'm speaking generically to all readers here :D) to make an Estonian-style E-ID system that lets people make digital signatures that can be verified by anyone publicly. This is not technically a blockchain application, but it would be a tool useful in many blockchain applications [Vitalik] Q: I recall /u/bobthesponge once saying that almost his entire Net worth is in Ether (even his salary from the EF). Are there any other researchers on the research team that are as convinced of Ethereum's future, besides Vitalik and Justin of course? No need to call someone out. Just percentages, ie. \"Over 50% of the research team is heavily (over 30% of net worth) invested in Ether financially\", would be sufficient. A: Somewhat ingrained in our culture, the research team doesn't talk much about net worths. Having said that, the research team has a lot of fresh blood (e.g. Dankrad, Proto, Carl) which I don't expect to be crazy invested in ETH.[Justin] I am not an eth whale, but I get paid in eth and have high exposure. [Danny] The aforementioned Carl here, let's put it this way: financially, emotionally, and intellectually, I am heavily exposed to ETH. [Carl] Q: How many Eth2.0 client teams have to have a finished client for the Beacon chain to go live? A: I asked the same question a few days ago. At this moment, it is still an open question and will likely be until much loser to the time. Obviously having more clients is better, but that should be played off against the launch date. I am currently torn between 2 and 3. (Having > 2 would be great because otherwise there is a client guaranteed to have a majority of the validator-base.) At the end of the day, it will come down to who is ready and when. [Carl] Two at minimum, ideally three. [Justin] Q: I understand that about 10 million eth is expected to provide good enough security for the network. In a hypothetical scenario, what happens in the situation where a large organization manage to secure more than 50% of the total eth staked and use it to maliciously attack the network? As i understand, the side with less total eth staked will be slashed, so won't this malicious actor be able to effectively kill the network? A: If a large actor were to aquire a large enough stake to take over the network they would need to buy >2/3 of the total staking supply which would drive the price up, so it's not a cheap attack in the first place. Secondly, you are not slashed if you vote for a minority chain, only if you behave provably maliciously in the eyes of 2/3 of the validators. One of the beautiful things about PoS is that these attacks can be handled with grace. We, as a community, can go in and hard-fork out the malicious actors so they have no more voting power. The malicious actors just burnt a lot of money to temporally halt a network. In PoW, by contrast, if someone buys ASICS with 51% hash power, there is no way to remove them from the system. [Carl] Q:Do the client teams feel their implementations will be sufficiently robust enough, stable enough, and easy enough to use that normal nerds (like myself) can safely run their node software, stake 32 ETH on it, and not be slashed or lose ETH due to client bugs? My biggest concern is losing ETH while being a well intentioned actor. I've ran Geth, Parity, Trinity, and EthereumJ (Harmony) nodes for multiple years now and those clients have been around a lot longer than any of the ETH 2.0 clients have, but they still have issues, still have bugs, still sometimes crash. A: I hope so! One key component in the incentive design is that penalties (for going offline and for being slashed) are only high if many other validators go offline at the same time. So any bug that doesn't hit every node at the same time should only cost you a minimal amount. [Vitalik] Q:suppose ethereum reaches 1 mllion tps, ledger size will grow 1 terabyte everyday, any solution to this? what is your projections in terms of ledger size growh and what is your solution to this A: The sharded eth2.0 is expected to handle ~10MB/s of data availability. This is data that is come to consensus upon in shard chains and guaranteed to be available in at least the ~2 week time frame. This is not necessarily state size. The current approach to state and state execution is to take a \"state-less\" approach in which blocks must contain the merkle witnesses of the relevant state to perform the tx executions. This is reduces the amount of state any consensus node must store, but does bring up other issues about state size, who stores it, how users get it, etc. In fact, the entirety of state execution is being abstracted away such that we can experiment with multiple schemes to deal with this problem (state rent, users/dapps storing their own data, etc). Much of the state rent research that @ledgerwatch has driven in the past year or so will likely come into play. [Danny] Q: Lets assume you are a guy with very little cryptotech-knowledge, but you do have >32 ETHER. Question #1: Would staking be made easy-to-do, so \"ordinary\" people can earn interest on their holdings? Question #2: Does staking pose any risks of losing ETH by accident? Trying to understand if you can stake without any risks unless you \"intentionally\" try to harm the network (eg. if your validator node goes offline, because your internet provider has an issue and likewise) A: Would staking be made easy-to-do, s\u00e5 \"ordinary\" people can earn interest on their holdings? I expect a cottage industry will be setup around accessibility. Infrastructure to be built includes staking pools (centralised\u2014think Coinbase\u2014as well as decentralised one) as well as plug-and-play \"validator in a box\" solutions. Trying to understand if you can stake without any risks unless you \"intentionally\" try to harm the network That's definitely the goal. eg. if your validator node goes offline, because your internet provider has an issue and likewise Penalties should be marginal for validator nodes that go offline for short periods of time every once in a while. [Justin] Q: What is the current thinking around the Eth1>Eth2 migration plan? A: The current approach is to fold eth1 into eth2 as an execution environment. In practice, this will mean that we would need to have a hard fork on the eth1 side to rebalance some gas costs (opcodes that read storage or read accounts would see their gas costs increased to 2000-10000), and after that at some point there will be a \"flag block height\" from which the eth1 state root will be moved into the eth2 system (or possibly some one-time processing will be run on the eth1 state to make some optimizations, eg. replacing the patricia hex trie with a binary tree) and after that eth1 will be part of eth2, with applications being able to run as before. I do think the likely gas cost increase of storage/account reading opcodes (basically the same opcodes whose gas costs were already increased in Tangerine Whistle; those costs will need to go up at least another order of magnitude) is something that contract devs should be aware and plan for. The reason that change will be necessary is that those opcodes greatly increase the size of a Merkle proof needed to statelessly verify a block, so currently Merkle proofs for a worst-case block are >100 MB; with those gas repricings plus trie optimization plus charging per byte of any contract being read, we could get it down to acceptable levels. [Vitalik] Q: Regarding Proof-of-Stake and wealth distribution (and issuance reduction), by the looks of it the majority of ETH will be held by the minority of entities, does that cause any concern since a single entity can run multiple validator nodes (and earn more rewards)? It's a question from inequality perspective not security; if ETH were to take a significant role in the global economy, wouldn't this widen the gap between rich and poor by orders of magnitude (MUCH worse than the current economic system)? Basically, economic inequality on steroids. A: I definitely think income inequality issues from crypto are an issue! It's a big part of why I am not a single-cryptocurrency maximalist. But I still think that PoW is not better than PoS from an inequality point of view, because although PoW does distribute coins into \"fresh hands\", you need so much capital to become a PoW miner that PoW itself is a big rich-get-richer mechanic in practice. [Vitalik] Q: I know its still early but are there some rough estimates of when we might see Spec freezes for Phase 1 and 2? A: Phase 2 is a bit too far out to say, but my hope for phase 1 is Q3/4 of this year. [Carl] That said, the current minimal execution design with EEs for phase 2 (once better researched and prototyped) is a super simple addition on top of phase 1 [Danny] Q: Please ELI5 (\"explain like I'm five\") why the need for a second chain instead keeping on evolving the first one? A: Building Eth2 on Eth1 would be a bad design decision for a few reasons: We would be constrained by the Eth1 gas limit, which would severely affect performance (e.g. 1024 shards and 32 ETH to validate would not be possible). We would be mixing the consensus and application layers. This means the consensus layer is subject to the application-layer DoS vectors (e.g. high gas prices). It would also mean \"enshrining\" application-layer contracts, which is far from ideal from a governance standpoint which should be as neutral as possible with regards to deployed contracts (i.e. The DAO interventions should be the exception, not the norm). We would be constrained by the EVM, which is notoriously hard to safely program complex contracts in. Eth1 does not have support for BLS12-381. We would be subject to the Eth1 block time Poisson distribution (as opposed to the regular\u2014and shorter\u2014slots durations in Eth2). The list goes on :) [Justin] Q: I am considering to stake during phase 0, but i am a bit concerned about the inactivity leak. I want to know how to stop/pause being a validator if I change my mind? I am asking this as there may be certain situations in which I think I will be offline for a while, and I do not want my balance to slowly leak out due to that. A: You will only suffer large penalties if you are offline at the same time that >1/3 of other validators are offline. Otherwise the penalties for being offline will be tiny, to the point where you will be net-profitable (not including computer costs etc) as long as you are online more than ~50-67% of the time. The incentives are deliberately designed to be forgiving to avoid discouraging amateur setups to promote decentralization. [Vitalik] The closest to a \"pause\" button is to first exit (which can take as little as half an hour, but may take days/weeks since there's a queuing mechanism) and later re-activate. [Justin] Q: 1024 shards, 131,000+ validator slots... what happens if there aren't enough validator slots filled by the time sharding goes live? A: With 1024 shards, and 128 validators in a committee, a minimum of 131,072 validators are needed to crosslink every shard every slot. If there are fewer validators than this, then shards are skipped to ensure the 128/committee validator number. [Carl] The system can naturally handle as low as ~64 validators. In this case, security is obviously insanely degraded, but the protocol can technically move forward. [Danny] Technically the system can \"move forward\" with one validator :D But yes, below the 131,072 validator (4.1M ETH) level the properties of the system progressively degrade as the number of validators goes lower and lower. [Vitalik] Q: if i understand finalization correctly, the more validators you have the longer it takes to finalize. how is eth2 addressing this issue without pounding the network with tons of messages being sent between all the validators? A: Correct. I wrote an article about this fundamental tradeoff here: https://medium.com/@VitalikButerin/parametrizing-casper-the-decentralization-finality-time-overhead-tradeoff-3f2011672735 We managed to get a couple orders of magnitude more favorable tradeoff curve than other projects through BLS signature aggregation, which reduces the marginal cost of a signature to 1 bit of data and 1 ECADD (~0.001 traditional signature verifications) of computation. [Vitalik] In Eth2, more validators should not lead to (significantly) longer finalization times. By making use of BLS signature aggregation and by grouping the validators into committees, we're able to support hundreds of thousands (and hopefully into the millions) of validators. [Carl] Q: Has the EF given any thought to maybe issuing \"official\" NFTs (i.e. collectibles) to initial stakers upon the launch of Beacon Chain as an \"extra incentive\"? What's your opinion on this? I'd say this would be the remit of the community, not the EF. Note that the Eth2 designers avoided giving early validators a special reward (e.g. giving the first 16,384 validators a 1 ETH bounty) to avoid distorting the economic experiment. We want to learn whether or not the basic incentivises are sufficient to incentivise participation. [Justin] I actually like the idea of an NFT. The deposit contract is readable in such a way that proofs can be made to a separate contract to generate NFTs. Been talking to Austin Griffith about this. He/burner-wallet might take the charge. I don't think an NFT would hinder our ability to understand the pure incentivizes here. It's at best a trophy and of little economic value imo. [Danny] Q: How is the work on evaluating the feasibility of producing dedicated VDF hardware coming along? A: At this point there's reasonably high confidence that VDFs (including building hardware) are viable. A few updates: A team of 3 ex-Intel people (Simon, Sean, Kelly from Supranational) is dedicated to the hardware aspects. The Rivest timelock challenge (open for 20 years, designed to last 35 years) was cracked in a few months using an FPGA (see here, and here). There's also code on Github. Work by Erdinc Ozturk has improved the state-of-the-art circuit depth for the modular exponentiation in VDFs. The ePrint paper was submitted a few days ago and should be published soon. A prominent complexity theorist (Ryan Williams from MIT) is working on circuit depth lower bounds for modular multiplication. Significant progress was made by Ligero on the RSA ceremony. We are planning for a ceremony with unprecedented scale (1024 participants) in 2020. New research papers keep flowing in\u2014see http://vdfresearch.org The $100K FPGA competition is starting in a few weeks. We have relevant corporate sponsors for the FPGA and ASIC competitions. In addition to the Ethereum Foundation and Protocol Labs (i.e. Filecoin), a new blockchain project (to be announced with the FPGA competition) is helping with funding. $900K was raised in the latest round of funding. [Justin] Q: Is there a chance for obligatory anonymity of future validator withdrawals? Force every withdrawal to go to a shielded pool - like zcash does with mining rewards. I fear without the obligatory anonymity here just using a mixer/etc is going to be treated as extremely suspicious - forcing stakers would add plausible deniability. A: I definitely support moving toward more and more privacy being a default over time! I'd say validator deposits are more important to mix than withdrawals, as that way it becomes harder to locate the nodes of specific validators which seems like it would increase security and censorship resistance. [Vitalik] Q: What are the main incentives to run a beacon node for validators if they can just connect to high-up time beacon nodes?If there are beacon node providers with high up-time - how is this going to be decentralized? A: There is an anti-centralisation incentive mechanism baked in. Basically, validators get punished for going offline the more other validators are offline at the same time. So \"uncorrelated downtime\" should be optimised in addition to \"high uptime\". [Justin] Q: If, as a validator, I know that I'm going to be offline for a period of time, is is possible to 'pause' validating without suffering an inactivity leak? A: The closest to a \"pause\" button is to first exit (which can take as little as half an hour, but may take days/weeks since there's a queuing mechanism) and later re-activate. [Justin] Clarification: there's a minimum ~1 day period before you can withdraw after you exit. It's safe to be offline during that time, but it does prevent you from re-entering. If we want to, in some future version we could add a \"re-enter\" feature that allows immediate re-depositing without waiting to withdraw first.... there's no theoretical reason why such a thing would not be possible. [Vitalik] Q: Do we have clarity yet on whether currently locked-down smart contracts (eg metronomes 4 contracts by Jeff garzik) will continue to work seamless in ETH2.0 or whether these contracts will be deprecated with all ETH in them lost? And how can storage costs be added to locked-down contracts in ETH 1.x ? In other words can we all assume immutable contracts on ETH1.0 will continue to work forever (provided enough people want them to)? Thx A: The current plan is that eth1 will be folded into eth2 as an execution environment via the stateless client approach, in which case, yes, contracts will keep working as expected. [Vitalik] Q: According to this paper, it may be possible for Quantum Computers to hijack and re-sign transactions DURING BLOCKTIME by (as early as) 2027. In other words, ownership of ANY wallet that has not upgraded to a quantum secure signature scheme BEFORE THEN can no longer be trusted AT ALL (even WITHOUT previous outgoing transactions). SO THE QUESTION IS THIS: Is anyone who fails to manually upgrade their wallets before a deadline (in order to become quantum secure) guaranteed to lose their funds after the advent of Quantum Computers? For example, if someone stores a PAPER WALLET for let's say 20 years, are they going to lose their funds by that time? Can QCs just monitor the entire blockchain and automatically attempt to hijack any transaction with insecure signature scheme during one blocktime, even if the sender has no previous outgoing transactions? A: Even if a quantum computer gets announced as immediately usable tomorrow, it is possible to do an emergency procedure to secure the funds of everyone who has not yet publicly released their public key or a signature (ie. every standard account holder that has not signed a transaction). You do this by doing a soft fork to disallow standard transactions, and replace them with a special transaction type that uses a STARK to prove that you own the private key k such that the given address A equals to hash(G * k)[12:] , and then moves the funds over into a new address type that uses a quantum-secure signature scheme, eg. Winternitz signatures. If we get more warning, then we can get people to update to Winternitz on an orderly schedule. TLDR: we're fine. [Vitalik] Q: how do/will the performance bottlenecks compare between 1.x and 2.0 A: 2.0 removes the disk I/O bottleneck for consensus participants by heavily leaning towards stateless clients. Finality greatly mitigates the sync latency bottleneck, and the requirement for consensus participants to store historical blocks. [Justin] I'd also add that I expect light clients to be massively more viable in eth2 than in eth1. About the same order of magnitude load as a bitcoin light client to stay synced (as opposed to eth1, where light clients are not light enough in practice to run on phones...) [Vitalik] Q: As an ETH miner, my main concern is how to prep for ETH 2.0. Any wiki, tips, or advice on how to proceed contributing (and profiting) for Ethereum? A: Eth2 has no mining. You may be able to put those GPUs to good use at the application layer with protocols like Golem, or maybe protocols that incentivise GPU-accelerated SNARK proofs. [Justin] Q: Approximately when is ETH issuance supposed to drop dramatically? (I believe the figure I've come accross is 10x reduction in issuance, is this correct also?) A: When the PoW chain starts piggybacking on the PoS chain for security (this could happen during phase 1 or phase 2), it becomes safe to lower the PoW chain reward by maybe ~4x. Further reductions would happen when the PoW chain stops entirely. [Vitalik] Q: During Phase 0, will ETH 2.0 be transferrable between wallets? 2.0 to 2.0? If so, are there concerns exchanges will list ETH 2.0? A: Transfers will probably only go live in Phase 1 at which point exchanges will list ETH2.0. Having exchanges to so will help maintain price-parity between ETH and ETH2.0. [Carl] Q: if block reward is X eth, and it is enough to secure the block, why do we pay X+gas to miners? Will this change? A: In Eth2 the economic security is not a direct function of the block rewards. Instead, it is a function of the total amount at stake. Will this change? Eth2 should have a partial fee burning mechanism (see EIP1559). [Justin] Q: As ETH 2.0 currently stands what are the odds of a uni-directional vs bi-directional 1.x to 2.0 bridge? A: The uni-directional Eth1 -> Eth2 bridge comes with the beacon chain. I'd say it's likely there will be a bi-directional bridge eventually (though unlikely to happen in 2020). Even better than a bi-directional bridge (based on light clients, which comes with non-negligible latency) is native integration of Eth1 into Eth2 (see here). [Justin] Q: Will the issuance rate be enough to incentivize validators given the competition from say DeFi products and will it be changed in the future if needed? A: Compound rates for ETH are ~0.02% AFAIK, so very easy to compete with. The \"do you take 3% interest staking or 6% lending DAI on Compound\" framing is highly misleading, because that 6% is on USD, which is very different to having 3% on ETH. But over time I do expect interest rates on ETH to slide up as more forms of staking become available (eg. channels, Plasma, Truebit, other security deposit games...). [Vitalik] Q: What are the research team's thoughts / plans on if there is extreme price differences between ETH 1.0 and ETH 2.0? I would think arbitrage would solve the issue but haven't thought too deeply on the subject myself. In paticular, if ETH 1.0 coins are worth significantly more causing people to not want to redeem their ETH 2.0 coins because they will instantly take a price hit versus just selling. A: I'm not too worried: Transfers and exchanges can be used to redeploy \"cheap\" Eth2 coins for validation. Large holders (e.g. the EF) can be arbitragers. The greater the price delta, the greater the incentive to deliver a two-way bridge ASAP. [Justin] Q: Is it still the plan that the frequently rotated notaries perform stateless validation of the blocks? If yes, are there any insights into how much extra network overhead will sending blocks with merkle proofs incur? If no, is there any other mechanism to prevent adversaries that can corrupt a shard quickly from applying an invalid state transition? A: Is it still the plan that the frequently rotated notaries perform stateless validation of the blocks? Yep! If yes, are there any insights into how much extra network overhead will sending blocks with merkle proofs incur? Looks like ~10x data (though very low computation, and we expect data to be cheaper than computation). But with techniques like https://ethresear.ch/t/layer-2-state-schemes/5691, even that could potentially be unnecessary. [Vitalik] Is it still the plan that the frequently rotated notaries perform stateless validation of the blocks? Yes. are there any insights into how much extra network overhead will sending blocks with merkle proofs incur? Now that execution engines are application layer, the answer is technically 0 :) For execution engines that use large Merkle trees (e.g. Eth1) the rough estimate at one point was 8x. I'm personally excited for execution engines that do Merkle path \"witness compression\" using SNARKs (proof creation accelerated by GPUs, FPGAs, or even ASICs). [Justin] Q: What is the current design to move Ether tokens on eth1 to eth2? A: That depends on what you mean by \"Ether tokens\". Validators can send a deposit of 32 ETH to the deposit contract which is then transferred to the beacon chain where they can begin validation. For people who wish to transfer their ETH from Eth1->2, that is not something that has been decided upon yet, but there will (probably) exist a dedicated bridge for this purpose (otherwise they can go through the deposit contract). It is still too early to know about ERC20/721 tokens. If Eth2 has an Eth1 execution engine, then it could be pretty painless, but even if not, an ERC20 token could just be transferred by copying over its state root. [Carl] Q: Sorry in advance if my questions are dumb but I didn't follow closely Ethereum 2.0 for couple months. Is there an approximative release date? Concerning staking, how much is needed and do we know for now the rewards? What is the main point in eth2.0 you are the most proud of? Do you feel that the Binance Chain is an enemy to Ethereum? A: Is there an approximative release date? January 3, 2020 at the earliest for phase 0. I'd say Q1 2020 is likely. Concerning staking, how much is needed and do we know for now the rewards? 32 ETH. Rewards depend on the total number of validators, individual validator performance, and the gas markets. I wouldn't be surprised if the typical validator has an annual return around 10%. What is the main point in eth2.0 you are the most proud of? I'm proud to have been able to make a contribution in a beautiful piece of infrastructure I believe will radically change the world in a positive way :) Do you feel that the Binance Chain is an enemy to Ethereum? No. [Justin] Q: When sharding is released, will there just suddenly be 1024 shards in existence, or will there be a small but growing number of shards as usage goes up? Starting with such a high number will leave a lot of unused space/capacity A: All 1024 shards will be launched at once. Growing the number of shards is (probably) unneeded complexity. Shards with lots of unused capacity will have lower gas prices attracting more users. Q: How can the average person help with eth2.0? Donations? Documentation? Are there any organized efforts underway? A: Educating yourself enough to feel comfortable to participate as a validator would be fantastic :) [Justin] Q: After the scaling issues are solved will this be an economical platform to host backend logic on? How will this compare to running your own server or going through a cloud hosting company in terms of cost and ease of use for light or heavy workloads? Personally, my highest anticipated use case is hosting multiplayer matchmaking and signaling, though I haven\u2019t built such a system yet out of concern for difficulty and cost. A: It's unlikely that Eth2 on its will be used as a backend for heavy workloads, the data throughput is likely just too high. That said, it works really well as a dispute resolution layer so a centralised service can run the backend optimistically and if someone disagrees with the execution, they can contest and have it resolved on Eth2. For lighter use-cases it probably can, but this is more in the context of a dapp. [Carl] Q: I was under the assumption that ETH would just update to the new ETH 2.0 chain, no need to swap coins or anything but will this transition from ETH1 to ETH2 cause a fork in the community similar to ETC Ethereum classic and ETH chain? Does the circulating supply of ETH 2.0 depend on how many people 'evolve' their ETH1 tokens to ETH2 tokens? A: ETH would just update to the new ETH 2.0 chain Unfortunately, it is not quite that simple. Eth2 is such a big upgrade over Eth1 that it is easier to implement as an entirely new chain than to upgrade. See Justin's ELI5 here for more . Does the circulating supply of ETH 2.0 depend on how many people 'evolve' their ETH1 tokens to ETH2 tokens? The large majority of it, yes. Rewards are also issued on the Eth2 chain so that increases the supply there too. Ultimately, the expectation is that all Eth1 ETH will be transferred to Eth2. Q: Do you think its worth laying 6 month/1 year/2 year 'ground rules' for Eth 2.0 chain assuming something unexpectedly goes wrong? A: My concern with doing something like this is its inflexibility. It is basically impossible to cover all the possible cases and even if we could, I'd argue that such an approach is too inflexible to handle the intricacies of exactly how something has failed. Handling it on a case-by-case basis seems like a better solution to me. [Carl] Q: Are there any plans to have the ETH 2.0 chain finalize blocks of the ETH 1.0 chain during Phase 0? For example like proposed with Casper, every 100th block will be validated by PoS. A: The integration between Eth1 and Eth2 is a roadmap orthogonal to phases 1, 2, 3 of Eth2. Are there any plans to have the ETH 2.0 chain finalize blocks of the ETH 1.0 chain during Phase 0? My best guess is this will happen in 2021. See here . [Justin] Q: What happens if you send more ETH to the deposit contract? Like 32.1 or 40? A: Nothing is stopping you from sending >32 Eth to the deposit contract, but you'll only receive rewards on the first 32 Eth, so it's not something I'd really recommend. [Carl] That's fine. Your balance will reflect the deposit, and the balance in excess of 32 ETH can be transferred to another validator (phase 1) or to a shard (phase 2). [Justin] Q: What's the easiest set up to stake let's say 320 ETH? A: A laptop should be capable of handling around 10 validators so you should be able to send 10*32 Eth to the deposit contract and start validating on your 1 machine. [Carl] A laptop should be sufficient. We'll know more in a few months when the numbers for block sizes and gas limits of shard blocks get finalized. [Vitalik] Q: What's your opinion on Harmony one's approach to a high scalability smart contract platform using PoS? I read you're involved in discussions with them, have you helped each other in developing code? A: I read you're involved in discussions with them I've had brief VDF discussions with Harmony. have you helped each other in developing code? Don't think so, at least not yet. What's your opinion on Harmony one's approach to a high scalability smart contract platform using PoS? I had a brief look at their whitepaper which seems to be inspired by Ethereum. So I guess my opinion is that their approach to scalability is great :) [Justin] Q: If Eth 2.0 introduces PoS, are there legal hurdles to be clarified upon? Could the token be considered a security token? A: I'm not aware of any jurisdiction that considers ETH on Eth1 a security, and since ETH on Eth2 is basically the same as ETH on Eth1 (other than the temporary technicality of two separate tokens) then ETH on Eth2 should not be a security. [Justin] Q: I'm planning to run a beacon node + N validators. Do you think this will will be able to be managed by a Raspberry Pi 4? I'm aware that it is being worked out to have ARM64 binaries ready soon, the question is if it seems realistic not to have a computer running at home and instead running something smaller and cleaner environmentally speaking like a Pi4. A: That depends on \"N\". I (personally) fully expect a RPi3 to be able to run at least one validator node, but we'll only know this when clients are closer to delivery. [Carl] Q: What are some smaller things that you guys would like an average r/ethtrader community member could help with? A: Educating yourself enough to feel comfortable to participate as a validator would be fantastic :) [Justin] Q: Is there any clarity on the transition process regarding basic aspects like whether Beacon eth can be sold on exchanges for example, and whether the PoW chain knows of the Beacon eth? Better asked, how do you ensure there is one network when there are two chains? A: whether Beacon eth can be sold on exchanges for example Beacon eth will be sellable on exchanges when transfers are enabled in phase 1. whether the PoW chain knows of the Beacon eth? That will come later, see here . how do you ensure there is one network when there are two chains? The long term plan is to natively integrate Eth1 into Eth2. See here . [Justin] Q: Can you explain somewhat precisely how cross sharding communication would work. As in how does shard node A talk to shard node B without going through some sort of intermediary? If they can do this talking, why can't it be used for eth to talk to say bitcoin. A: The intermediary is the beacon chain, or infrastructure optimistically predicting what will eventually get finalised in the beacon chain. [Justin] Q: How would you objectively judge the level of technological advancement of current eth and current bitcoin as far as the very limited function of sending coins from A to B is concerned? A: Eth1 and Bitcoin are comparable for on-chain payments. [Justin] Q: Presuming you agree price drives security, and presuming you agree all cryptos reside in a very competitive environment, are there any plans to address the increased issuance that the Beacon chain would bring? In addition, are there any plans to meet or maybe even surpass bitcoin's coded reduction of new supply to 2% next year. And related, what would you say to the criticisms that have already been expressed whereby if you can reduce issuance by say 10x, you can increase it too. Or asked in a more open question manner, what do you think of this process through which increases or decreases of issuance are made? A: It's possible Eth2 will cause net-negative issuance. The reason is that ETH gets burned via transaction fees. Pushing code to the beacon chain will also burn ETH. Finality, the penalties also burns ETH. [Justin] Q: Will phase 0 contain any scalability improvements? How many transactions per second will Ethereum be able to handle with Sharding? A: Phase 0 will allow for a light client that can give you hashes of the eth1 chain in a fairly lightweight way (but not too lightweight, you'll need ~200kb per 6 minutes to keep up with the committees, this will go down to 200kb per a few days with phase 1). This could be used to allow eg. light clients inside of browsers to work efficiently. That's a kind of scalability improvement, and an underdiscussed one imo. [Vitalik] Phase 0's purpose is tracking validators' states and producing randomness, asking about its scalability is not really meaningful. Regarding Tx/s, the answer is not really known. As a basic calculation, if each shard has the same throughput as Eth1.x, then we'll have 16 * 1024 = 16,384 Tx/s (assuming no inter-shard Txs). That said, the above numbers are kinda meaningless as Eth2 is designed to be used along with L2 scaling solutions like Rollups and OVM which could yield insanely high throughputs. [Carl] Q: Can you address points 2 - 4 in this tweet ? A: The default idea for clocks in eth2 is https://ethresear.ch/t/network-adjusted-timestamps/4187. There has not been that much work done on writing \"policeman\" software that would detect slashable violations by validators and penalize them, but I am not worried about this. Reasons: Even if no one writes the code, that just means the security model degrades to honest majority, which is not the worst One client implementing the code correctly is sufficient If a client implements the code badly, there's no consensus risk, they could just ship with badly written code that only works half the time and it would catch half the slashable violations. I'll defer to Danny on wire protocol stuff. [Vitalik] Point 2: \"Wire protocol\" => This is an implementation detail that I'm sure the implementers will agree upon soon enough :) The high-level recommendation from the research team is to use libp2p as the networking stack (dicv5 for discovery) and SSZ for serialisation. But this cannot enforced at the consensus layer, and we've already seen alternatives (e.g. clients using Whiteblock for networking, and Prysm is using protobufs in some places). Point 3: \"Clients to slash surround votes\" => Not sure what this means. The spec clearly defines the slashing mechanism for surround votes. See is_slashable_attestation_data. Point 4: \"Decentralized network time protocol\" => Just like Eth1, clocking is an implementation detail. It is to an extent decentralised (e.g. there are alternatives to NTP such as GPS, one can choose his/her NTP servers, one can use local clocks, etc.). It would be nice to have something even more robust but this is research territory\u2014not required for launch of Eth2. [Justin] Q: Why aren't Beacon nodes rewarded? Wouldn't this allow the network to be more decentralized? A: Validators are rewarded. Beacon nodes that are not validators are not rewarded in protocol because the protocol can't tell who's a beacon node vs just pretending to be one (eg. via 100 fake nodes pointing to the same real node). Though non-validator nodes may be able to earn money in eth2 through incentivized light client protocols. Q: In regards to the recent proposal of vitalik to use the bcash chain as a short-term scaling solution until eth 2.0 launches: is eth 2.0 still on track? is there a concrete demand for an interim solution? A: The main motivation for proposing an interim solution (if you don't like bitcoin cash for political reasons, I also recommended ethereum classic, I think it's also a good choice) is to make it easier for the work on building these layer 2s to be able to get off the ground in parallel with finalizing the work on the eth2 layer 1 itself. In general, the ethereum community is large, so doing things in parallel is its advantage. [Vitalik] Q: You do not plan to work on the creation of parachain (eth 2.0.) On Polkadot? I don't think EF will have to drive this. Web3/Parity are on it and I believe consider it to be a top priority. The Shasper (Parity) client is written in substrate to help facilitate this happening. [Danny] Q: Pretty basic but what's a realistic estimate of throughput after every is put together? A: Somewhere between 5000 and 500000 TPS depending on what execution environment and transaction type you're using. [Vitalik] Q: Could you say anything about the adoption of Ethereum Blockchain? Are there plans to create something like a B2B team actively approaching \"qualified\" companys? A: I'd say the Ethereum Foundation's primary focus is the consensus layer (research, development, education, maintenance, etc.), more so than the application layer. [Justin]","title":"Part 2"},{"location":"other/ethereum-2.0-ama/#data-questions-with-justin-drake","text":"Q: How much data will there be in Eth2? JD: As the spec currently stands, on average 2.8MB/s across all shards with a \"burst mode\" which is 4x that (i.e. 11.3MB/s). Q: What does this translate into for state size? JD: At the consensus layer block size and state size are basically orthogonal considerations. Consensus-layer state size will always remain very small since we lean heavily on stateless clients. In theory application-layer state (\"L2 state\") can grow up to 2.8MB/s. For execution engines without state rent, you can expect state to grow roughly as fast as Eth1 state grows today. Multiply that by 1024 shards and the situation is possibly not long-term sustainable. This is a significant reason why I personally believe we should progressively launch execution engines (as opposed to allowing anyone to deploy EEs at launch), starting with an EE that has state rent. Q: What role do nodes play (versus validators)? JD: At the consensus layer non-validator nodes don't play any role. At the networking layer they can act as lubricants to relay message. They may also help create blocks for block proposers, i.e. be \"relayers\". Q: Who will run these nodes? JD: Nodes can be run by anyone who wants \"direct\" access to Eth2 (e.g. service providers such as exchanges, etherscan, power users). Relayer nodes may be run by specialised businesses. Q:For someone that needs to run a node (EtherScan), what will the resourcing look like? JD: They will get their data by being nodes and listening on the gossip networks. The bad news is that bandwidth should grow by roughly 1024x to keep track of all shards. But then again, that's not terrible news because a good internet connection (especially server-class) can handle 4 11.2MB/s (the 4 is, say, the gossiping overhead). The good news is that consensus state is minimal (again, stateless clients), which means zero consensus-layer I/O which is currently an Eth1 bottleneck. They can then choose withever EEs and/or dApps it wants to support, i.e. it's opt-in. Q:How do we assume all data is stored and available? JD: For recent blocks we have quite sophisticated infrastructure, including proofs of custody in phase 1 and data availability proofs (possibly phase 2). For historical blocks we rely on the ecosystem to keep them around. Q:What will \"historical blocks\" be needed for. As in, if they were lost forever, what would be messed up? JD: Historical blocks are required to recompute application-layer state, and may also contain application-layer receipts. If they were lost forever (which I don't expect would ever happen) then applications without at least one synced full node may lose user state. Q:Will people congregate on a few shards? JD: Hard to tell. Naive dApp design would suggest that dApps would aggregate into clusters within shard boundaries. We are exploring dApp designs that are somewhat shard-agnostic, i.e. consume data availability from shards as a fungible resource. Q:Quick explanation of cross shard communication and where research is? JD: Cross shard communication is a huge design space, just like \"plasma\" or \"state channels\". At the consensus layer we don't provide much infrastructure beyond crosslinks. I'm expecting significant experimentation in the early days followed by standardisation, somewhat similar to the token transfer design space and the ERC20 standard. One big idea is the concept of \"optimistic crosslink\" which are shared between shards in advance of the real crosslinks, and which with high probability will match the actual crosslinks that get finalised. dApps can use optimistic crosslinks to get super-low cross-shard latency. Q:Why 1024 shards? JD: Because 2048 shards would be stressing the beacon chain and 512 shards would be under-utilising the beacon chain.","title":"Data Questions with Justin Drake"},{"location":"other/ethereum-2.0-ama/#resources","text":"Part 1 Part 2","title":"Resources:"},{"location":"other/ethereum-blog-archive/","text":"Ethereum.org Blog Archive Blog Archive December 2013 Bootstrapping A Decentralized Autonomous Corporation: Part I Bootstrapping An Autonomous Decentralized Corporation, Part 2: Interacting With the World Bootstrapping a Decentralized Autonomous Corporation, Part 3: Identity Corp January 2014 Slasher: A Punitive Proof-of-Stake Algorithm Ethereum: Now Going Public Conference, Alpha Testnet and Ether Pre-sale Updates February 2014 On Transaction Fees, And The Fallacy of Market-Based Solutions Introducing Ethereum Script 2.0 More Thoughts on Scripting and Future-Compatibility Cryptographic Code Obfuscation: Decentralized Autonomous Organizations Are About to Take a Huge Leap Forward Why Not Just Use X? An Instructive Example from Bitcoin Important Statement regarding the Ether pre-sale Ethereum Scalability and Decentralization Updates DAOs Are Not Scary, Part 1: Self-Enforcing Contracts And Factum Law March 2014 DAOs Are Not Scary, Part 2: Reducing Barriers The Question of Mining The Latest EVM: \u201cEthereum Is A Trust-Free Closure System\u201d SchellingCoin: A Minimal-Trust Universal Data Feed April 2014 Pythereum and Serpent Programming Guide The Issuance Model in Ethereum Decentralized Protocol Monetization and Forks May 2014 Serpent upgrades: More Fun Stuff DAOs, DACs, DAs and More: An Incomplete Terminology Guide What is Ethereum? Project, Platform, Fuel, Stack. The Xbox and Ethereum\u2019s Dual Mandate Long-Range Attacks: The Serious Problem With Adaptive Proof of Work On Long-Term Cryptocurrency Distribution Models What If Ethereum Lived on a Treap? Or, Blockchains Charging Rent June 2014 Ethereum Project Update On Mining Advanced Contract Programming Example: SchellingCoin July 2014 On Stake Background on the mechanics of the ether pre-sale Toward a 12-second Block Time the ethereum project: learning to dream with open minds Ethereum and Oracles Launching the Ether Sale Ether Purchase Troubleshooting August 2014 Programming Society with Asm: Gavin Wood at Assembly 2014 Ether Sale: A Statistical Overview Announcement on planned withdrawal from exodus Secret Sharing and Erasure Coding: A Guide for the Aspiring Dropbox Decentralizer building the decentralized web 3.0 An Introduction to Futarchy State of Ethereum: August Edition September 2014 Software and Bounded Rationality crypto renaissance Scalability, Part 1: Building on Top October 2014 Slasher Ghost, and Other Developments in Proof of Stake Gav\u2019s \u00d0\u039eV Update I: Where Ethereum\u2019s at Scalability, Part 2: Hypercubes An Information-Theoretic Account of Secure Brainwallets November 2014 Gav\u2019s Ethereum \u00d0\u039eV Update II Jeff\u2019s Ethereum \u00d0\u039eV Update I Ethereum Community and Adoption Update \u2013 Week 1 The Search for a Stable Cryptocurrency Scalability, Part 3: On Metacoin History and Multichain Gav\u2019s Ethereum \u00d0\u039eV Update III On Bitcoin Maximalism, and Currency and Platform Network Effects Proof of Stake: How I Learned to Love Weak Subjectivity December 2014 From inside Ethereum \u00d0\u039eVhub Berlin \u00d0\u039eVcon-0 Recap Gav\u2019s Ethereum \u00d0\u039eV Update IV Ethereum \u00d0\u039eV: What are we doing? A call to all the bug bounty hunters out there\u2026 Secret Sharing DAOs: The Other Crypto 2.0 On Silos January 2015 Jeff\u2019s Ethereum \u00d0\u039eV Update II Ethereum Community Survey Light Clients and Proof of Stake Superrationality and DAOs The P + epsilon Attack February 2015 The Subjectivity / Exploitability Tradeoff March 2015 Gav\u2019s Ethereum \u00d0\u039eV Update V The Ethereum Launch Process The Ethereum Development Process Getting to the Frontier Mihai\u2019s Ethereum Project Update. The First Year. Jutta\u2019s update on bug bounty program and security audit Ethereum Builders: A Proposed Experiment April 2015 Ethereum\u2019s unexpected future direction Implementing Vitalik\u2019s vision Bazaar Services Blockchain Scalability: Chain-Fibers Redux Ethereum Builders: Tapping Into The Collaborative Potential DEVgrants: Here to Help Ethereum Foundation is hiring an Executive Director Ethereum Foundation Open Call re: Board Selection Visions, Part 1: The Value of Blockchain Technology Visions, Part 2: The Problem of Trust May 2015 The end of the beginning\u2026 Olympic: Frontier Pre-Release Announcing e\u03c0: Ethereum on Raspberry Pi Programme The Business Imperative Behind the Ethereum Vision June 2015 The Problem of Censorship Another Ethereum \u00d0\u039eV Update Ethereum messaging for the masses (including fathers) \u2013 via infographic State Tree Pruning July 2015 On Abstraction How do you know Ethereum is secure? Frontier is coming \u2013 what to expect, and how to prepare Final Steps A few last minute notes\u2026 Ethereum Launches Announcing the New Foundation Board and Executive Director August 2015 Introducing Casper \u201cthe Friendly Ghost\u201d The Thawing Frontier Ethereum Protocol Update 1 On Public and Private Blockchains Security Alert 1 windows+alethzero Chain Reorganisation Depth Expectations An Analysis of the First 100000 Blocks Security alert consensus issue Olympic Rewards Announced On Anti-Pre-Revelation Games Security Advisory Insecurely configured geth can make funds remotely accessible September 2015 devcon one postponed until further notice Security Advisory Implementation bugs in Go and Python clients can cause DoS \u2013 Fixed \u2013 Please update clients Security Alert \u2013 Implementation bug in Go clients causing increase in difficulty \u2013 Fixed \u2013 Miners check and update Go clients A message from Stephan Tual Security Alert \u2013 Previous security patch can lead to invalid state root on Go clients with a specific transaction sequence \u2013 Fixed. Please update. On Slow and Fast Block Times Ethereum Wallet \u2013 Developer Preview Ethereum Comms Announcement DEVcon is back! More uncle statistics The Evolution of Ethereum October 2015 Security Advisory eth (cpp-ethereum) potentially vulnerable if running with UPnP enabled Ethereum Dev Update 2015 / Week 41 Vitalik\u2019s Research and Ecosystem Update Security alert Implementation of BLOCKHASH instruction in C++ and Go clients can potentially cause consensus issue \u2013 Fixed. Please update. Nick Szabo Confirmed as Keynote Speaker of Ethereum\u2019s DEVCON1 Microsoft to Sponsor Ethereum\u2019s DEVCON1 November 2015 Ethereum Dev Update 2015 / Week 44 Stateful Turing-Complete Policies Merkling in Ethereum Applications of Security Deposits and Prediction Markets You Might Not Have Thought About December 2015 Ethereum in practice part 1: how to build your own cryptocurrency without touching a line of code Ethereum in practice part 2: how to build a better democracy in under a 100 lines of code Ethereum in practice part 3: how to build your own transparent bank on the blockchain Understanding Serenity, Part I: Abstraction Understanding Serenity, Part 2: Casper January 2016 Ethereum Foundation Internal Update \u00d0\u039eVgrants Update and New Funding The last Blog Post Privacy on the Blockchain February 2016 Ambients Applied to Ethereum Cut and try: building a dream Ethereum DEV Update: C++ Roadmap BTC Relay included in Ethereum Bounty Program From Smart Contracts to Courts with not so Smart Judges Homestead Release March 2016 Serenity PoC2 An Open Source Mining Pool Bounty and DEVgrant Solidity Available in Visual Studio April 2016 Ethereum Partners with R3CEV on Lizardcoin, Bringing Together the Best of Centralized Finance and Blockchain Technology Ethereum Foundation and Wanxiang Blockchain Labs announce a blockbuster event combining Devcon2 and the 2nd Global Blockchain Summit in Shanghai, September 19\u201324, 2016 May 2016 C++ DEV Update: Announcing Remix On Settlement Finality Security Alert \u2013 Geth suffers from a very low probable DoS attack vector \u2013 Update immediately Security Alert \u2013 cpp-ethereum keeps accounts unlocked June 2016 Go Ethereum\u2019s JIT-EVM Security Alert \u2013 cpp-ethereum\u2019s account unlocking problem not yet fixed Now fixed Smart Contract Security The Ethereum Foundation welcomes Microsoft as the Premiere Sponsor of Devcon2, Shanghai 19-21 September, 2016 CRITICAL UPDATE Re: DAO Vulnerability Thinking About Smart Contract Security Security Alert \u2013 Smart Contract Wallets created in frontier are vulnerable to phishing attacks DAO Wars: Your voice on the soft-fork dilemma Security Alert \u2013 DoS Vulnerability in the Soft Fork July 2016 The Devcon2 site is now live! C++ DEV Update \u2013 July edition Taylor\u2019s Summer Update How to build server less applications for Mist To fork or not to fork Hard Fork Completed Hive: How we strived for a clean fork Onward from the Hard Fork On Inflation, Transaction Fees and Cryptocurrency Monetary Policy September 2016 Dev Update: Formal Methods Security alert \u2013 All geth nodes crash due to an out of memory bug The Ethereum network is currently undergoing a DoS attack Transaction spam attack: Next Steps October 2016 Announcement of imminent hard fork for EIP150 gas cost changes FAQ: Upcoming Ethereum Hard Fork Security Alert \u2013 Mist can be vulnerable when navigating to malicious DApps Uncle Rate and Transaction Fee Analysis November 2016 Security Alert \u2013 Solidity \u2013 Variables can be overwritten in storage Analysis of Storage Corruption Bug Whoa\u2026 Geth 1.5 Hard Fork No. 4: Spurious Dragon From Morden to Ropsten Security alert 11/24/2016: Consensus bug in geth v1.4.19 and v1.5.2 December 2016 Ethereum Research Update zkSNARKs in a nutshell The History of Casper \u2014 Chapter 1 The History of Casper \u2013 Chapter 2 Swarm alpha public pilot and the basics of Swarm Security alert 12/19/2016: Ethereum.org Forums Database Compromised December Roundup January 2017 Introduction of the Light Client for DApp developers An Update on Integrating Zcash on Ethereum (ZoE) February 2017 Ethereum R&D Roundup: Valentine\u2019s Day Edition March 2017 Ethereum JS Ecosystem Updates April 2017 Ethereum Dev Roundup: Q1 Ethereum Dev Roundup: Q1 (Boring Edition) Geth 1.6 \u2013 Puppeth Master May 2017 Solidity optimizer bug Roundup Round III July 2017 Roundup Q2 August 2017 Statement Objecting To EME as a W3C Recommendation Roundup #5 September 2017 Geth 1.7 \u2013 Megara October 2017 Roundup #6 Byzantium HF Announcement November 2017 Devcon3!!! Devcon3 videos available now! December 2017 Security alert \u2014 Chromium vulnerability affecting Mist Browser Beta January 2018 Q4 Roundup Ethereum scalability research and development subsidy programs To Infinity and Beyond! Farewell and Welcome February 2018 Geth 1.8 \u2013 Iceberg\u00b9 March 2018 Announcing Beneficiaries of the Ethereum Foundation Grants April 2018 Announcing World Trade Francs: The Official Ethereum Stablecoin May 2018 Announcing May 2018 Cohort of EF Grants Devcon4 Announcement June 2018 Announcing Swarm Proof-of-Concept Release 3 July 2018 Devcon4 Ticket Sales An Update on Devcon4 Ticket Allocations & Sales Devcon4 Application Deadlines Coming Soon Answers to your top 3 Devcon4 questions Devcon4 Call for Participation! August 2018 Ethereum Foundation Grants Update - Wave III September 2018 Solidity Bugfix Release October 2018 Ethereum Foundation Grants Update - Wave IV Announcing Our dc\u27e0\u0131v Sponsors and Supporters! How the Ethereum Foundation grants program makes decisions December 2018 Devcon4 Videos and Pictures Released! Call for Submissions! DApps Solving Real-World Issues January 2019 Announcing an Ethereum Foundation Grant to Parity Technologies Ethereum Constantinople Upgrade Announcement Security Alert: Ethereum Constantinople Postponement February 2019 Ethereum Foundation Grants Program Wave 5 Ethereum Constantinople/St. Petersburg Upgrade Announcement March 2019 Solidity Optimizer and ABIEncoderV2 Bug April 2019 Beginning a new ethereum.org May 2019 Ethereum Foundation Spring 2019 Update June 2019 Devcon in Osaka: Applications now open! EF-Supported Teams: Development Report Solidity Storage Array Bugs July 2019 Geth v1.9.0 On Wave 1 and Devcon Ticketing Devcon updates: Announcing Wave 2, a New Application window, and more! August 2019 Devcon Tickets: Wave 3 and beyond Translating Ethereum for our Global Community Announcing the Devcon Scholars Program Devcon5 On-Chain Ticket Sale Announcing Ethereum Foundation and Co-Funded Grants September 2019 Live: Devcon5 Final Ticket Appeals Devcon On-Chain Raffle & Auction Participants Development Update #0 - Ethereum.org Eth2 Interop in Review Devcon5 Schedule, Sponsors and Speakers are online NOW! October 2019 The Devcon5 Bible eth2 quick update eth2 quick update no. 2 November 2019 Eth2 at ETHWaterloo: Prizes for Eth2 education, tooling, and research eth2 quick update no. 3 Development Update #1 - Ethereum.org Announcing a Taiwan-specific Wave of Grants Ecosystem Support Program call for applications Ethereum Istanbul Upgrade Announcement eth2 quick update no. 4 Validated: Staking on eth2 #0 December 2019 EF-Supported Teams: Research & Development Update eth2 quick update no. 5 The 1.x Files: a fast-sync eth2 quick update no. 6 The 1.x Files: December call digest Ethereum Muir Glacier Upgrade Announcement The 1.x Files: The State of Stateless Ethereum January 2020 Update on the Vyper Compiler Validated, staking on eth2: #1 - Incentives eth2 quick update no. 7 The 1.x Files: January call digest Archived Comments The Ethereum blog was redesigned at a point in time and historical comments no longer show up on the pages. The old comments can be found here .","title":"Ethereum.org Blog Archive"},{"location":"other/ethereum-blog-archive/#ethereumorg-blog-archive","text":"","title":"Ethereum.org Blog Archive"},{"location":"other/ethereum-blog-archive/#blog-archive","text":"December 2013 Bootstrapping A Decentralized Autonomous Corporation: Part I Bootstrapping An Autonomous Decentralized Corporation, Part 2: Interacting With the World Bootstrapping a Decentralized Autonomous Corporation, Part 3: Identity Corp January 2014 Slasher: A Punitive Proof-of-Stake Algorithm Ethereum: Now Going Public Conference, Alpha Testnet and Ether Pre-sale Updates February 2014 On Transaction Fees, And The Fallacy of Market-Based Solutions Introducing Ethereum Script 2.0 More Thoughts on Scripting and Future-Compatibility Cryptographic Code Obfuscation: Decentralized Autonomous Organizations Are About to Take a Huge Leap Forward Why Not Just Use X? An Instructive Example from Bitcoin Important Statement regarding the Ether pre-sale Ethereum Scalability and Decentralization Updates DAOs Are Not Scary, Part 1: Self-Enforcing Contracts And Factum Law March 2014 DAOs Are Not Scary, Part 2: Reducing Barriers The Question of Mining The Latest EVM: \u201cEthereum Is A Trust-Free Closure System\u201d SchellingCoin: A Minimal-Trust Universal Data Feed April 2014 Pythereum and Serpent Programming Guide The Issuance Model in Ethereum Decentralized Protocol Monetization and Forks May 2014 Serpent upgrades: More Fun Stuff DAOs, DACs, DAs and More: An Incomplete Terminology Guide What is Ethereum? Project, Platform, Fuel, Stack. The Xbox and Ethereum\u2019s Dual Mandate Long-Range Attacks: The Serious Problem With Adaptive Proof of Work On Long-Term Cryptocurrency Distribution Models What If Ethereum Lived on a Treap? Or, Blockchains Charging Rent June 2014 Ethereum Project Update On Mining Advanced Contract Programming Example: SchellingCoin July 2014 On Stake Background on the mechanics of the ether pre-sale Toward a 12-second Block Time the ethereum project: learning to dream with open minds Ethereum and Oracles Launching the Ether Sale Ether Purchase Troubleshooting August 2014 Programming Society with Asm: Gavin Wood at Assembly 2014 Ether Sale: A Statistical Overview Announcement on planned withdrawal from exodus Secret Sharing and Erasure Coding: A Guide for the Aspiring Dropbox Decentralizer building the decentralized web 3.0 An Introduction to Futarchy State of Ethereum: August Edition September 2014 Software and Bounded Rationality crypto renaissance Scalability, Part 1: Building on Top October 2014 Slasher Ghost, and Other Developments in Proof of Stake Gav\u2019s \u00d0\u039eV Update I: Where Ethereum\u2019s at Scalability, Part 2: Hypercubes An Information-Theoretic Account of Secure Brainwallets November 2014 Gav\u2019s Ethereum \u00d0\u039eV Update II Jeff\u2019s Ethereum \u00d0\u039eV Update I Ethereum Community and Adoption Update \u2013 Week 1 The Search for a Stable Cryptocurrency Scalability, Part 3: On Metacoin History and Multichain Gav\u2019s Ethereum \u00d0\u039eV Update III On Bitcoin Maximalism, and Currency and Platform Network Effects Proof of Stake: How I Learned to Love Weak Subjectivity December 2014 From inside Ethereum \u00d0\u039eVhub Berlin \u00d0\u039eVcon-0 Recap Gav\u2019s Ethereum \u00d0\u039eV Update IV Ethereum \u00d0\u039eV: What are we doing? A call to all the bug bounty hunters out there\u2026 Secret Sharing DAOs: The Other Crypto 2.0 On Silos January 2015 Jeff\u2019s Ethereum \u00d0\u039eV Update II Ethereum Community Survey Light Clients and Proof of Stake Superrationality and DAOs The P + epsilon Attack February 2015 The Subjectivity / Exploitability Tradeoff March 2015 Gav\u2019s Ethereum \u00d0\u039eV Update V The Ethereum Launch Process The Ethereum Development Process Getting to the Frontier Mihai\u2019s Ethereum Project Update. The First Year. Jutta\u2019s update on bug bounty program and security audit Ethereum Builders: A Proposed Experiment April 2015 Ethereum\u2019s unexpected future direction Implementing Vitalik\u2019s vision Bazaar Services Blockchain Scalability: Chain-Fibers Redux Ethereum Builders: Tapping Into The Collaborative Potential DEVgrants: Here to Help Ethereum Foundation is hiring an Executive Director Ethereum Foundation Open Call re: Board Selection Visions, Part 1: The Value of Blockchain Technology Visions, Part 2: The Problem of Trust May 2015 The end of the beginning\u2026 Olympic: Frontier Pre-Release Announcing e\u03c0: Ethereum on Raspberry Pi Programme The Business Imperative Behind the Ethereum Vision June 2015 The Problem of Censorship Another Ethereum \u00d0\u039eV Update Ethereum messaging for the masses (including fathers) \u2013 via infographic State Tree Pruning July 2015 On Abstraction How do you know Ethereum is secure? Frontier is coming \u2013 what to expect, and how to prepare Final Steps A few last minute notes\u2026 Ethereum Launches Announcing the New Foundation Board and Executive Director August 2015 Introducing Casper \u201cthe Friendly Ghost\u201d The Thawing Frontier Ethereum Protocol Update 1 On Public and Private Blockchains Security Alert 1 windows+alethzero Chain Reorganisation Depth Expectations An Analysis of the First 100000 Blocks Security alert consensus issue Olympic Rewards Announced On Anti-Pre-Revelation Games Security Advisory Insecurely configured geth can make funds remotely accessible September 2015 devcon one postponed until further notice Security Advisory Implementation bugs in Go and Python clients can cause DoS \u2013 Fixed \u2013 Please update clients Security Alert \u2013 Implementation bug in Go clients causing increase in difficulty \u2013 Fixed \u2013 Miners check and update Go clients A message from Stephan Tual Security Alert \u2013 Previous security patch can lead to invalid state root on Go clients with a specific transaction sequence \u2013 Fixed. Please update. On Slow and Fast Block Times Ethereum Wallet \u2013 Developer Preview Ethereum Comms Announcement DEVcon is back! More uncle statistics The Evolution of Ethereum October 2015 Security Advisory eth (cpp-ethereum) potentially vulnerable if running with UPnP enabled Ethereum Dev Update 2015 / Week 41 Vitalik\u2019s Research and Ecosystem Update Security alert Implementation of BLOCKHASH instruction in C++ and Go clients can potentially cause consensus issue \u2013 Fixed. Please update. Nick Szabo Confirmed as Keynote Speaker of Ethereum\u2019s DEVCON1 Microsoft to Sponsor Ethereum\u2019s DEVCON1 November 2015 Ethereum Dev Update 2015 / Week 44 Stateful Turing-Complete Policies Merkling in Ethereum Applications of Security Deposits and Prediction Markets You Might Not Have Thought About December 2015 Ethereum in practice part 1: how to build your own cryptocurrency without touching a line of code Ethereum in practice part 2: how to build a better democracy in under a 100 lines of code Ethereum in practice part 3: how to build your own transparent bank on the blockchain Understanding Serenity, Part I: Abstraction Understanding Serenity, Part 2: Casper January 2016 Ethereum Foundation Internal Update \u00d0\u039eVgrants Update and New Funding The last Blog Post Privacy on the Blockchain February 2016 Ambients Applied to Ethereum Cut and try: building a dream Ethereum DEV Update: C++ Roadmap BTC Relay included in Ethereum Bounty Program From Smart Contracts to Courts with not so Smart Judges Homestead Release March 2016 Serenity PoC2 An Open Source Mining Pool Bounty and DEVgrant Solidity Available in Visual Studio April 2016 Ethereum Partners with R3CEV on Lizardcoin, Bringing Together the Best of Centralized Finance and Blockchain Technology Ethereum Foundation and Wanxiang Blockchain Labs announce a blockbuster event combining Devcon2 and the 2nd Global Blockchain Summit in Shanghai, September 19\u201324, 2016 May 2016 C++ DEV Update: Announcing Remix On Settlement Finality Security Alert \u2013 Geth suffers from a very low probable DoS attack vector \u2013 Update immediately Security Alert \u2013 cpp-ethereum keeps accounts unlocked June 2016 Go Ethereum\u2019s JIT-EVM Security Alert \u2013 cpp-ethereum\u2019s account unlocking problem not yet fixed Now fixed Smart Contract Security The Ethereum Foundation welcomes Microsoft as the Premiere Sponsor of Devcon2, Shanghai 19-21 September, 2016 CRITICAL UPDATE Re: DAO Vulnerability Thinking About Smart Contract Security Security Alert \u2013 Smart Contract Wallets created in frontier are vulnerable to phishing attacks DAO Wars: Your voice on the soft-fork dilemma Security Alert \u2013 DoS Vulnerability in the Soft Fork July 2016 The Devcon2 site is now live! C++ DEV Update \u2013 July edition Taylor\u2019s Summer Update How to build server less applications for Mist To fork or not to fork Hard Fork Completed Hive: How we strived for a clean fork Onward from the Hard Fork On Inflation, Transaction Fees and Cryptocurrency Monetary Policy September 2016 Dev Update: Formal Methods Security alert \u2013 All geth nodes crash due to an out of memory bug The Ethereum network is currently undergoing a DoS attack Transaction spam attack: Next Steps October 2016 Announcement of imminent hard fork for EIP150 gas cost changes FAQ: Upcoming Ethereum Hard Fork Security Alert \u2013 Mist can be vulnerable when navigating to malicious DApps Uncle Rate and Transaction Fee Analysis November 2016 Security Alert \u2013 Solidity \u2013 Variables can be overwritten in storage Analysis of Storage Corruption Bug Whoa\u2026 Geth 1.5 Hard Fork No. 4: Spurious Dragon From Morden to Ropsten Security alert 11/24/2016: Consensus bug in geth v1.4.19 and v1.5.2 December 2016 Ethereum Research Update zkSNARKs in a nutshell The History of Casper \u2014 Chapter 1 The History of Casper \u2013 Chapter 2 Swarm alpha public pilot and the basics of Swarm Security alert 12/19/2016: Ethereum.org Forums Database Compromised December Roundup January 2017 Introduction of the Light Client for DApp developers An Update on Integrating Zcash on Ethereum (ZoE) February 2017 Ethereum R&D Roundup: Valentine\u2019s Day Edition March 2017 Ethereum JS Ecosystem Updates April 2017 Ethereum Dev Roundup: Q1 Ethereum Dev Roundup: Q1 (Boring Edition) Geth 1.6 \u2013 Puppeth Master May 2017 Solidity optimizer bug Roundup Round III July 2017 Roundup Q2 August 2017 Statement Objecting To EME as a W3C Recommendation Roundup #5 September 2017 Geth 1.7 \u2013 Megara October 2017 Roundup #6 Byzantium HF Announcement November 2017 Devcon3!!! Devcon3 videos available now! December 2017 Security alert \u2014 Chromium vulnerability affecting Mist Browser Beta January 2018 Q4 Roundup Ethereum scalability research and development subsidy programs To Infinity and Beyond! Farewell and Welcome February 2018 Geth 1.8 \u2013 Iceberg\u00b9 March 2018 Announcing Beneficiaries of the Ethereum Foundation Grants April 2018 Announcing World Trade Francs: The Official Ethereum Stablecoin May 2018 Announcing May 2018 Cohort of EF Grants Devcon4 Announcement June 2018 Announcing Swarm Proof-of-Concept Release 3 July 2018 Devcon4 Ticket Sales An Update on Devcon4 Ticket Allocations & Sales Devcon4 Application Deadlines Coming Soon Answers to your top 3 Devcon4 questions Devcon4 Call for Participation! August 2018 Ethereum Foundation Grants Update - Wave III September 2018 Solidity Bugfix Release October 2018 Ethereum Foundation Grants Update - Wave IV Announcing Our dc\u27e0\u0131v Sponsors and Supporters! How the Ethereum Foundation grants program makes decisions December 2018 Devcon4 Videos and Pictures Released! Call for Submissions! DApps Solving Real-World Issues January 2019 Announcing an Ethereum Foundation Grant to Parity Technologies Ethereum Constantinople Upgrade Announcement Security Alert: Ethereum Constantinople Postponement February 2019 Ethereum Foundation Grants Program Wave 5 Ethereum Constantinople/St. Petersburg Upgrade Announcement March 2019 Solidity Optimizer and ABIEncoderV2 Bug April 2019 Beginning a new ethereum.org May 2019 Ethereum Foundation Spring 2019 Update June 2019 Devcon in Osaka: Applications now open! EF-Supported Teams: Development Report Solidity Storage Array Bugs July 2019 Geth v1.9.0 On Wave 1 and Devcon Ticketing Devcon updates: Announcing Wave 2, a New Application window, and more! August 2019 Devcon Tickets: Wave 3 and beyond Translating Ethereum for our Global Community Announcing the Devcon Scholars Program Devcon5 On-Chain Ticket Sale Announcing Ethereum Foundation and Co-Funded Grants September 2019 Live: Devcon5 Final Ticket Appeals Devcon On-Chain Raffle & Auction Participants Development Update #0 - Ethereum.org Eth2 Interop in Review Devcon5 Schedule, Sponsors and Speakers are online NOW! October 2019 The Devcon5 Bible eth2 quick update eth2 quick update no. 2 November 2019 Eth2 at ETHWaterloo: Prizes for Eth2 education, tooling, and research eth2 quick update no. 3 Development Update #1 - Ethereum.org Announcing a Taiwan-specific Wave of Grants Ecosystem Support Program call for applications Ethereum Istanbul Upgrade Announcement eth2 quick update no. 4 Validated: Staking on eth2 #0 December 2019 EF-Supported Teams: Research & Development Update eth2 quick update no. 5 The 1.x Files: a fast-sync eth2 quick update no. 6 The 1.x Files: December call digest Ethereum Muir Glacier Upgrade Announcement The 1.x Files: The State of Stateless Ethereum January 2020 Update on the Vyper Compiler Validated, staking on eth2: #1 - Incentives eth2 quick update no. 7 The 1.x Files: January call digest","title":"Blog Archive"},{"location":"other/ethereum-blog-archive/#archived-comments","text":"The Ethereum blog was redesigned at a point in time and historical comments no longer show up on the pages. The old comments can be found here .","title":"Archived Comments"},{"location":"other/ethereum-branding-kit/","text":"Ethereum Branding Kit The following branding kits are built by the Ethereum community for Ethereum based companies to use on their website and application where necessary. Built on Ethereum These logos should be used on websites of applications or products that are built on Ethereum.","title":"Ethereum Branding Kit"},{"location":"other/ethereum-branding-kit/#ethereum-branding-kit","text":"The following branding kits are built by the Ethereum community for Ethereum based companies to use on their website and application where necessary.","title":"Ethereum Branding Kit"},{"location":"other/ethereum-branding-kit/#built-on-ethereum","text":"These logos should be used on websites of applications or products that are built on Ethereum.","title":"Built on Ethereum"},{"location":"other/grants-process/","text":"Grants Process NOTE: This is a working draft. All the ideas presented below are just that - ideas. We encourage everyone to submit their own ideas and start discussions around what can be done to improve the Grants Process within Ethereum. Summary This document was sparked by a recent Twitter thread where members of the Ethereum community came together to create a document aimed at disscussing ideas for new methods and processes that the Ethereum Foundation and it's community can work on to make the Grants process the best it can be for its recipients. The Discussion Main variables to consider prior to giving the grant Firstly, work should already be in progress. Is the project working towards an achievable goal? The team is recommended to have experience delivering ETH/DLT solutions Teams that are potential recipients of a grant should have a brief initial chat with EF to getting to know them, how they work and what their goals are. There needs to be due diligence to some degree. This also may not be necessary if a project with already completed work can be reviewed publicly. The Community (developer community) should be updated with their progress and kept engaged with learning material etc.. What can the Ethereum Foundation do to make the grants process better? The project\u2019s work should have already begun and the project should disclose what the grant will be used for. Grants should not pay for planning rather for execution. Once the applicant receives a Notice of Grant and the funds have been disbursed, they will continue to work on the project. Visibility into grant decisions and why certain amounts are given From a grantee perspective, when receiving a grant of certain amounts it would be nice to know why this particular amount was granted. It would be helpful for the grant provider to explain WHY the grant was awarded and WHY such an amount. It would also be good to clarify what is expected from the specific grant amount. Also, it would be nice to know what the projects have to do in order to potentially receive a follow-up grant etc.. Implement Checkpoints / Demos The grant recipients are responsible for meeting with the foundation grant team for financial reporting requirements and development updates. Disclosure of funds spent A timeline of use-of-funds should be announced prior to receiving the capital. For example, 2 full-time devs and 2 part-time, 40 hours a week and 20 hours a week respectively. Financial reporting includes: How much was spent each month and what it was for For personal privacy/security, there is no need to disclose how much each person received. An idea of what the rest of the funds will be used for Support/Guidance For funds usage and potential advisory: tips/advice on how to use their grants, such as if they should cash out / convert to Dai in order to cover their operations for X amount of time. Some ideas/options include: i. Multi-Sig where the grant funds are held in Dai/Eth This gives a transparent view of the distribution of funds given out on a monthly basis and to fund consumption progress. Perhaps one funding schedule announced by the team, they then give them funds? Clear usage of funds/transparency. The multi-signature wallet requirement ensures redundancy and prevention from accidental loss or theft of funds. ii. The grants process doesn't need to enforce an ideal situation because if a project is working on DLT tech you should be trying to #hodl crypto and pay your workers in tokens. If the EF transfers USD to a foreign account, the banks are going to take a fat ~5% FX fee/premium. If you're not running on USD and you don't want to hold ETH, the team may find it best to take the ETH and sell it at a local exchange (jurisdiction /legal dependent). For example, DAI is, of course, a solution to the volatility issue, but if you're not in the US you're going to struggle to liquidate it to local currency, plus you're taking a position on USD compared to your local labor. iii. As a grant giver, you may need the developer community or foundation to help out. It is what the project needs - some are self-sufficient and require very little involvement but others may need some hand-holding and need an army of internal/external resources. iv. Mentoring from the funding foundation to help guide the grantee. This would include reporting to the funding foundation on a scheduled basis. Where the mentor can chat with the team about the overall financial status and project performance of the grant project. Product market fit (PMF) - This section is optional/dependant on the project origins Implement regular PMF analysis and identify whether the portfolio company will survive in the long run and then assist them in refining their PMF (if it is not too late). This section is optional/dependant on the project because some grants aren't concerned with market fit. For example, many documentation or research projects aren't going to be valuable in any market. Encourage inter-grantees company partnerships and synergies When a company gets a grant from a foundation, they agree to work together and it should be a win-win partnership. Closeout requirements This process includes a review of the final financial and technical progress from the grantee, the grant lifecycle end. The project is then considered for a follow-up grant or the grant process closes. Resources How the Ethereum Foundation grants program makes decisions Ethereum Fundraising Event Ethereum Foundation Grants Update - The Most Recent Grants Wave","title":"Grants Process"},{"location":"other/grants-process/#grants-process","text":"NOTE: This is a working draft. All the ideas presented below are just that - ideas. We encourage everyone to submit their own ideas and start discussions around what can be done to improve the Grants Process within Ethereum.","title":"Grants Process"},{"location":"other/grants-process/#summary","text":"This document was sparked by a recent Twitter thread where members of the Ethereum community came together to create a document aimed at disscussing ideas for new methods and processes that the Ethereum Foundation and it's community can work on to make the Grants process the best it can be for its recipients.","title":"Summary"},{"location":"other/grants-process/#the-discussion","text":"","title":"The Discussion"},{"location":"other/grants-process/#main-variables-to-consider-prior-to-giving-the-grant","text":"Firstly, work should already be in progress. Is the project working towards an achievable goal? The team is recommended to have experience delivering ETH/DLT solutions Teams that are potential recipients of a grant should have a brief initial chat with EF to getting to know them, how they work and what their goals are. There needs to be due diligence to some degree. This also may not be necessary if a project with already completed work can be reviewed publicly. The Community (developer community) should be updated with their progress and kept engaged with learning material etc..","title":"Main variables to consider prior to giving the grant"},{"location":"other/grants-process/#what-can-the-ethereum-foundation-do-to-make-the-grants-process-better","text":"The project\u2019s work should have already begun and the project should disclose what the grant will be used for. Grants should not pay for planning rather for execution. Once the applicant receives a Notice of Grant and the funds have been disbursed, they will continue to work on the project. Visibility into grant decisions and why certain amounts are given From a grantee perspective, when receiving a grant of certain amounts it would be nice to know why this particular amount was granted. It would be helpful for the grant provider to explain WHY the grant was awarded and WHY such an amount. It would also be good to clarify what is expected from the specific grant amount. Also, it would be nice to know what the projects have to do in order to potentially receive a follow-up grant etc.. Implement Checkpoints / Demos The grant recipients are responsible for meeting with the foundation grant team for financial reporting requirements and development updates. Disclosure of funds spent A timeline of use-of-funds should be announced prior to receiving the capital. For example, 2 full-time devs and 2 part-time, 40 hours a week and 20 hours a week respectively. Financial reporting includes: How much was spent each month and what it was for For personal privacy/security, there is no need to disclose how much each person received. An idea of what the rest of the funds will be used for Support/Guidance For funds usage and potential advisory: tips/advice on how to use their grants, such as if they should cash out / convert to Dai in order to cover their operations for X amount of time. Some ideas/options include: i. Multi-Sig where the grant funds are held in Dai/Eth This gives a transparent view of the distribution of funds given out on a monthly basis and to fund consumption progress. Perhaps one funding schedule announced by the team, they then give them funds? Clear usage of funds/transparency. The multi-signature wallet requirement ensures redundancy and prevention from accidental loss or theft of funds. ii. The grants process doesn't need to enforce an ideal situation because if a project is working on DLT tech you should be trying to #hodl crypto and pay your workers in tokens. If the EF transfers USD to a foreign account, the banks are going to take a fat ~5% FX fee/premium. If you're not running on USD and you don't want to hold ETH, the team may find it best to take the ETH and sell it at a local exchange (jurisdiction /legal dependent). For example, DAI is, of course, a solution to the volatility issue, but if you're not in the US you're going to struggle to liquidate it to local currency, plus you're taking a position on USD compared to your local labor. iii. As a grant giver, you may need the developer community or foundation to help out. It is what the project needs - some are self-sufficient and require very little involvement but others may need some hand-holding and need an army of internal/external resources. iv. Mentoring from the funding foundation to help guide the grantee. This would include reporting to the funding foundation on a scheduled basis. Where the mentor can chat with the team about the overall financial status and project performance of the grant project. Product market fit (PMF) - This section is optional/dependant on the project origins Implement regular PMF analysis and identify whether the portfolio company will survive in the long run and then assist them in refining their PMF (if it is not too late). This section is optional/dependant on the project because some grants aren't concerned with market fit. For example, many documentation or research projects aren't going to be valuable in any market. Encourage inter-grantees company partnerships and synergies When a company gets a grant from a foundation, they agree to work together and it should be a win-win partnership. Closeout requirements This process includes a review of the final financial and technical progress from the grantee, the grant lifecycle end. The project is then considered for a follow-up grant or the grant process closes.","title":"What can the Ethereum Foundation do to make the grants process better?"},{"location":"other/grants-process/#resources","text":"How the Ethereum Foundation grants program makes decisions Ethereum Fundraising Event Ethereum Foundation Grants Update - The Most Recent Grants Wave","title":"Resources"},{"location":"other/internationalization/","text":"Internationalization of EthHub The purpose of Ethereum is to be a decentralized network that is open to anyone to use, build upon, develop, and maintain. Currently, nearly all documentation and resources for Ethereum are written in English. In order for the Ethereum community to become truly global, it needs to become more accessible to those who do not speak English. EthHub can play a vital role in this process. This page was created to plan the roadmap for translating EthHub into multiple languages. How Can I help? Join the EthHub discord and request to join the Internationalization working group Learn to make pull requests from the section above. To translate a page, simply navigate to the branch for your desired language and make a pull request on the page you translate. General plan This plan was the original outline for translating EthHub. Updates to this plan are needed. Target Audiences Spanish Chinese Hindi Arabic Funding Funding would be necessary to incentivize and compensate the translators. Strategy Translating EthHub is going to be no small feat especially when it comes to maintainence. It would be nearly impossible to actively translate every pull request as they are submitted. It makes more sense to create checkpoints or editions for the international versions of EthHub. This would allow us to carefully plan and review the required materials to be included and translated. Formalizing English edition The EthHub community will need to go through the entire site and determine what information needs to be written, edited, and reviewed before it is handed over to the translators. By creating editions instead of sister sites, we won't have to aim for a moving target. It may be appropriate to create a branch of the Github repo dedicated to each edition. Translating into target languages There are two ways we can go about translating the materials: recruit and fund each translation team or place bounties on each page and rely on individual contributions. Place bounties for translating each section After the English edition is finalized, a translation branch could be made for each language and a bounty could be placed for each section or page. Gitcoin bounties would be used to place bounties for translating each EthHub page, page section, and/or graphic. Individual contributors could translate each page and claim the bounty. One downside to this method would be that it would still require editors to oversee each bounty and review that the translation is refined. Recruit and fund translation teams Teams of contributors could be selected and funded to oversee the translation of the entire translation process. Milestones or bounties could be created to distribute the funding. The team members would also review one another's work. Publication and Distribution Since we're going through the effort to formalize editions, we could publish the work. The editions could be published to IPFS We could partner with universities in target regions to distribute digital and/or physical copies Physical copies could potentially be printed and sold to support future editions and new languages","title":"Internationalization"},{"location":"other/internationalization/#internationalization-of-ethhub","text":"The purpose of Ethereum is to be a decentralized network that is open to anyone to use, build upon, develop, and maintain. Currently, nearly all documentation and resources for Ethereum are written in English. In order for the Ethereum community to become truly global, it needs to become more accessible to those who do not speak English. EthHub can play a vital role in this process. This page was created to plan the roadmap for translating EthHub into multiple languages.","title":"Internationalization of EthHub"},{"location":"other/internationalization/#how-can-i-help","text":"Join the EthHub discord and request to join the Internationalization working group Learn to make pull requests from the section above. To translate a page, simply navigate to the branch for your desired language and make a pull request on the page you translate.","title":"How Can I help?"},{"location":"other/internationalization/#general-plan","text":"This plan was the original outline for translating EthHub. Updates to this plan are needed.","title":"General plan"},{"location":"other/internationalization/#target-audiences","text":"Spanish Chinese Hindi Arabic","title":"Target Audiences"},{"location":"other/internationalization/#funding","text":"Funding would be necessary to incentivize and compensate the translators.","title":"Funding"},{"location":"other/internationalization/#strategy","text":"Translating EthHub is going to be no small feat especially when it comes to maintainence. It would be nearly impossible to actively translate every pull request as they are submitted. It makes more sense to create checkpoints or editions for the international versions of EthHub. This would allow us to carefully plan and review the required materials to be included and translated.","title":"Strategy"},{"location":"other/internationalization/#formalizing-english-edition","text":"The EthHub community will need to go through the entire site and determine what information needs to be written, edited, and reviewed before it is handed over to the translators. By creating editions instead of sister sites, we won't have to aim for a moving target. It may be appropriate to create a branch of the Github repo dedicated to each edition.","title":"Formalizing English edition"},{"location":"other/internationalization/#translating-into-target-languages","text":"There are two ways we can go about translating the materials: recruit and fund each translation team or place bounties on each page and rely on individual contributions.","title":"Translating into target languages"},{"location":"other/internationalization/#place-bounties-for-translating-each-section","text":"After the English edition is finalized, a translation branch could be made for each language and a bounty could be placed for each section or page. Gitcoin bounties would be used to place bounties for translating each EthHub page, page section, and/or graphic. Individual contributors could translate each page and claim the bounty. One downside to this method would be that it would still require editors to oversee each bounty and review that the translation is refined.","title":"Place bounties for translating each section"},{"location":"other/internationalization/#recruit-and-fund-translation-teams","text":"Teams of contributors could be selected and funded to oversee the translation of the entire translation process. Milestones or bounties could be created to distribute the funding. The team members would also review one another's work.","title":"Recruit and fund translation teams"},{"location":"other/internationalization/#publication-and-distribution","text":"Since we're going through the effort to formalize editions, we could publish the work. The editions could be published to IPFS We could partner with universities in target regions to distribute digital and/or physical copies Physical copies could potentially be printed and sold to support future editions and new languages","title":"Publication and Distribution"},{"location":"other/funds/0xeap/","text":"0xeap The 0x Ecosystem Acceleration Program gives teams access to a variety of services including funding, dedicated technical support, and recruiting assistance. We created the Ecosystem Acceleration Program to bolster the expansion of both infrastructure projects and relayers building on 0x. Milestone Grants Receive non-dilutive capital ranging from $10,000 to $100,000, with grant sizes awarded based on the quality of your team, vision, execution, and community involvement. Important Links Website: https://0x.org/eap Apply: https://0x.smapply.io/","title":"0xeap"},{"location":"other/funds/0xeap/#0xeap","text":"The 0x Ecosystem Acceleration Program gives teams access to a variety of services including funding, dedicated technical support, and recruiting assistance. We created the Ecosystem Acceleration Program to bolster the expansion of both infrastructure projects and relayers building on 0x.","title":"0xeap"},{"location":"other/funds/0xeap/#milestone-grants","text":"Receive non-dilutive capital ranging from $10,000 to $100,000, with grant sizes awarded based on the quality of your team, vision, execution, and community involvement.","title":"Milestone Grants"},{"location":"other/funds/0xeap/#important-links","text":"Website: https://0x.org/eap Apply: https://0x.smapply.io/","title":"Important Links"},{"location":"other/funds/aragon-nest/","text":"Aragon Nest A grants program to support the development of the ecosystems by aragon and placeholder.vc. Goal The goal of the program is to attract talent to research and build the necessary tooling for developing solutions around Aragon and Ethereum. What we look for Tools for making the ecosystem sustainable, such as open source repositories run by governance tokens using Aragon. Developer tools for building applications on Aragon. Better communication tools for effective governance, possibly using Whisper and other messaging protocols, by having an app which locks an action in time until there has been significant discussion. Complex governance mechanisms with off-chain components, to achieve scalability. Aragon UI developer tools and implementations in different frameworks. Grant sizes Funding: From $50,000 up to $100,000 in ETH, split into chunks paid out over achieved deliverables. Success reward: Up to $50,000 in ANT, given out when all deliverables are ready. Important Links Website: https://github.com/aragon/nest Announcement: https://blog.aragon.org/introducing-aragon-nest-1aa8c91c0566/","title":"Aragon Nest"},{"location":"other/funds/aragon-nest/#aragon-nest","text":"A grants program to support the development of the ecosystems by aragon and placeholder.vc.","title":"Aragon Nest"},{"location":"other/funds/aragon-nest/#goal","text":"The goal of the program is to attract talent to research and build the necessary tooling for developing solutions around Aragon and Ethereum.","title":"Goal"},{"location":"other/funds/aragon-nest/#what-we-look-for","text":"Tools for making the ecosystem sustainable, such as open source repositories run by governance tokens using Aragon. Developer tools for building applications on Aragon. Better communication tools for effective governance, possibly using Whisper and other messaging protocols, by having an app which locks an action in time until there has been significant discussion. Complex governance mechanisms with off-chain components, to achieve scalability. Aragon UI developer tools and implementations in different frameworks.","title":"What we look for"},{"location":"other/funds/aragon-nest/#grant-sizes","text":"Funding: From $50,000 up to $100,000 in ETH, split into chunks paid out over achieved deliverables. Success reward: Up to $50,000 in ANT, given out when all deliverables are ready.","title":"Grant sizes"},{"location":"other/funds/aragon-nest/#important-links","text":"Website: https://github.com/aragon/nest Announcement: https://blog.aragon.org/introducing-aragon-nest-1aa8c91c0566/","title":"Important Links"},{"location":"other/funds/consensys-labs/","text":"Consensys Labs ConsenSys Labs incubates the best teams of Web3 across the globe, providing them capital, mentorship, and access to ConsenSys\u2019s network of top-tier projects and talent. Portfolio adchain Airswap Balance Benefactory Bounties Network BTC Relay Civil code Fund gitcoin gnosis gridplus infura metamask uport Truffle SingularDTV Important Links Website: https://labs.consensys.net/","title":"Consensys Labs"},{"location":"other/funds/consensys-labs/#consensys-labs","text":"ConsenSys Labs incubates the best teams of Web3 across the globe, providing them capital, mentorship, and access to ConsenSys\u2019s network of top-tier projects and talent.","title":"Consensys Labs"},{"location":"other/funds/consensys-labs/#portfolio","text":"adchain Airswap Balance Benefactory Bounties Network BTC Relay Civil code Fund gitcoin gnosis gridplus infura metamask uport Truffle SingularDTV","title":"Portfolio"},{"location":"other/funds/consensys-labs/#important-links","text":"Website: https://labs.consensys.net/","title":"Important Links"},{"location":"other/funds/ecf/","text":"Ethereum Community Fund The Ethereum Community Fund (ECF) is a nonprofit initiative commited to providing financial support and strategic guidance to projects working on various aspects in blockchain: critical infrastructure and research, developer experience and tooling, open source development advocacy, educational initiatives, and responsible community growth. Founding Members Cosmos OmiseGO Golem Web3 Foundation Global Brain MakerDAO Ethereum Foundation Status Members Quantstamp Wireline SpankChain Important Links Website: https://ecf.network Apply: https://ecfnetwork.typeform.com/to/nSA6Id 128 Things to Know When Applying for the Ethereum Community Fund","title":"ECF"},{"location":"other/funds/ecf/#ethereum-community-fund","text":"The Ethereum Community Fund (ECF) is a nonprofit initiative commited to providing financial support and strategic guidance to projects working on various aspects in blockchain: critical infrastructure and research, developer experience and tooling, open source development advocacy, educational initiatives, and responsible community growth.","title":"Ethereum Community Fund"},{"location":"other/funds/ecf/#founding-members","text":"Cosmos OmiseGO Golem Web3 Foundation Global Brain MakerDAO Ethereum Foundation Status","title":"Founding Members"},{"location":"other/funds/ecf/#members","text":"Quantstamp Wireline SpankChain","title":"Members"},{"location":"other/funds/ecf/#important-links","text":"Website: https://ecf.network Apply: https://ecfnetwork.typeform.com/to/nSA6Id 128 Things to Know When Applying for the Ethereum Community Fund","title":"Important Links"},{"location":"other/funds/eth-prize/","text":"ETH Prize ETH Prize is a community research and bounty project that identifies the most critical issues facing the ethereum ecosystem and organizes bounties to solve them. Partners Status TrueBit L4 Web3 Foundation Funding partners 0x Status Ethereum Community Fund Toshi Bounties EthPM Blockscout Important Links Website: http://ethprize.io/","title":"Eth Prize"},{"location":"other/funds/eth-prize/#eth-prize","text":"ETH Prize is a community research and bounty project that identifies the most critical issues facing the ethereum ecosystem and organizes bounties to solve them.","title":"ETH Prize"},{"location":"other/funds/eth-prize/#partners","text":"Status TrueBit L4 Web3 Foundation","title":"Partners"},{"location":"other/funds/eth-prize/#funding-partners","text":"0x Status Ethereum Community Fund Toshi","title":"Funding partners"},{"location":"other/funds/eth-prize/#bounties","text":"EthPM Blockscout","title":"Bounties"},{"location":"other/funds/eth-prize/#important-links","text":"Website: http://ethprize.io/","title":"Important Links"},{"location":"other/funds/geco/","text":"Gnosis Ecosystem Fund The Gnosis Ecosystem Fund empowers teams to drive the global adoption of decentralized applications by leveraging the full potential of Gnosis' products and protocols. What kind of projects are we looking for? The main focus of the grant is to support projects that further the Gnosis ecosystem and our core mission to redistribute the future. Your proposed project should be directly connected to our products and vision. Proposals should focus on: Building on top of one of our platforms Integrating our smart contracts Creating tools/modules/extension for our products Our platforms and potential buidl ideas include: DutchX Gnosis Safe Prediction markets Furthermore, we will also consider projects involved in research and education. What are we offering? Funding (grants of between $5.000 and $100.000) Mentoring Community/Outreach Important Links Website: https://github.com/gnosis/GECO Announcement: https://blog.gnosis.pm/unveiling-the-gnosis-ecosystem-fund-7353926bfb65 Proposal template: https://github.com/gnosis/GECO/blob/master/Proposals/ProposalTemplate.md","title":"Geco"},{"location":"other/funds/geco/#gnosis-ecosystem-fund","text":"The Gnosis Ecosystem Fund empowers teams to drive the global adoption of decentralized applications by leveraging the full potential of Gnosis' products and protocols.","title":"Gnosis Ecosystem Fund"},{"location":"other/funds/geco/#what-kind-of-projects-are-we-looking-for","text":"The main focus of the grant is to support projects that further the Gnosis ecosystem and our core mission to redistribute the future. Your proposed project should be directly connected to our products and vision. Proposals should focus on: Building on top of one of our platforms Integrating our smart contracts Creating tools/modules/extension for our products Our platforms and potential buidl ideas include: DutchX Gnosis Safe Prediction markets Furthermore, we will also consider projects involved in research and education.","title":"What kind of projects are we looking for?"},{"location":"other/funds/geco/#what-are-we-offering","text":"Funding (grants of between $5.000 and $100.000) Mentoring Community/Outreach","title":"What are we offering?"},{"location":"other/funds/geco/#important-links","text":"Website: https://github.com/gnosis/GECO Announcement: https://blog.gnosis.pm/unveiling-the-gnosis-ecosystem-fund-7353926bfb65 Proposal template: https://github.com/gnosis/GECO/blob/master/Proposals/ProposalTemplate.md","title":"Important Links"},{"location":"other/funds/gitcoin/","text":"Gitcoin Grants Fast, easy, and secure way to provide recurring token contributions to the best OSS maintainers in your community. Your contribution is amplified by the signal it provides to other (potentially, larger) funders on important infrastructure projects. Grants utilizes the EIP-1337 standard for subscriptions on Ethereum. The standard makes use of meta-transactions, which allows for a transaction to be made on behalf of a paying subscriber on a recurring basis. This makes it easy to support projects in open source on a recurring basis, only confirming one initial subscription transaction. Important Links Website: https://gitcoin.co/grants/ Announcement: https://medium.com/gitcoin/gitcoin-grants-b91596191c0b","title":"Gitcoin"},{"location":"other/funds/gitcoin/#gitcoin-grants","text":"Fast, easy, and secure way to provide recurring token contributions to the best OSS maintainers in your community. Your contribution is amplified by the signal it provides to other (potentially, larger) funders on important infrastructure projects. Grants utilizes the EIP-1337 standard for subscriptions on Ethereum. The standard makes use of meta-transactions, which allows for a transaction to be made on behalf of a paying subscriber on a recurring basis. This makes it easy to support projects in open source on a recurring basis, only confirming one initial subscription transaction.","title":"Gitcoin Grants"},{"location":"other/funds/gitcoin/#important-links","text":"Website: https://gitcoin.co/grants/ Announcement: https://medium.com/gitcoin/gitcoin-grants-b91596191c0b","title":"Important Links"},{"location":"other/funds/stable-fund/","text":"Stable Fund The Stable Fund is a small to mid-size granting program run by MakerDAO. It is designed to incentivise the third-party Dai ecosystem by disbursing milestone-based grants to teams wishing to build on our financial primitives. Investment We offer equity free grants of up to $50k. What we look for Projects that: use Dai or MakerDao infrastructure as a core component increase Dai adoption add stability to and/or de-risk existing economies open up new markets provide novel, easy to use, solutions solve real problems Important Links Website: https://www.makerdao.com/ Apply: rich@makerdao.com Announcement: https://medium.com/makerdao/announcing-the-makerdao-core-community-development-initiative-d388bfba88e3","title":"Stable Fund"},{"location":"other/funds/stable-fund/#stable-fund","text":"The Stable Fund is a small to mid-size granting program run by MakerDAO. It is designed to incentivise the third-party Dai ecosystem by disbursing milestone-based grants to teams wishing to build on our financial primitives.","title":"Stable Fund"},{"location":"other/funds/stable-fund/#investment","text":"We offer equity free grants of up to $50k.","title":"Investment"},{"location":"other/funds/stable-fund/#what-we-look-for","text":"Projects that: use Dai or MakerDao infrastructure as a core component increase Dai adoption add stability to and/or de-risk existing economies open up new markets provide novel, easy to use, solutions solve real problems","title":"What we look for"},{"location":"other/funds/stable-fund/#important-links","text":"Website: https://www.makerdao.com/ Apply: rich@makerdao.com Announcement: https://medium.com/makerdao/announcing-the-makerdao-core-community-development-initiative-d388bfba88e3","title":"Important Links"},{"location":"other/funds/status-incubate/","text":"Status Incubate Incubating Projects that are Building Web3. Funding Offer standard pre-seed funding in exchange for equity and tokens (where applicable). Funding for later-stage projects is also possible on a case-by-case basis. Important Links Website: https://dev-incubate.status.im/","title":"Status Incubate"},{"location":"other/funds/status-incubate/#status-incubate","text":"Incubating Projects that are Building Web3.","title":"Status Incubate"},{"location":"other/funds/status-incubate/#funding","text":"Offer standard pre-seed funding in exchange for equity and tokens (where applicable). Funding for later-stage projects is also possible on a case-by-case basis.","title":"Funding"},{"location":"other/funds/status-incubate/#important-links","text":"Website: https://dev-incubate.status.im/","title":"Important Links"},{"location":"questions-about-ethereum/if-ethereum-is-open-source-why-cant-it-be-copied/","text":"If Ethereum is open source why can't it be copied? While Ethereum's code is open-source, the actual value of Ethereum is the network of users, developers, and applications using the Ethereum network that give it value. So yes, someone could copy its code, but they would also have to compete with one of the most active community in cryptocurrency.","title":"If Ethereum is open source why can't it be copied?"},{"location":"questions-about-ethereum/if-ethereum-is-open-source-why-cant-it-be-copied/#if-ethereum-is-open-source-why-cant-it-be-copied","text":"While Ethereum's code is open-source, the actual value of Ethereum is the network of users, developers, and applications using the Ethereum network that give it value. So yes, someone could copy its code, but they would also have to compete with one of the most active community in cryptocurrency.","title":"If Ethereum is open source why can't it be copied?"},{"location":"questions-about-ethereum/is-ether-a-security/","text":"Is Ether a security? Answer In the US, the SEC has not issued a formal ruling, but recent comments suggest that they do not believe Ether is a security. Other jurisdictions have not made this distinction clear. Explanation Note: this question answers whether Ether fits the legal definition of a security. In the US, the SEC uses the Howey test to determine whether something can be legally considered a security. The test comes from the Supreme Court ruling in 1946 for SEC v. W.J. Howey Co . It stipulates four criteria: Requires investment of money (fiat currency) Money invested with expectation of profit Invested money goes toward a common enterprise Profit is generated by the efforts of a promoter or third party Ether easily fits the first two criteria. People buy Ether with fiat currency, and many do so with the expectation of profit. However, the second two criteria are more difficult to prove. First, money used to purchase Ether does not necessarily go toward a common enterprise. In its current form, purchased Ether only permits usage of the network, not ownership to an enterprise. This condition may change under Proof-of-Stake given that Ether offers people the ability to earn returns while securing the network. Even so, this feature does not fit cleanly into the traditional definition of a common enterprise. Second, Ethereum does not generate profit, nor does it rely on the efforts of a promoter or third party. Ethereum is a network, not a corporation, so it does not produce identifiable profits beyond the value appreciation of Ether. The value of Ether also originates from open source development. While Vitalik Buterin and the Ethereum Foundation contribute to Ethereum's development, so do many unaffiliated entities and individuals. As such, it is difficult to argue that Ether generates a profit based on efforts of a third party. While the SEC has not formally ruled on the legal status of Ether, comments from regulators in 2018 suggest that they see a compelling case to argue against classifying Ether as a security. Quotes from regulators \"And putting aside the fundraising that accompanied the creation of Ether, based on my understanding of the present state of Ether, the Ethereum network and its decentralized structure, current offers and sales of Ether are not securities transactions. ... Over time, there may be other sufficiently decentralized networks and systems where regulating the tokens or coins that function on them as securities may not be required. And of course there will continue to be systems that rely on central actors whose efforts are a key to the success of the enterprise. In those cases, application of the securities laws protects the investors who purchase the tokens or coins.\" Resources: Howey Test 101 Howey Test Background William Hinman, Director of Corporation Finance of the SEC. June 14, 2018 SEC Press Release","title":"Is Ether a security?"},{"location":"questions-about-ethereum/is-ether-a-security/#is-ether-a-security","text":"","title":"Is Ether a security?"},{"location":"questions-about-ethereum/is-ether-a-security/#answer","text":"In the US, the SEC has not issued a formal ruling, but recent comments suggest that they do not believe Ether is a security. Other jurisdictions have not made this distinction clear.","title":"Answer"},{"location":"questions-about-ethereum/is-ether-a-security/#explanation","text":"Note: this question answers whether Ether fits the legal definition of a security. In the US, the SEC uses the Howey test to determine whether something can be legally considered a security. The test comes from the Supreme Court ruling in 1946 for SEC v. W.J. Howey Co . It stipulates four criteria: Requires investment of money (fiat currency) Money invested with expectation of profit Invested money goes toward a common enterprise Profit is generated by the efforts of a promoter or third party Ether easily fits the first two criteria. People buy Ether with fiat currency, and many do so with the expectation of profit. However, the second two criteria are more difficult to prove. First, money used to purchase Ether does not necessarily go toward a common enterprise. In its current form, purchased Ether only permits usage of the network, not ownership to an enterprise. This condition may change under Proof-of-Stake given that Ether offers people the ability to earn returns while securing the network. Even so, this feature does not fit cleanly into the traditional definition of a common enterprise. Second, Ethereum does not generate profit, nor does it rely on the efforts of a promoter or third party. Ethereum is a network, not a corporation, so it does not produce identifiable profits beyond the value appreciation of Ether. The value of Ether also originates from open source development. While Vitalik Buterin and the Ethereum Foundation contribute to Ethereum's development, so do many unaffiliated entities and individuals. As such, it is difficult to argue that Ether generates a profit based on efforts of a third party. While the SEC has not formally ruled on the legal status of Ether, comments from regulators in 2018 suggest that they see a compelling case to argue against classifying Ether as a security.","title":"Explanation"},{"location":"questions-about-ethereum/is-ether-a-security/#quotes-from-regulators","text":"\"And putting aside the fundraising that accompanied the creation of Ether, based on my understanding of the present state of Ether, the Ethereum network and its decentralized structure, current offers and sales of Ether are not securities transactions. ... Over time, there may be other sufficiently decentralized networks and systems where regulating the tokens or coins that function on them as securities may not be required. And of course there will continue to be systems that rely on central actors whose efforts are a key to the success of the enterprise. In those cases, application of the securities laws protects the investors who purchase the tokens or coins.\"","title":"Quotes from regulators"},{"location":"questions-about-ethereum/is-ether-a-security/#resources","text":"Howey Test 101 Howey Test Background William Hinman, Director of Corporation Finance of the SEC. June 14, 2018 SEC Press Release","title":"Resources:"},{"location":"questions-about-ethereum/is-ether-needed-for-transaction-fees/","text":"Is Ether needed for transaction fees? Answer Yes. Ether is necessary for Ethereum network security and operational efficiency for miners. Explanation The notion that transaction fees on Ethereum can be paid in-protocol by something other than ether (such as an ERC20 token) is called 'economic abstraction'. We explain why the Ethereum protocol is unlikely to integrate economic abstraction below. Economic abstraction is often used to argue that the value of Ether will go to 0. The theory is that users could pay their transaction costs to miners in something other than Ether. Therefore, if that becomes rampant, Ether itself would have no value. This argument can be used on any Proof-of-Work blockchain, it's an especially popular criticism against Ethereum since it appears easy to create additional ERC20 tokens that can be exchanged for Ether. Quick recap on how transactions work on Ethereum. Each transaction uses a set amount of gas. Users pay miners to include their transaction using a gas price. Gas * Gas Price = transaction cost. The base protocol assumes gas price in ETH and every wallet calculates transaction cost in total ETH to pay. The argument against ETH value begins here. It says that users could pay their transaction cost in some currency or token instead of Ether, including digital USD. Miners could then directly sell tokens or currency into the currency of their choice. While rebuilding Ethereum to accept multiple currencies (even USD) is theoretically possible, this argument ignores how digital native tokens like Ether or Bitcoin act as a layer of security for the system. Tokens like Ether reduce the profitability of network hacks by tying network security to the value of the network's medium of exchange. If network security gets hit, so does the value of the token transacted on the network. Imagine a rogue miner on Ethereum gathers enough computing power to successfully 51% attack the network and divert the network's currency to a personal account. If the currency's value isn't tied to network security (say, USD), the hacker could easily sell these proceeds at full value in reasonably liquid markets. This cannot happen with Ether. Other miners would see this behavior immediately and make it known to relevant markets for Ether. As a result, not only would prices for Ether drop, Ether would also become highly illiquid, making it difficult for the hacker to make off with the pre-hack market value of the stolen Ether. This argument applies for any decentralized blockchain, including Bitcoin. Practically speaking, paying with multiple currencies also adds friction, cost, and a UX nightmare to the operations of a miner. It would have to go through the following process: Open communication with a miner Manually calc the cost of the tx in that tokens value Send miner payment & wait for confirm Execute initial TX and get the nonce Tell the miner the nonce and wait for his next block On top of the added friction to users mentioned above, there is an added cost to users to pay for their transaction in something other than ETH. Sending ETH in a transaction costs 21000 gas while sending tokens costs 40000 gas or more. Calculating gas cost and understanding the gas market is no easy task. Wallets have spent years making this UX smooth. There is no incentive for a wallet to streamline the payment of gas in tokens as the complexities are deep. Now let's talk about miners. Miners are trying to make a profit and have to pay for hardware/electricity costs. They do not want to have a portfolio of 50 different cryptocurrencies with wild volatility and no liquidity. This creates an operational nightmare. As mentioned, this is possible on all PoW chains. Bitcoin even has a tool that enables users to pay for transaction speed in payments other than BTC http://confirmtx.com . However, because of the arguments above, it's not rampant in BTC or ETH because it violates core security assumptions and has extreme practical limitations for miners. Resources: Eric Conners Twitter Thread Vitalik Buterins Comment on Economic Abstraction","title":"Is Ether needed for transaction fees?"},{"location":"questions-about-ethereum/is-ether-needed-for-transaction-fees/#is-ether-needed-for-transaction-fees","text":"","title":"Is Ether needed for transaction fees?"},{"location":"questions-about-ethereum/is-ether-needed-for-transaction-fees/#answer","text":"Yes. Ether is necessary for Ethereum network security and operational efficiency for miners.","title":"Answer"},{"location":"questions-about-ethereum/is-ether-needed-for-transaction-fees/#explanation","text":"The notion that transaction fees on Ethereum can be paid in-protocol by something other than ether (such as an ERC20 token) is called 'economic abstraction'. We explain why the Ethereum protocol is unlikely to integrate economic abstraction below. Economic abstraction is often used to argue that the value of Ether will go to 0. The theory is that users could pay their transaction costs to miners in something other than Ether. Therefore, if that becomes rampant, Ether itself would have no value. This argument can be used on any Proof-of-Work blockchain, it's an especially popular criticism against Ethereum since it appears easy to create additional ERC20 tokens that can be exchanged for Ether. Quick recap on how transactions work on Ethereum. Each transaction uses a set amount of gas. Users pay miners to include their transaction using a gas price. Gas * Gas Price = transaction cost. The base protocol assumes gas price in ETH and every wallet calculates transaction cost in total ETH to pay. The argument against ETH value begins here. It says that users could pay their transaction cost in some currency or token instead of Ether, including digital USD. Miners could then directly sell tokens or currency into the currency of their choice. While rebuilding Ethereum to accept multiple currencies (even USD) is theoretically possible, this argument ignores how digital native tokens like Ether or Bitcoin act as a layer of security for the system. Tokens like Ether reduce the profitability of network hacks by tying network security to the value of the network's medium of exchange. If network security gets hit, so does the value of the token transacted on the network. Imagine a rogue miner on Ethereum gathers enough computing power to successfully 51% attack the network and divert the network's currency to a personal account. If the currency's value isn't tied to network security (say, USD), the hacker could easily sell these proceeds at full value in reasonably liquid markets. This cannot happen with Ether. Other miners would see this behavior immediately and make it known to relevant markets for Ether. As a result, not only would prices for Ether drop, Ether would also become highly illiquid, making it difficult for the hacker to make off with the pre-hack market value of the stolen Ether. This argument applies for any decentralized blockchain, including Bitcoin. Practically speaking, paying with multiple currencies also adds friction, cost, and a UX nightmare to the operations of a miner. It would have to go through the following process: Open communication with a miner Manually calc the cost of the tx in that tokens value Send miner payment & wait for confirm Execute initial TX and get the nonce Tell the miner the nonce and wait for his next block On top of the added friction to users mentioned above, there is an added cost to users to pay for their transaction in something other than ETH. Sending ETH in a transaction costs 21000 gas while sending tokens costs 40000 gas or more. Calculating gas cost and understanding the gas market is no easy task. Wallets have spent years making this UX smooth. There is no incentive for a wallet to streamline the payment of gas in tokens as the complexities are deep. Now let's talk about miners. Miners are trying to make a profit and have to pay for hardware/electricity costs. They do not want to have a portfolio of 50 different cryptocurrencies with wild volatility and no liquidity. This creates an operational nightmare. As mentioned, this is possible on all PoW chains. Bitcoin even has a tool that enables users to pay for transaction speed in payments other than BTC http://confirmtx.com . However, because of the arguments above, it's not rampant in BTC or ETH because it violates core security assumptions and has extreme practical limitations for miners.","title":"Explanation"},{"location":"questions-about-ethereum/is-ether-needed-for-transaction-fees/#resources","text":"Eric Conners Twitter Thread Vitalik Buterins Comment on Economic Abstraction","title":"Resources:"},{"location":"questions-about-ethereum/is-ethereum-immutable/","text":"Is Ethereum Immutable? Yes, transactions and data stored within the Ethereum blockchain are immutable. Immutability and The DAO Hard Fork Hard forks do not affect immutability because the data is still accessible and unchanged on the original chain. In the event of a fork, users have the choice to use either fork. Users form a social consensus around which chain is worth using and supporting in the event of a fork. A forked chain is simply a new blockchain with different consensus rules that is entirely immutable according to its ruleset. \"As a trivial example, the only thing the DAO fork did was insert a set of value transfers from one account to another, but that still has the result that transactions (by the attacker) that would have succeeded will now fail with insufficient funds. Likewise, you can construct transactions that will fail with the new changes to gas costs, or that will succeed if a null account exists but fail if it doesn't. 'Immutability' is overused and under-specified. Strictly speaking, it should mean only that the blockchain - the set of past transactions - is not modified, which no Ethereum fork has ever done. But people use it for a much vaguer and harder to define principle of not violating their expectations.\" - Nick Johnson [1]. Important Links Reddit thread on Immutability","title":"Is Ethereum immutable?"},{"location":"questions-about-ethereum/is-ethereum-immutable/#is-ethereum-immutable","text":"Yes, transactions and data stored within the Ethereum blockchain are immutable.","title":"Is Ethereum Immutable?"},{"location":"questions-about-ethereum/is-ethereum-immutable/#immutability-and-the-dao-hard-fork","text":"Hard forks do not affect immutability because the data is still accessible and unchanged on the original chain. In the event of a fork, users have the choice to use either fork. Users form a social consensus around which chain is worth using and supporting in the event of a fork. A forked chain is simply a new blockchain with different consensus rules that is entirely immutable according to its ruleset. \"As a trivial example, the only thing the DAO fork did was insert a set of value transfers from one account to another, but that still has the result that transactions (by the attacker) that would have succeeded will now fail with insufficient funds. Likewise, you can construct transactions that will fail with the new changes to gas costs, or that will succeed if a null account exists but fail if it doesn't. 'Immutability' is overused and under-specified. Strictly speaking, it should mean only that the blockchain - the set of past transactions - is not modified, which no Ethereum fork has ever done. But people use it for a much vaguer and harder to define principle of not violating their expectations.\" - Nick Johnson [1].","title":"Immutability and The DAO Hard Fork"},{"location":"questions-about-ethereum/is-ethereum-immutable/#important-links","text":"Reddit thread on Immutability","title":"Important Links"},{"location":"questions-about-ethereum/is-ethereum-more-expensive-to-use-as-price-rises/","text":"Is Ethereum more expensive to use as price rises? Answer No, the Ethereum fee market is independent of fiat prices. Explanation Basics of a transaction There are many concepts to understand when diving into the answer to this question. First, it's essential to understand how an Ethereum transaction works. As explained in the gas section , every transaction that occurs on the network requires a set amount of gas, which is a unit used to measure the computational power required to process the transaction. To process a transaction and include it in a block, miners expect to be compensated. This is accomplished by setting a gas price with every transaction, which is the cost of 1 unit of gas, denominated in Gwei (1 ETH = 1,000,000,000 Gwei). For example, when you simply send ETH from one account to another, this cost 21000 gas. If you were to set a gas price of 1 Gwei, this transaction would cost 0.000021 ETH. Fee market Currently, the Ethereum network is working at or near capacity. This means that a fee market is created because some users may be willing to pay more to get to the front of the line while others may not be in as big of a rush. Tools such as EthGasStation offer a great view into the current fee market and what it current costs to get a basic or fast transaction through. You'll notice that so far, we haven't talked about fiat or the cost of a transaction in fiat value. That's because at its core, the fee market is independent from the cost of Ether. Users have the ability to send a transaction from 0 gas price all the way to as high as they'd like and miners have the ability to accept the same range. Rising and falling Ether price While the gas market by design is purely Ether related, it'd be misleading to not acknowledge that a lot of users and miners think of their fees in fiat terms. So while the above example may have cost 0.000021 ETH, some users will instead think of that in terms of fiat cost ($0.002793 for instance). This means that the fee market, while independent of fiat prices at its core, will react to moves in Ether prices. If we use the example above and assume price spikes 5x, all of a sudden that transaction will cost $0.0139 in fiat terms. When price spikes (assuming network demand stays the same), users will start to lower their gas price. When price falls (assuming network demand stays the same), miners will start to raise their minimum accepted gas. We can see the fluctuation in average gas price in the past. Network demand As previously mentioned, network demand plays a much larger role on gas price than Ether price. If no one was using the network, gas prices paid would be near 0. If the network is full, gas prices will start to spike. This is an important consideration when trying to draw conclusions between Ether price and gas prices paid.","title":"Is Ethereum more expensive to use as price rises?"},{"location":"questions-about-ethereum/is-ethereum-more-expensive-to-use-as-price-rises/#is-ethereum-more-expensive-to-use-as-price-rises","text":"","title":"Is Ethereum more expensive to use as price rises?"},{"location":"questions-about-ethereum/is-ethereum-more-expensive-to-use-as-price-rises/#answer","text":"No, the Ethereum fee market is independent of fiat prices.","title":"Answer  "},{"location":"questions-about-ethereum/is-ethereum-more-expensive-to-use-as-price-rises/#explanation","text":"","title":"Explanation  "},{"location":"questions-about-ethereum/is-ethereum-more-expensive-to-use-as-price-rises/#basics-of-a-transaction","text":"There are many concepts to understand when diving into the answer to this question. First, it's essential to understand how an Ethereum transaction works. As explained in the gas section , every transaction that occurs on the network requires a set amount of gas, which is a unit used to measure the computational power required to process the transaction. To process a transaction and include it in a block, miners expect to be compensated. This is accomplished by setting a gas price with every transaction, which is the cost of 1 unit of gas, denominated in Gwei (1 ETH = 1,000,000,000 Gwei). For example, when you simply send ETH from one account to another, this cost 21000 gas. If you were to set a gas price of 1 Gwei, this transaction would cost 0.000021 ETH.","title":"Basics of a transaction  "},{"location":"questions-about-ethereum/is-ethereum-more-expensive-to-use-as-price-rises/#fee-market","text":"Currently, the Ethereum network is working at or near capacity. This means that a fee market is created because some users may be willing to pay more to get to the front of the line while others may not be in as big of a rush. Tools such as EthGasStation offer a great view into the current fee market and what it current costs to get a basic or fast transaction through. You'll notice that so far, we haven't talked about fiat or the cost of a transaction in fiat value. That's because at its core, the fee market is independent from the cost of Ether. Users have the ability to send a transaction from 0 gas price all the way to as high as they'd like and miners have the ability to accept the same range.","title":"Fee market  "},{"location":"questions-about-ethereum/is-ethereum-more-expensive-to-use-as-price-rises/#rising-and-falling-ether-price","text":"While the gas market by design is purely Ether related, it'd be misleading to not acknowledge that a lot of users and miners think of their fees in fiat terms. So while the above example may have cost 0.000021 ETH, some users will instead think of that in terms of fiat cost ($0.002793 for instance). This means that the fee market, while independent of fiat prices at its core, will react to moves in Ether prices. If we use the example above and assume price spikes 5x, all of a sudden that transaction will cost $0.0139 in fiat terms. When price spikes (assuming network demand stays the same), users will start to lower their gas price. When price falls (assuming network demand stays the same), miners will start to raise their minimum accepted gas. We can see the fluctuation in average gas price in the past.","title":"Rising and falling Ether price   "},{"location":"questions-about-ethereum/is-ethereum-more-expensive-to-use-as-price-rises/#network-demand","text":"As previously mentioned, network demand plays a much larger role on gas price than Ether price. If no one was using the network, gas prices paid would be near 0. If the network is full, gas prices will start to spike. This is an important consideration when trying to draw conclusions between Ether price and gas prices paid.","title":"Network demand  "},{"location":"questions-about-ethereum/is-ethereum-over-1tb-in-size/","text":"Is Ethereum over 1TB in size? Answer No. Please check here for the latest size. Explanation As Afri Schoedon points out in his article , the Ethereum state is what is bloated, not the chain. So what sync mode should you run to get a full Ethereum blockchain with all necessary security? Both Parity and Geth offer options which synchronize a full node starting at the genesis block and executing all transactions. The modes are: parity --no-warp geth --syncmode full These are full nodes because they: Sync the full chain from genesis block Replay all transactions Execute all contracts Recompute the state of each block Keep all historical blocks on disk Keep the most recent state and prunes ancient states When running the full node described above, you are able to rebuild any historical information you want using just your node. There is often much confusion around if a state pruned Ethereum node (above) is a full node and the answer is yes. Pruning ancient state is fine as it is not necessary to most users. If you are looking to run a block explorer or do deep analysis on the blockchain, then you could run an archive node with no pruning so you don't have to always recompute the pruned state. Also note that you can run both Geth and Parity by default (warp and fast sync enabled) and you'll be able to serve the network as a full node after initial sync.","title":"Is Ethereum over 1TB in size?"},{"location":"questions-about-ethereum/is-ethereum-over-1tb-in-size/#is-ethereum-over-1tb-in-size","text":"","title":"Is Ethereum over 1TB in size?"},{"location":"questions-about-ethereum/is-ethereum-over-1tb-in-size/#answer","text":"No. Please check here for the latest size.","title":"Answer"},{"location":"questions-about-ethereum/is-ethereum-over-1tb-in-size/#explanation","text":"As Afri Schoedon points out in his article , the Ethereum state is what is bloated, not the chain. So what sync mode should you run to get a full Ethereum blockchain with all necessary security? Both Parity and Geth offer options which synchronize a full node starting at the genesis block and executing all transactions. The modes are: parity --no-warp geth --syncmode full These are full nodes because they: Sync the full chain from genesis block Replay all transactions Execute all contracts Recompute the state of each block Keep all historical blocks on disk Keep the most recent state and prunes ancient states When running the full node described above, you are able to rebuild any historical information you want using just your node. There is often much confusion around if a state pruned Ethereum node (above) is a full node and the answer is yes. Pruning ancient state is fine as it is not necessary to most users. If you are looking to run a block explorer or do deep analysis on the blockchain, then you could run an archive node with no pruning so you don't have to always recompute the pruned state. Also note that you can run both Geth and Parity by default (warp and fast sync enabled) and you'll be able to serve the network as a full node after initial sync.","title":"Explanation"},{"location":"questions-about-ethereum/what-is-the-difficulty-bomb/","text":"What is the Ethereum Difficulty Bomb (Ice Age)? Summary Ethereum's \"Difficulty Bomb\" refers to a mechanism that, at a predefined block number, increases the difficulty level of puzzles in the Proof of Work mining algorithm resulting in longer than normal block times (and thus less ETH rewards for miners). This mechanism increases the difficulty exponentially over time and eventually leads to what is referred to as the \"Ice Age\" - that is, the chain becomes so difficult to mine that it grinds to a halt and stops producing blocks (freezes). Why the Difficulty Bomb Exists The Difficulty Bomb was originally put in place for a variety of reasons: To act as a deterrant for miners who wish to continue mining the Ethereum 1.0 (Proof of Work) chain once the network moved fully to the Ethereum 2.0 (Proof of Stake) chain To ensure that the core developers of Ethereum 1.0 are \"forced\" to upgrade the network via a hard fork (if only to delay the effects of the bomb) so that the network does not stagnate innovation-wise Technical Details of the Difficulty Bomb Work in progress. Effects of the Difficulty Bomb The effect of the Difficulty Bomb is easily seen in the 'Ethereum Block Time History' chart from Etherscan (you'll notice that it is a step-function that increases block times the longer that it exists on the chain). Is the Difficulty Bomb Still Necessary? There is an open debate as to whether the Difficulty Bomb is still required because Ethereum 2.0 is now being deployed as a seperate blockchain (instead of a direct upgrade to the Ethereum 1.0 chain) and the bomb has been delayed without any fanfare in both the Byzantine and Constantinople network upgrades. Resources Investopedia","title":"What is the Ethereum difficulty bomb (Ice Age)?"},{"location":"questions-about-ethereum/what-is-the-difficulty-bomb/#what-is-the-ethereum-difficulty-bomb-ice-age","text":"","title":"What is the Ethereum Difficulty Bomb (Ice Age)?"},{"location":"questions-about-ethereum/what-is-the-difficulty-bomb/#summary","text":"Ethereum's \"Difficulty Bomb\" refers to a mechanism that, at a predefined block number, increases the difficulty level of puzzles in the Proof of Work mining algorithm resulting in longer than normal block times (and thus less ETH rewards for miners). This mechanism increases the difficulty exponentially over time and eventually leads to what is referred to as the \"Ice Age\" - that is, the chain becomes so difficult to mine that it grinds to a halt and stops producing blocks (freezes).","title":"Summary"},{"location":"questions-about-ethereum/what-is-the-difficulty-bomb/#why-the-difficulty-bomb-exists","text":"The Difficulty Bomb was originally put in place for a variety of reasons: To act as a deterrant for miners who wish to continue mining the Ethereum 1.0 (Proof of Work) chain once the network moved fully to the Ethereum 2.0 (Proof of Stake) chain To ensure that the core developers of Ethereum 1.0 are \"forced\" to upgrade the network via a hard fork (if only to delay the effects of the bomb) so that the network does not stagnate innovation-wise","title":"Why the Difficulty Bomb Exists"},{"location":"questions-about-ethereum/what-is-the-difficulty-bomb/#technical-details-of-the-difficulty-bomb","text":"Work in progress.","title":"Technical Details of the Difficulty Bomb"},{"location":"questions-about-ethereum/what-is-the-difficulty-bomb/#effects-of-the-difficulty-bomb","text":"The effect of the Difficulty Bomb is easily seen in the 'Ethereum Block Time History' chart from Etherscan (you'll notice that it is a step-function that increases block times the longer that it exists on the chain).","title":"Effects of the Difficulty Bomb"},{"location":"questions-about-ethereum/what-is-the-difficulty-bomb/#is-the-difficulty-bomb-still-necessary","text":"There is an open debate as to whether the Difficulty Bomb is still required because Ethereum 2.0 is now being deployed as a seperate blockchain (instead of a direct upgrade to the Ethereum 1.0 chain) and the bomb has been delayed without any fanfare in both the Byzantine and Constantinople network upgrades.","title":"Is the Difficulty Bomb Still Necessary?"},{"location":"questions-about-ethereum/what-is-the-difficulty-bomb/#resources","text":"Investopedia","title":"Resources"},{"location":"questions-about-ethereum/why-do-you-have-to-pay-to-use-ethereum/","text":"Why do you have to pay to use Ethereum? Answer Every transaction that occurs on the Ethereum network requires computational resources. Miners must be incentivized to process these transactions and create blocks, therefore users pay a small fee per transaction for this. Explanation While some blockchains boast that they are \"free\" they are simply obfuscating the real cost of the transactions on the network. A \"free\" blockchain may not charge the user for the transaction fees directly via gas but they do usually require users to pay fees in a variety of indirect ways. Examples of this would include smart contract owners paying the fees and passing them onto the user through the function of the contract, requiring users or dapp owners to lock funds for bandwidth or through inflation by paying a set of block producers.","title":"Why do you have to pay to use Ethereum?"},{"location":"questions-about-ethereum/why-do-you-have-to-pay-to-use-ethereum/#why-do-you-have-to-pay-to-use-ethereum","text":"","title":"Why do you have to pay to use Ethereum?"},{"location":"questions-about-ethereum/why-do-you-have-to-pay-to-use-ethereum/#answer","text":"Every transaction that occurs on the Ethereum network requires computational resources. Miners must be incentivized to process these transactions and create blocks, therefore users pay a small fee per transaction for this.","title":"Answer"},{"location":"questions-about-ethereum/why-do-you-have-to-pay-to-use-ethereum/#explanation","text":"While some blockchains boast that they are \"free\" they are simply obfuscating the real cost of the transactions on the network. A \"free\" blockchain may not charge the user for the transaction fees directly via gas but they do usually require users to pay fees in a variety of indirect ways. Examples of this would include smart contract owners paying the fees and passing them onto the user through the function of the contract, requiring users or dapp owners to lock funds for bandwidth or through inflation by paying a set of block producers.","title":"Explanation"},{"location":"using-ethereum/ethereum-new-user-guide/","text":"Ethereum New User Guide New to Ethereum? You're in the right place! This guide will walk you through the necessary steps of getting onboarded to the Ethereum network. Buy ETH In order to interact with the Ethereum network, you will need to own Ether (ETH). The easiest way to acquire ETH is to buy it on Coinbase or on any of these exchanges . One important note is that you do not need to buy 1 full ETH. Ether is divisible down to 18 decimal places so you can buy fractions of it. Setup MetaMask Now that you have ETH, you will want to send it to a wallet of your choice to store it and use it on the network. Wallets setup accounts for you which are randomly generated 42 character long addresses starting with 0x. Accounts allow you to store and use ETH by generating transactions on the Ethereum network. We recommend first moving your ETH to the MetaMask wallet . MetaMask is a browser extension that allows you to interact with Ethereum dapps inside of Chrome, Brave, Firefox or Opera. MetaMask has a nice video to help you get setup: After MetaMask is setup, you now have your own wallet address (0x......). You can go to Coinbase and send your acquired ETH to your new wallet address. This should take about a minute and you will see the ETH show up in your MetaMask wallet. Setup Mobile Wallet (optional) Every Ethereum account can be restored via a random string of words. In the MetaMask setup above this was referred to as the seed phrase. It is possible to have this same account in multiple different wallets, including mobile wallets . We recommend downloading Coinbase Wallet , clicking restore and typing in your seed phrase. Your wallet is now also mobilized! Try Ethereum Applications Now that you have ETH in a wallet of your own, you can use any of the amazing applications (sometimes referred to as dapps) that have been built on Ethereum. There are many different types of applications built on Ethereum but here are a few suggestions to get started: Decentralized Finance Compound : Lend and borrow ETH or other tokens. Uniswap : Easily trade your ETH for other tokens. Games CryptoKitties : Collect and breed digital cats. Gods Unchained : Free-to-play digital trading card game built on Ethereum. Collectibles OpenSea : Buy, sell and discover rare digital items. Origin Protocol : Decentralized marketplaces on the blockchain. Other ENS : Buy an ENS name to give your address a more human readable format (myetheraddress.eth). PoolTogether : Join a no-loss lottery for a chance to win a prize. Long term storage As you continue to use Ethereum, you might start to acquire more ETH and other tokens. It is highly recommended to store larger amounts of crypto in solutions such as hardware wallets and smart contract wallets which are more secure than basic account wallets. Hardware wallets are the most-secure method for accessing your funds while online, as they do not expose your private key to the internet when signing transactions. Smart contract wallets are wallets with unique abilities due to the power of smart contract functionality. They enable additional security and recovery features for users.","title":"Ethereum New User Guide"},{"location":"using-ethereum/ethereum-new-user-guide/#ethereum-new-user-guide","text":"New to Ethereum? You're in the right place! This guide will walk you through the necessary steps of getting onboarded to the Ethereum network.","title":"Ethereum New User Guide"},{"location":"using-ethereum/ethereum-new-user-guide/#buy-eth","text":"In order to interact with the Ethereum network, you will need to own Ether (ETH). The easiest way to acquire ETH is to buy it on Coinbase or on any of these exchanges . One important note is that you do not need to buy 1 full ETH. Ether is divisible down to 18 decimal places so you can buy fractions of it.","title":"Buy ETH"},{"location":"using-ethereum/ethereum-new-user-guide/#setup-metamask","text":"Now that you have ETH, you will want to send it to a wallet of your choice to store it and use it on the network. Wallets setup accounts for you which are randomly generated 42 character long addresses starting with 0x. Accounts allow you to store and use ETH by generating transactions on the Ethereum network. We recommend first moving your ETH to the MetaMask wallet . MetaMask is a browser extension that allows you to interact with Ethereum dapps inside of Chrome, Brave, Firefox or Opera. MetaMask has a nice video to help you get setup: After MetaMask is setup, you now have your own wallet address (0x......). You can go to Coinbase and send your acquired ETH to your new wallet address. This should take about a minute and you will see the ETH show up in your MetaMask wallet.","title":"Setup MetaMask"},{"location":"using-ethereum/ethereum-new-user-guide/#setup-mobile-wallet-optional","text":"Every Ethereum account can be restored via a random string of words. In the MetaMask setup above this was referred to as the seed phrase. It is possible to have this same account in multiple different wallets, including mobile wallets . We recommend downloading Coinbase Wallet , clicking restore and typing in your seed phrase. Your wallet is now also mobilized!","title":"Setup Mobile Wallet (optional)"},{"location":"using-ethereum/ethereum-new-user-guide/#try-ethereum-applications","text":"Now that you have ETH in a wallet of your own, you can use any of the amazing applications (sometimes referred to as dapps) that have been built on Ethereum. There are many different types of applications built on Ethereum but here are a few suggestions to get started: Decentralized Finance Compound : Lend and borrow ETH or other tokens. Uniswap : Easily trade your ETH for other tokens. Games CryptoKitties : Collect and breed digital cats. Gods Unchained : Free-to-play digital trading card game built on Ethereum. Collectibles OpenSea : Buy, sell and discover rare digital items. Origin Protocol : Decentralized marketplaces on the blockchain. Other ENS : Buy an ENS name to give your address a more human readable format (myetheraddress.eth). PoolTogether : Join a no-loss lottery for a chance to win a prize.","title":"Try Ethereum Applications"},{"location":"using-ethereum/ethereum-new-user-guide/#long-term-storage","text":"As you continue to use Ethereum, you might start to acquire more ETH and other tokens. It is highly recommended to store larger amounts of crypto in solutions such as hardware wallets and smart contract wallets which are more secure than basic account wallets. Hardware wallets are the most-secure method for accessing your funds while online, as they do not expose your private key to the internet when signing transactions. Smart contract wallets are wallets with unique abilities due to the power of smart contract functionality. They enable additional security and recovery features for users.","title":"Long term storage"},{"location":"using-ethereum/how-to-buy-ether/","text":"How to Buy Ether (ETH) In order to interact with the Ethereum network, you will need to own ether (ETH). Unless you are mining, the only way to acquire ETH is from someone that already owns it. Below is a list of cryptocurrency exchanges where you can acquire ETH with fiat or cryptocurrencies. It is highly recommended to store the ETH you own in a hardware wallet ! Binance Binance is headquartered in Malta and constantly has some of the highest trading volume. Users can buy ETH with fiat or cryptocurrencies. Buy ETH on Binance Coinbase Coinbase is based in San Francisco and is one of the most reputable and well known exchanges in the world. Users can buy ETH with fiat or cryptocurrencies. Buy ETH on Coinbase Gemini Gemini is based in New York and has a great history of security and reliability. Users can buy ETH with fiat or cryptocurrencies. Buy ETH on Gemini Kraken Kraken is a great option for those living in Canada, Europe, and the United States, and supports accounts for users from other countries as well. Users can buy ETH with any of the supported fiat or cryptocurrencies . Buy ETH on Kraken LocalCryptos LocalCryptos is a global, p2p marketplace for buying and selling ETH. Over 30 payment methods are supported including in-person cash trades. Buy ETH on LocalCryptos","title":"How to Buy Ether"},{"location":"using-ethereum/how-to-buy-ether/#how-to-buy-ether-eth","text":"In order to interact with the Ethereum network, you will need to own ether (ETH). Unless you are mining, the only way to acquire ETH is from someone that already owns it. Below is a list of cryptocurrency exchanges where you can acquire ETH with fiat or cryptocurrencies. It is highly recommended to store the ETH you own in a hardware wallet !","title":"How to Buy Ether (ETH)"},{"location":"using-ethereum/how-to-buy-ether/#binance","text":"Binance is headquartered in Malta and constantly has some of the highest trading volume. Users can buy ETH with fiat or cryptocurrencies. Buy ETH on Binance","title":"Binance"},{"location":"using-ethereum/how-to-buy-ether/#coinbase","text":"Coinbase is based in San Francisco and is one of the most reputable and well known exchanges in the world. Users can buy ETH with fiat or cryptocurrencies. Buy ETH on Coinbase","title":"Coinbase"},{"location":"using-ethereum/how-to-buy-ether/#gemini","text":"Gemini is based in New York and has a great history of security and reliability. Users can buy ETH with fiat or cryptocurrencies. Buy ETH on Gemini","title":"Gemini"},{"location":"using-ethereum/how-to-buy-ether/#kraken","text":"Kraken is a great option for those living in Canada, Europe, and the United States, and supports accounts for users from other countries as well. Users can buy ETH with any of the supported fiat or cryptocurrencies . Buy ETH on Kraken","title":"Kraken"},{"location":"using-ethereum/how-to-buy-ether/#localcryptos","text":"LocalCryptos is a global, p2p marketplace for buying and selling ETH. Over 30 payment methods are supported including in-person cash trades. Buy ETH on LocalCryptos","title":"LocalCryptos"},{"location":"using-ethereum/mining/","text":"Mining What does it mean to mine Ethereum? Mining is the process of creating a block of transactions to be added to the Ethereum blockchain. Miners essentially process pending transactions and are awarded block rewards in the form of Ether, the Ethereum network's native currency, for each block generated. Generating a block requires intensive computational work (or hashing power) due to the difficulty set by the Ethereum network protocol. This difficulty level is proportional to the total amount of computational power (also known as the total hashrate of the network) being used to mine Ethereum and serves as a way to secure the network from attacks as well as tuning the speed at which blocks (and block rewards) are generated. This system of using hashing power generated by costly computer hardware is known as Proof of Work (PoW). Who can become a miner on the Ethereum network? Technically, anyone is able to mine on the Ethereum network using their computer. However, not everyone is able to mine Ether profitably. In most cases, miners must purchase dedicated computer hardware in order to mine profitably. While it is true anyone can run the mining software on their computer, it is unlikely that the average computer would be able to earn enough block rewards to cover the associated costs of mining (See question below for more details). What are the costs associated with mining? Potential costs of the hardware necessary to build and maintain a mining rig Electrical cost of powering the mining rig If you are mining in a pool, mining pools fees typically charge a flat % fee of each block generated by the pool Potential cost of equipment to support mining rig (ventilation, energy monitoring, electrical wiring, etc.) Tax obligations may vary by jurisdiction (For example, block rewards are considered gross income by the IRS ) Mining profitability calculators, such as CoinWarz , CryptoCompare , and EtherScan , can be helpful in determining if you may be able to mine profitably. Note that mining calculators may not 100% accurate and it may be useful to compare and contrast several results. Where can I find the latest information on mining? /r/EtherMining Subreddit How much longer will Ethereum mining be around? See Serenity phases for more information. Block Generation Block structure A block consists a header, which includes information identifying the block and linking it to the rest of the chain, and a body of transactions. Miners select these transactions to be included in their block from the pending transaction pool based on their own criteria (most commonly by the highest fees paid). Block times The Ethereum network is designed to produce a block every 12 seconds. Block times will vary based upon how long it takes miners to generate a hash that meets the required mining difficulty at that moment. 12 seconds was chosen as a time that is as fast as possible, but is at the same time substantially longer than network latency. A 2013 paper by Decker and Wattenhofer in Zurich measured Bitcoin network latency and determined that 12.6 seconds is the time it takes for a new block to propagate to 95% of nodes. The goal of the 12 second design is to allow the network to propagate blocks as fast as possible without causing miners to find a significant number of stale blocks. Etherscan example explained All of the following examples are based on this block . Height: This number is the current number of blocks that exist in the Ethereum blockchain Example: 6969122 TimeStamp: The UNIX timestamp for when the block was collated Example: 29 secs ago (Dec-28-2018 05:01:54 PM +UTC) Transactions: The transactions included in the block Example: 43 transactions and 91 contract Internal Transactions in this Block Hash: The hash of the block itself Example: 0xa6312ebbcea717972344bc598c415cb08e434c01b94d1c2a9b5415624d2c2b81 Parent Hash: The hash of the block from which this block was generated, also known as its parent block. Example: 0xa48e2ad13de011f127b345a81a91933d221f5a60d45852e7d7c2b5a07fda9fe2 Sha3Uncles: A SHA3 hash of the uncle block data included in the block Example: 0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347 Mined By: The address of who mined the block and received the block reward Example: 0x5a0b54d5dc17e0aadc383d2db43b0a0d3e029c4c (SparkPool) in 2 secs Difficulty: A number that represents the difficulty required to mine this block Example: 2,511,265,102,818,605 Total Difficulty: A number that represents the total mining difficulty of the chain up until this block Example: 8,470,035,190,867,378,349,872 Size: The size of the block file in bytes Example: 13160 bytes Gas Used: The total amount of gas used by all the transactions included in this block Example: 7,997,769 (99.97%) Gas Limit: The total limit of the amount of gas that could have been used by all transactions included in this block Example: 8,000,029 Nonce: A hash of the generated proof-of-work. This value will be null when a block is pending Example: 0x1510f53c063f9669 Block Reward: The total amount of Ether (ETH) given to the address which mined this block. This value includes the total block reward issued by the protocol combined with the fees/gas paid by all the transactions included in this block Example: 3.032755182184797136 Ether (3 + 0.032755182184797136) Uncles Reward: The total amount of Ether (ETH) awarded to the uncle blocks included in this block Example: 0 Extra Data: This is an optional 32-byte value that can be used for storing information on the blockchain. This field is commonly used by mining pools to \"tag\" blocks that are mined by their pool. Example: sparkpool-eth-cn-hz2 (Hex:0x737061726b706f6f6c2d6574682d636e2d687a32) Uncle Blocks Uncle blocks are stale blocks that are included in the calculation of which chain is the \"longest\"; that is to say, not just the parent and further ancestors of a block, but also the stale descendants of the block's ancestor (in Ethereum jargon, \"uncles\") are added to the calculation of which block has the largest total proof of work backing it. Block rewards are given to stales: a stale block receives 87.5% of its base reward, and the nephew that includes the stale block receives the remaining 12.5%. Transaction fees, however, are not awarded to uncles. Ethereum implements a simplified version of GHOST which only goes down seven levels. Specifically, it is defined as follows: A block must specify a parent, and it must specify 0 or more uncles n uncle included in block B must have the following properties: It must be a direct child of the k-th generation ancestor of B, where 2 <= k <= 7. It cannot be an ancestor of B An uncle must be a valid block header, but does not need to be a previously verified or even valid block An uncle must be different from all uncles included in previous blocks and all other uncles included in the same block (non-double-inclusion) For every uncle U in block B, the miner of B gets an additional 3.125% added to its coinbase reward and the miner of U gets 93.75% of a standard coinbase reward. This limited version of GHOST, with uncles includable only up to 7 generations, was used for two reasons. First, unlimited GHOST would include too many complications into the calculation of which uncles for a given block are valid. Second, unlimited GHOST with compensation as used in Ethereum removes the incentive for a miner to mine on the main chain and not the chain of a public attacker. Resources https://eth.wiki/en/fundamentals/design-rationale https://ethereum.stackexchange.com/questions/268/ethereum-block-architecture https://eth.wiki/json-rpc/API https://ethereum.stackexchange.com/questions/10548/what-does-every-field-in-block-means How does Ethereum work, anyway? Ethereum Whitepaper Ethereum Mining Pools List Ethereum Mining Calculator","title":"Mining"},{"location":"using-ethereum/mining/#mining","text":"","title":"Mining"},{"location":"using-ethereum/mining/#what-does-it-mean-to-mine-ethereum","text":"Mining is the process of creating a block of transactions to be added to the Ethereum blockchain. Miners essentially process pending transactions and are awarded block rewards in the form of Ether, the Ethereum network's native currency, for each block generated. Generating a block requires intensive computational work (or hashing power) due to the difficulty set by the Ethereum network protocol. This difficulty level is proportional to the total amount of computational power (also known as the total hashrate of the network) being used to mine Ethereum and serves as a way to secure the network from attacks as well as tuning the speed at which blocks (and block rewards) are generated. This system of using hashing power generated by costly computer hardware is known as Proof of Work (PoW).","title":"What does it mean to mine Ethereum?"},{"location":"using-ethereum/mining/#who-can-become-a-miner-on-the-ethereum-network","text":"Technically, anyone is able to mine on the Ethereum network using their computer. However, not everyone is able to mine Ether profitably. In most cases, miners must purchase dedicated computer hardware in order to mine profitably. While it is true anyone can run the mining software on their computer, it is unlikely that the average computer would be able to earn enough block rewards to cover the associated costs of mining (See question below for more details).","title":"Who can become a miner on the Ethereum network?"},{"location":"using-ethereum/mining/#what-are-the-costs-associated-with-mining","text":"Potential costs of the hardware necessary to build and maintain a mining rig Electrical cost of powering the mining rig If you are mining in a pool, mining pools fees typically charge a flat % fee of each block generated by the pool Potential cost of equipment to support mining rig (ventilation, energy monitoring, electrical wiring, etc.) Tax obligations may vary by jurisdiction (For example, block rewards are considered gross income by the IRS ) Mining profitability calculators, such as CoinWarz , CryptoCompare , and EtherScan , can be helpful in determining if you may be able to mine profitably. Note that mining calculators may not 100% accurate and it may be useful to compare and contrast several results.","title":"What are the costs associated with mining?"},{"location":"using-ethereum/mining/#where-can-i-find-the-latest-information-on-mining","text":"/r/EtherMining Subreddit","title":"Where can I find the latest information on mining?"},{"location":"using-ethereum/mining/#how-much-longer-will-ethereum-mining-be-around","text":"See Serenity phases for more information.","title":"How much longer will Ethereum mining be around?"},{"location":"using-ethereum/mining/#block-generation","text":"","title":"Block Generation"},{"location":"using-ethereum/mining/#block-structure","text":"A block consists a header, which includes information identifying the block and linking it to the rest of the chain, and a body of transactions. Miners select these transactions to be included in their block from the pending transaction pool based on their own criteria (most commonly by the highest fees paid).","title":"Block structure"},{"location":"using-ethereum/mining/#block-times","text":"The Ethereum network is designed to produce a block every 12 seconds. Block times will vary based upon how long it takes miners to generate a hash that meets the required mining difficulty at that moment. 12 seconds was chosen as a time that is as fast as possible, but is at the same time substantially longer than network latency. A 2013 paper by Decker and Wattenhofer in Zurich measured Bitcoin network latency and determined that 12.6 seconds is the time it takes for a new block to propagate to 95% of nodes. The goal of the 12 second design is to allow the network to propagate blocks as fast as possible without causing miners to find a significant number of stale blocks.","title":"Block times"},{"location":"using-ethereum/mining/#etherscan-example-explained","text":"All of the following examples are based on this block .","title":"Etherscan example explained"},{"location":"using-ethereum/mining/#height","text":"This number is the current number of blocks that exist in the Ethereum blockchain Example: 6969122","title":"Height:"},{"location":"using-ethereum/mining/#timestamp","text":"The UNIX timestamp for when the block was collated Example: 29 secs ago (Dec-28-2018 05:01:54 PM +UTC)","title":"TimeStamp:"},{"location":"using-ethereum/mining/#transactions","text":"The transactions included in the block Example: 43 transactions and 91 contract Internal Transactions in this Block","title":"Transactions:"},{"location":"using-ethereum/mining/#hash","text":"The hash of the block itself Example: 0xa6312ebbcea717972344bc598c415cb08e434c01b94d1c2a9b5415624d2c2b81","title":"Hash:"},{"location":"using-ethereum/mining/#parent-hash","text":"The hash of the block from which this block was generated, also known as its parent block. Example: 0xa48e2ad13de011f127b345a81a91933d221f5a60d45852e7d7c2b5a07fda9fe2","title":"Parent Hash:"},{"location":"using-ethereum/mining/#sha3uncles","text":"A SHA3 hash of the uncle block data included in the block Example: 0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347","title":"Sha3Uncles:"},{"location":"using-ethereum/mining/#mined-by","text":"The address of who mined the block and received the block reward Example: 0x5a0b54d5dc17e0aadc383d2db43b0a0d3e029c4c (SparkPool) in 2 secs","title":"Mined By:"},{"location":"using-ethereum/mining/#difficulty","text":"A number that represents the difficulty required to mine this block Example: 2,511,265,102,818,605","title":"Difficulty:"},{"location":"using-ethereum/mining/#total-difficulty","text":"A number that represents the total mining difficulty of the chain up until this block Example: 8,470,035,190,867,378,349,872","title":"Total Difficulty:"},{"location":"using-ethereum/mining/#size","text":"The size of the block file in bytes Example: 13160 bytes","title":"Size:"},{"location":"using-ethereum/mining/#gas-used","text":"The total amount of gas used by all the transactions included in this block Example: 7,997,769 (99.97%)","title":"Gas Used:"},{"location":"using-ethereum/mining/#gas-limit","text":"The total limit of the amount of gas that could have been used by all transactions included in this block Example: 8,000,029","title":"Gas Limit:"},{"location":"using-ethereum/mining/#nonce","text":"A hash of the generated proof-of-work. This value will be null when a block is pending Example: 0x1510f53c063f9669","title":"Nonce:"},{"location":"using-ethereum/mining/#block-reward","text":"The total amount of Ether (ETH) given to the address which mined this block. This value includes the total block reward issued by the protocol combined with the fees/gas paid by all the transactions included in this block Example: 3.032755182184797136 Ether (3 + 0.032755182184797136)","title":"Block Reward:"},{"location":"using-ethereum/mining/#uncles-reward","text":"The total amount of Ether (ETH) awarded to the uncle blocks included in this block Example: 0","title":"Uncles Reward:"},{"location":"using-ethereum/mining/#extra-data","text":"This is an optional 32-byte value that can be used for storing information on the blockchain. This field is commonly used by mining pools to \"tag\" blocks that are mined by their pool. Example: sparkpool-eth-cn-hz2 (Hex:0x737061726b706f6f6c2d6574682d636e2d687a32)","title":"Extra Data:"},{"location":"using-ethereum/mining/#uncle-blocks","text":"Uncle blocks are stale blocks that are included in the calculation of which chain is the \"longest\"; that is to say, not just the parent and further ancestors of a block, but also the stale descendants of the block's ancestor (in Ethereum jargon, \"uncles\") are added to the calculation of which block has the largest total proof of work backing it. Block rewards are given to stales: a stale block receives 87.5% of its base reward, and the nephew that includes the stale block receives the remaining 12.5%. Transaction fees, however, are not awarded to uncles. Ethereum implements a simplified version of GHOST which only goes down seven levels. Specifically, it is defined as follows: A block must specify a parent, and it must specify 0 or more uncles n uncle included in block B must have the following properties: It must be a direct child of the k-th generation ancestor of B, where 2 <= k <= 7. It cannot be an ancestor of B An uncle must be a valid block header, but does not need to be a previously verified or even valid block An uncle must be different from all uncles included in previous blocks and all other uncles included in the same block (non-double-inclusion) For every uncle U in block B, the miner of B gets an additional 3.125% added to its coinbase reward and the miner of U gets 93.75% of a standard coinbase reward. This limited version of GHOST, with uncles includable only up to 7 generations, was used for two reasons. First, unlimited GHOST would include too many complications into the calculation of which uncles for a given block are valid. Second, unlimited GHOST with compensation as used in Ethereum removes the incentive for a miner to mine on the main chain and not the chain of a public attacker.","title":"Uncle Blocks"},{"location":"using-ethereum/mining/#resources","text":"https://eth.wiki/en/fundamentals/design-rationale https://ethereum.stackexchange.com/questions/268/ethereum-block-architecture https://eth.wiki/json-rpc/API https://ethereum.stackexchange.com/questions/10548/what-does-every-field-in-block-means How does Ethereum work, anyway? Ethereum Whitepaper Ethereum Mining Pools List Ethereum Mining Calculator","title":"Resources"},{"location":"using-ethereum/running-an-ethereum-node/","text":"Running an Ethereum Node Summary Anyone is able to run an Ethereum node on their computer. This means that you can participate in validating transactions and blocks on the Ethereum blockchain. The two most common clients for running nodes are Geth and OpenEthereum . Depending on the type of node run and the hardware specifications of the system, the initial syncronization time and storage requirements vary. For information related to the current Full Node chaindata and state storage size check out: https://etherscan.io/chartsync/chaindefault For an easy guide on running your own node, please see this blog post . Below are the different types of nodes a user can run, their settings, and what they mean. Full nodes A full node: Stores the full blockchain data available on disk and can serve the network with any data on request. Receives new transactions and blocks while participating in block validation. Verifies all blocks and states. Stores recent state only for more efficient initial sync. All state can be derived from a full node. Once fully synced, stores all state moving forward similar to archive nodes (more below). Client settings geth The default sync mode. Synchronizes a full node doing a fast synchronization by downloading the entire state database, requesting the headers first, and filling in block bodies and receipts afterward. Once the fast sync reaches the best block of the Ethereum network, it switches to full sync mode. geth --syncmode full Synchronizes a full node starting at genesis, verifying all blocks and executing all transactions. This mode is a bit slower than the fast sync mode but comes with increased security. ./Nethermind.Runner --config mainnet The default sync mode . Synchronizes a full node doing a fast synchronization by downloading the entire state database, requesting the headers first, and optionally filling in block bodies and receipts. Once the fast sync reaches the best block of the Ethereum network, it switches to full sync mode. openethereum The default sync mode. Synchronizes a full Ethereum node using warp synchronization mode by downloading a snapshot of the 30,000 best blocks and the latest state database. Once the snapshot is restored, the client switches to full sync and ancient blocks are synchronized from the network in background. A openethereum default node serves the network as a full node after it has finished synchronizing. besu Besu's default sync mode is with fastsync enabled. This setting reduces sync time considerably compared to full sync. besu --pruning-enabled=true This setting enables pruning in order to reduce storage required for the world state. Pruning removes state trie nodes that aren\u2019t required. Light nodes A light node: Stores the header chain and requests everything else on demand. Can verify the validity of the data against the state roots in the block headers. Light nodes are useful for low capacity devices, such as embedded devices or mobile phones, which can't afford to store multiple dozen Gigabytes of blockchain data. Client settings geth --syncmode light Waits for around 200 seconds before beginning to sync from 2,300 blocks in the past, then periodically receives small bundles of 1 to 10 blocks. The initial sync takes very little time. Archive Nodes An archive node: Stores everything kept in the full node. Also builds an archive of historical states. Archive nodes are only necessary if you want to check the state of an account at any given block height. For example, if you wanted to know the Ether balance an account had at block #4,000,000, you would need to run and query an archive node. They are commonly only used for services such as block explorers and infrastructure providers like Infura. They are use case dependent and have no impact on the security or trust model of the blockchain. Client Settings geth --syncmode full --gcmode archive --txlookuplimit=0 --cache.preimages Synchronizes an archive node starting at genesis, thoroughly verifying all blocks, executing all transactions, and writing all intermediate states to disk (\"archive\"). In Geth, this is called gcmode which refers to the concept of garbage collection . Setting it to archive basically turns it off. ./Nethermind.Runner --config mainnet_archive Synchronizes a full node starting at genesis, verifying all blocks and executing all transactions. This mode is much slower than the fast sync mode but comes with increased security. openethereum --pruning=\"archive\" --no-warp Pruning is enabled by default, setting it to archive while turning off warp will build all historical data from genesis. besu --sync-mode=FULL To run an archive node, enable full synchronization using --sync-mode=FULL, which by default also disables pruning (--pruning-enabled=false). Hardware A consumer-grade laptop will be enough to run a full node, but not an archive node. An archive node does need 2+ TB of disk space, and that disk space cannot be HDD - it must be SSD for both full and archive nodes. Light nodes run fine on SD cards and HDDs. If a full node goes offline for a while, its data can get corrupted and it can take a while to restore it. For best results, if running your own node, run it on an always-on always-connected device for minimal downtime and maximum reliability. This can be impossible on a laptop and expensive on a desktop PC (500W+) so it's better to use a device that's cheap to build and replace and almost free to run. A Raspberry Pi is enough for light nodes while a full node will run fine on an ARM micro computer. Check out pre-synced pre-built devices by Ava.do , and DAppNode . Warning: never plug into your LAN anything you cannot thoroughly inspect and verify. You might be subjecting yourself to DNS hijacking or cryptojacking without knowing it. If the hardware and software aren't open source (at least the assembly part), they aren't safe to use. Resources Spin up your own Ethereum node Running Ethereum Full Nodes: A Complete Guide Huge shout out and thanks to Afri Schoedon's blogs here and here which is where a lot of the information on this page came from. Run an Ethereum Node on Debian Dispelling Myths About Ethereum's Disk Space What Comprises an Ethereum Fullnode Implementation? Running an Ethereum Full Node on a RaspberryPi 4 Getting started with Nethermind","title":"Running an Ethereum Node"},{"location":"using-ethereum/running-an-ethereum-node/#running-an-ethereum-node","text":"","title":"Running an Ethereum Node"},{"location":"using-ethereum/running-an-ethereum-node/#summary","text":"Anyone is able to run an Ethereum node on their computer. This means that you can participate in validating transactions and blocks on the Ethereum blockchain. The two most common clients for running nodes are Geth and OpenEthereum . Depending on the type of node run and the hardware specifications of the system, the initial syncronization time and storage requirements vary. For information related to the current Full Node chaindata and state storage size check out: https://etherscan.io/chartsync/chaindefault For an easy guide on running your own node, please see this blog post . Below are the different types of nodes a user can run, their settings, and what they mean.","title":"Summary"},{"location":"using-ethereum/running-an-ethereum-node/#full-nodes","text":"A full node: Stores the full blockchain data available on disk and can serve the network with any data on request. Receives new transactions and blocks while participating in block validation. Verifies all blocks and states. Stores recent state only for more efficient initial sync. All state can be derived from a full node. Once fully synced, stores all state moving forward similar to archive nodes (more below).","title":"Full nodes"},{"location":"using-ethereum/running-an-ethereum-node/#client-settings","text":"geth The default sync mode. Synchronizes a full node doing a fast synchronization by downloading the entire state database, requesting the headers first, and filling in block bodies and receipts afterward. Once the fast sync reaches the best block of the Ethereum network, it switches to full sync mode. geth --syncmode full Synchronizes a full node starting at genesis, verifying all blocks and executing all transactions. This mode is a bit slower than the fast sync mode but comes with increased security. ./Nethermind.Runner --config mainnet The default sync mode . Synchronizes a full node doing a fast synchronization by downloading the entire state database, requesting the headers first, and optionally filling in block bodies and receipts. Once the fast sync reaches the best block of the Ethereum network, it switches to full sync mode. openethereum The default sync mode. Synchronizes a full Ethereum node using warp synchronization mode by downloading a snapshot of the 30,000 best blocks and the latest state database. Once the snapshot is restored, the client switches to full sync and ancient blocks are synchronized from the network in background. A openethereum default node serves the network as a full node after it has finished synchronizing. besu Besu's default sync mode is with fastsync enabled. This setting reduces sync time considerably compared to full sync. besu --pruning-enabled=true This setting enables pruning in order to reduce storage required for the world state. Pruning removes state trie nodes that aren\u2019t required.","title":"Client settings"},{"location":"using-ethereum/running-an-ethereum-node/#light-nodes","text":"A light node: Stores the header chain and requests everything else on demand. Can verify the validity of the data against the state roots in the block headers. Light nodes are useful for low capacity devices, such as embedded devices or mobile phones, which can't afford to store multiple dozen Gigabytes of blockchain data.","title":"Light nodes"},{"location":"using-ethereum/running-an-ethereum-node/#client-settings_1","text":"geth --syncmode light Waits for around 200 seconds before beginning to sync from 2,300 blocks in the past, then periodically receives small bundles of 1 to 10 blocks. The initial sync takes very little time.","title":"Client settings"},{"location":"using-ethereum/running-an-ethereum-node/#archive-nodes","text":"An archive node: Stores everything kept in the full node. Also builds an archive of historical states. Archive nodes are only necessary if you want to check the state of an account at any given block height. For example, if you wanted to know the Ether balance an account had at block #4,000,000, you would need to run and query an archive node. They are commonly only used for services such as block explorers and infrastructure providers like Infura. They are use case dependent and have no impact on the security or trust model of the blockchain.","title":"Archive Nodes"},{"location":"using-ethereum/running-an-ethereum-node/#client-settings_2","text":"geth --syncmode full --gcmode archive --txlookuplimit=0 --cache.preimages Synchronizes an archive node starting at genesis, thoroughly verifying all blocks, executing all transactions, and writing all intermediate states to disk (\"archive\"). In Geth, this is called gcmode which refers to the concept of garbage collection . Setting it to archive basically turns it off. ./Nethermind.Runner --config mainnet_archive Synchronizes a full node starting at genesis, verifying all blocks and executing all transactions. This mode is much slower than the fast sync mode but comes with increased security. openethereum --pruning=\"archive\" --no-warp Pruning is enabled by default, setting it to archive while turning off warp will build all historical data from genesis. besu --sync-mode=FULL To run an archive node, enable full synchronization using --sync-mode=FULL, which by default also disables pruning (--pruning-enabled=false).","title":"Client Settings"},{"location":"using-ethereum/running-an-ethereum-node/#hardware","text":"A consumer-grade laptop will be enough to run a full node, but not an archive node. An archive node does need 2+ TB of disk space, and that disk space cannot be HDD - it must be SSD for both full and archive nodes. Light nodes run fine on SD cards and HDDs. If a full node goes offline for a while, its data can get corrupted and it can take a while to restore it. For best results, if running your own node, run it on an always-on always-connected device for minimal downtime and maximum reliability. This can be impossible on a laptop and expensive on a desktop PC (500W+) so it's better to use a device that's cheap to build and replace and almost free to run. A Raspberry Pi is enough for light nodes while a full node will run fine on an ARM micro computer. Check out pre-synced pre-built devices by Ava.do , and DAppNode . Warning: never plug into your LAN anything you cannot thoroughly inspect and verify. You might be subjecting yourself to DNS hijacking or cryptojacking without knowing it. If the hardware and software aren't open source (at least the assembly part), they aren't safe to use.","title":"Hardware"},{"location":"using-ethereum/running-an-ethereum-node/#resources","text":"Spin up your own Ethereum node Running Ethereum Full Nodes: A Complete Guide Huge shout out and thanks to Afri Schoedon's blogs here and here which is where a lot of the information on this page came from. Run an Ethereum Node on Debian Dispelling Myths About Ethereum's Disk Space What Comprises an Ethereum Fullnode Implementation? Running an Ethereum Full Node on a RaspberryPi 4 Getting started with Nethermind","title":"Resources"},{"location":"using-ethereum/test-networks/","text":"Test Networks Ropsten Summary The Ropsten test network is a Proof-of-Work testnet for Ethereum. To acquire ETH on Ropsten, one can mine on the network. Resources Block Explorer Kovan Summary The Kovan test network is a Proof-of-Authority testnet for Ethereum, originally started by the Parity team. To acquire ETH on Kovan, one can request it from a faucet. Resources Website Block Explorer Faucet Rinkeby Summary The Rinkeby test network is a Proof-of-Authority testnet for Ethereum, originally started by the Geth team. To acquire ETH on Rinkeby, one can request it from a faucet. Resources Website Block Explorer Faucet G\u00f6rli Summary The G\u00f6rli test network is a Proof-of-Authority testnet for Ethereum, originally proposed by Chainsafe and Afri Schoedon. To acquire ETH on G\u00f6rli, one can use the one-way throttled bridge from any of the other three test networks. Resources Website Block Explorer GitHub Testnet proposal Ethstats for G\u00f6rli","title":"Test Networks"},{"location":"using-ethereum/test-networks/#test-networks","text":"","title":"Test Networks"},{"location":"using-ethereum/test-networks/#ropsten","text":"","title":"Ropsten"},{"location":"using-ethereum/test-networks/#summary","text":"The Ropsten test network is a Proof-of-Work testnet for Ethereum. To acquire ETH on Ropsten, one can mine on the network.","title":"Summary"},{"location":"using-ethereum/test-networks/#resources","text":"Block Explorer","title":"Resources"},{"location":"using-ethereum/test-networks/#kovan","text":"","title":"Kovan"},{"location":"using-ethereum/test-networks/#summary_1","text":"The Kovan test network is a Proof-of-Authority testnet for Ethereum, originally started by the Parity team. To acquire ETH on Kovan, one can request it from a faucet.","title":"Summary"},{"location":"using-ethereum/test-networks/#resources_1","text":"Website Block Explorer Faucet","title":"Resources"},{"location":"using-ethereum/test-networks/#rinkeby","text":"","title":"Rinkeby"},{"location":"using-ethereum/test-networks/#summary_2","text":"The Rinkeby test network is a Proof-of-Authority testnet for Ethereum, originally started by the Geth team. To acquire ETH on Rinkeby, one can request it from a faucet.","title":"Summary"},{"location":"using-ethereum/test-networks/#resources_2","text":"Website Block Explorer Faucet","title":"Resources"},{"location":"using-ethereum/test-networks/#gorli","text":"","title":"G\u00f6rli"},{"location":"using-ethereum/test-networks/#summary_3","text":"The G\u00f6rli test network is a Proof-of-Authority testnet for Ethereum, originally proposed by Chainsafe and Afri Schoedon. To acquire ETH on G\u00f6rli, one can use the one-way throttled bridge from any of the other three test networks.","title":"Summary"},{"location":"using-ethereum/test-networks/#resources_3","text":"Website Block Explorer GitHub Testnet proposal Ethstats for G\u00f6rli","title":"Resources"},{"location":"using-ethereum/transactions/","text":"Transactions Gas Summary Understanding 'gas' is fundamental to understanding how the Ethereum network functions. The EVM - the Ethereum Virtual Machine (EVM) running on each Ethereum node - is an emulation of a computer system. One example of a regular, non-blockchain virtual machine is the VirtualBox software, which allows you to emulate computer systems (guests) on your physical hardware (hosts). Any operation in the EVM consumes CPU cycles, disk access, memory, of the hosting machine (which carries a cost). This cost is paid via Ethereum 'gas'. In order to prevent \"overload\" of the host, each operation on the EVM consumes a certain amount of gas. Accessing memory or writing to disk have differing costs with each EVM operator setting an upper limit to the gas consumed during execution of a contract. So, if a malicious operator crafted a smart contract that went into an infinite loop, each loop would consume some gas and eventually run into the limit, at which point the EVM would abort the execution of this contract. Essentially, the larger, more complex the contract and the more operations it performs, the more expensive it is to run it. This process creates a fee market using gas prices where users decide how much they are willing to pay for each unit of gas. Due to the gas block limit, the fee market almost always determines what order transactions are mined in because miners looking to profit will select the transactions with the highest fees. There are many key components to a transaction that are important to understand: Term Description Gas Unit for how much computation work is done. Gas Price How much you\u2019re willing to pay per gas for work (in gwei) Tx Cost Gas used * Gas Price Gas Limit Max gas you\u2019ll pay for a certain tx Gas Block Limit Max gas allowed in a block Fee Market Summary The Ethereum gas block limit means that there is a limit to how many computations can occur per block. This creates a fee market for gas where miners will accept higher paying transactions first. Users that want their transactions to be included first can pay a higher gas price than those who aren't in a rush. Key concepts to understand about the fee market are: Term Description Gas Price How much a user is willing to pay per gas for work (in gwei) Safe Low A price that will be mined in a reasonable time (<50 blocks) Standard Gas Price The average gas price being paid by the network Fast Gas Price A price that will be mined within the next few blocks Signing Transactions on Ethereum Interacting with Smart Contracts via Etherscan and MetaMask Navigate to the Etherscan page for the Contract Address If the code and ABI have been uploaded to Etherscan, you should be able to access the 'Write Contract' tab Click the connect with MetaMask button Follow the documentation provided by the Contract's author to complete your transaction. Interacting with Smart Contracts via MyCrypto Navigate to MyCrypto . Verify the SSL (little green lock next to URL) to avoid phishing sites. Click the 'Contracts' tab Enter the Ethereum address of your desired contract in the 'Contract Address' field Enter the 'ABI / JSON Interface' provided by the contract author into the 'Contract ABI' filed. The ABI allows MyCrypto to display named functions that are invokable for the provided contract address. This code can sometimes be found on the Etherscan page for the contract address under the 'Code' tab. Click 'Access' Follow the contract documentation provided by the contract author to use the desired contract function in the 'Read / Write Contract' dropdown. Follow the MyCrypto prompts to access your wallet in order to sign and submit your transaction. Important notes If you are experiencing troubles, be sure that you are using the 'Ethereum' (mainnet) from the dropdown in the top right hand corner It never hurts to cross reference the average gas limit and gas price on either Etherscan or EthGasStation How To Make An Offline Transaction via MyCrypto To learn how to generate, sign, and broadcast a transaction locally and offline via MyCrypto, see this guide . Signing & Verifying Messages on Ethereum Ethereum private keys can be used to sign messages. Signatures can be used to verify that a given user owns an Ethereum address. To learn how to sign and verify signatures via MyCrypto, see this guide . Resources Understanding Ethereum Gas, Blocks and the Fee Market How does Ethereum work, anyway? EthGasStation","title":"Transactions"},{"location":"using-ethereum/transactions/#transactions","text":"","title":"Transactions"},{"location":"using-ethereum/transactions/#gas","text":"","title":"Gas"},{"location":"using-ethereum/transactions/#summary","text":"Understanding 'gas' is fundamental to understanding how the Ethereum network functions. The EVM - the Ethereum Virtual Machine (EVM) running on each Ethereum node - is an emulation of a computer system. One example of a regular, non-blockchain virtual machine is the VirtualBox software, which allows you to emulate computer systems (guests) on your physical hardware (hosts). Any operation in the EVM consumes CPU cycles, disk access, memory, of the hosting machine (which carries a cost). This cost is paid via Ethereum 'gas'. In order to prevent \"overload\" of the host, each operation on the EVM consumes a certain amount of gas. Accessing memory or writing to disk have differing costs with each EVM operator setting an upper limit to the gas consumed during execution of a contract. So, if a malicious operator crafted a smart contract that went into an infinite loop, each loop would consume some gas and eventually run into the limit, at which point the EVM would abort the execution of this contract. Essentially, the larger, more complex the contract and the more operations it performs, the more expensive it is to run it. This process creates a fee market using gas prices where users decide how much they are willing to pay for each unit of gas. Due to the gas block limit, the fee market almost always determines what order transactions are mined in because miners looking to profit will select the transactions with the highest fees. There are many key components to a transaction that are important to understand: Term Description Gas Unit for how much computation work is done. Gas Price How much you\u2019re willing to pay per gas for work (in gwei) Tx Cost Gas used * Gas Price Gas Limit Max gas you\u2019ll pay for a certain tx Gas Block Limit Max gas allowed in a block","title":"Summary"},{"location":"using-ethereum/transactions/#fee-market","text":"","title":"Fee Market"},{"location":"using-ethereum/transactions/#summary_1","text":"The Ethereum gas block limit means that there is a limit to how many computations can occur per block. This creates a fee market for gas where miners will accept higher paying transactions first. Users that want their transactions to be included first can pay a higher gas price than those who aren't in a rush. Key concepts to understand about the fee market are: Term Description Gas Price How much a user is willing to pay per gas for work (in gwei) Safe Low A price that will be mined in a reasonable time (<50 blocks) Standard Gas Price The average gas price being paid by the network Fast Gas Price A price that will be mined within the next few blocks","title":"Summary"},{"location":"using-ethereum/transactions/#signing-transactions-on-ethereum","text":"","title":"Signing Transactions on Ethereum"},{"location":"using-ethereum/transactions/#interacting-with-smart-contracts-via-etherscan-and-metamask","text":"Navigate to the Etherscan page for the Contract Address If the code and ABI have been uploaded to Etherscan, you should be able to access the 'Write Contract' tab Click the connect with MetaMask button Follow the documentation provided by the Contract's author to complete your transaction.","title":"Interacting with Smart Contracts via Etherscan and MetaMask"},{"location":"using-ethereum/transactions/#interacting-with-smart-contracts-via-mycrypto","text":"Navigate to MyCrypto . Verify the SSL (little green lock next to URL) to avoid phishing sites. Click the 'Contracts' tab Enter the Ethereum address of your desired contract in the 'Contract Address' field Enter the 'ABI / JSON Interface' provided by the contract author into the 'Contract ABI' filed. The ABI allows MyCrypto to display named functions that are invokable for the provided contract address. This code can sometimes be found on the Etherscan page for the contract address under the 'Code' tab. Click 'Access' Follow the contract documentation provided by the contract author to use the desired contract function in the 'Read / Write Contract' dropdown. Follow the MyCrypto prompts to access your wallet in order to sign and submit your transaction.","title":"Interacting with Smart Contracts via MyCrypto"},{"location":"using-ethereum/transactions/#important-notes","text":"If you are experiencing troubles, be sure that you are using the 'Ethereum' (mainnet) from the dropdown in the top right hand corner It never hurts to cross reference the average gas limit and gas price on either Etherscan or EthGasStation","title":"Important notes"},{"location":"using-ethereum/transactions/#how-to-make-an-offline-transaction-via-mycrypto","text":"To learn how to generate, sign, and broadcast a transaction locally and offline via MyCrypto, see this guide .","title":"How To Make An Offline Transaction via MyCrypto"},{"location":"using-ethereum/transactions/#signing-verifying-messages-on-ethereum","text":"Ethereum private keys can be used to sign messages. Signatures can be used to verify that a given user owns an Ethereum address. To learn how to sign and verify signatures via MyCrypto, see this guide .","title":"Signing &amp; Verifying Messages on Ethereum"},{"location":"using-ethereum/transactions/#resources","text":"Understanding Ethereum Gas, Blocks and the Fee Market How does Ethereum work, anyway? EthGasStation","title":"Resources"},{"location":"using-ethereum/ethereum-clients/besu/","text":"Besu Summary Hyperledger Besu is an open-source Ethereum client developed under the Apache 2.0 license and written in Java. It runs on the Ethereum public network, private networks, and test networks such as Rinkeby, Ropsten, and G\u00f6rli. Besu implements Proof of Work (Ethash) and Proof of Authority (IBFT 2.0 and Clique) consensus mechanisms. You can use Besu to develop enterprise applications requiring secure, high-performance transaction processing in a private network. Besu supports enterprise features including privacy and permissioning. Resources Github Docs","title":"Besu"},{"location":"using-ethereum/ethereum-clients/besu/#besu","text":"","title":"Besu"},{"location":"using-ethereum/ethereum-clients/besu/#summary","text":"Hyperledger Besu is an open-source Ethereum client developed under the Apache 2.0 license and written in Java. It runs on the Ethereum public network, private networks, and test networks such as Rinkeby, Ropsten, and G\u00f6rli. Besu implements Proof of Work (Ethash) and Proof of Authority (IBFT 2.0 and Clique) consensus mechanisms. You can use Besu to develop enterprise applications requiring secure, high-performance transaction processing in a private network. Besu supports enterprise features including privacy and permissioning.","title":"Summary"},{"location":"using-ethereum/ethereum-clients/besu/#resources","text":"Github Docs","title":"Resources"},{"location":"using-ethereum/ethereum-clients/geth/","text":"Geth Summary Geth is the Golang implementation of the Ethereum protocol. It is fast, open source software that is actively maintained. Requirements Minimum: CPU with 2+ cores 4GB RAM 320GB free storage space to sync the Mainnet 8 MBit/sec download Internet service Recommended: Fast CPU with 4+ cores 16GB+ RAM Fast SSD with at least 500GB free space 25+ MBit/sec download Internet service For light nodes, the requirements are much lower, as you will only be storing block headers and receive small state updates. Setup Download Geth from the official page Extract the compressed archive with your tool of choice There are no system dependencies if using an officially released geth binary, which ships for most architectures and operating systems. Running The first step in running an Ethereum node is synchronizing the Blockchian. There are a few options you can use to specify the sync mode of the geth client: --syncmode \"fast\" --syncmode \"full\" --syncmode \"light\" By default, geth will run in --syncmode \"fast\", this is the recommended option for running a complete Ethereum node. When using \"fast\" synchronization, the node will initially download blocks until it reaches the tip of the Blockchain without performing extensive validation steps. Once your node is in sync with the rest of the network, the node will validate transactions exactly like a full node. When using \"full\" synchronization, the node validates every transaction from downloaded blocks until it reaches the tip of the Blockchain. This is not advised, as it doesn't provide any benefits and can result in the node taking multiple days, or even weeks, to synchronize completely. Once the node is in sync, it will continue full validation of new transactions. When using \"light\" synchronization, the node only downloads a few recent block headers, making it a very quick sync. The drawback to this method is that the node is unable to perform reliable validation, as it doesn't have complete records of the Blockchain. If running on a device with low bandwidth or memory, the light node can be advantageous. The light node gets updated by full nodes once in a while with information on changes pertaining to relevant parts of the Blockchain. When offering services to users which might require complete records, the fast sync options are the best to use. A fast sync node can operate in light mode. Using In the folder extracted from the downloaded archive, the geth program can be run with the desired sync mode and other options. ./geth --syncmode \"option\" When using a light client, beware that it can take up to 10 minutes after the node's initialization before it starts receiving updates from the network. From then on, it is actively subscribed to updates by the full nodes. You can expect it to take anywhere from 3 to 12 hours to fast sync your Ethereum node depending on your hardware and whether your connection to the Internet is a bottleneck. A few interesting commands which will enhance your geth experience: ./geth account new : create an account, yields the address and location of the keystore file ./geth account list : list all accounts located in the keystore folder ./geth --cache VALUE : increase the amount of memory allocated to geth, default 1024 (MB) ./geth --maxpeers VALUE : set maximum number of full node peers, default 25 ./geth --lightpeers VALUE : set maximum number of light node peers, default 100 ./geth export FILEPATH : export a copy of the Blockchain data to FILEPATH ./geth import FILEPATH : import Blockchain data from FILEPATH Resources Github","title":"Geth"},{"location":"using-ethereum/ethereum-clients/geth/#geth","text":"","title":"Geth"},{"location":"using-ethereum/ethereum-clients/geth/#summary","text":"Geth is the Golang implementation of the Ethereum protocol. It is fast, open source software that is actively maintained.","title":"Summary"},{"location":"using-ethereum/ethereum-clients/geth/#requirements","text":"Minimum: CPU with 2+ cores 4GB RAM 320GB free storage space to sync the Mainnet 8 MBit/sec download Internet service Recommended: Fast CPU with 4+ cores 16GB+ RAM Fast SSD with at least 500GB free space 25+ MBit/sec download Internet service For light nodes, the requirements are much lower, as you will only be storing block headers and receive small state updates.","title":"Requirements"},{"location":"using-ethereum/ethereum-clients/geth/#setup","text":"Download Geth from the official page Extract the compressed archive with your tool of choice There are no system dependencies if using an officially released geth binary, which ships for most architectures and operating systems.","title":"Setup"},{"location":"using-ethereum/ethereum-clients/geth/#running","text":"The first step in running an Ethereum node is synchronizing the Blockchian. There are a few options you can use to specify the sync mode of the geth client: --syncmode \"fast\" --syncmode \"full\" --syncmode \"light\" By default, geth will run in --syncmode \"fast\", this is the recommended option for running a complete Ethereum node. When using \"fast\" synchronization, the node will initially download blocks until it reaches the tip of the Blockchain without performing extensive validation steps. Once your node is in sync with the rest of the network, the node will validate transactions exactly like a full node. When using \"full\" synchronization, the node validates every transaction from downloaded blocks until it reaches the tip of the Blockchain. This is not advised, as it doesn't provide any benefits and can result in the node taking multiple days, or even weeks, to synchronize completely. Once the node is in sync, it will continue full validation of new transactions. When using \"light\" synchronization, the node only downloads a few recent block headers, making it a very quick sync. The drawback to this method is that the node is unable to perform reliable validation, as it doesn't have complete records of the Blockchain. If running on a device with low bandwidth or memory, the light node can be advantageous. The light node gets updated by full nodes once in a while with information on changes pertaining to relevant parts of the Blockchain. When offering services to users which might require complete records, the fast sync options are the best to use. A fast sync node can operate in light mode.","title":"Running"},{"location":"using-ethereum/ethereum-clients/geth/#using","text":"In the folder extracted from the downloaded archive, the geth program can be run with the desired sync mode and other options. ./geth --syncmode \"option\" When using a light client, beware that it can take up to 10 minutes after the node's initialization before it starts receiving updates from the network. From then on, it is actively subscribed to updates by the full nodes. You can expect it to take anywhere from 3 to 12 hours to fast sync your Ethereum node depending on your hardware and whether your connection to the Internet is a bottleneck. A few interesting commands which will enhance your geth experience: ./geth account new : create an account, yields the address and location of the keystore file ./geth account list : list all accounts located in the keystore folder ./geth --cache VALUE : increase the amount of memory allocated to geth, default 1024 (MB) ./geth --maxpeers VALUE : set maximum number of full node peers, default 25 ./geth --lightpeers VALUE : set maximum number of light node peers, default 100 ./geth export FILEPATH : export a copy of the Blockchain data to FILEPATH ./geth import FILEPATH : import Blockchain data from FILEPATH","title":"Using"},{"location":"using-ethereum/ethereum-clients/geth/#resources","text":"Github","title":"Resources"},{"location":"using-ethereum/ethereum-clients/nethermind/","text":"Nethermind Summary Ethereum Client built on .NET Core, perfect for enterprise-grade systems and benefiting from a huge pool of developers. Extend it, customise it - the sky\u2019s the limit. Requirements Hardware Requirements Setup Download Nethermind from the official page Follow the instructions Running There are two methods to run the Nethermind client. Nethermind.Launcher Nethermind.Runner Nethermind ships with a set of default configuration files located in the configs folder. These config files are used by Nethermind.Launcher. You can customize them following the documentation here . It is recommended to not overwrite the default configs as they will be replaced when upgrading. Instead, copy the one that closest meets your needs and save it to a known location. Nethermind.Launcher Nethermind.Launcher is an interactive prompt that allows you to choose the network which then calls Nethermind.Runner with the appropriate config file. This is the quickest way to get up and running. Nethermind.Runner This is the actual client binary similar to the geth binary and supports both cli options or a JSON configuration file. By default Nethermind will use the binary's location as its home and will create keystore, database, etc in that home location. You can overwrite this behavior with a custom configuration file or via the command line options. Nethermind.Runner --config <path_to_config> Using Nethermind.Launcher can be used as a CLI tool similar to that of the geth cli. If you have enabled WebSockets and/or JSON RPC then most RPC endpoints have been implimented and can be accessed in the same manner as geth. Resources Website Github Docs","title":"Nethermind"},{"location":"using-ethereum/ethereum-clients/nethermind/#nethermind","text":"","title":"Nethermind"},{"location":"using-ethereum/ethereum-clients/nethermind/#summary","text":"Ethereum Client built on .NET Core, perfect for enterprise-grade systems and benefiting from a huge pool of developers. Extend it, customise it - the sky\u2019s the limit.","title":"Summary"},{"location":"using-ethereum/ethereum-clients/nethermind/#requirements","text":"Hardware Requirements","title":"Requirements"},{"location":"using-ethereum/ethereum-clients/nethermind/#setup","text":"Download Nethermind from the official page Follow the instructions","title":"Setup"},{"location":"using-ethereum/ethereum-clients/nethermind/#running","text":"There are two methods to run the Nethermind client. Nethermind.Launcher Nethermind.Runner Nethermind ships with a set of default configuration files located in the configs folder. These config files are used by Nethermind.Launcher. You can customize them following the documentation here . It is recommended to not overwrite the default configs as they will be replaced when upgrading. Instead, copy the one that closest meets your needs and save it to a known location.","title":"Running"},{"location":"using-ethereum/ethereum-clients/nethermind/#nethermindlauncher","text":"Nethermind.Launcher is an interactive prompt that allows you to choose the network which then calls Nethermind.Runner with the appropriate config file. This is the quickest way to get up and running.","title":"Nethermind.Launcher"},{"location":"using-ethereum/ethereum-clients/nethermind/#nethermindrunner","text":"This is the actual client binary similar to the geth binary and supports both cli options or a JSON configuration file. By default Nethermind will use the binary's location as its home and will create keystore, database, etc in that home location. You can overwrite this behavior with a custom configuration file or via the command line options. Nethermind.Runner --config <path_to_config>","title":"Nethermind.Runner"},{"location":"using-ethereum/ethereum-clients/nethermind/#using","text":"Nethermind.Launcher can be used as a CLI tool similar to that of the geth cli. If you have enabled WebSockets and/or JSON RPC then most RPC endpoints have been implimented and can be accessed in the same manner as geth.","title":"Using"},{"location":"using-ethereum/ethereum-clients/nethermind/#resources","text":"Website Github Docs","title":"Resources"},{"location":"using-ethereum/ethereum-clients/openethereum/","text":"OpenEthereum Summary OpenEthereum is an implementation of the Ethereum protocol written in Rust, a systems programming language. It is developed and actively maintained by OpenEthereum DAO. Requirements Full node: Multi-core CPU 4GB RAM SSD drive and at least 100GB free space A decent DSL connection is required Computers using HDD are advised to run a Light Node. Light node: Single-core CPU 512MB RAM 128MB free space on HDD Setup Download OpenEthereum from the official Github releases page If on Linux, make the OpenEthereum binary executable with chmod +x ./OpenEthereum For running a compiled binary downloaded from the official Github releases page, no system dependencies are required. Running By default, the OpenEthereum client syncs the Ethereum Blockchain completely from a snapshot downloaded from peers and includes features such as auto-updating. To disable downloading a snapshot from peers, use --no-warp ; this saves a few GB of storage but takes longer to sync. If you wish to run a light node, simply specify the command line option --light to the program. Syncing can be faster by disregarding ancient blocks with --no-ancient-blocks ; costing only 20GB. The default sync with warp enabled occupies ~82GB of storage when completed (as of 15/10/2018). For a complete pruning archive, with complete state saved, run OpenEthereum with --pruning archive (over 1TB disk space will be used). Using Many commands are available with the OpenEthereum client. OpenEthereum account new : asks for a password and yields an address OpenEthereum account list : lists local addresses OpenEthereum snapshot --at BLOCKNUMBER FILEPATH : save snapshot at BLOCKNUMBER to FILEPATH OpenEthereum restore FILEPATH : restore Blockchain from snapshot located at FILEPATH Resources Github","title":"OpenEthereum"},{"location":"using-ethereum/ethereum-clients/openethereum/#openethereum","text":"","title":"OpenEthereum"},{"location":"using-ethereum/ethereum-clients/openethereum/#summary","text":"OpenEthereum is an implementation of the Ethereum protocol written in Rust, a systems programming language. It is developed and actively maintained by OpenEthereum DAO.","title":"Summary"},{"location":"using-ethereum/ethereum-clients/openethereum/#requirements","text":"Full node: Multi-core CPU 4GB RAM SSD drive and at least 100GB free space A decent DSL connection is required Computers using HDD are advised to run a Light Node. Light node: Single-core CPU 512MB RAM 128MB free space on HDD","title":"Requirements"},{"location":"using-ethereum/ethereum-clients/openethereum/#setup","text":"Download OpenEthereum from the official Github releases page If on Linux, make the OpenEthereum binary executable with chmod +x ./OpenEthereum For running a compiled binary downloaded from the official Github releases page, no system dependencies are required.","title":"Setup"},{"location":"using-ethereum/ethereum-clients/openethereum/#running","text":"By default, the OpenEthereum client syncs the Ethereum Blockchain completely from a snapshot downloaded from peers and includes features such as auto-updating. To disable downloading a snapshot from peers, use --no-warp ; this saves a few GB of storage but takes longer to sync. If you wish to run a light node, simply specify the command line option --light to the program. Syncing can be faster by disregarding ancient blocks with --no-ancient-blocks ; costing only 20GB. The default sync with warp enabled occupies ~82GB of storage when completed (as of 15/10/2018). For a complete pruning archive, with complete state saved, run OpenEthereum with --pruning archive (over 1TB disk space will be used).","title":"Running"},{"location":"using-ethereum/ethereum-clients/openethereum/#using","text":"Many commands are available with the OpenEthereum client. OpenEthereum account new : asks for a password and yields an address OpenEthereum account list : lists local addresses OpenEthereum snapshot --at BLOCKNUMBER FILEPATH : save snapshot at BLOCKNUMBER to FILEPATH OpenEthereum restore FILEPATH : restore Blockchain from snapshot located at FILEPATH","title":"Using"},{"location":"using-ethereum/ethereum-clients/openethereum/#resources","text":"Github","title":"Resources"},{"location":"using-ethereum/ethereum-clients/py-evm/","text":"Py-EVM (Trinity) Summary Py-EVM is a new implementation of the Ethereum Virtual Machine (EVM) written in Python. Trinity is the client software that connects to the Ethereum network and runs on top of Py-EVM. It is currently in active development but is quickly progressing through the test suite provided by ethereum/tests. Trinity and Py-EVM aim to replace existing Python Ethereum implementations to eventually become the defacto standard for the Python ecosystem. Resources Website Github Docs","title":"Py-EVM (Trinity)"},{"location":"using-ethereum/ethereum-clients/py-evm/#py-evm-trinity","text":"","title":"Py-EVM (Trinity)"},{"location":"using-ethereum/ethereum-clients/py-evm/#summary","text":"Py-EVM is a new implementation of the Ethereum Virtual Machine (EVM) written in Python. Trinity is the client software that connects to the Ethereum network and runs on top of Py-EVM. It is currently in active development but is quickly progressing through the test suite provided by ethereum/tests. Trinity and Py-EVM aim to replace existing Python Ethereum implementations to eventually become the defacto standard for the Python ecosystem.","title":"Summary"},{"location":"using-ethereum/ethereum-clients/py-evm/#resources","text":"Website Github Docs","title":"Resources"},{"location":"using-ethereum/wallets/desktop/","text":"Desktop Summary Desktop wallets are downloadable apps capable of operating on Windows, MacOS, or Linux that allow users to interact with their funds. Wallets MyCrypto - Open-source, client-side toolfor generating Ethereum wallets, handling ERC-20 tokens, and interacting with the blockchain easily. Gnosis Safe Desktop - Desktop app for accessing Gnosis Safe Multisig. Atomic Wallet - Desktop and mobile wallet that allows you to buy, manage and exchange Bitcoin, Ethereum, XRP and over 300 coins and tokens in one secure interface. Eidoo - Multicurrency and Multiplatform (Windows, Mac, Linux, Andorid, iOs) wallet with a DEX and a DeFI gateway. Exodus - Closed-source wallet that allows for multi-currency interaction/transacting (requires you to be online to generate transactions). Tokenary - a macOS Ethereum and ERC-20 tokens wallet and Safari extension that lets you store your assets and interact with DApps. Resources Ethereum Developer Tools List","title":"Desktop"},{"location":"using-ethereum/wallets/desktop/#desktop","text":"","title":"Desktop"},{"location":"using-ethereum/wallets/desktop/#summary","text":"Desktop wallets are downloadable apps capable of operating on Windows, MacOS, or Linux that allow users to interact with their funds.","title":"Summary"},{"location":"using-ethereum/wallets/desktop/#wallets","text":"MyCrypto - Open-source, client-side toolfor generating Ethereum wallets, handling ERC-20 tokens, and interacting with the blockchain easily. Gnosis Safe Desktop - Desktop app for accessing Gnosis Safe Multisig. Atomic Wallet - Desktop and mobile wallet that allows you to buy, manage and exchange Bitcoin, Ethereum, XRP and over 300 coins and tokens in one secure interface. Eidoo - Multicurrency and Multiplatform (Windows, Mac, Linux, Andorid, iOs) wallet with a DEX and a DeFI gateway. Exodus - Closed-source wallet that allows for multi-currency interaction/transacting (requires you to be online to generate transactions). Tokenary - a macOS Ethereum and ERC-20 tokens wallet and Safari extension that lets you store your assets and interact with DApps.","title":"Wallets"},{"location":"using-ethereum/wallets/desktop/#resources","text":"Ethereum Developer Tools List","title":"Resources"},{"location":"using-ethereum/wallets/hardware/","text":"Hardware Summary Hardware wallets are the most-secure method for accessing your funds while online, as they do not expose your private key to the internet when signing transactions. Wallets Ledger - Support for multiple cryptocurrencies and tokens Lattice1 - Use your Lattice1 as a traditional hardware wallet, set up permissions for spending on the go, or allow recurring payments for subscription services. Trezor - The original hardware wallet KeepKey - The simple hardware wallet BitBox - BitBox02 is Swiss engineered minimalist hardware wallet Resources Consensys's ethereum-developer-tools-list","title":"Hardware"},{"location":"using-ethereum/wallets/hardware/#hardware","text":"","title":"Hardware"},{"location":"using-ethereum/wallets/hardware/#summary","text":"Hardware wallets are the most-secure method for accessing your funds while online, as they do not expose your private key to the internet when signing transactions.","title":"Summary"},{"location":"using-ethereum/wallets/hardware/#wallets","text":"Ledger - Support for multiple cryptocurrencies and tokens Lattice1 - Use your Lattice1 as a traditional hardware wallet, set up permissions for spending on the go, or allow recurring payments for subscription services. Trezor - The original hardware wallet KeepKey - The simple hardware wallet BitBox - BitBox02 is Swiss engineered minimalist hardware wallet","title":"Wallets"},{"location":"using-ethereum/wallets/hardware/#resources","text":"Consensys's ethereum-developer-tools-list","title":"Resources"},{"location":"using-ethereum/wallets/intro-to-ethereum-wallets/","text":"Intro to Ethereum Wallets Wallets allow Ethereum users to store Ether and to interact with smart contracts on the Ethereum network. There are many different ways to accomplish this. Below is a list of each option and a high level overview of what each option is best for. Smart Contract Wallets Smart Contract Wallets are wallets with unique abilities due to the power of smart contract functionality. They enable additional security and recovery features for users. Hardware Hardware wallets are the most-secure method for accessing your funds while online, as they do not expose your private key to the internet when signing transactions. Mobile Phone and other mobile device-based wallets are mobile alternatives to desktop and web wallets. Desktop Wallets Desktop wallets are downloadable apps capable of operating on Windows, MacOS, or Linux that allow users to interact with their funds. Web Wallets Web wallets are wallets hosted on a website, they may be custodial or act as an interface for users to generate and interact with their accounts. Resources Best Non-Custodial Wallets","title":"Intro to Ethereum Wallets"},{"location":"using-ethereum/wallets/intro-to-ethereum-wallets/#intro-to-ethereum-wallets","text":"Wallets allow Ethereum users to store Ether and to interact with smart contracts on the Ethereum network. There are many different ways to accomplish this. Below is a list of each option and a high level overview of what each option is best for.","title":"Intro to Ethereum Wallets"},{"location":"using-ethereum/wallets/intro-to-ethereum-wallets/#smart-contract-wallets","text":"Smart Contract Wallets are wallets with unique abilities due to the power of smart contract functionality. They enable additional security and recovery features for users.","title":"Smart Contract Wallets"},{"location":"using-ethereum/wallets/intro-to-ethereum-wallets/#hardware","text":"Hardware wallets are the most-secure method for accessing your funds while online, as they do not expose your private key to the internet when signing transactions.","title":"Hardware"},{"location":"using-ethereum/wallets/intro-to-ethereum-wallets/#mobile","text":"Phone and other mobile device-based wallets are mobile alternatives to desktop and web wallets.","title":"Mobile"},{"location":"using-ethereum/wallets/intro-to-ethereum-wallets/#desktop-wallets","text":"Desktop wallets are downloadable apps capable of operating on Windows, MacOS, or Linux that allow users to interact with their funds.","title":"Desktop Wallets"},{"location":"using-ethereum/wallets/intro-to-ethereum-wallets/#web-wallets","text":"Web wallets are wallets hosted on a website, they may be custodial or act as an interface for users to generate and interact with their accounts.","title":"Web Wallets"},{"location":"using-ethereum/wallets/intro-to-ethereum-wallets/#resources","text":"Best Non-Custodial Wallets","title":"Resources"},{"location":"using-ethereum/wallets/mobile/","text":"Mobile Summary Phone and other mobile device-based wallets are mobile alternatives to desktop and web wallets. Wallets AlphaWallet - No nonsense ethereum wallet with native dapp support Ambo - A Mobile Ethereum wallet targeted for the mainstream audience. Argent - No transaction fee wallet Atomic Wallet - a new multiple currency Android and iOS wallet that allows you to manage Bitcoin, Ethereum, XRP and over 300 coins and tokens easily. Coinomi - Multicurrency wallet Coinbase Wallet Eidoo - Multicurrency and Multiplatform wallet with a DEX and a DeFI gateway Gnosis Safe Mobile - A companion app for Gnosis Safe Multisig imToken - Feature-rich digital asset mobile wallet enabling multi-chain asset management, DApp browsing and secure, private exchange of value. MetaMask Mobile - A crypto wallet & gateway to blockchain apps. MEW wallet - A mobile wallet built by the MyEtherWallet team. Rainbow - A better home for your Ethereum assets Status - A free open-source, mobile OS for Ethereum Trust - Mobile wallet for ERC tokens WallETH - Native Android Ethereum Wallet.","title":"Mobile"},{"location":"using-ethereum/wallets/mobile/#mobile","text":"","title":"Mobile"},{"location":"using-ethereum/wallets/mobile/#summary","text":"Phone and other mobile device-based wallets are mobile alternatives to desktop and web wallets.","title":"Summary"},{"location":"using-ethereum/wallets/mobile/#wallets","text":"AlphaWallet - No nonsense ethereum wallet with native dapp support Ambo - A Mobile Ethereum wallet targeted for the mainstream audience. Argent - No transaction fee wallet Atomic Wallet - a new multiple currency Android and iOS wallet that allows you to manage Bitcoin, Ethereum, XRP and over 300 coins and tokens easily. Coinomi - Multicurrency wallet Coinbase Wallet Eidoo - Multicurrency and Multiplatform wallet with a DEX and a DeFI gateway Gnosis Safe Mobile - A companion app for Gnosis Safe Multisig imToken - Feature-rich digital asset mobile wallet enabling multi-chain asset management, DApp browsing and secure, private exchange of value. MetaMask Mobile - A crypto wallet & gateway to blockchain apps. MEW wallet - A mobile wallet built by the MyEtherWallet team. Rainbow - A better home for your Ethereum assets Status - A free open-source, mobile OS for Ethereum Trust - Mobile wallet for ERC tokens WallETH - Native Android Ethereum Wallet.","title":"Wallets"},{"location":"using-ethereum/wallets/smart-contract-wallets/","text":"Smart Contract Wallets Summary Smart contract wallets are wallets with unique abilities due to the power of smart contract functionality. They enable additional security and recovery features for users. Unique features Two factor authentication Social recovery through family or friends Rate-limited withdraws like an ATM Personal whitelists and blacklists Fraud alerts and emergency lockdown Mobile Smart Contract Wallets Gnosis Safe - The Gnosis Safe aims to provide all users with a convenient, yet secure way to manage their funds and interact with decentralized applications on Ethereum. Argent - Enjoy the future of the web with the first smart wallet for Ethereum-based cryptocurrencies and apps. Authereum - Authereum is a wallet provider and dapp login solution that uses contract based accounts, meta transactions, Ethereum Name Service and more to provide a seamless onboarding experience that users are familiar with.","title":"Smart Contract Wallets"},{"location":"using-ethereum/wallets/smart-contract-wallets/#smart-contract-wallets","text":"","title":"Smart Contract Wallets"},{"location":"using-ethereum/wallets/smart-contract-wallets/#summary","text":"Smart contract wallets are wallets with unique abilities due to the power of smart contract functionality. They enable additional security and recovery features for users.","title":"Summary"},{"location":"using-ethereum/wallets/smart-contract-wallets/#unique-features","text":"Two factor authentication Social recovery through family or friends Rate-limited withdraws like an ATM Personal whitelists and blacklists Fraud alerts and emergency lockdown","title":"Unique features"},{"location":"using-ethereum/wallets/smart-contract-wallets/#mobile-smart-contract-wallets","text":"Gnosis Safe - The Gnosis Safe aims to provide all users with a convenient, yet secure way to manage their funds and interact with decentralized applications on Ethereum. Argent - Enjoy the future of the web with the first smart wallet for Ethereum-based cryptocurrencies and apps. Authereum - Authereum is a wallet provider and dapp login solution that uses contract based accounts, meta transactions, Ethereum Name Service and more to provide a seamless onboarding experience that users are familiar with.","title":"Mobile Smart Contract Wallets"},{"location":"using-ethereum/wallets/web/","text":"Web Summary Web wallets are wallets hosted on a website, they may be custodial or act as an interface for users to generate and interact with their accounts. Pros and Cons Pros Highly Available and Accessible. Cons Rely on each provider to provide good security and to respect your privacy. Wallets Metamask - Chrome extension Ether wallet with ERC tokens support MyEtherWallet - Open-source tool for interacting with the blockchains easily & securely MyCrypto - Open-source, client-side tool for generating ether wallets, handling ERC-20 tokens, and interacting with the blockchain more easily Torus - OAuth Single-sign ons to Dapps with email (and other) account resolvers Portis - Web-based wallet for easy user on-boarding to your DApp Eth lightwallet - Lightweight JS Wallet for Node and the browser Mnemonic generator - generate word mnemonic and associated public/private key pairs. Select \"Ethereum\" as coin to generate Ethereum addresses. Useful for truffle-hd-wallet. Zapper - Manage your DeFi assets & liabilities in one simple interface. Ability to combine different DeFi building blocks to create your own instruments, strategies or even entirely new use-cases. Zerion - Web-based wallet interface with native DeFi integrations for trading, borrowing and investing. Features historical portfolio, Metamask, WalletConnect and Uniswap integrations. Tokenary - macOS Safari extension that enables interaction with DApps. Resources Consensys's ethereum-developer-tools-list","title":"Web"},{"location":"using-ethereum/wallets/web/#web","text":"","title":"Web"},{"location":"using-ethereum/wallets/web/#summary","text":"Web wallets are wallets hosted on a website, they may be custodial or act as an interface for users to generate and interact with their accounts.","title":"Summary"},{"location":"using-ethereum/wallets/web/#pros-and-cons","text":"","title":"Pros and Cons"},{"location":"using-ethereum/wallets/web/#pros","text":"Highly Available and Accessible.","title":"Pros"},{"location":"using-ethereum/wallets/web/#cons","text":"Rely on each provider to provide good security and to respect your privacy.","title":"Cons"},{"location":"using-ethereum/wallets/web/#wallets","text":"Metamask - Chrome extension Ether wallet with ERC tokens support MyEtherWallet - Open-source tool for interacting with the blockchains easily & securely MyCrypto - Open-source, client-side tool for generating ether wallets, handling ERC-20 tokens, and interacting with the blockchain more easily Torus - OAuth Single-sign ons to Dapps with email (and other) account resolvers Portis - Web-based wallet for easy user on-boarding to your DApp Eth lightwallet - Lightweight JS Wallet for Node and the browser Mnemonic generator - generate word mnemonic and associated public/private key pairs. Select \"Ethereum\" as coin to generate Ethereum addresses. Useful for truffle-hd-wallet. Zapper - Manage your DeFi assets & liabilities in one simple interface. Ability to combine different DeFi building blocks to create your own instruments, strategies or even entirely new use-cases. Zerion - Web-based wallet interface with native DeFi integrations for trading, borrowing and investing. Features historical portfolio, Metamask, WalletConnect and Uniswap integrations. Tokenary - macOS Safari extension that enables interaction with DApps.","title":"Wallets"},{"location":"using-ethereum/wallets/web/#resources","text":"Consensys's ethereum-developer-tools-list","title":"Resources"}]}